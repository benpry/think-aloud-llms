,choices,response,rt_s,transcript,lm_code_translation
1,"[1,2,3,8]",8,180," Okay, let's see. Hmm. Hmm. So, 8 times 3 is 16. No. 3 times 2 is 6. No. 3. I'm going to do 3 times 8, which would equal 24. But, how can I do that? Hmm. 4 times 8 is 32. No. Hmm. Hmm. 8 times 3. Times 1.4. Hmm. 3 minus 1. No. 4 times 8 is 32. What the hell? Um. Hmm. 4 times 8 equals 24. Divided by 1. Ah, I've got to use the numbers again. Hmm. Divided by 1 is 24. Hmm. And, 6 times 9 is... 5 times 7 is 40. Hmm. 4 times 7 is 32, right? And, 6 times 5 is 29. Divided by 5. Study all blue. I don't know about the 2. I don't know the answer. 1 x 3 3 x 8 What do I do about this 2? Hmm?","```python
start_state = (1, 2, 3, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 16"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=16"",
    resulting_state=(1, 2, 16),
    comment='""8 times 3 is 16"" - calculation error',
    result_calc_error=True,
)

# ""3 times 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(1, 6, 8),
    comment='""3 times 2 is 6""',
)

# ""I'm going to do 3 times 8, which would equal 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(1, 2, 24),
    comment='""I\'m going to do 3 times 8, which would equal 24""',
)

# ""4 times 8 is 32"" - participant likely combined numbers to get 4
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+3)*8=32"",
    resulting_state=(2, 32),
    comment='""4 times 8 is 32"" - participant likely combined numbers to get 4',
)

# ""8 times 3. Times 1.4"" - not clear what operation is being attempted

# ""3 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-1=2"",
    resulting_state=(2, 2, 8),
    comment='""3 minus 1""',
)

# ""4 times 8 is 32"" - repeating earlier calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+3)*8=32"",
    resulting_state=(2, 32),
    comment='""4 times 8 is 32"" - repeating earlier calculation',
)

# ""4 times 8 equals 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+3)*8=24"",
    resulting_state=(2, 24),
    comment='""4 times 8 equals 24"" - calculation error',
    result_calc_error=True,
)

# The participant then seems to get confused and starts using numbers that aren't in the start state
# ""6 times 9"", ""5 times 7 is 40"", ""4 times 7 is 32"", ""6 times 5 is 29""

# ""1 x 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*3=3"",
    resulting_state=(2, 3, 8),
    comment='""1 x 3""',
)

# ""3 x 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(2, 24),
    comment='""3 x 8""',
)

# The participant ends wondering what to do with the 2

```"
15,"[5,6,8,13]",,180," Okay, so I messed up on the other one. I actually got the answer in my head and was working it out, but ran out of time. So, let's see here. I need to get to 4. If I want to do 8 times 3, I would have to get those numbers 13, 5, and 6 somehow equal 3. And I don't think I can do that, so let's explore other options. 13 minus 5 is 8, so 8 plus 8 is 16, and then plus 6 would be 22, and I'd be missing 2. So, 13 minus 6 is 7. No, that wouldn't work out. It needs to be divisible by... 4 and 8. So, um, let's see. 8 times 6 is 48, and that would leave me with 13 and 15, which I can't really do much with. So, um... What's 13 times 5? Let me see. 65. And 8 times 6 is 48. That would not work. 5 plus 8 is 13. 13 plus 13 is 26. Gosh, I feel like every time there's a 5, it throws things off. Um... Uh... 24 minus 13 is 11. That's 11. That would not work. 5 plus 6 is 11. Plus 8 is 19. 20... 19 plus 13 is 32. It's too big. So... How about 13 minus 6 plus 5 is 12, plus 8 is 20. I feel like this is...","```python
start_state = (5, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I want to do 8 times 3"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""If I want to do 8 times 3""',
)

# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(6, 8, 8),
    comment='""13 minus 5 is 8""',
)

# ""8 plus 8 is 16, and then plus 6 would be 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+6=22"",
    resulting_state=(22,),
    comment='""8 plus 8 is 16, and then plus 6 would be 22""',
)

# ""13 minus 6 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(5, 7, 8),
    comment='""13 minus 6 is 7""',
)

# ""8 times 6 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 13, 48),
    comment='""8 times 6 is 48""',
)

# ""13 times 5? Let me see. 65""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*5=65"",
    resulting_state=(6, 8, 65),
    comment='""13 times 5? Let me see. 65""',
)

# ""5 plus 8 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(6, 13, 13),
    comment='""5 plus 8 is 13""',
)

# ""13 plus 13 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(6, 26),
    comment='""13 plus 13 is 26""',
)

# ""5 plus 6 is 11. Plus 8 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6+8=19"",
    resulting_state=(13, 19),
    comment='""5 plus 6 is 11. Plus 8 is 19""',
)

# ""19 plus 13 is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+13=32"",
    resulting_state=(32,),
    comment='""19 plus 13 is 32""',
)

# ""13 minus 6 plus 5 is 12, plus 8 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6+5+8=20"",
    resulting_state=(20,),
    comment='""13 minus 6 plus 5 is 12, plus 8 is 20""',
)
```"
26,"[2,2,7,7]",((7+7)-2)x2,90," 7 plus 7 is 14. 2 divided by 2 is 1. That's not going to work. Wait... but if I can get 12. So that's 7... plus 7 is 14... minus 2 is 12... times 2 is 24. okay... 7 plus 7... wait, I want to make sure I do that... 7 plus 7... close... minus 2. times 2 or that addended plus okay so that's not right oh I see what I did wrong open open 7 plus 7 close minus 2 close times 2","```python
start_state = (2, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(2, 2, 14),
    comment='""7 plus 7 is 14""',
)

# ""2 divided by 2 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2/2=1"",
    resulting_state=(1, 7, 7),
    comment='""2 divided by 2 is 1""',
)

# ""That's not going to work"" suggests backtracking

# ""but if I can get 12"" suggests setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""but if I can get 12""',
)

# ""7 plus 7 is 14 minus 2 is 12 times 2 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""((7+7)-2)*2=24"",
    resulting_state=(24,),
    comment='""7 plus 7 is 14 minus 2 is 12 times 2 is 24""',
)

# The rest of the transcript appears to be the participant carefully writing out the expression with proper parentheses
```"
27,"[1,1,4,6]",6x4x1x1,38," So now I've got to use a 1, a 1, a 4, and a 6. So let's see here. 6 times 4 is 12. That's 24. That's not. Times 1 times 1? Let's try that. 6 times 4 times 1? I did. Times 1 times 1.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 12"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=12"",
    resulting_state=(1, 1, 12),
    comment='""6 times 4 is 12"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""That's 24"" - participant corrects their error and realizes 6*4=24
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 1, 24),
    comment='""That\'s 24"" - participant corrects their error',
)

# ""Times 1 times 1"" - participant multiplies by both 1s to verify their answer
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1*1=24"",
    resulting_state=(24,),
    comment='""Times 1 times 1"" - participant multiplies by both 1s to verify their answer',
)
```"
28,"[1,4,7,13]",((7+4)x1)+13,103," So the next one is 1, 4, 7, and 13. Let's see here. 1 times 4 is 4. 4 times 7 is not going to work. 7 plus 4 is 11. Oh, there you go. 7 plus 4 plus 1 plus 13. That's not right? Oh, it's supposed to be minus 1. 7 plus 4 is 12 minus 1 makes 11 plus 13. That's what I meant. It's still not right? 7 plus 4 is 13. Oh, that's 12. Shit. That didn't even work. Let's see here. 7 plus 4... Wait. Yeah. 7 plus 4 makes 11. Wait a minute. Let's try this. Open, open. 7 plus 4 makes 11. Times 1 makes 13. Or makes 11. Plus 13.","```python
start_state = (1, 4, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 times 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*4=4"",
    resulting_state=(7, 13, 4),
    comment='""1 times 4 is 4""',
)

# ""4 times 7 is not going to work"" - participant considers but rejects this operation

# ""7 plus 4 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(1, 11, 13),
    comment='""7 plus 4 is 11""',
)

# ""7 plus 4 plus 1 plus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1+13=25"",
    resulting_state=(25,),
    comment='""7 plus 4 plus 1 plus 13""',
)

# ""7 plus 4 is 12 minus 1 makes 11 plus 13"" - participant makes calculation error saying 7+4=12
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+4-1)+13=24"",
    resulting_state=(24,),
    comment='""7 plus 4 is 12 minus 1 makes 11 plus 13""',
    result_calc_error=True,
)

# ""7 plus 4 makes 11. Times 1 makes 13. Or makes 11. Plus 13."" 
# The participant finally arrives at ((7+4)*1)+13
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((7+4)*1)+13=24"",
    resulting_state=(24,),
    comment='""7 plus 4 makes 11. Times 1 makes 13. Or makes 11. Plus 13.""',
)
```"
30,"[4,7,8,11]",(11-7)+(8+4),180," Okay, 4 plus 7 is 11, 22, so it can't be everything added together. Hmm, 11 minus 8 is 3. 3 plus 4 is 7, plus 24, oh lord. Hmm, 7 plus 4 is 11, 8, 19, I can't use every one. 7 plus 8 is 15. 15. 44. 4 times 8 is 32. Minus 11. Plus 7, nope. 8. Times, let's see, 4 times 7 is 28. 28 minus 11, nope. 8 minus 4 is 4. 4 plus 7, nope. Nope. 8 minus 11, we already did that. 3. 11 minus 7 is 4. 11 minus 7 is 4. 4 times 4 is 6. 4 times 4 is 6. 4 times 4 is 6. That's it. So we've got 11 minus 7. So we've got 11 minus 7. So we've got 11 minus 7. That is 4. That is 4. That is 4. Wait, what did I say? Wait, what did I say? Plus... Plus... 8... 8... plus 4... 12... No, that's not... what did I say? Dang it. No, that's not... what did I say? Dang it.","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 7 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(8, 11, 11),
    comment='""4 plus 7 is 11""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 7),
    comment='""11 minus 8 is 3""',
)

# ""3 plus 4 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4=7"",
    resulting_state=(7, 7),
    comment='""3 plus 4 is 7""',
)

# ""7 plus 4 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(8, 11, 11),
    comment='""7 plus 4 is 11""',
)

# ""7 plus 8 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(4, 11, 15),
    comment='""7 plus 8 is 15""',
)

# ""4 times 8 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(7, 11, 32),
    comment='""4 times 8 is 32""',
)

# ""4 times 7 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(8, 11, 28),
    comment='""4 times 7 is 28""',
)

# ""8 minus 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 11),
    comment='""8 minus 4 is 4""',
)

# ""11 minus 7 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 4, 8),
    comment='""11 minus 7 is 4""',
)

# ""4 times 4 is 6"" appears to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=6"",
    resulting_state=(6, 8),
    comment='""4 times 4 is 6"" appears to be a calculation error',
    result_calc_error=True,
)

# ""8 plus 4... 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(4, 12),
    comment='""8 plus 4... 12""',
)

```"
35,"[1,3,3,7]",(7x1)x3+3,87," Okay, 1, 3, 3, 7, 3, 3 times 3 is 9, 9, 8, 7, 7, 4, 7 minus 3 is 4, 4 times 3 is 12, that's not it. 3 times 3 is 9, nope. 3 times 7 is 20, oh, dang it, I should have gotten that one. 7 times 3 is 21 plus, oh, let's do, wait, delete, because I got to do times 1. Okay, y'all are going to get me on a technicality here, so I'm going to do 7 times 1 times 3 plus 3. Drawn by the Mac.","```python
start_state = (1, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 7, 9),
    comment='""3 times 3 is 9""',
)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(1, 3, 4),
    comment='""7 minus 3 is 4""',
)

# ""4 times 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(1, 12),
    comment='""4 times 3 is 12""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 7, 9),
    comment='""3 times 3 is 9""',
)

# ""3 times 7 is 20"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=20"",
    resulting_state=(1, 3, 20),
    comment='""3 times 7 is 20"" - calculation error',
    result_calc_error=True,
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 3, 21),
    comment='""7 times 3 is 21""',
)

# Finally, the participant finds the solution: ""7 times 1 times 3 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*1*3+3=24"",
    resulting_state=(24,),
    comment='""7 times 1 times 3 plus 3""',
)
```"
40,"[2,3,5,13]",(2x3)+5+13,169," All right, target number is 24. So 13, 14, 16, 17, 18, 19, 20, 21, 22, 23. So close. 13, 14, 16, 17, 18, 19, 20, 21, 22, 23. So close. How do you get to 24? 13 times 2 is 24. 13 times 2 is 24. So, uh... Hmm. Okay. I don't know. Uh... I'm not sure about this. So, let's see. 5 times 2 is 10. 23, that would be... Okay, well, let's see. 13... times 2... Uh... 5 times 3 is 15. 15... 28... Hmm... 2 times 3... 2 times 3... 2 times 3 is 6. 13, 14, 16, 17, 18, 19, 20, 23, 24. Let's see. Uh... Okay, so let's do parentheses 2 plus 3. Close parentheses, that's going to be 6. All right. 2 plus 3 is 6. Okay. Plus 5 plus 13. Incorrect answer or not, all numbers used. Okay. 2 plus 3... Let's go back. 2 plus 3 plus 5. Close parentheses. 5, 6, 7, 8, 9, 10. Oh, wait. What happened? Oh, whoops. Delete. Okay. So, let me do this over. Okay. So, parentheses 2 times 3. Close parentheses. That's going to be 6. So, then plus 5 plus 13.","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 2 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=24"",
    resulting_state=(3, 5, 24),
    comment='""13 times 2 is 24""',
    result_calc_error=True,
)

# ""5 times 2 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(3, 10, 13),
    comment='""5 times 2 is 10""',
)

# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(2, 13, 15),
    comment='""5 times 3 is 15""',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(5, 6, 13),
    comment='""2 times 3 is 6""',
)

# ""parentheses 2 plus 3. Close parentheses, that's going to be 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3=5"",
    resulting_state=(5, 5, 13),
    comment='""parentheses 2 plus 3. Close parentheses""',
)

# ""Plus 5 plus 13"" from the previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+13=23"",
    resulting_state=(23,),
    comment='""Plus 5 plus 13""',
)

# ""2 plus 3 plus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3+5=10"",
    resulting_state=(10, 13),
    comment='""2 plus 3 plus 5""',
)

# Finally ""parentheses 2 times 3. Close parentheses. That's going to be 6. So, then plus 5 plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(5, 6, 13),
    comment='""parentheses 2 times 3. Close parentheses. That\'s going to be 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5+13=24"",
    resulting_state=(24,),
    comment='""So, then plus 5 plus 13""',
)
```"
41,"[1,4,5,6]",(6x5),180," Okay, target number 24 as usual. 11, 12, 13, 14, 15, 16. So 6, let's see, 4 and 5 is 9. 4 times 5 is 20. 26 minus 1 is 25. 4 times 6 is 24. Let's see, 5 minus 1. Let's see, 5 minus 1 is 4. 6, 79, 10. Oh wait, okay, so let's do 6 times 4. That's going to be 24. No, 6 times 4 is going to be, yeah, 24. No, I don't know. I don't know the 6 times, see 5 times 4 is 20. That's going to be 25. 6 times 4 is 24. So 5 minus 1, 5 minus 1 is 4. 5 minus 4, 5 minus 1 is 4. 6 minus 5 is 4. 1. I don't know. I don't know. 6, 15, and 25, 14. That's 25. I can't get away from 25. So 6 times 4 is, let's see, 6 times 4 is 25. 24. 5 minus 4. I don't know. 6 times 4. I don't know how to do this. 6 and 5 is 30 minus, oh wait, okay, I got it. Let's see, parentheses, 6 times 5, close parentheses.","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 and 5 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(1, 6, 9),
    comment='""4 and 5 is 9""',
)

# ""4 times 5 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(1, 6, 20),
    comment='""4 times 5 is 20""',
)

# ""26 minus 1 is 25"" - not clear where 26 came from, might be a transcription error

# ""4 times 6 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(1, 5, 24),
    comment='""4 times 6 is 24""',
)

# ""5 minus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 4, 6),
    comment='""5 minus 1 is 4""',
)

# ""6 times 4"" participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 5, 24),
    comment='""6 times 4""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 6, 20),
    comment='""5 times 4 is 20""',
)

# Several repetitions of operations already tried:
# ""5 minus 1 is 4""
# ""6 minus 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 1, 4),
    comment='""6 minus 5 is 1""',
)

# ""6 times 4 is 25"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=25"",
    resulting_state=(1, 5, 25),
    comment='""6 times 4 is 25"" - calculation error',
    result_calc_error=True,
)

# ""6 and 5 is 30"" - participant likely means 6*5=30
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 4, 30),
    comment='""6 and 5 is 30""',
)

# Finally, the participant submits ""6 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 4, 30),
    comment='""parentheses, 6 times 5, close parentheses""',
)
```"
48,"[1,11,13,13]",13x11-13,180, 13 and 13 and 1 into 11 36 13 plus 13 let's see 13 I don't know 13 let's see 13 times 11 minus 13 plus 1 because I don't know plus 1 I know it's not correct because I don't know I don't know how to do this so 13 plus 11 would be 21 men I have no idea what to do with this other huge 13 so this does not make sense to me 11 does not go into 13 evenly so that's nothing so 13 the next time is 26 11 13 13 times 1 I don't know I don't know I don't know how to do this so I'm gonna do 13 times 13 divided by 11 plus 1 that would be amazing if it were correct because I don't know how to do it to do this 13 by 13 divided by 11 minus 1 13 by 13 delete delete delete delete 13 by 13 divided by bracket 11 minus 1 close bracket yeah incorrect answer I don't know how to do this so uh I do not have an answer for this one and I'm gonna wait for time to run out because I don't know how to do it so 13 times yeah I don't I don't it doesn't make uh it doesn't make sense to me so um,"```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(1, 11, 26),
    comment='""13 plus 13""',
)

# ""13 times 11 minus 13 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11-13+1=131"",
    resulting_state=(131,),
    comment='""13 times 11 minus 13 plus 1""',
)

# ""13 plus 11 would be 21"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=21"",
    resulting_state=(1, 13, 21),
    comment='""13 plus 11 would be 21""',
    result_calc_error=True,
)

# ""13 times 13 divided by 11 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13/11+1=16"",
    resulting_state=(16.36,),
    comment='""13 times 13 divided by 11 plus 1""',
)

# ""13 times 13 divided by bracket 11 minus 1 close bracket""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13/(11-1)=17"",
    resulting_state=(16.9,),
    comment='""13 times 13 divided by bracket 11 minus 1 close bracket""',
)
```"
49,"[7,8,8,9]",(8x8),180," Target is 24. Do any of these go into 24? I think 8 does. 16 plus, um, 4 plus 4, yeah. So 8 times 3 is 24, so I gotta get 3 somehow. I'm just gonna play with this a little. 9 plus 8 plus 7 is what? 17 plus, wait, no, no, no. 9 plus 8 is 6. There. 9 minus 8 is 1 plus 7 is 9. That's not gonna work. None of these numbers make 3. I don't need a 3 to do 8 times 3. Um, this is hard. What else goes in 24? Um, 6 times 4, right? But I can't get a 6 out of this either, can I? 7, okay, 8 plus 8 is 16. 16 plus 9 is 24. So that's 7 is the problem. I think. Yeah, 16 plus, no. Ah, math is hard. 16 plus 4. 4 plus 4, 16 plus 8 is 24. So, the, okay. 9 plus 7 creates 16. And we gotta times that by 2. But how do I get a 2 from those two 8s? I don't think I can. My bad. I can divide, but I don't think dividing helps for a mariachi. 9 plus 7 is 16. 16 plus 8 is 24. So how do I use that last 8? Maybe I gotta, like, multiply it and get some huge numbers and divide it back down. Like, say I do 8 squared. That's, um, uh, that's a big number. Sometimes 56 plus 8 is 50, 62? 6.","```python
start_state = (7, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24"" - participant sets a subgoal of getting 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24, so I gotta get 3 somehow""',
)

# ""9 plus 8 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8+7=24"",
    resulting_state=(8, 24),
    comment='""9 plus 8 plus 7""',
)

# ""9 minus 8 is 1 plus 7 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-8)+7=8"",
    resulting_state=(8, 8),
    comment='""9 minus 8 is 1 plus 7 is 9""',
)

# ""6 times 4"" - participant sets another subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4, right?""',
)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 9, 16),
    comment='""8 plus 8 is 16""',
)

# ""16 plus 9 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=25"",
    resulting_state=(7, 25),
    comment='""16 plus 9 is 24"" - participant makes calculation error',
    result_calc_error=True,
)

# ""9 plus 7 creates 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(8, 8, 16),
    comment='""9 plus 7 creates 16""',
)

# ""8 squared""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 9, 64),
    comment='""8 squared""',
)

```"
50,"[5,5,7,10]",(7+5)x(10/5),107," Okay, target number is 24. So what goes in the 24? Um, 4 times 6. So how do I get 4 and 6? Um, I don't think I can. Maybe I gotta add. 10 plus 7 is 17. Plus 5, yeah. 5 plus 5 is 10. Plus 7 is also 17. So that doesn't work either. Um, jeez. 10 divided by 5 is 2. 2 times 7 is 14. Which is not a workable number. Um, hmm. 2 times 12. 7 plus 5, parentheses, 7 plus 5. So that's, um, 12. And we gotta divide that by 2, which would be, um, 10 divided by 5. Oh, I think I figured this out. Yes? No. 7 plus 5 is 12. Oh, I see the problem. Times 10 divided by 5. I got it this time.","```python
start_state = (5, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""So what goes in the 24? Um, 4 times 6""',
)

# ""10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(5, 5, 17),
    comment='""10 plus 7 is 17""',
)

# ""5 plus 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(7, 10, 10),
    comment='""5 plus 5 is 10""',
)

# ""Plus 7 is also 17"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(10, 17),
    comment='""Plus 7 is also 17""',
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 7),
    comment='""10 divided by 5 is 2""',
)

# ""2 times 7 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(5, 14),
    comment='""2 times 7 is 14""',
)

# ""7 plus 5"" participant starts over with a new approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(5, 10, 12),
    comment='""7 plus 5""',
)

# ""Times 10 divided by 5"" - participant finds the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*(10/5)=24"",
    resulting_state=(24,),
    comment='""Times 10 divided by 5. I got it this time.""',
)
```"
51,"[3,4,8,12]",(12x3)-4-8,180," Ok, we're on 24 again. Last time the solution was basically 12 x 2. So here's 12. How would I get 2 from these numbers? Eighth of my- My 4x2, that leaves 3 by itself. 2012 plus 8 is 20 plus... okay, I don't think plus is ever going to be the option here because there's like four numbers, so that'd be too straightforward for what this is doing. Um, what goes into 4? We know 2 times 12. We know 4 times 6. Could 4 times 6 be the one I need here? I'll just play around and see what happens. 2, 12, I mean. 12 divided by 3 is 4. Okay. 4 plus 4 is 8. 8 plus 8 is 16. That's not it. What's, um, 8 times 8, a big number, that's 124. Um. 3 plus 4 is 7. I don't know 12 times 12 offhand. Hmm. I'm seeing my thoughts out loud. Um, offhand, I don't know what 12 times 12 is. Uh, 12 times 5 is 60, so it'd be like 100 and something. I don't think that's what I'm looking for here. I was thinking maybe 12 times 12 divided by 8, but I don't think that, well, what happens. I'll try it. It's probably not going to be it, though. Nope. Okay. 20 divided by 4 is 5, and that doesn't work with 3 to make 24 at all. 5 does not go into 24 at all. 12 times 3 is 36. 36 minus 12 is 24. Oh, I got it. Times 3, 36. Minus 4, minus 8.","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Last time the solution was basically 12 x 2"" - participant is reflecting on a previous problem
# ""How would I get 2 from these numbers?""
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""How would I get 2 from these numbers?""',
)

# ""12 plus 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(3, 4, 20),
    comment='""12 plus 8 is 20""',
)

# ""12 divided by 3 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 4, 8),
    comment='""12 divided by 3 is 4""',
)

# ""4 plus 4 is 8. 8 plus 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4+8=16"",
    resulting_state=(16,),
    comment='""4 plus 4 is 8. 8 plus 8 is 16""',
)

# Move back to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""12 times 3 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(4, 8, 36),
    comment='""12 times 3 is 36""',
)

# ""36 minus 4, minus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-4-8=24"",
    resulting_state=(24,),
    comment='""36 minus 4, minus 8""',
)
```"
52,"[1,2,7,7]",(7-2-1),180," 7 time no let's do a 2 plus 1 is 3 just like something different so 3 times 7 is 21 that's not what we need I don't think that gets us where we need to go 2 goes into 24 that's 2 times 12 but how do I get 12 out of 7, 7, and 1 because I get 13 out of it, 7 plus 7 plus minus 1 but that's not the right number does 8 go into 24? 8 plus 8 is 16 okay 8 times 3 is 24 so how do I get a 3 here I don't think I can I mean 1 plus 2 is 3 but that leaves me with two 7s which cannot become 8 I am stumped by this 7 minus 2 minus 1 equals 3, okay that's 4, and 4 times 7","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 plus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 7, 7),
    comment='""2 plus 1 is 3""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 21),
    comment='""3 times 7 is 21""',
)

# ""2 goes into 24 that's 2 times 12"" - participant seems to be working backward from 24
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""2 goes into 24 that\'s 2 times 12""',
)

# ""7 plus 7 plus minus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7-1=13"",
    resulting_state=(2, 13),
    comment='""7 plus 7 plus minus 1""',
)

# ""8 plus 8 is 16"" - participant seems to be working backward from a subgoal
graph.set_subgoal(
    (8, 8),
    state_after_subgoal=(16,),
    comment='""8 plus 8 is 16""',
)

# ""8 times 3 is 24"" - participant seems to be working backward from 24 again
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""1 plus 2 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+2=3"",
    resulting_state=(3, 7, 7),
    comment='""1 plus 2 is 3""',
)

# ""7 minus 2 minus 1 equals 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2-1=4"",
    resulting_state=(4, 7),
    comment='""7 minus 2 minus 1 equals 3"" but participant calculates 4',
)

# ""4 times 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(28,),
    comment='""4 times 7""',
)
```"
53,"[1,5,5,6]",(6x5)-5-1,34," Target is 24 again. Now 6 times 4 is 24, but there's an extra 5 left over if I do that. Oh, hey, I assumed a thing. Just play around and try 6 times 5 is 30. So from 30, I would need to lose 6 to...oh, I think I figured this out. Minus 5, minus 1, submit.","```python
start_state = (1, 5, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24"" - participant seems to be setting a subgoal of getting 4 from the other numbers
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24"" - participant seems to be setting a subgoal',
)

# ""but there's an extra 5 left over if I do that"" - participant realizes this won't work

# ""6 times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 5, 30),
    comment='""6 times 5 is 30""',
)

# ""So from 30, I would need to lose 6 to...oh, I think I figured this out. Minus 5, minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-5-1=24"",
    resulting_state=(24,),
    comment='""Minus 5, minus 1""',
)

```"
54,"[1,1,5,5]",(5+1)x(5-1),18," Target is 24 again. So, uh, 5 plus 1 is 6, right? I'll start with a 6. I know 6 times 4 is 24. Oh, I think I got it. 5 minus 1 makes 4. Yes.","```python
start_state = (1, 1, 5, 5)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 1 is 6"" - participant is trying to make 6
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(1, 5, 6),
    comment='""5 plus 1 is 6""',
)

# ""I know 6 times 4 is 24"" - participant sets a subgoal of getting 4 to multiply with 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""I know 6 times 4 is 24""',
)

# ""5 minus 1 makes 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 6),
    comment='""5 minus 1 makes 4""',
)

# Then the participant multiplies 4 and 6 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment=""Participant multiplies 4 and 6 to reach goal"",
)
```"
55,"[1,3,6,7]",(7-3)x(6x1),57," Target is 24 again, so we know 6 times 4 is 24, but I have that 7 to worry about. 7 does not go into 24 in any way, so that's a problem I want to get rid of. What if I made it into a 6 by 7 minus 1? But 6 times 3 is too low, and 6 times 6 is too high. So that can't be it. I'll try 7 minus 3 this time to make it into a 4. 4 times 6 is 24, so 6 times 1.","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24""',
)

# ""What if I made it into a 6 by 7 minus 1?""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(3, 6, 6),
    comment='""What if I made it into a 6 by 7 minus 1?""',
)

# ""6 times 3 is too low, and 6 times 6 is too high"" - participant evaluates possibilities
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(6, 18),
    comment='""6 times 3 is too low""',
)

new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(3, 36),
    comment='""6 times 6 is too high""',
)

# ""I'll try 7 minus 3 this time to make it into a 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(1, 4, 6),
    comment='""I\'ll try 7 minus 3 this time to make it into a 4""',
)

# ""4 times 6 is 24, so 6 times 1"" - participant multiplies 6*1 first, then multiplies by 4
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1*4=24"",
    resulting_state=(24,),
    comment='""4 times 6 is 24, so 6 times 1""',
)
```"
58,"[7,7,11,12]",(11+(7/7))+12,36," Okay, charcoal is 24. Does 7 go in 24 in any way? No, it does not. And neither does 11. So, uh, oh, I think I figured this out already. 7 divided by 7. Ah, delete, delete, delete. 11 plus 7 divided by 7, which creates 1. That's 12. So then add that to 12, and we've got it.","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Does 7 go in 24 in any way?"" suggests the participant is working backward from 24
graph.set_subgoal(
    (7, 24/7),  # approximate subgoal state
    state_after_subgoal=(24,),
    comment='""Does 7 go in 24 in any way?""'
)

# ""7 divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 11, 12),
    comment='""7 divided by 7""',
)

# ""11 plus 7 divided by 7, which creates 1. That's 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+(7/7)=12"",
    resulting_state=(12, 12),
    comment='""11 plus 7 divided by 7, which creates 1. That\'s 12""',
)

# ""So then add that to 12, and we've got it""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(24,),
    comment='""So then add that to 12, and we\'ve got it""',
)
```"
60,"[5,6,8,8]",(5-8/8)x6,154," 5, 6, 8, 8. 8 divided by 8 is 1. 4 times 6 is 24. Okay, so 8 divided by 8 times that's 1. 5 minus 8 divided by 8 This is probably not going to work, I think. Yeah. Okay. Let's see. How would I do this? because I need yeah how would I do this to ensure that this works like 8 divided by 8 is 1 okay so 5 minus 8 divided by 8 is 4 times 6 I see yeah that's the problem because of the I guess like Oh times 6 okay it's gonna have to be like that 5 minus 8 actually don't need to do this because the other operations you 8 divided by 8 times 6","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 5, 6),
    comment='""8 divided by 8 is 1""',
)

# ""4 times 6 is 24"" suggests they are setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 times 6 is 24""',
)

# ""5 minus 8 divided by 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-8/8=4"",
    resulting_state=(4, 6),
    comment='""5 minus 8 divided by 8 is 4""',
)

# Then they multiply by 6 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment=""Based on their submitted response (5-8/8)*6"",
)
```"
62,"[2,4,5,9]",(5+9x(2)-4,180," The answers here usually are to get 6 and 4 or like what 12 and 2? How do I get 12 and 2 out of this? Because I can get a 1, I can get a 3, I can get another 4. 2 times 4 is 8. I can get an 11. I can get a 13. Yeah. Wait. 14 times 2 is 28 minus 4. So... I I can get a 13. Yeah. Wait. 14 times 2 is 28 minus 4. So... 5 plus 9 times 2, minus 4. I'm always trying to get this stuff to work. 5 plus 9, well, times 2, times 2, what? It's 28, what? 5 plus 9, um, yeah, 23, what? Okay.","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""The answers here usually are to get 6 and 4 or like what 12 and 2?"" 
# Participant seems to be setting subgoals
graph.set_subgoal((6, 4), state_after_subgoal=(24,), comment='""usually are to get 6 and 4""')
graph.set_subgoal((12, 2), state_after_subgoal=(24,), comment='""or like what 12 and 2?""')

# ""2 times 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(5, 8, 9),
    comment='""2 times 4 is 8""',
)

# ""5 plus 9 times 2, minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9*2-4=19"",
    resulting_state=(19,),
    comment='""5 plus 9 times 2, minus 4""',
)

# ""5 plus 9"" participant tries a different combination
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9=14"",
    resulting_state=(2, 4, 14),
    comment='""5 plus 9""',
)

# ""times 2, times 2, what? It's 28"" participant multiplies by 2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*2=28"",
    resulting_state=(4, 28),
    comment='""times 2, times 2, what? It\'s 28""',
)
```"
67,"[5,5,8,10]",8x(5-10/5),174," 24. So I'm going to get two 12s. That's three. Because, yeah, I am, I am, come on. Two? Because two 8 minus 10, 10 minus 8 is 2. And that won't work. 10 plus 8 plus 5 is 23. I have 28. Yeah. What's the issue here? Because I get two that way. I'm left with a 5 and an 8. And 5 times 6 won't work. 8 times 3? Yeah. God. So How'd I do this? Since division works first, 10 divided by 5. Okay, wait, wait, wait, wait. 8? No. 5 minus 10 divided by 5. Okay, wait, wait, wait, wait. 8? No. 5 minus 10 divided by 5. Okay, wait, wait, wait. 8? No. 5 minus 10 divided by 5. Yeah, that's close. Yeah. No, like, okay. 5 minus 10 divided by 5 times 8. What? Okay. 5 minus 10 divided by 5 times 8. What? Okay. 5 minus 10 divided by 5 times 8. What? Okay. 3 times 8 works. Yeah. How'd I do this? Okay. 8 times, yeah. 10, 5 minus 10 divided by 5. Okay.","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So I'm going to get two 12s"" suggests participant is setting a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""So I\'m going to get two 12s""',
)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 5, 5),
    comment='""10 minus 8 is 2""',
)

# ""10 plus 8 plus 5 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8+5=23"",
    resulting_state=(5, 23),
    comment='""10 plus 8 plus 5 is 23""',
)

# ""I have 28"" - not clear how they got this number

# The participant then discovers how to make 3 using the other numbers:
# ""10 divided by 5"" and then ""5 minus 10 divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-(10/5)=3"",
    resulting_state=(3, 8),
    comment='""5 minus 10 divided by 5""',
)

# Finally, they combine this with the previous insight about 8*3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""3 times 8 works""',
)
```"
68,"[1,3,9,10]",,180," Okay. 24. Is this an easy one? This is an easy one. You just add all the numbers. Why are some of these super easy and some of these super difficult? Close. Okay. That was actually close, though. It would be... I would need... It's 23. Okay. 30? Won't work. I can get 6. Very easily. I can get 7. ... And 7 times 8 didn't work. I can get another 1. I can get 6. Which won't work. That 1's the problem. Like... Wait. Um... Yeah... 90 doesn't work. Yeah. 24 times 3 is 72. And I have no way of getting 72 out of this? ... 1? 2 times 3? Mm-mm. ... Um... Let's see... Um... ... ... Yeah. I do bad math. ... Two 9s. ... ... Yeah, it's 27. ... ... ... ... ... The problem here... ... ... ... ... ...is that... ... ... ...wait... ... ...yeah... ... ...I can get 30 or 27. ... ...","```python
start_state = (1, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""You just add all the numbers""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+3+9+10=23"",
    resulting_state=(23,),
    comment='""You just add all the numbers"" - participant adds all numbers and gets 23',
)

# ""30?"" participant seems to be trying operations that get to 30
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(1, 9, 30),
    comment='""30?"" participant seems to be trying operations that get to 30',
)

# ""I can get 6. Very easily""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(1, 6, 9, 10),
    comment='""I can get 6. Very easily""',
)

# ""I can get 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(1, 7, 9),
    comment='""I can get 7""',
)

# ""And 7 times 8 didn't work"" - participant seems to be trying to multiply numbers to get close to 24

# ""90 doesn't work"" - participant likely multiplied 9*10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*10=90"",
    resulting_state=(1, 3, 90),
    comment='""90 doesn\'t work"" - participant likely multiplied 9*10',
)

# ""24 times 3 is 72"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (3, 24),
    state_after_subgoal=(72,),
    comment='""24 times 3 is 72"" - participant seems to be working backwards from 24',
)

# ""Yeah, it's 27"" - participant might be multiplying 9*3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(1, 10, 27),
    comment='""Yeah, it\'s 27"" - participant might be multiplying 9*3',
)

# ""I can get 30 or 27"" summarizes two of the states they found
```"
69,"[2,2,9,11]",(11-9),180," Target number 24. I was way overthinking this. Okay. 2, 11, 9. Okay. 11 minus 9 is obviously 2. 2. No, that doesn't do me any good. Okay. I have an idea. No, that's not. Okay. I was thinking 2 times 9 is 18. And then plus 11 minus 2. So 18 plus 9 is not 24. So what if we did 2 times 11? 2 times 11, which is 22. Let's go find that one. No. Um. 11 times. No, that's not going to cut it either. Dang. Dang it. Okay, what if we did 9 times. No. Alright. 9 times 11 divided by 4. Probably not, but let's see what happens. 9 times 11 divided by 4. 9 times 11 is 99. Divided by 4. Doesn't. So close, but so far. Um. Okay. You know what? I'm about to run out of my 3 minutes. Um. Shit. Um. I'm going to run out of time. I. This is crazy. I'm an idiot, you know. I'm just horribly bad with math. Oh my god. 11 minus 9 is 7. Can we do something with that? Fuck. I don't know. Oh my god. I shouldn't be swearing. I apologize to the researchers. I don't know why I'm swearing. This is very embarrassing. Um. 11 minus 9 is 7. What's 7 times 4? 7 times 4 is 28.","```python
start_state = (2, 2, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 9 is obviously 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 2, 2),
    comment='""11 minus 9 is obviously 2""',
)

# ""2 times 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(2, 11, 18),
    comment='""2 times 9 is 18""',
)

# ""And then plus 11 minus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+11-2=27"",
    resulting_state=(27,),
    comment='""And then plus 11 minus 2""',
)

# ""2 times 11, which is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 9, 22),
    comment='""2 times 11, which is 22""',
)

# ""9 times 11 divided by 4"" (where 4 comes from 2*2)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*11/(2*2)=24.75"",
    resulting_state=(24.75,),
    comment='""9 times 11 divided by 4"" (where 4 comes from 2*2)',
)

# ""11 minus 9 is 7"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=7"",
    resulting_state=(2, 2, 7),
    comment='""11 minus 9 is 7"" - calculation error',
    result_calc_error=True,
)

# ""What's 7 times 4?"" (where 4 comes from 2*2)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*(2*2)=28"",
    resulting_state=(28,),
    comment='""What\'s 7 times 4?"" (where 4 comes from 2*2)',
)
```"
74,"[5,5,8,10]",,180," I think I got it. Okay, but it doesn't matter. We're on to the next. 10 minus 8 times 2. 5 plus 5, that gives us 20. 25 minus, no, that doesn't cut it. 50 minus, nope, not gonna cut it. 80 minus 20, nope. 40 minus 50, no. Okay. This is embarrassing. 10 divided by 5 is 2. And then we'd have to find a way to get to 12. And 5 plus 8. Cool. 5 plus 8. Let's see, it's so embarrassing to draw a gosh darn blank like this. Yeah, it's not 12. It's 13. I'm sorry. I'm sorry, Stanford students. This is a horribly embarrassing performance. Thank God you don't know who I am. Putting a face to the ignorance would be horrible. 3 times 5. 3 times 5 is 15 plus 10. Doesn't work. 5 minus 3 is 15. 30 minus 5 doesn't work either. I can find a lot of ways to get to 12. Oh my God. 10 minus 5 is 5. Which leaves us with 5, 5, and 8. Which, what the heck can we do with that? Nope, doesn't do anything for me. 5, 5, and 2. I don't think that does anything for me either. We just have 8. It doesn't do anything for me. 5 plus 8 is 13 minus 10. Plus 10 would be 3 times 5. Doesn't do anything for me. 4 and 6, can we get to 4? No, that's not going to happen. Okay. Um, we're going to run out of time. 24 minus 10. Okay. Search.","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 5, 5),
    comment='""10 minus 8 times 2""',
)

# ""5 plus 5, that gives us 20"" - seems like a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=20"",
    resulting_state=(8, 10, 20),
    comment='""5 plus 5, that gives us 20""',
    result_calc_error=True,
)

# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 8),
    comment='""10 divided by 5 is 2""',
)

# ""5 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(5, 10, 13),
    comment='""5 plus 8""',
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 8),
    comment='""10 minus 5 is 5""',
)

# ""5 plus 8 is 13 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+8)-10=3"",
    resulting_state=(3, 5),
    comment='""5 plus 8 is 13 minus 10""',
)

```"
75,"[3,5,7,11]",(11-5)x(7-3),115," 7 minus 11 is obviously 4. Oh, easy, easy, easy, easy. Thank God, finally. 11 minus 7 times 3 plus 5. Oh, shit, that's 8. You know what? Oh, wait. Yeah, that's 8. I don't need 8. 8 and 4. I need 6 and 4. I'm going to submit it anyway, even though that's wrong. Yeah, I know. You know, this world, horrible place. Um, 33. If we had 33 and we minused... No, that's not going to work. Um, 55 minus 21. Hold on. That's not it either. Um, 77 minus 15. No. 33. No. You know what? I really thought I had it. Ooh. So, 8 plus... Because 8... Yeah, that's not it. We need to get to something more realistic, like 6. Ooh. We can do something with that. Now we're good. Okay. Not really. Not at all. Uh, but that is 6. And then 7 and 3, what... Oh. 3 plus 4, 7. Times... 7 minus 3. I'm not even thinking about it.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 minus 11 is obviously 4"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7-11=4"",
    resulting_state=(3, 4, 5),
    comment='""7 minus 11 is obviously 4"" - participant made a calculation error',
    result_calc_error=True,
)

# ""11 minus 7 times 3 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-7)*3+5=17"",
    resulting_state=(17,),
    comment='""11 minus 7 times 3 plus 5""',
)

# ""that's 8"" participant seems to be computing 11-3
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(5, 7, 8),
    comment='""that\'s 8"" participant seems to be computing 11-3',
)

# ""I need 6 and 4"" - participant sets a subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""I need 6 and 4""',
)

# Then there are several mentions of numbers (33, 55, 21, 77, 15) that don't seem to correspond to operations with the available numbers

# ""We need to get to something more realistic, like 6"" - participant reaffirms subgoal of getting 6
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""We need to get to something more realistic, like 6""',
)

# ""that is 6"" participant seems to have found 11-5=6
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(3, 6, 7),
    comment='""that is 6""',
)

# ""7 minus 3"" participant finds the other part of their solution
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 5, 11),
    comment='""7 minus 3""',
)

# Based on their submitted answer (11-5)x(7-3), they must have multiplied 6 and 4
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-5)*(7-3)=24"",
    resulting_state=(24,),
    comment=""Based on submitted answer, participant multiplied 6 and 4"",
)
```"
80,"[7,8,8,12]",,180," Okay, so 24, you got 7, 8, 8, 12. Now let's divide. 12 minus 8 is 4. That would be 28. So, 1, 1 times 8. Let's see. So, 1, no, because that would be 1. Hmm. Let's see. Let's see. So, 8, that would be 1. Hmm. So, something's going to be 7 times. 3 is 21. Oh, what am I doing wrong? Okay, let's see. I need to get the numbers. So, 12, but get it to 2 somehow, maybe? 12 times 2. 12 minus 8. Okay. So, 12 times 8 is 4. No. Let's see. So, 12 times 2 is 24. Okay. Okay. 8 divided by 8 is 1, 7. That wouldn't do nothing for me. 12. Okay. Call it already. It'd be 4. 6. Is it 9 times? No. No. No. 18 is, no, that's not right. It's just 6, 4, 12, 2.","```python
start_state = (7, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 7, 8),
    comment='""12 minus 8 is 4""',
)

# ""That would be 28"" - not clear what operation they're doing to get 28

# ""8 divided by 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 7, 12),
    comment='""8 divided by 8 is 1""',
)

# ""7 times 3 is 21"" - participant seems to be setting a subgoal
graph.set_subgoal(
    subgoal_state=(3, 7),
    comment='""7 times. 3 is 21"" - participant seems to be trying to make 3 to multiply by 7'
)

# ""12 times 2 is 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    subgoal_state=(2, 12),
    comment='""12 times 2 is 24"" - participant seems to be trying to make 2 to multiply by 12'
)

# ""8 divided by 8 is 1, 7"" - participant tries division again
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 7, 12),
    comment='""8 divided by 8 is 1, 7""',
)

# ""It'd be 4"" - likely referring back to 12-8=4
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 7, 8),
    comment='""It\'d be 4""',
)

# The rest of the transcript contains fragments that are hard to interpret as specific operations
```"
81,"[1,4,8,11]",8/4x(11+1),123," Okay, 24 from 1, 4, 8, and 11. How about, let's see, 8, that would be 7, so 8 minus 1 is 9. So, what times, isn't it 8 times, 8 times 3 is 24, I can't remember now, 8 times, 8 times 3, yeah, 8 times 3 is 24, but how would I get rid of the 11? So, 8 or 6, so 11 minus 4 is 7. That's still 16, so 11 minus 8 is 3. That would be 10, that's 12. So, oh my goodness, let's see. So, I know 8 times 3 is that, but the 11's there, but then you have to do the 2. Okay, I got it, I think, wait, let's see. So, let's do parentheses, wait, wait, wait. Let's do 8 divided by 4 times 11 plus 1. . .","```python
start_state = (1, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 1 is 9"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=9"",
    resulting_state=(4, 9, 11),
    comment='""8 minus 1 is 9"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""8 times 3 is 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24"" - participant seems to recognize this as a useful intermediate step',
)

# ""11 minus 4 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(1, 7, 8),
    comment='""11 minus 4 is 7""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(1, 3, 4),
    comment='""11 minus 8 is 3""',
)

# ""Let's do 8 divided by 4 times 11 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4*(11+1)=24"",
    resulting_state=(24,),
    comment='""Let\'s do 8 divided by 4 times 11 plus 1""',
)

```"
84,"[3,3,6,11]",,180," Okay, let's see. 3, 3, 6, and 11. So I know 6 will go into it. 11 minus 3 is 8. 14. No. Let's see. 6 minus 3 is 8. 11 minus 3 is 3. No. 6 divided by 2. That would be 6. So 3 times 3 is 9. 11 minus 3 is 8. In it. Yes. 11 minus 3 is 8. he's 16 what am i what am i miss so three divided by three to be one that wouldn't do nothing for me a levy can't go into it so 11 minus three is eight this one's got me so three minus three is zero but then at least another three divided by three is one that'd be i ain't gonna do it either what am i missing oh let's see six plus three is nine nine plus eleven minus nine is two this is coming back to six i'm completely stumped on this one six times three is eighteen eighteen minus eleven is seven seven times three is twenty one so that's not it either six alone i have no clue this one's definitely got me so six plus three is nine nine times three is twenty no six plus minus three is three three times three is nine nine nine plus eleven would only be twenty like what's six three plus three six six plus six twelve twelve plus one no you you","```python
start_state = (3, 3, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(3, 6, 8),
    comment='""11 minus 3 is 8""',
)

# ""6 minus 3 is 8"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=8"",
    resulting_state=(3, 8, 11),
    comment='""6 minus 3 is 8"" - calculation error',
    result_calc_error=True,
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 11),
    comment='""3 times 3 is 9""',
)

# ""three divided by three to be one""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 6, 11),
    comment='""three divided by three to be one""',
)

# ""six plus three is nine""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(3, 9, 11),
    comment='""six plus three is nine""',
)

# ""six times three is eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 11, 18),
    comment='""six times three is eighteen""',
)

# ""eighteen minus eleven is seven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-11=7"",
    resulting_state=(3, 7),
    comment='""eighteen minus eleven is seven""',
)

# ""seven times three is twenty one""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(21,),
    comment='""seven times three is twenty one""',
)

# ""six plus three is nine nine times three is twenty""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+3)*3=20"",
    resulting_state=(11, 20),
    comment='""six plus three is nine nine times three is twenty""',
    result_calc_error=True,
)

# ""three plus three six""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 6, 11),
    comment='""three plus three six""',
)

# ""six plus six twelve""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(11, 12),
    comment='""six plus six twelve""',
)
```"
86,"[9,11,12,13]",,180," 9, 11, 12, 13. 13 minus 11 is 2. What is 12 plus 13? 13. That would be 25. 12 plus 11. Okay, so nothing will divide. 13 minus 11, no. 13 minus 9 is 4. 4. Let's see. 13 minus 9. No, because it has to be 2 somehow. So, 12 times 2, 6 times 4, 8 times 3 is the numbers I'm going for. How can I get any of those numbers available? Okay. 11 plus 3 is 24. That still leaves all of them. 12 minus 9 is 2. That wouldn't come out right. That would be 11 and 11. 11 minus 9 is, wait, 13 minus 9. 12 minus 9 is 3. 3 plus, that would be 14. Okay, so 13 minus 9 is 4. Okay. Okay. 12 divided by 4 is 11. It's not going to come out right either. I'm missing something. 12, 12 times 2, but how can I get 2? 13 minus 11 is 2. But then you got 4. Okay, so 12 times","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 11 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 9, 12),
    comment='""13 minus 11 is 2""',
)

# ""What is 12 plus 13? 13. That would be 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(9, 11, 25),
    comment='""What is 12 plus 13? That would be 25""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 11, 12),
    comment='""13 minus 9 is 4""',
)

# ""So, 12 times 2, 6 times 4, 8 times 3 is the numbers I'm going for"" 
# This appears to be setting subgoals - ways to make 24
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""12 times 2"" is one way to get to 24',
)
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 times 4"" is another way to get to 24',
)
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3"" is another way to get to 24',
)

# ""11 plus 3"" - participant likely meant 11+13
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(9, 12, 24),
    comment='""11 plus 3"" - participant likely meant 11+13',
)

# ""12 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 11, 13),
    comment='""12 minus 9 is 2"" but participant corrects to 3 later',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 11, 12),
    comment='""13 minus 9 is 4""',
)

# ""12 divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 11),
    comment='""12 divided by 4""',
)

# ""12 times 2, but how can I get 2? 13 minus 11 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 9, 12),
    comment='""13 minus 11 is 2""',
)
```"
92,"[1,3,6,7]",(7+1)x(6-3),104," All right, a 1, a 3, a 6, and a 7. 7 is kind of awkward. 7 times 3 is 21. 7 plus 1 gives me an 8, times 3 is 24. All right, so 7 plus 1, then I was doing, that's 8, wait a minute, I'm sorry, still stuck with the 6. How did I do that? All right, so that's not it. It seems so easy for a minute. Oh, no, it is. I just forgot to do the 6 minus 3. All right, 7 plus 1 is 8, divided by... 6, whoops, that's not a 6. 6 minus 3 is 24. What do we mean that all numbers are used? They are 2. I have a 7, a 1, a 6, and a 3. They are 2 used. All right, whatever. 7 plus 1 is 8. Oh, multiply, not divide. 6 minus 3 is 24. There we go.","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 6, 21),
    comment='""7 times 3 is 21""',
)

# ""7 plus 1 gives me an 8, times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+1)*3=24"",
    resulting_state=(6, 24),
    comment='""7 plus 1 gives me an 8, times 3 is 24""',
)

# The participant realizes they forgot about the 6 and backtracks

# ""7 plus 1 is 8, divided by... 6"" participant tries division instead of subtraction
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+1)/6=1.33"",
    resulting_state=(1.33, 3),
    comment='""7 plus 1 is 8, divided by... 6""',
)

# Finally the participant gets it right: ""7 plus 1 is 8"" times ""6 minus 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+1)*(6-3)=24"",
    resulting_state=(24,),
    comment='""7 plus 1 is 8"" times ""6 minus 3 is 24""',
)
```"
93,"[1,2,7,7]",,180," Alright, two 7s, a 1 and a 2. 7 times 2 is 14, but 14 plus 8 doesn't work. 7 times 7 is 49, but that doesn't work either. Hmm, I don't see this one yet. Um, what can I do to a 7? I can add a 1 to it, and that gives me 8, but I can't do anything with that 8. I can add a 2 to it, and that gives me 9. Hang on. No. Yeah, that gives me 9. 16 times 1, that's not going to work. Oh dear. Um, 7 plus 7 is 14, times 2 is 28 minus 1. That doesn't work. I had 28 minus 3, didn't I? Er, no, we're not trying to get a 4. That would be nice. Oh, bother. Um, 7 times 7 is 49. I just don't see what you could do with that. If you divide it in half, and take away 1, that's not it. Um, 2 plus 1 is 3. That's not it either, though. What are you going to do with a 3 and two 7s? Nothing. Um, we can't divide the 7s. I can multiply them, add them, or subtract them. Alright, what if I subtract 7 minus 2? That gives me a 5. Is there anything I can do with a 5? Could add it to the 1. That gives me 6. What if I subtract a 1? So that would give me a 6. I would have a 6, a 7, and a 2 left. 6, a 7, and a 2. Mm-mm, don't see that. I do not see how to do this one. 16, 8, gives me an 8.","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""7 times 2 is 14""',
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(1, 2, 49),
    comment='""7 times 7 is 49""',
)

# ""I can add a 1 to it, and that gives me 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(2, 7, 8),
    comment='""I can add a 1 to it, and that gives me 8""',
)

# ""I can add a 2 to it, and that gives me 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(1, 7, 9),
    comment='""I can add a 2 to it, and that gives me 9""',
)

# ""7 plus 7 is 14, times 2 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+7)*2=28"",
    resulting_state=(1, 28),
    comment='""7 plus 7 is 14, times 2 is 28""',
)

# ""2 plus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 7, 7),
    comment='""2 plus 1 is 3""',
)

# ""what if I subtract 7 minus 2? That gives me a 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(1, 5, 7),
    comment='""what if I subtract 7 minus 2? That gives me a 5""',
)

# ""Could add it to the 1. That gives me 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 7),
    comment='""Could add it to the 1. That gives me 6""',
)

# ""16, 8"" seems to refer to dividing 16 by 2, where 16 probably came from 7+7+2
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+7+2)/2=8"",
    resulting_state=(1, 8),
    comment='""16, 8"" seems to refer to dividing 16 by 2, where 16 probably came from 7+7+2',
)
```"
98,"[3,5,7,10]",(10-7+5)x3,44," Okay, so I'm trying to get to 24 from these 4 numbers. So 17 plus 5 is 22. 22 plus 3, 25. So that gets me a little bit high. Let's see. Out of these 4 numbers, I know 3 times 8 equals 24. And so let's see if I can get 5, 7, and 10 to 8. Okay, so I see that 10 minus 7 equals 3 plus 5 equals 8. So I think that's perfect for our parentheses. So 10 minus 7 plus 5, and then times 3, and that should get us to 24.","```python
start_state = (3, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""17 plus 5 is 22"" - participant seems to have done 10+7=17 first
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(3, 5, 17),
    comment='""17 plus 5 is 22"" - participant seems to have done 10+7 first',
)

# Then they add 5 to 17
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+5=22"",
    resulting_state=(3, 22),
    comment='""17 plus 5 is 22""',
)

# ""22 plus 3, 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+3=25"",
    resulting_state=(25,),
    comment='""22 plus 3, 25""',
)

# ""I know 3 times 8 equals 24"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I know 3 times 8 equals 24""',
)

# ""10 minus 7 equals 3 plus 5 equals 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7+5=8"",
    resulting_state=(3, 8),
    comment='""10 minus 7 equals 3 plus 5 equals 8""',
)

# Then they multiply by 3 to reach 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""and then times 3, and that should get us to 24""',
)
```"
99,"[1,3,6,9]",(9-1)x(6-3),101," Now I want to get to 24 from 1, 3, 6, and 9. So I know 24 is divisible by 3 and 6, and so I'm initially looking to use those somehow. 3 times 8 equals 24. Can I make 8 out of 9, 6, and 1? I don't feel like I can, so how about 6? Can I make 4 out of 9, 3, and 1? 9 minus 3 equals 6, minus 1 equals 5, so that doesn't seem like it'll work. How about 9 plus 16 is 15? I don't think I can get that to 24. 3 plus 6 is 9. 9 plus 9 is only 18. Oh! Okay, so I'm thinking of going the 8 by... 8 times 3 route, so 9 minus 1 equals 8, and then 6 minus 3 equals 3, so that's 8 times 3. Let's do that. 9 minus 1 equals 8 times parenthesis 6 minus 3, and that should give us 8 times 3 for 24.","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 is divisible by 3 and 6"" suggests participant is thinking about multiplication
# ""3 times 8 equals 24"" sets up a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""3 times 8 equals 24"" participant identifies this as a subgoal',
)

# ""9 minus 3 equals 6, minus 1 equals 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3-1=5"",
    resulting_state=(5, 6),
    comment='""9 minus 3 equals 6, minus 1 equals 5""',
)

# ""3 plus 6 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+6=9"",
    resulting_state=(1, 9, 9),
    comment='""3 plus 6 is 9""',
)

# ""9 plus 9 is only 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(1, 18),
    comment='""9 plus 9 is only 18""',
)

# The participant then has an insight about how to make 8 and 3
curr_state = graph.move_to_node(start_state)

# ""9 minus 1 equals 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(3, 6, 8),
    comment='""9 minus 1 equals 8""',
)

# ""6 minus 3 equals 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 8),
    comment='""6 minus 3 equals 3""',
)

# ""8 times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""8 times 3""',
)

```"
100,"[3,4,8,11]",((11-8)+3)x4,57," Okay, so 3, 4, 8 are all divisible by, or 24 is divisible by 3, 4, and 8. So how do I work this 11 in? Maybe 11 minus 8 equals 3. Ah, 3 plus 3 equals 6 times 4 equals 24. So I would put into parentheses 11 minus 8. And I need to add the 3 before I multiply it by 4, so I actually need to do double parentheses. So 8, 11 minus 8, parentheses, plus 3. So let's see, that should give us 6, and then times 4. 4 equals 24.","```python
start_state = (3, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# First the participant notes that 24 is divisible by 3, 4, and 8, suggesting they are working backward
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 is divisible by 3, 4, and 8""',
)
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 is divisible by 3, 4, and 8""',
)

# ""11 minus 8 equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 3, 4),
    comment='""11 minus 8 equals 3""',
)

# ""3 plus 3 equals 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(4, 6),
    comment='""3 plus 3 equals 6""',
)

# ""times 4 equals 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""times 4 equals 24""',
)
```"
101,"[1,7,10,13]",(13-10)x(7+1),32," So on first glance, none of these numbers explicitly is divisible, or 24 is divisible by any of them, so I'm looking to maybe use some addition and subtraction as my first step. 13-10 equals 3. 3 would need to be multiplied by 8. Oh, 7 plus 1 is 8, so that's perfect. 13-10 equals 3 times 7 plus 1 equals 8.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13-10 equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(1, 3, 7),
    comment='""13-10 equals 3""',
)

# ""3 would need to be multiplied by 8"" - participant sets a subgoal of getting 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""3 would need to be multiplied by 8""',
)

# ""7 plus 1 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(3, 8),
    comment='""7 plus 1 is 8""',
)

# Then the participant multiplies 3 and 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment=""Participant multiplies 3 and 8 to reach goal"",
)
```"
105,"[1,8,8,12]",(8/8+1)x12,23," Okay, the target number is 24. I know 12 times 2 is 24, and then 8 divided by 8 equals 1 plus 1 equals 2, and that's so 2 times 12. So what I need to do first is, in parentheses, 8 divided by the 8 plus 1, which gives us a net of 2, and then times 12, which is 24.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 is 24"" - participant sets a subgoal of getting 2 to multiply by 12
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 is 24"" - participant sets a subgoal of getting 2',
)

# ""8 divided by 8 equals 1 plus 1 equals 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8+1=2"",
    resulting_state=(2, 12),
    comment='""8 divided by 8 equals 1 plus 1 equals 2""',
)

# ""2 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='""2 times 12""',
)
```"
106,"[4,4,4,7]",(7-4)x(4+4),40," 4, 4, 4, and 7. Alright, so 4 times 4 is 16. 16 plus 8 would be 24. I can't make 8 from 4 and 7, but what can I do with 4 and 7? I can do 7 minus 4 equals 3, and then 3 times 8 is 24, and 4 plus 4 is 8. Okay. So I'll do 7 minus 4, which equals 3, times 4 plus 4, which equals 8, and that gives us to 24.","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(4, 7, 16),
    comment='""4 times 4 is 16""',
)

# ""16 plus 8 would be 24"" - participant realizes they need to make 8
graph.set_subgoal(
    (8, 16),
    state_after_subgoal=(24,),
    comment='""16 plus 8 would be 24"" - participant realizes they need to make 8',
)

# ""I can do 7 minus 4 equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 4, 4),
    comment='""I can do 7 minus 4 equals 3""',
)

# ""4 plus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(4, 7, 8),
    comment='""4 plus 4 is 8""',
)

# ""3 times 8 is 24"" - participant combines their previous operations
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4)*(4+4)=24"",
    resulting_state=(24,),
    comment='""3 times 8 is 24"" - participant combines their previous operations',
)
```"
117,"[6,7,9,9]",(9-7)x9+,180," 6, 9, 6, 7, 7, 9, 9. If we are saying 6, 7, 9, 9, we need to add one at a time. Okay, let's have... here 6 minus... No, it can be... yeah, 9 minus 6. that's one parts and then let's multiply it by no no no no no six times nine minus three that's trying okay if you close this times you know it has to it has to be bigger time seven it's okay how about no okay we divide in the way um no way no way no way no way no way no way no way no way and X and and and and thing thing","```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# First the participant just lists the numbers

# ""9 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 7, 9),
    comment='""9 minus 6""',
)

# ""six times nine minus three""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9-3=51"",
    resulting_state=(7, 9, 51),
    comment='""six times nine minus three""',
)

# ""times seven"" seems to be trying to multiply something by 7
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""51*7=357"",
    resulting_state=(9, 357),
    comment='""times seven""',
)

# Based on their submitted response ""(9-7)x9+"", they must have also tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-7)*9=18"",
    resulting_state=(6, 18),
    comment=""Based on submitted response (9-7)x9+"",
)

# The rest of the transcript is unclear or seems to be expressions of frustration
```"
129,"[2,3,5,10]",,180," Alright, 10 divided by 5 is 2. 2 times 5 is 15, that's no good. 10 minus 5 is 5. 5 times 3 is 15, plus 2, no. How about, let's see. Okay, let's see. I think that's got to be 10 divided by 5. I get a 2 there. 2. 2 from that, you could get... 3 plus 2 is 5. 3 times 2 is 6. 5 times 6... 20... no, was that 20? 4, 10 divided by 5, let me just see. Let me just try this. 3 plus 2, 5 times 3. 3 minus, let's see, 10, I feel like this has got to be divided by, because it's 2, and I, 2 times, what's that, 5 times 6, 5 times 5, 15 times 2, no, 10 times 2, no, where am I going to get the 4 from? 3 minus 10. 3 plus 2, that doesn't make any sense, but, 10 divided by, 2, 3, 5, and 10, 5 times, let's see, let's do 15. 15, 15 plus 3, 18, 19, 20, 15.","```python
start_state = (2, 3, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 2, 3),
    comment='""10 divided by 5 is 2""',
)

# ""2 times 5 is 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=15"",
    resulting_state=(3, 10, 15),
    comment='""2 times 5 is 15"" - calculation error',
    result_calc_error=True,
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(2, 3, 5),
    comment='""10 minus 5 is 5""',
)

# ""5 times 3 is 15, plus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3+2=17"",
    resulting_state=(17,),
    comment='""5 times 3 is 15, plus 2""',
)

# Participant goes back to dividing 10 by 5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 2, 3),
    comment='""10 divided by 5""',
)

# ""3 plus 2 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+2=5"",
    resulting_state=(2, 5),
    comment='""3 plus 2 is 5""',
)

# ""3 times 2 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(5, 6, 10),
    comment='""3 times 2 is 6""',
)

# ""5 times 6... 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(10, 30),
    comment='""5 times 6... 20""',
    result_calc_error=True,
)

# ""3 plus 2, 5 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+2=5"",
    resulting_state=(5, 5, 10),
    comment='""3 plus 2, 5 times 3""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(2, 10, 15),
    comment='""5 times 3""',
)
```"
131,"[3,4,8,12]",,180," To get to 24, you could do 6 times 4, how about we do, I'm going to get rid of these higher numbers for sure, so 12 minus 8 gives you 4. 4 times 7 is 24, so 3 plus 4, really? 4 times 7, right? Why not right there? Oh. I don't know how to do these ones, man. Let's do like an 8. What if it's 8? 12 minus, 12 minus 8 is 4. What is it, 6 times 4 is 24? So 6 times, can I get that in here? 6 times 4 is 24. So I can get that in here. I can get a 6 times 4 somehow. So let's see. 12 minus 8 is 4. 4 minus 3, no. 4 plus 3 is 7, no. 7. Does 7 divide by 24? No.","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4"" suggests participant is setting a subgoal since they know this makes 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""To get to 24, you could do 6 times 4""',
)

# ""12 minus 8 gives you 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(3, 4, 4),
    comment='""12 minus 8 gives you 4""',
)

# ""3 plus 4"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4=7"",
    resulting_state=(7, 8, 12),
    comment='""3 plus 4""',
)

# ""12 minus 8 is 4"" - participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(3, 4, 4),
    comment='""12 minus 8 is 4""',
)

# ""4 plus 3 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+3=7"",
    resulting_state=(4, 7),
    comment='""4 plus 3 is 7""',
)
```"
137,"[7,7,11,12]",,180," 7, 11, 12, let's see, 12 times, so difficult. Let's see, 12 minus 7, 12 minus 7 is 5. That's not going to work. 7 times 7 is 49. Minus 49. Struggle with these big numbers. 7 times, 7 times 12, way too high. I feel like the last one was like that. 12 times 7, 11 times 7, you only get 7 if you subtract those. 12 times 7, 84. No, that's not right. Let's see, 7 times 7, 11, 12. No idea how to do this. 12 minus 11, minus 7, 12 minus 11 to 1. 7 plus 7 is 14. Doesn't get me anywhere. 14 plus 12 gets me to 24. What do I do with that 11? Can't do anything with the 11. 14, let's see, 14 plus 12 would get me there somehow. But I don't really know. 14 plus 12, not 12 plus, 14 plus 12 doesn't get me there. What am I talking about? 11, oh man, 11.","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 7, 11),
    comment='""12 minus 7 is 5""',
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(11, 12, 49),
    comment='""7 times 7 is 49""',
)

# ""7 times 12, way too high""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(7, 11, 84),
    comment='""7 times 12""',
)

# ""12 minus 11 to 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 7, 7),
    comment='""12 minus 11 to 1""',
)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(11, 12, 14),
    comment='""7 plus 7 is 14""',
)

# ""14 plus 12 gets me to 24"" - participant seems to have made a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+12=24"",
    resulting_state=(11, 24),
    comment='""14 plus 12 gets me to 24"" - participant seems to have made a calculation error',
    result_calc_error=True,
)

```"
138,"[6,6,6,6]",6,180," Now we have 6, 6, 6. So let's figure out how to make 6. Let's figure out how to make 6 times 4. So we're going to do bracket 6 divided by 6. That will be 1. Then, So I want to make 2 times 12. So I want to make 2 times 12. So I want to make 2 times 12. So I want to make 2 times 12. So 6 divided by 6. That will be 1. 6 plus 6, 12 6 plus 6, 12. 6 plus 16, 6 plus 16 6 plus 16, 12. 6 plus 18, 6 plus 18, 12. 7, Thank you. Thank you.","```python
start_state = (6, 6, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So let's figure out how to make 6 times 4"" - participant sets a goal of multiplying by 4
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""So let\'s figure out how to make 6 times 4""',
)

# ""6 divided by 6. That will be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/6=1"",
    resulting_state=(1, 6, 6),
    comment='""6 divided by 6. That will be 1""',
)

# ""So I want to make 2 times 12"" - participant sets a new subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""So I want to make 2 times 12""',
)

# ""6 plus 6, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(6, 6, 12),
    comment='""6 plus 6, 12""',
)

# The rest of the transcript seems to be the participant repeating themselves or making unclear statements
# They submitted just ""6"" as their response, suggesting they may have given up
```"
139,"[7,10,10,12]",(7x(12-10))+10,44," So now our numbers are 7, 10, 10, and 12. More variety this time. So what I want to do is create 7 times 2 plus 10. So 12 minus 10 will be 2. Okay, let's do this. 7 times, well you have our 12 minus 10, that will be 2, plus 10.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So what I want to do is create 7 times 2 plus 10"" - participant sets a plan
# ""12 minus 10 will be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(2, 7, 10, 10),
    comment='""12 minus 10 will be 2""',
)

# ""7 times, well you have our 12 minus 10, that will be 2, plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+10=24"",
    resulting_state=(24, 10),
    comment='""7 times...that will be 2, plus 10""',
)

```"
140,"[2,2,10,11]",((11x2)-10)x2,131," 2, 2, 10, and 11. So what I want to do is create 12, 12 times 2. Huh. 12 times 2, that would already be 24, so it can't be that. So let's do 2 times 2 times 11 minus 10, 2. Okay, that was incorrect. Let's do 12 times 2. So how will we get 12 from these numbers? We can get 11 times 2, that would be 22. 22 minus 10, that would be 12. And 12 times 2 would be 24, so let's do... 11 times 2 minus 10, so that would be 22 minus 10. That would be 12. Now let's do it times 2, that would be 24. Huh! Invalid. 11 times 2... Oh, I need to put more parentheses down. Minus... 11 times 2... 10... times 2.","```python
start_state = (2, 2, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So what I want to do is create 12, 12 times 2"" - participant sets a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""So what I want to do is create 12, 12 times 2""',
)

# ""2 times 2 times 11 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2*11-10=34"",
    resulting_state=(34,),
    comment='""2 times 2 times 11 minus 10""',
)

# ""that was incorrect"" - participant backtracks

# ""11 times 2, that would be 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 10, 22),
    comment='""11 times 2, that would be 22""',
)

# ""22 minus 10, that would be 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22-10=12"",
    resulting_state=(2, 12),
    comment='""22 minus 10, that would be 12""',
)

# ""And 12 times 2 would be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""And 12 times 2 would be 24""',
)

# The participant then repeats this sequence but realizes they need parentheses in their answer
# They submit ((11x2)-10)x2 which follows the same sequence of operations
```"
141,"[11,13,13,13]",((11+13)x13)/13,104," Our numbers are 11, 13, 13, 13. That should be interesting. So, 11 plus 13, that would be 24. So, we can do 11 times 13. What would that be? 143. Divide it by 13. That's 12. Okay. Let's do 24, because 11 plus 13 will be 24. So, let's figure out a way to multiply that by 13 and then divide by 13 again. So, it would just be 24. So, let's do 11 plus 13. Oh, no. Probably needs a bracket. 11 plus 13 times 13 divided by 13. Maybe I should add more parentheses. Times 13, parentheses, divide 13.","```python
start_state = (11, 13, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 13, that would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(13, 13, 24),
    comment='""11 plus 13, that would be 24""',
)

# ""11 times 13. What would that be? 143""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13=143"",
    resulting_state=(13, 13, 143),
    comment='""11 times 13. What would that be? 143""',
)

# ""Divide it by 13. That's 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""143/13=12"",
    resulting_state=(13, 12),
    comment='""Divide it by 13. That\'s 12""',
    result_calc_error=True,
)

# The participant then goes back to using 11+13=24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(13, 13, 24),
    comment='""Let\'s do 24, because 11 plus 13 will be 24""',
)

# Then they multiply by 13 and divide by 13
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*13/13=24"",
    resulting_state=(24,),
    comment='""multiply that by 13 and then divide by 13 again""',
)

# The participant then seems to be working on getting the parentheses right in their response
# They submit ((11+13)x13)/13 which gives 24

```"
142,"[6,9,9,11]",6+((11-9)x9),85," 6, 9, 9... So we know 18 plus 6 will be 24. How do we get... We can do... Huh. 18, 9 plus 9, plus 6. We can't do that. We can do 6 plus 18. So let's do 11 minus 9. That would be 2. 9 times 2, 18. So let's do 6 plus parentheses, parentheses, parentheses. 11, subtract 9, you get your 2. Then you're going to multiply by 9. So we have 6 plus... No, no, no, no. 6. 2 times 9, 18 plus 6, 24. All right.","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So we know 18 plus 6 will be 24"" - participant sets a subgoal of getting to 18
graph.set_subgoal(
    (6, 18),
    state_after_subgoal=(24,),
    comment='""So we know 18 plus 6 will be 24""',
)

# ""9 plus 9, plus 6"" participant tries adding the 9s
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 11, 18),
    comment='""9 plus 9, plus 6""',
)

# ""We can't do that"" participant backtracks

curr_state = graph.move_to_node(start_state)
# ""11 minus 9. That would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 6, 9),
    comment='""11 minus 9. That would be 2""',
)

# ""9 times 2, 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(6, 18),
    comment='""9 times 2, 18""',
)

# ""2 times 9, 18 plus 6, 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(24,),
    comment='""2 times 9, 18 plus 6, 24""',
)
```"
144,"[1,4,5,11]",(4x1)x(11-5),44," Four times five is twenty. Eleven times five is fifty-five. One, four, five, eleven, eleven times four. Eleven minus five. So let's do four times six. We can do eleven minus five. That will be six. Perfect. One times four is four. So let's do parentheses four times one times eleven minus five is six. Four times six.","```python
start_state = (1, 4, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Four times five is twenty""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(1, 11, 20),
    comment='""Four times five is twenty""',
)

# ""Eleven times five is fifty-five""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(1, 4, 55),
    comment='""Eleven times five is fifty-five""',
)

# ""eleven minus five"" participant seems to be setting a subgoal to get 6
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""eleven minus five"" participant seems to be setting a subgoal to get 6',
)

# ""eleven minus five. That will be six""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(1, 4, 6),
    comment='""eleven minus five. That will be six""',
)

# ""One times four is four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*4=4"",
    resulting_state=(4, 6),
    comment='""One times four is four""',
)

# ""four times six"" participant multiplies the 4 they just got by the 6 from earlier
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""four times six""',
)
```"
149,"[1,3,6,13]",,180," Okay, so let's see, 19, I see, okay. So if we were to do 1 plus 13 equals 14 plus 9 equals 23 on the dot. So, what if we did 3 times 6, actually no, let's do, yeah, 3 times 6, that's 18, plus 13 equals 31. Mmm, man. What if we did, and this really is the toughest cookie out here, dude, I can't even, oh my gosh. 24, 24, 24. Let's see. 9 plus 13 equals 22. Ooh, wait, no, no, never mind. Oh, man, I wish there was like squared in here or something. And we can only use the numbers once, too, so that's a bummer. Ooh, wait a second. If we did 6 plus 1 equals 7 times 13. 13 divided by 3. Oh, no. 13, well, oh, 4, wait. 1 plus 3 equals 4. Oh, that 13, man. That 13 is going to mean the death of me. Let's see. If we did 4, well, 1 plus 3 equals 4. 4 times 6 is 24. And what do we do with the 13? Oh, gosh. Gosh, no, I am, I am absolutely puzzled at this point. It's so tough to find a solution with four numbers like this. And then it's like, you're trying to think of all these types of different equations in your head, but, I mean, maybe a math genius. Math genius can do it, but a person like myself, probably not. Oh, let's see. If we did, oh, wait, 3 times 13 is 39 minus 7. That's 32.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 plus 13 equals 14"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""1+13=14"",
    resulting_state=(3, 6, 14),
    comment='""1 plus 13 equals 14""',
)

# ""3 times 6, that's 18, plus 13 equals 31""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(1, 13, 18),
    comment='""3 times 6, that\'s 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+13=31"",
    resulting_state=(1, 31),
    comment='""plus 13 equals 31""',
)

# ""6 plus 1 equals 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(3, 7, 13),
    comment='""6 plus 1 equals 7""',
)

# ""13 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13/3=4.33"",
    resulting_state=(1, 4.33, 6),
    comment='""13 divided by 3""',
)

# ""1 plus 3 equals 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+3=4"",
    resulting_state=(4, 6, 13),
    comment='""1 plus 3 equals 4""',
)

# ""4 times 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(13, 24),
    comment='""4 times 6 is 24""',
)

# ""3 times 13 is 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(1, 6, 39),
    comment='""3 times 13 is 39""',
)
```"
158,"[2,3,5,10]",(10x5),180," 10 times 2 equals 20. 10 times 3 equals 30. Minus 5 is down, but then we have to rule that. Oh! Oh! Maybe. 10 times 5 equals 50. Plus 50. Plus 2. No. 10 times 3. No. 10 times 5. 10 times 5. That's 50. Okay. Okay. so 50 minus 2 divided by 3, no, 50 minus 3 divided by 2, no 10 times 3 times 5, no, 10 times 5 times 2 divided by 3, no, 10 times 3 times 5 divided into 9, 10 times, maybe 10 plus 5, 15 times 2, minus 3, no","```python
start_state = (2, 3, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 2 equals 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 5, 20),
    comment='""10 times 2 equals 20""',
)

# ""10 times 3 equals 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(2, 5, 30),
    comment='""10 times 3 equals 30""',
)

# ""Minus 5"" from 30
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-5=25"",
    resulting_state=(2, 25),
    comment='""Minus 5""',
)

# ""10 times 5 equals 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(2, 3, 50),
    comment='""10 times 5 equals 50""',
)

# ""Plus 2"" from 50
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""50+2=52"",
    resulting_state=(3, 52),
    comment='""Plus 2""',
)

# ""50 minus 2 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(50-2)/3=16"",
    resulting_state=(16,),
    comment='""50 minus 2 divided by 3""',
)

# ""50 minus 3 divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(50-3)/2=23.5"",
    resulting_state=(23.5,),
    comment='""50 minus 3 divided by 2""',
)

# ""10 times 3 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3*5=150"",
    resulting_state=(2, 150),
    comment='""10 times 3 times 5""',
)

# ""10 times 5 times 2 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5*2/3=33.33"",
    resulting_state=(33.33,),
    comment='""10 times 5 times 2 divided by 3""',
)

# ""10 plus 5, 15 times 2, minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+5)*2-3=27"",
    resulting_state=(27,),
    comment='""10 plus 5, 15 times 2, minus 3""',
)
```"
164,"[7,7,11,12]",(,180," Let's see, 49, minus 11, minus 12, off, okay, 2 off, um, 9, minus 12, minus 12, we'll say, um, 11 times 7 is 77, minus, again, no, we need a 84, minus 7, minus 7, um, 12, plus 11, 7, minus, almost, 11, plus 7, plus 7, no, 11, plus 12, 23, plus 7, 30, yeah, no. 12 plus 7, 19 plus seven. 19, plus 7, 138, delete. Oh, 11, now, 49, minus, 11? Are there anya? minus 12 87 1 to the 11 times 12 1 to the 2 divided by 7 37 14 times 11 no teen 12 17 women no 14 times 11 divided by 12.","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""49"" suggests participant multiplied 7*7
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(11, 12, 49),
    comment='""49"" suggests participant multiplied 7*7',
)

# ""minus 11, minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49-11-12=26"",
    resulting_state=(26,),
    comment='""minus 11, minus 12""',
)

# ""11 times 7 is 77""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7=77"",
    resulting_state=(7, 12, 77),
    comment='""11 times 7 is 77""',
)

# ""12 plus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(7, 7, 23),
    comment='""12 plus 11""',
)

# ""23 plus 7, 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+7=30"",
    resulting_state=(7, 30),
    comment='""23 plus 7, 30""',
)

# ""12 plus 7, 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(7, 11, 19),
    comment='""12 plus 7, 19""',
)

# ""19 plus seven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+7=26"",
    resulting_state=(11, 26),
    comment='""19 plus seven""',
)

# ""11 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(7, 7, 132),
    comment='""11 times 12""',
)

# ""divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""132/7=18.86"",
    resulting_state=(7, 18.86),
    comment='""divided by 7""',
)

```"
165,"[1,2,7,7]",,180," What's 14 times 2? 28. No. 14 plus 7? 14. Okay. Okay. Oh, no. Let's see. What would it be 2, though? 28. Um, so, oh, 9 plus 7? That's 16, though. No, no, no. 49 9 So 7 times Now it's still 21 14 47 So then it's 21 plus and I want to be That would just be 22 8 Plus 9 No I don't think Because 8 plus 8 I'm I'm I don't think it is 14 plus 3 14 14 times 3 is 42 No 7 3 14 4 14 I can't think I can't think 7 times 2 times 2 plus 7 7","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What's 14 times 2? 28"" - participant likely added 7+7 first
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='""What\'s 14"" suggests participant added 7+7=14',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*2=28"",
    resulting_state=(1, 28),
    comment='""14 times 2? 28""',
)

# ""14 plus 7?"" participant seems to go back to start state to try a different approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='""14"" participant adds 7+7 again',
)

# ""9 plus 7? That's 16"" participant may have added 2+7
new_state = graph.explore_operation(
    curr_state,
    operation=""2+7=9"",
    resulting_state=(1, 7, 9),
    comment='""9 plus 7? That\'s 16"" participant adds 2+7 first',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(1, 16),
    comment='""9 plus 7? That\'s 16""',
)

# ""7 times"" followed by ""still 21"" suggests participant multiplied 7*(1+2)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+2=3"",
    resulting_state=(3, 7, 7),
    comment='""7 times"" followed by ""still 21"" suggests participant made 3 from 1+2',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(7, 21),
    comment='""7 times"" followed by ""still 21""',
)

# ""14 times 3 is 42"" participant goes back to using 14 from 7+7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='Getting 14 for ""14 times 3 is 42""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+2=3"",
    resulting_state=(3, 14),
    comment='""14 times 3"" participant makes 3 from 1+2',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*3=42"",
    resulting_state=(42,),
    comment='""14 times 3 is 42""',
)

# ""7 times 2 times 2 plus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""7 times 2"" first part of ""7 times 2 times 2 plus 7""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*2=28"",
    resulting_state=(1, 7, 28),
    comment='""times 2"" second part of ""7 times 2 times 2 plus 7""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28+7=35"",
    resulting_state=(1, 35),
    comment='""plus 7"" final part of ""7 times 2 times 2 plus 7""',
)
```"
173,"[1,1,5,8]",,180," 2 times 5 plus 8, 5 plus 8 minus 1 plus 2, or times 2, 5 times 1, 5 plus 1 times 2. Pretty sure that does not work. Again, 9 plus 5, nope. I don't know how you get there. You get to 40. Nowhere with 2. This one also doesn't work. No way. No way it works. I don't think it's possible to get to 24 with these numbers. I think you gave me an impossible math problem. I can get to 42. I can get to 40. I can even get to 41. But there's no way to get to 24 on this one. No way to get to 44. get to 24 i can get to 48 7 i can get to 48 okay this is ridiculous stanford hi you're really listening to these six times unless there's a math i don't know about i get to five i can get to three","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 5 plus 8"" - participant is likely using 1+1=2 first
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 5, 8),
    comment=""Participant needs 2 for '2 times 5 plus 8'"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5+8=18"",
    resulting_state=(18,),
    comment='""2 times 5 plus 8""',
)

# ""5 plus 8 minus 1 plus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8-1+1=13"",
    resulting_state=(13,),
    comment='""5 plus 8 minus 1 plus 2"" (where 2 would come from 1+1)',
)

# ""5 times 1, 5 plus 1 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*(1+1)=12"",
    resulting_state=(12,),
    comment='""5 times 1, 5 plus 1 times 2""',
)

# ""9 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+1=9"",
    resulting_state=(1, 5, 9),
    comment='Getting to ""9 plus 5""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(1, 14),
    comment='""9 plus 5""',
)

# ""You get to 40"" - participant likely doing 8*5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(1, 1, 40),
    comment='""You get to 40"" - participant likely doing 8*5',
)

# ""I can get to 42"" but participant doesn't say how
# ""I can get to 48"" but participant doesn't say how
# ""i can get to five i can get to three"" but participant doesn't specify operations

```"
176,"[1,6,12,13]",,186," Okay, 12 plus 13. 12 plus 13 is 15. Okay. Okay. 13 times 1. Okay. 12 times 6. What's 12 times 6? 12 times 6 is... 72. What's 12 times 13? What's 12 times 13? Um, okay. 12 times 6, 72. Okay. Thank you.","```python
start_state = (1, 6, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 13 is 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=15"",
    resulting_state=(1, 6, 15),
    comment='""12 plus 13 is 15"" - calculation error',
    result_calc_error=True,
)

# ""13 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*1=13"",
    resulting_state=(6, 12, 13),
    comment='""13 times 1""',
)

# ""12 times 6 is... 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(1, 13, 72),
    comment='""12 times 6 is... 72""',
)

# The participant asks ""What's 12 times 13?"" but doesn't actually compute it

```"
177,"[8,9,12,13]",13-(9-8)+12,131," Okay, let's see. 12 divided by 8 is 3. 3 plus 13. 3 plus 13. Okay, 12 divided by 8 is 3. 3 plus 8, or 3 plus 13 is 16. 16 plus 9. 16 plus 9 is... Okay. Hmm. What do you do? 12 plus 13 is 25. No. 25 plus... No. No. Let's see, um, nine, nine minus a is one, 13 minus one is two. One is 12, 12 plus 12 is 24, right? So how would I do that? So, um, 13 minus nine minus eight plus 12.","```python
start_state = (8, 9, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 divided by 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8=3"",
    resulting_state=(3, 9, 13),
    result_calc_error=True,
    comment='""12 divided by 8 is 3""',
)

# ""3 plus 13 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+13=16"",
    resulting_state=(9, 16),
    comment='""3 plus 13 is 16""',
)

# ""16 plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=25"",
    resulting_state=(25,),
    comment='""16 plus 9""',
)

# ""12 plus 13 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(8, 9, 25),
    comment='""12 plus 13 is 25""',
)

# ""nine minus eight is one, 13 minus one is two""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-(9-8)+12=24"",
    resulting_state=(24,),
    comment='""13 minus nine minus eight plus 12""',
)
```"
181,"[5,5,10,10]",(,180," 10 times 10 10 plus 10 10 plus 10 is 20 20 the size 25. Nope. I don't know if there's 5 times 10 is 50 50 times. Okay. 5 times 10 is 25. 25 plus 10 is 35, and if I minus it, it's 25. Times 5 plus 10 minus 10. 10 divided by 10 divided by 5 is 2. 2. 10 divided by 5 is 2. 5 times 10 is 50. No. No. 10 divided by 5 is 2. 5 times 10 is 50. 10 divided by 5 is 2. 5 times 10 is 50. If you notice, 5 times 10 is 50. 10 divided by 5 is 2. 5 times 10 is 50. 4 times 10 is 50. 4 times 10 is 50. 5 times 10 is 20. Isa, are there more than 6? Yeah, but look I got this better. I can't say I can't buy it.","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 5, 100),
    comment='""10 times 10""',
)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 5, 20),
    comment='""10 plus 10 is 20""',
)

# ""20 the size 25"" seems to be adding a 5 to 20
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+5=25"",
    resulting_state=(5, 25),
    comment='""20 the size 25""',
)

# ""5 times 10 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(5, 10, 50),
    comment='""5 times 10 is 50""',
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 10),
    comment='""10 divided by 5 is 2""',
)

# ""5 times 10 is 20"" appears to be another calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=20"",
    resulting_state=(5, 10, 20),
    comment='""5 times 10 is 20"" appears to be a calculation error',
    result_calc_error=True,
)
```"
183,"[5,6,8,13]",,180," Okay, let's do 13 minus 5. 13 minus 5 is 7. 7 times 6 is, let's do 7 times 8. 7 times 8 is 56. 56 divided by 6 is not 24. 24. Ooh, what's, so 6 minus 5 is 1. 13 plus 1 is 14. 14 plus 22. 8 minus 6 is 2. 2 plus 5 is 7. 7 plus, nope. Wait, 8 minus, no, wait! 8 minus 5 is 3. 3 plus 6 is 9. 9 plus 13 is... 22! 5 times 6 is 30. 30 plus 8 is 38. 38... No. Um... 8 times 6 is... 8 times 6 is... What's 8 times 6? I don't know, 8 times 6 is 36? 34? 54? I think it's 54. 54... I don't know. I don't know this one. What's 8 times 6? 8 times 6... Nope. 8 times 6... 48. What's 48 minus 13? 48 minus 13... Nope. I don't know. I don't know. I don't know. I don't know.","```python
start_state = (5, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 5 is 7"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=7"",
    resulting_state=(6, 7, 8),
    comment='""13 minus 5 is 7"" - calculation error, should be 8',
    result_calc_error=True,
)

# ""7 times 8 is 56""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(6, 56),
    comment='""7 times 8 is 56""',
)

# ""56 divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/6=9.33"",
    resulting_state=(9.33,),
    comment='""56 divided by 6""',
)

# Going back to start state: ""6 minus 5 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 8, 13),
    comment='""6 minus 5 is 1""',
)

# ""13 plus 1 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(8, 14),
    comment='""13 plus 1 is 14""',
)

# Back to start state: ""8 minus 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 13),
    comment='""8 minus 6 is 2""',
)

# ""2 plus 5 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+5=7"",
    resulting_state=(7, 13),
    comment='""2 plus 5 is 7""',
)

# Back to start: ""8 minus 5 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 13),
    comment='""8 minus 5 is 3""',
)

# ""3 plus 6 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+6=9"",
    resulting_state=(9, 13),
    comment='""3 plus 6 is 9""',
)

# ""9 plus 13 is... 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(22,),
    comment='""9 plus 13 is... 22""',
)

# Back to start: ""5 times 6 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(8, 13, 30),
    comment='""5 times 6 is 30""',
)

# ""30 plus 8 is 38""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30+8=38"",
    resulting_state=(13, 38),
    comment='""30 plus 8 is 38""',
)

# Back to start: ""8 times 6 is... 48"" (after some uncertainty about the multiplication)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 13, 48),
    comment='""8 times 6 is... 48"" (after some uncertainty about the multiplication)',
)

# ""48 minus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-13=35"",
    resulting_state=(5, 35),
    comment='""48 minus 13""',
)

```"
185,"[3,5,6,11]",((3x5,180," 5 times 3 is 15, 15 times, no, okay, no. 5 times 6 is 30, 30 plus 11 is 41, nope. 6 times 11 is 66, 66 divided by 3 is 22. No. 5 plus 6 is 11, 11 plus 6 is 22. Yes. 11 is 22. I think it's 25. Um. 3 times 5 is 15, 15 plus 6 is 21, no. 3 times 5 is 15, 15 plus 6, or no. 3 times 5 is 15. Hmm. Oh, wait. 3 times 5 minus 11. Okay. Divided by 6. Divided by 6. 3 times 5. Shut up. 3 times 5.","```python
start_state = (3, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(6, 11, 15),
    comment='""5 times 3 is 15""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(3, 11, 30),
    comment='""5 times 6 is 30""',
)

# ""30 plus 11 is 41""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30+11=41"",
    resulting_state=(3, 41),
    comment='""30 plus 11 is 41""',
)

# ""6 times 11 is 66""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*11=66"",
    resulting_state=(3, 5, 66),
    comment='""6 times 11 is 66""',
)

# ""66 divided by 3 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""66/3=22"",
    resulting_state=(5, 22),
    comment='""66 divided by 3 is 22""',
)

# ""5 plus 6 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(3, 11, 11),
    comment='""5 plus 6 is 11""',
)

# ""11 plus 6 is 22"" - participant seems to be using 11 from previous operation plus remaining 11
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(3, 22),
    comment='""11 plus 6 is 22"" - participant seems to be using both 11s',
)

# ""3 times 5 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(6, 11, 15),
    comment='""3 times 5 is 15""',
)

# ""15 plus 6 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+6=21"",
    resulting_state=(11, 21),
    comment='""15 plus 6 is 21""',
)

# ""3 times 5 minus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5-11=4"",
    resulting_state=(4, 6),
    comment='""3 times 5 minus 11""',
)

# ""Divided by 6"" seems to be continuing from previous operation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/6=0.67"",
    resulting_state=(0.67,),
    comment='""Divided by 6""',
)

# The participant ends by repeating ""3 times 5"" which matches their submitted response of ""((3x5""

```"
194,"[1,2,8,10]",(8-1)x2+10,155," 1, 2, 8, and 10. I just had it. 8 times 2 is 16, plus 10 is 21. 10 times 2 is 16. 8 divided by 2 is 4. I don't know what that does for me. 10 plus 10, 3, 13, 8, 21. 10 divided by 2 is 5. 5 times 8 doesn't really do anything for me. I feel like that 1 has got to get added somewhere. 3 times 8 is 24. We already did that. 9 times 2 is 18, plus 10 is 28. 10 divided by 2 is 5. 2 times 8 is 41. 8 plus 2 is 10. 8 times 8, no. 16, no. 11 plus 8 is 19, 21. Doesn't do anything for me. 7, okay. Yeah, okay. So 7 times 2 plus 10. Yep. So 8 minus 1 times 2 plus 10. Damn it, man. 8 minus 1. 8 times 2 plus 10.","```python
start_state = (1, 2, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 2 is 16, plus 10 is 21"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2+10=21"",
    resulting_state=(1, 21),
    comment='""8 times 2 is 16, plus 10 is 21"" - calculation error',
    result_calc_error=True,
)

# ""10 times 2 is 16"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=16"",
    resulting_state=(1, 8, 16),
    comment='""10 times 2 is 16"" - calculation error',
    result_calc_error=True,
)

# ""8 divided by 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/2=4"",
    resulting_state=(1, 4, 10),
    comment='""8 divided by 2 is 4""',
)

# ""10 plus 10, 3, 13, 8, 21"" seems to be listing numbers without clear operations

# ""10 divided by 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(1, 5, 8),
    comment='""10 divided by 2 is 5""',
)

# ""5 times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(1, 40),
    comment='""5 times 8""',
)

# Return to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""2 times 8 is 41"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=41"",
    resulting_state=(1, 10, 41),
    comment='""2 times 8 is 41"" - calculation error',
    result_calc_error=True,
)

# ""8 plus 2 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+2=10"",
    resulting_state=(1, 10, 10),
    comment='""8 plus 2 is 10""',
)

# ""7, okay. Yeah, okay. So 7 times 2 plus 10"" - participant must have computed 8-1=7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(2, 7, 10),
    comment='""7, okay"" - participant computes 8-1=7',
)

# Then they use this 7 in their final answer
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+10=24"",
    resulting_state=(24,),
    comment='""So 7 times 2 plus 10""',
)
```"
207,"[8,9,11,11]",9+11+(11-8,180," 8 plus 9 plus 11 plus 11 plus 11 plus 11 plus 11 plus 22. 8 times 9 is 9. No. 8 minus 9 is 22. 9 minus 11 is 2. 8 plus 9 is 15. Or 8 plus 9. 8 plus 9 is 17 plus 11. 28. 9 plus 11 is 11 plus 11. Okay. A9 plus 11. And 20. 1. 9 plus 11 is... 20. Okay. 20 plus 11 would be 31. So... Uh... 11 times 9... 99... 88, 99... 9... 9... Divided by... Minus... It would be 1. It would be 23. No! 11... Plus 11... 8 divided by 9. 9. 9. 9. 9 minus 8 is 1. Plus 11 plus 11. That's not it. I know it's not it. Uh... 11... Divided by 11... No. That would be 8 plus 9... 17... Plus 11... 28... Minus 11... 9... 9 plus 11 is 20. 11 minus 1... 9. 9. 9. 9. 9. 9. 9.","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 9 plus 11 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9+11+11=39"",
    resulting_state=(39,),
    comment='""8 plus 9 plus 11 plus 11""',
)

# ""8 times 9 is 9"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=9"",
    resulting_state=(11, 11, 9),
    comment='""8 times 9 is 9"" - calculation error',
    result_calc_error=True,
)

# ""8 minus 9 is 22"" seems to be another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8-9=22"",
    resulting_state=(11, 11, 22),
    comment='""8 minus 9 is 22"" - calculation error',
    result_calc_error=True,
)

# ""9 minus 11 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-11=2"",
    resulting_state=(2, 8, 11),
    comment='""9 minus 11 is 2""',
    result_calc_error=True,
)

# ""8 plus 9 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(11, 11, 17),
    comment='""8 plus 9 is 17""',
)

# ""plus 11. 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+11=28"",
    resulting_state=(11, 28),
    comment='""plus 11. 28""',
)

# ""9 plus 11 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(8, 11, 20),
    comment='""9 plus 11 is 20""',
)

# ""20 plus 11 would be 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+11=31"",
    resulting_state=(8, 31),
    comment='""20 plus 11 would be 31""',
)

# ""11 times 9... 99""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*9=99"",
    resulting_state=(8, 11, 99),
    comment='""11 times 9... 99""',
)

# ""9 minus 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 11, 11),
    comment='""9 minus 8 is 1""',
)

# ""Plus 11 plus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11+11=23"",
    resulting_state=(23,),
    comment='""Plus 11 plus 11""',
)

# ""8 plus 9... 17... Plus 11... 28... Minus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9+11-11=17"",
    resulting_state=(17,),
    comment='""8 plus 9... 17... Plus 11... 28... Minus 11""',
)

# ""9 plus 11 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(8, 11, 20),
    comment='""9 plus 11 is 20""',
)
```"
211,"[4,5,5,9]",,180," Target number 20, 25, 9, 9, 9 plus 5, 9 plus 5 is 14, plus 5 is 19, plus 4, 4 times 5 is 20, 5 plus 5 is 10. 10, 10, no. Delete, delete, delete, delete. Delete, delete, delete, delete, delete, delete, delete, 5 times 5. 9 plus 5 is 25 minus 4. No. 5. 5 times 9 is 45. 5 times 9 is 45. Still not the right number. 9. I beat you, Mama. I beat you. 5 times 5 is 25. Nope. Nope. 5 plus 5 is 10, plus 9. Nope. 9, 2, 20. 20. 25 minus 9. 5 times 5. 5 times 5. Nope. 5 times 5. 25 plus... No. No. plus 9, nope, nope, 9 plus 4 is 13, plus 5 is 18, I'm still not right, that's 23, 5 plus 5 is 10, plus 9, nope, 10, 10, 10, 10, 10, 10, my brain is not working now, my brain has stopped, my brain is no longer inspired, 4, 4 plus 9, 4 plus 5 is 9, plus 9 is 18, nope, I did that, I did that one already, 5 plus 5.","```python
start_state = (4, 5, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 5 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(4, 5, 14),
    comment='""9 plus 5 is 14""',
)

# ""plus 5 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+5=19"",
    resulting_state=(4, 19),
    comment='""plus 5 is 19""',
)

# ""4 times 5 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 9, 20),
    comment='""4 times 5 is 20""',
)

# ""5 plus 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(4, 9, 10),
    comment='""5 plus 5 is 10""',
)

# ""5 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 9, 25),
    comment='""5 times 5""',
)

# ""9 plus 5 is 25 minus 4"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5-4=25"",
    resulting_state=(5, 25),
    comment='""9 plus 5 is 25 minus 4""',
    result_calc_error=True,
)

# ""5 times 9 is 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=45"",
    resulting_state=(4, 5, 45),
    comment='""5 times 9 is 45""',
)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 9, 25),
    comment='""5 times 5 is 25""',
)

# ""5 plus 5 is 10, plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+9=24"",
    resulting_state=(4, 19),
    comment='""5 plus 5 is 10, plus 9""',
)

# ""9 plus 4 is 13, plus 5 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+4+5=18"",
    resulting_state=(5, 18),
    comment='""9 plus 4 is 13, plus 5 is 18""',
)

# ""4 plus 5 is 9, plus 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5+9=18"",
    resulting_state=(5, 18),
    comment='""4 plus 5 is 9, plus 9 is 18""',
)
```"
219,"[2,6,8,9]",,180," Okay, 24. I make 16. What's 16 plus 9? 25. So 2 times 6 would be 12. What's 12 plus 9? 21. 8 times 2, 16. 8 times 2, 16 plus 6. Maybe I want to get the 9 out of there. 9 minus 6 would be 3. 9 minus 6 would be 3, and then times 8. Oh, that does not work. I thought I had to figure it out. 9 minus... There wasn't a 2. Oh, okay. 8, 6, 4 times 8, maybe? That would be 32. I need to get that 9 out of there. 9 minus 2, 7. 7 times 6 divided by 8? No. 7 times 8 divided by 6? No, there's no way that's... Okay, no way it's a division. Could it be... 9 times 8? 9 times 8? 72 divided by 2? No. 9 times 6? 54 minus 16? Oh, my God. Okay. 8 times 6? Minus 18? I don't know. Dang. Yeah, I don't know.","```python
start_state = (2, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I make 16"" - participant likely multiplies 8*2
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(6, 9, 16),
    comment='""I make 16""',
)

# ""What's 16 plus 9? 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=25"",
    resulting_state=(6, 25),
    comment='""What\'s 16 plus 9? 25""',
)

# ""2 times 6 would be 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(8, 9, 12),
    comment='""2 times 6 would be 12""',
)

# ""What's 12 plus 9? 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 21),
    comment='""What\'s 12 plus 9? 21""',
)

# ""8 times 2, 16"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(6, 9, 16),
    comment='""8 times 2, 16""',
)

# ""16 plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(9, 22),
    comment='""16 plus 6""',
)

# ""9 minus 6 would be 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(2, 3, 8),
    comment='""9 minus 6 would be 3""',
)

# ""and then times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(2, 24),
    comment='""and then times 8""',
)

# ""9 minus 2, 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(6, 7, 8),
    comment='""9 minus 2, 7""',
)

# ""7 times 6 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6/8=5.25"",
    resulting_state=(5.25,),
    comment='""7 times 6 divided by 8""',
)

# ""7 times 8 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8/6=9.33"",
    resulting_state=(9.33,),
    comment='""7 times 8 divided by 6""',
)

# ""9 times 8? 72 divided by 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(2, 6, 72),
    comment='""9 times 8? 72""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/2=36"",
    resulting_state=(6, 36),
    comment='""72 divided by 2""',
)

# ""9 times 6? 54""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(2, 8, 54),
    comment='""9 times 6? 54""',
)

# ""8 times 6? 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(2, 9, 48),
    comment='""8 times 6?""',
)
```"
222,"[9,11,12,13]",13-9,180," 9, 11, 12, 13... Ummm... 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, um, 13 minus 9, 4, 4 times, oh my god, sorry, sorry, um, 9 minus 11, that'd be 2, times 12, that would be 24, but then I have 13, oh my gosh, 3, um, 13 minus, 13 minus 9, would be 4, oh my, that'd be 16, no, I could get 23, oh, 12 divided by 9, or 9, 12 divided by 9, or 9 divided by 12, wait, that would not work, um,","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# First the participant counts from 1 to 24, perhaps to help them think about the target

# ""13 minus 9, 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 11, 12),
    comment='""13 minus 9, 4""',
)

# ""9 minus 11, that'd be 2, times 12, that would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-9)*12=24"",
    resulting_state=(13, 24),
    comment='""9 minus 11, that\'d be 2, times 12, that would be 24""',
)

# ""13 minus 9, would be 4"" - participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 11, 12),
    comment='""13 minus 9, would be 4""',
)

# ""12 divided by 9, or 9 divided by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 11, 13),
    comment='""12 divided by 9""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/12=0.75"",
    resulting_state=(0.75, 11, 13),
    comment='""9 divided by 12""',
)
```"
223,"[7,8,8,12]",,180," Okay, 7, 8, 8, 8, 8 plus 12, 20, 28, 27, what would 8 times 8 be? 8 times 8 divided by 12, no, 8 times 8 divided by 7? No, uh, 16, 30, 20, 28 divided by 7, 4, okay, how can I get 24? Need to get rid of that 8, 12 minus 7. 5, 30, 30 minus 8, where's my, dang, that's not, 8 plus 7 maybe, 8 plus 7, 15 times 8 divided by 12, oh, no. 12 minus 7, how can, oh my gosh, this is hard, I don't know. Oh my gosh. Oh my gosh. Oh my gosh, I genuinely don't know. Four... Um, 12 minus 8 is 4? I don't even know. 4 times 8? No, that's 32. 32 minus 7, 25.","```python
start_state = (7, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 12, 20"" participant adds numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(7, 8, 20),
    comment='""8 plus 12, 20""',
)

# ""28, 27"" participant seems to add 8+20 but makes calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+8=28"",
    resulting_state=(7, 28),
    comment='""28""',
)

# ""what would 8 times 8 be?"" participant goes back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 12, 64),
    comment='""what would 8 times 8 be?""',
)

# ""8 times 8 divided by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/12=5.33"",
    resulting_state=(7, 5.33),
    comment='""8 times 8 divided by 12""',
)

# ""28 divided by 7, 4"" participant goes back to the state with 28
curr_state = graph.move_to_node((7, 28))
new_state = graph.explore_operation(
    curr_state,
    operation=""28/7=4"",
    resulting_state=(4,),
    comment='""28 divided by 7, 4""',
)

# ""12 minus 7. 5"" participant goes back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 8, 8),
    comment='""12 minus 7. 5""',
)

# ""8 plus 7, 15 times 8 divided by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+7)*8/12=10"",
    resulting_state=(10,),
    comment='""8 plus 7, 15 times 8 divided by 12""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 7, 8),
    comment='""12 minus 8 is 4""',
)

# ""4 times 8? No, that's 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(7, 32),
    comment='""4 times 8? No, that\'s 32""',
)

# ""32 minus 7, 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-7=25"",
    resulting_state=(25,),
    comment='""32 minus 7, 25""',
)
```"
225,"[4,5,5,8]",(4x8),180," So, let's see. If we sum up 4, 5, 5, and 8. So we have 5 and 5 is 10, plus 8 is 18. Let's see. 20. We get to 20 by going 4 times 5. Hmm. Let's see. That's not going to work because 5 plus 8 is too much. 5 times 5 is 25. Plus 4. Hmm. 5 times 8 is 25. 8. 40. Minus. 5 times 8 is 40 minus 4. Plus 4. Nope. That's not going to work either. 5 plus 8. 5 plus 8 is. So. 8. 4. Plus. 10. Oh, you know what? Let's try this. 24. Delete. We know that 3 times. 3 times 8 is 24. So let's do. 4. Plus. 5. Minus. 5. Times. 8. Is not the right answer. Hmm. 4 times 5 is 20. Plus. 5. No. 4 times 8. Plus.","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 and 5 is 10, plus 8 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+8=18"",
    resulting_state=(4, 18),
    comment='""5 and 5 is 10, plus 8 is 18""',
)

# ""4 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 8, 20),
    comment='""4 times 5""',
)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 8, 25),
    comment='""5 times 5 is 25""',
)

# ""Plus 4"" from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+4=29"",
    resulting_state=(8, 29),
    comment='""Plus 4""',
)

# ""5 times 8 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(4, 5, 40),
    comment='""5 times 8 is 40""',
)

# ""minus 4"" trying operations with 40
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-4=36"",
    resulting_state=(5, 36),
    comment='""minus 4""',
)

# ""We know that 3 times. 3 times 8 is 24"" participant seems to be setting a subgoal
curr_state = graph.move_to_node(start_state)
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""We know that 3 times. 3 times 8 is 24""',
)

# ""4. Plus. 5. Minus. 5. Times. 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+5-5)*8=32"",
    resulting_state=(32,),
    comment='""4. Plus. 5. Minus. 5. Times. 8""',
)

# ""4 times 5 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 8, 20),
    comment='""4 times 5 is 20""',
)

# ""Plus. 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+5=25"",
    resulting_state=(8, 25),
    comment='""Plus. 5""',
)

# ""4 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(5, 5, 32),
    comment='""4 times 8""',
)
```"
226,"[5,6,7,13]",(13-5)x,180," Let's see, 13 times 5. Let's do, if we do the big number, 13 times 7. Divided by 5, 5. Divided by 5 plus 6, which is 11. Let's see, that is not correct. Let's see, 13 times 7 times, no, 13. I can't do math. So 13 plus 5 plus 6 plus 7, not correct. Okay, 13 plus 7 is 20. No. 13 plus, 13 plus 5 is 8 plus 7 minus 6. I am not really sure. 13 plus 5, no, 13 plus 6, 13 plus 7 is 20. 13 plus 6. And then, that's 19 plus 7 minus 5. That's not correct. Hmm. Oh, maybe that's it. So let's see if we can make 13 minus 6. 13 minus 6 is, 6 minus 12 is 6. 13 minus 6 is 8. Try to make 8. 13 minus 5 times 6.","```python
start_state = (5, 6, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*5=65"",
    resulting_state=(6, 7, 65),
    comment='""13 times 5""',
)

# ""13 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(5, 6, 91),
    comment='""13 times 7""',
)

# ""Divided by 5 plus 6, which is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""91/5+6=24.2"",
    resulting_state=(24.2,),
    comment='""Divided by 5 plus 6, which is 11"" - though participant says 11, they seem to be trying to get to 24',
)

# ""13 plus 5 plus 6 plus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5+6+7=31"",
    resulting_state=(31,),
    comment='""13 plus 5 plus 6 plus 7""',
)

# ""13 plus 7 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(5, 6, 20),
    comment='""13 plus 7 is 20""',
)

# ""13 plus 5 is 8"" - this seems to be a transcription error or participant misspoke, they likely meant 13-5=8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(6, 7, 8),
    comment='""13 plus 5 is 8"" - this seems to be a transcription error, they likely meant 13-5=8',
)

# ""13 plus 6, 13 plus 7 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(5, 6, 20),
    comment='""13 plus 7 is 20""',
)

# ""13 plus 6... that's 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(5, 7, 19),
    comment='""13 plus 6... that\'s 19""',
)

# ""plus 7 minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+7-5=21"",
    resulting_state=(21,),
    comment='""plus 7 minus 5""',
)

# ""13 minus 6 is 8"" - participant miscalculates
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=8"",
    resulting_state=(5, 7, 8),
    comment='""13 minus 6 is 8"" - participant miscalculates',
    result_calc_error=True,
)

# ""13 minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(6, 7, 8),
    comment='""13 minus 5""',
)
```"
228,"[6,10,10,13]",10-6x,180," All right. Let's see. 6 plus 10 plus 10 plus 13 equal to 39. So what would we have to do to get to 2415? So 13 plus 10 is 20. Plus 13 is 33. Minus 6 is 27. So let me not correct. 10, 13, plus 6 has to equal 4. No. So 10 plus 13 is 23. 10 plus 13 is 23. Plus... 10 minus 13. 10 minus 13 is 3. Times... 10 minus 6. 10 minus 6. 10 minus 6 is 4. Times... 10... So 3... Oh. Nope.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 10 plus 10 plus 13 equal to 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10+10+13=39"",
    resulting_state=(39,),
    comment='""6 plus 10 plus 10 plus 13 equal to 39""',
)

# ""13 plus 10 is 20"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=20"",
    resulting_state=(6, 10, 20),
    comment='""13 plus 10 is 20"" - calculation error',
    result_calc_error=True,
)

# ""10 plus 13 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(6, 10, 23),
    comment='""10 plus 13 is 23""',
)

# ""10 minus 13 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-13=-3"",
    resulting_state=(6, 10, -3),
    comment='""10 minus 13 is 3"" - participant made calculation error',
    result_calc_error=True,
)

# ""10 minus 6 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 10, 13),
    comment='""10 minus 6 is 4""',
)
```"
232,"[6,8,8,10]",(10-8)+(6,180," 6, 8, 8, 10, I'm thinking. Oh my gosh, so 8 divided by 8 is 1. So 1 times 6 is 10. 1 times 6 is 6, plus 10. 1, 6. Wait a minute. Let's see, 6. 8 divided by 8. Let's see. 18, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20. 22. 23. 24. 24. 25. 26. 27. 28. 31. 32. 33. 34. 35. 36. 37. 38. 39. 40. 42. 43. 44. 46. 47. 48. 51. 52. 53.","```python
start_state = (6, 8, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 6, 8, 10),
    comment='""8 divided by 8 is 1""',
)

# ""1 times 6 is 6, plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*6+10=16"",
    resulting_state=(8, 16),
    comment='""1 times 6 is 6, plus 10""',
)

# The rest of the transcript appears to be the participant counting numbers, possibly trying to find combinations that would work, but not actually performing operations

# Based on their response ""(10-8)+(6"", they were trying to subtract 8 from 10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 6, 8),
    comment='Based on their response ""(10-8)+(6"", they were trying to subtract 8 from 10',
)
```"
235,"[7,9,13,13]",(13x9)/13+7,180," Target number 24. Okay, um, let's see. Ah, picking numbers. 13 times 9. No. Um, let's see. So if we need to get it down to 24, I'm thinking we're gonna probably need to multiply larger numbers. Um, gosh. That's hard without a calculator or scrap paper. Um, let's see. 13 times 13 is... I want to say it's 1. 169. So I'll type it here in case it's right as I work it out in my head, and if it's wrong, I'll delete it. Okay, so I have 169. What about 169 divided by 7? 24... No, it's not gonna work. It's gonna be a weird decimal number. Then 13 times 13. I believe I said it was 169. Divided by 9. That's right. That goes over there. I don't know. I don't think that would be a whole number either. So we're not gonna use 13 times 13. Um, 13 times... 13 times... 9, maybe? So 9 times 3. And then move that over. That is... It is 117. So 117 divided by 7 is... No, that'll be a weird number again. Um, 117 divided by 13. I think would be... 9. Okay, divided by 13. Then plus 7. That's a bit... Wrong! Ugh! Oh, that's right. Plus 7 is... A much smaller number. I'm so happy I wasn't making decimals anymore.","```python
start_state = (7, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9=117"",
    resulting_state=(7, 13, 117),
    comment='""13 times 9""',
)

# ""13 times 13 is... 169""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(7, 9, 169),
    comment='""13 times 13 is... 169""',
)

# ""169 divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169/7=24.14"",
    resulting_state=(9, 24.14),
    comment='""169 divided by 7""',
)

# ""169 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""169/9=18.78"",
    resulting_state=(7, 18.78),
    comment='""169 divided by 9""',
)

# Going back to try ""13 times 9"" again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9=117"",
    resulting_state=(7, 13, 117),
    comment='""13 times 9""',
)

# ""117 divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""117/7=16.71"",
    resulting_state=(13, 16.71),
    comment='""117 divided by 7""',
)

# ""117 divided by 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""117/13=9"",
    resulting_state=(7, 9),
    comment='""117 divided by 13""',
)

# ""Then plus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(16,),
    comment='""Then plus 7""',
)

# Based on their final response of (13x9)/13+7, they must have realized this was the right path
# but needed to rearrange the operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*9)/13+7=16"",
    resulting_state=(16,),
    comment=""Based on their final response, they found the correct sequence of operations"",
)
```"
237,"[1,6,8,13]",(1+13),180," I'm going to get to 24 again. I like that the number is always 24, but I haven't gotten any better at it. Um, okay. I guess I always want to multiply and divide because that just makes things easier. Um, okay. Start it off easy. 6 plus 8 is 14. Which gives us a nice big number, an even number. 6 plus 8 is 14. And then what's 14 plus 13? No, I need a plus 10. So that's not it. Um, alright. 6 Maybe 6 times 8, because what if I subtract the 13? Okay, 6 plus 6 is 36, plus another 12 for the other two is 48. Um, and then 48 minus 13 is still not going to be my number. Okay, not that. Um Shoot. Delete, delete, delete. Um, what about 6 plus 1 is 7. And then 7 times 13 will give us a pretty big number, right? And then if we divide it, let's see. 7 times 13, let's see. 14, 17, 18, 19, 20, 21. And then carry that over. Okay, so that's 91. And 91 divided by 8 is still going to be way too small to be a 24. So that's definitely not it. Um, ah. As you can see, math is not my strong point. Um. Maybe. Okay. 1 plus 13. That is 14. And what is 14 times 6? That is, that is. Okay. Let's move that over like that. I believe that is 84. And 84.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 8 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(1, 13, 14),
    comment='""6 plus 8 is 14""',
)

# ""And then what's 14 plus 13?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+13=27"",
    resulting_state=(1, 27),
    comment='""And then what\'s 14 plus 13?""',
)

# ""Maybe 6 times 8"" participant goes back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(1, 13, 48),
    comment='""Maybe 6 times 8""',
)

# ""48 minus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-13=35"",
    resulting_state=(1, 35),
    comment='""48 minus 13""',
)

# ""what about 6 plus 1 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(7, 8, 13),
    comment='""what about 6 plus 1 is 7""',
)

# ""And then 7 times 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13=91"",
    resulting_state=(8, 91),
    comment='""And then 7 times 13""',
)

# ""And 91 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""91/8=11.38"",
    resulting_state=(11.38,),
    comment='""And 91 divided by 8""',
)

# ""1 plus 13. That is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+13=14"",
    resulting_state=(6, 8, 14),
    comment='""1 plus 13. That is 14""',
)

# ""And what is 14 times 6? That is, that is. Okay. Let's move that over like that. I believe that is 84""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*6=84"",
    resulting_state=(8, 84),
    comment='""And what is 14 times 6? That is, that is. Okay. Let\'s move that over like that. I believe that is 84""',
)
```"
238,"[2,6,8,13]",(13-8),180," All right, target number 24 again. Um, okay, let's see. So we need to get two smaller numbers. Let's see, 13. We need 13 times which number? We'll do times 8. And that is, that is, let's see, 8 times 3, 16, 17, 18, 19, 20, 22, 24, 24. Let's bring the 2 over, and then add to that, so that would be 104. Okay, before I forget, we'll put it here. Okay, so 104. And then, what's maybe 104 divided by 6? That would be, that would be, division in my head is hard. Um, don't think it would be like, no, that would be a decimal or a fraction too, so I don't think that would be it. So then, what's that equal again? 13 times 8 was 104, I think I said. So then, what about 104 divided by 2? So that equals 24, and 0, and put it in half, it's 52. And then, what can we do to make this 52 smaller? Divided by 6 is not going to be 24, obviously. It's going to be a small number. But not, a whole number or integer like that. So we don't want 13 times 8. Um, maybe if we start subtracting things. 13 minus, oh, I need the parentheses. 13 minus 8. Oops. Minus 8. Um, 13. 13 minus 8 is something I should, I need to count them on my fingers for. Probably will. It equals 5. And 5 plus 6 is 11. So, nope, not that. Um, 5 times 6 is 30. And then, 30 divided by 2 is obviously not going to be a big enough number. It's only 15. So, that's not what we need either. Um. What about. Oops, delete, delete.","```python
start_state = (2, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*8=104"",
    resulting_state=(2, 6, 104),
    comment='""13 times 8""',
)

# ""104 divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""104/6=17.333"",
    resulting_state=(2, 17.33),
    comment='""104 divided by 6""',
)

# ""104 divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""104/2=52"",
    resulting_state=(6, 52),
    comment='""104 divided by 2""',
)

# The participant backtracks: ""13 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(2, 5, 6),
    comment='""13 minus 8""',
)

# ""5 plus 6 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(2, 11),
    comment='""5 plus 6 is 11""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(2, 30),
    comment='""5 times 6 is 30""',
)

# ""30 divided by 2 is obviously not going to be a big enough number. It's only 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30/2=15"",
    resulting_state=(15,),
    comment='""30 divided by 2 is obviously not going to be a big enough number. It\'s only 15""',
)
```"
241,"[3,5,10,10]",(,180," Okay, let me get to 24 again. Okay, we have a 3, we have a 5, we have a 10, we have another 10. Uh-oh. So 3 plus 5 is 8, plus 10 is 18. We can't do anything with that. 10 times 10 is 100, right? 10, 20, 30, 40, 50, 60. Yeah, of course it is. Okay, so 100... I need to type it before I forget what I was doing. 10 times 10 equals 100. And what can I do with this 100? Well, I could multiply that by 5 and that would give me... a big number. I mean, would it give me 500? Right? Yes, it would. And then 500 divided by 3 is going to be way too huge to be the answer. I don't know why I did that. Um, okay, what about 10 times 5? 10 times 5 is 10, 20, 30, 40, 50. Then we do... What about... 50. What if we multiply that by 3? That would be 150. And then I believe 150 divided by 10 is going to equal... It's only 15. Um... What else could we do? I guess we could... Did I already do 5 plus 10? Probably. That's okay. 5 plus 10 is 15. And when I do the 15 and I times it by 3, it's going to equal an odd number. So that's not right. It's 35. What about 10 divided by 2? I mean, 10 divided by 5 equals 2. Okay. So we have the number 2. Ah, that would be so close, but not quite. Because 2 times 10 is 20, plus 3 is only 23. So that's not right. It's not right at all. We're off by one number. Um...","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 plus 5 is 8, plus 10 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5+10=18"",
    resulting_state=(10, 18),
    comment='""3 plus 5 is 8, plus 10 is 18""',
)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(3, 5, 100),
    comment='""10 times 10 is 100""',
)

# ""multiply that by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""100*5=500"",
    resulting_state=(3, 500),
    comment='""multiply that by 5""',
)

# ""500 divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""500/3=166.67"",
    resulting_state=(166.67,),
    comment='""500 divided by 3""',
)

# Participant realizes this approach won't work and tries something new
curr_state = graph.move_to_node(start_state)

# ""10 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(3, 10, 50),
    comment='""10 times 5""',
)

# ""multiply that by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""50*3=150"",
    resulting_state=(10, 150),
    comment='""multiply that by 3""',
)

# ""150 divided by 10 is going to equal... It's only 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""150/10=15"",
    resulting_state=(15,),
    comment='""150 divided by 10 is going to equal... It\'s only 15""',
)

# ""5 plus 10 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+10=15"",
    resulting_state=(3, 10, 15),
    comment='""5 plus 10 is 15""',
)

# ""15 and I times it by 3, it's going to equal... It's 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*3=35"",
    resulting_state=(10, 35),
    comment='""15 and I times it by 3, it\'s going to equal... It\'s 35""',
    result_calc_error=True,
)

# ""10 divided by 5 equals 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 10),
    comment='""10 divided by 5 equals 2""',
)

# ""2 times 10 is 20, plus 3 is only 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10+3=23"",
    resulting_state=(23,),
    comment='""2 times 10 is 20, plus 3 is only 23""',
)
```"
243,"[3,7,7,9]",(7+7)x(9-,180," Okay, we have 3, 7, 7, and 9. So let's see, 7 is 14. Number 5 is 14 minus 9. 14 minus 9 is 13. 12, 11, 10, 9, 8, 7, 6, 5. 5 times 3 is only 15. So that's definitely not it. But 9 times 7 is 63. So if I use 63, or if I also, if I divide that by 3, is that going to be a whole number? 21 plus 7. No, that won't work. Um, what about 9 plus 7? 16 times 7 is 63. So we're going to add the 3. Put the 6 up there. And we have 112. 112 after multiplying that. And then if I divide that by 3, I don't think that's going to make a whole number at all. So, um, gosh, I write the, I wish I had pen and paper. Um, okay. So that's 10. And I guess, what was... 10 minus 7 is 3. 3 times 9 is 27. So I'm off my numbers again. Um, what about... Um... Hmm... Hmm... What is 7 over 2? No, don't, don't do that. Okay. 7 plus... Okay, 7... Plus... 7... Is 14. And... What if I do 9 minus...","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 is 14"" - participant is adding the two 7s
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(3, 9, 14),
    comment='""7 is 14"" - participant is adding the two 7s',
)

# ""14 minus 9 is 13"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-9=13"",
    resulting_state=(3, 13),
    comment='""14 minus 9 is 13"" - calculation error',
    result_calc_error=True,
)

# ""9 times 7 is 63""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 7, 63),
    comment='""9 times 7 is 63""',
)

# ""if I divide that by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63/3=21"",
    resulting_state=(7, 21),
    comment='""if I divide that by 3""',
)

# ""21 plus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+7=28"",
    resulting_state=(28,),
    comment='""21 plus 7""',
)

# ""9 plus 7? 16 times 7 is 63""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9+7)*7=112"",
    resulting_state=(3, 112),
    comment='""9 plus 7? 16 times 7 is 63"" - participant calculates (9+7)*7',
)

# ""And then if I divide that by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""112/3=37.33"",
    resulting_state=(37.33,),
    comment='""And then if I divide that by 3""',
)

# ""10 minus 7 is 3. 3 times 9 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(7, 7, 27),
    comment='""3 times 9 is 27""',
)

# ""7 plus... 7... Is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(3, 9, 14),
    comment='""7 plus... 7... Is 14""',
)

# ""What if I do 9 minus..."" - this appears to be the final operation they were trying when time ran out, matching their submitted response of ""(7+7)x(9-""

```"
244,"[4,5,6,10]",10/5,180," Target number 24. I have to use all the numbers. 6 times 4 would be 24. 6 times 4. I have to use all the numbers, okay. 5 plus 10 minus 4 times 6. 4 times 5 is 45. 45. 5. 16. 29. 25. 25. 25. 26 times 5 minus 4. Ah, silly. 10 times 4 minus 6. Divide by... 5... times 6 plus 10. Divide by number 4. Alright, so... 5 plus 4. 9. Times 6. Minus 10. Hmm. I don't know this one. Times 4 is 40. Minus 6 times... 5 times 6. Delete, delete, delete, delete, delete, delete. Uhhhhhhh. Umm, 5 div... Wait, sorry, let's do 10 divided by 5. 5. 5. 10. 10. 10 divided by 5","```python
start_state = (4, 5, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(5, 10, 24),
    comment='""6 times 4 would be 24""',
)

# ""5 plus 10 minus 4 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+10-4)*6=66"",
    resulting_state=(66,),
    comment='""5 plus 10 minus 4 times 6""',
)

# ""4 times 5 is 45"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=45"",
    resulting_state=(6, 10, 45),
    comment='""4 times 5 is 45"" - calculation error',
    result_calc_error=True,
)

# The numbers 16, 29, 25, 26 seem to be calculations but it's not clear what operations led to them

# ""10 times 4 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*4-6=34"",
    resulting_state=(5, 34),
    comment='""10 times 4 minus 6""',
)

# ""5 plus 4. 9. Times 6. Minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+4)*6-10=44"",
    resulting_state=(44,),
    comment='""5 plus 4. 9. Times 6. Minus 10""',
)

# ""Times 4 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*4=40"",
    resulting_state=(5, 6, 40),
    comment='""Times 4 is 40""',
)

# ""5 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(4, 10, 30),
    comment='""5 times 6""',
)

# ""10 divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 4, 6),
    comment='""10 divided by 5""',
)

```"
247,"[3,5,10,10]",5x,180," Yeah, yeah, um, okay, so 5, um, 6 times 3 is only going to give me 18, so that's 10 divided by 10, plus, but yeah, it's just, ugh, I mean, um, 3 times 5, 15, plus 10, divided by 10, that's 3 times 10, minus 10 divided by 5, okay, no, let me go, um, what can make 25? 24 here 10 divided by 10 10 divided by 10 plus 3 I don't know I don't know 5 times 3 3 is 15 10 divided by 5 10 divided by 5 is 2 And then 2 times times 10 plus 3 no these are hard um I'm trying to use the numbers twice but I can't hmmm 5 times 10 is 50 it's gonna be 30 10 divided by 3 10 divided by 3 is 3 10 divided by 3 it's supposed to be repeating which terms um 10 divided by 3 plus 10 plus 5 nope I don't know I don't know what I could do here 5 times","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 divided by 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 3, 5),
    comment='""10 divided by 10""',
)

# ""3 times 5, 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(10, 10, 15),
    comment='""3 times 5, 15""',
)

# ""plus 10, divided by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(15+10)/10=2.5"",
    resulting_state=(2.5,),
    comment='""plus 10, divided by 10""',
)

# ""3 times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(5, 10, 30),
    comment='""3 times 10""',
)

# ""10 divided by 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 10),
    comment='""10 divided by 5""',
)

# ""2 times times 10 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10+3=23"",
    resulting_state=(23,),
    comment='""2 times times 10 plus 3""',
)

# ""5 times 10 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(3, 10, 50),
    comment='""5 times 10 is 50""',
)

# ""10 divided by 3 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/3=3"",
    resulting_state=(3, 5, 10),
    result_calc_error=True,
    comment='""10 divided by 3 is 3"" - participant makes calculation error',
)

# ""10 divided by 3 plus 10 plus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/3+10+5=18.33"",
    resulting_state=(18.33,),
    comment='""10 divided by 3 plus 10 plus 5""',
)
```"
248,"[1,6,8,13]",13-6x8-1,204," 24, okay, so 8 plus 13 is 21. So, alright, so we'll do 6 times 1, no, 8, 8 plus 6 equals 14 plus 13 equals 27, so no. A 13 plus divided, I don't know, 6 times 8 is just a huge number, right, 48, 48 minus all this would be nothing. 13. 13 plus 1 plus 6 is only 20. 8 divided by 6, nope. 13 divided by 6, nope. 13 divided by 6 plus 8 plus 1. I don't know. How do you make that number? Hmm. 13 plus 6. Wait. Oh, that's a nice, um, it's a, uh, 1 plus 8? Yeah. 7 minus 1. 7 minus 1. No. Okay, hold on, hold on. So, if I do 13 plus 1 times 6 minus 8. Wait, that should work. 13. 13 plus 1 is 14. Oh, that's 28. I can't do math. 2. Ugh. If I could somehow make that a 3. 13 minus 6. 8 times 8 minus 1. Huh. 8 minus 6 plus 8 minus 1. That's like 14. 13 minus 8 is plus 6. I think 6 times 6 is 36. That doesn't work.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 13 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+13=21"",
    resulting_state=(1, 6, 21),
    comment='""8 plus 13 is 21""',
)

# ""8 plus 6 equals 14 plus 13 equals 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6+13=27"",
    resulting_state=(1, 27),
    comment='""8 plus 6 equals 14 plus 13 equals 27""',
)

# ""6 times 8 is just a huge number, right, 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(1, 13, 48),
    comment='""6 times 8 is just a huge number, right, 48""',
)

# ""13 plus 1 plus 6 is only 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1+6=20"",
    resulting_state=(8, 20),
    comment='""13 plus 1 plus 6 is only 20""',
)

# ""13 divided by 6 plus 8 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/6+8+1=11.17"",
    resulting_state=(11.17,),
    comment='""13 divided by 6 plus 8 plus 1""',
)

# ""13 plus 1 times 6 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+1)*6-8=76"",
    resulting_state=(76,),
    comment='""13 plus 1 times 6 minus 8""',
)

# ""13 minus 8 is plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8+6=11"",
    resulting_state=(1, 11),
    comment='""13 minus 8 is plus 6""',
)

# Based on their response ""13-6x8-1"", they must have eventually tried:
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6*8-1=-36"",
    resulting_state=(-36,),
    comment=""Based on their final response"",
)
```"
252,"[3,7,7,9]",9+3,180," Alright, 7 plus 7 is 14, plus 9. Okay, this one is going to be 9 plus 7, minus 3, plus 7. 7 times 3, plus 9? Okay. 21 plus 7, minus 9. No, wait, 9 divided by 3, plus 7. No. 9 divided by 3 is 3, times 7, this is going to be 21. 7 times 7 is turned, divided by 9. Alright, 7 times 7, divided by 3, you know. 10 plus 7, plus 9? 9 plus 3. 9 plus 3, plus 7? Plus 7. Yeah, something like that. Ah, I don't know this one! 9 times 3, plus 7, minus 7. 9 times 3 is 27, minus 7. Yeah. Yeah. Uh, 7 times 3 is 21. Plus 9. Minus 7 is 23. Um, no idea. You got me on this one, genuinely. I don't know. Um, 7 times 3 is 21. 7 times 9. Oh, wait, maybe not. Um, oh, wait. 7 minus 7. Uh, hold on. Ah, no, no, no. I got it. 7 minus 7. And then 9 times 3 is, no, 7 times 7. I have no idea. No idea. Nope. No clue. I don't know this one at all. Um, 9 plus 3.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14, plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+9=30"",
    resulting_state=(3, 30),
    result_calc_error=True,
    comment='""7 plus 7 is 14, plus 9""',
)

# ""9 plus 7, minus 3, plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7-3+7=20"",
    resulting_state=(20,),
    comment='""9 plus 7, minus 3, plus 7""',
)

# ""7 times 3, plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+9=30"",
    resulting_state=(7, 30),
    comment='""7 times 3, plus 9""',
)

# ""9 divided by 3, plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3+7=10"",
    resulting_state=(7, 10),
    comment='""9 divided by 3, plus 7""',
)

# ""9 divided by 3 is 3, times 7, this is going to be 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9/3)*7=21"",
    resulting_state=(7, 21),
    comment='""9 divided by 3 is 3, times 7, this is going to be 21""',
)

# ""7 times 7 is turned, divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*7)/9=5.44"",
    resulting_state=(3, 5.44),
    comment='""7 times 7 is turned, divided by 9""',
)

# ""7 times 7, divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*7)/3=16.33"",
    resulting_state=(9, 16.33),
    comment='""7 times 7, divided by 3""',
)

# ""9 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(7, 7, 12),
    comment='""9 plus 3""',
)

# ""9 plus 3, plus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(7, 19),
    comment='""9 plus 3, plus 7""',
)

# ""9 times 3, plus 7, minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3+7-7=27"",
    resulting_state=(27,),
    comment='""9 times 3, plus 7, minus 7""',
)

# ""7 times 3 is 21. Plus 9. Minus 7 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+9-7=23"",
    resulting_state=(23,),
    comment='""7 times 3 is 21. Plus 9. Minus 7 is 23""',
)

# ""7 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(3, 7, 63),
    comment='""7 times 9""',
)

# ""7 minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-7=0"",
    resulting_state=(0, 3, 9),
    comment='""7 minus 7""',
)

# The participant then says they have no idea and submits ""9 plus 3""
```"
257,"[3,3,9,9]",9+9+3+3,75," Okay, I used the numbers 3, 3, 9, and 9 to make 24. So if we're going, okay so we're going to divide. 9 by 3 is 3. 3 by 3 is 1. 9 minus 1 is 8. So we're going to go 9 minus, 9 minus 1 is going to be 8. Delete that. That's, we want to divide that. And that's not going to work. So we're going to go 9 divided by 3. 9 plus 9 is 18. I know, it's easy. 9 plus 9 plus 3. 9, 18, 21. Plus 3 is 24. Continue.","```python
start_state = (3, 3, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 3, 3, 9),
    comment='""9 by 3 is 3""',
)

# ""3 by 3 is 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 9),
    comment='""3 by 3 is 1""',
)

# ""9 minus 1 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(3, 8),
    comment='""9 minus 1 is 8""',
)

# ""Delete that"" suggests participant is starting over
curr_state = graph.move_to_node(start_state)

# ""9 plus 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(3, 3, 18),
    comment='""9 plus 9 is 18""',
)

# ""9 plus 9 plus 3. 9, 18, 21. Plus 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3+3=24"",
    resulting_state=(24,),
    comment='""9 plus 9 plus 3. 9, 18, 21. Plus 3 is 24""',
)
```"
258,"[4,4,5,10]",,180," Okay, I now need to use the numbers 4, and 5, 4, and 10. So, 5 plus 4 is 9, 10, 11, 12, 13, that's 13. I'm going to go 8, 8 times 8, 16, 24, 32, 40. 4 plus 4 is 8. 5 times 8 is 4. So, 5 times 8 is 42. So, we're going to go 5 times 4 plus 4, because 4 plus 4 is 8, 8, 16, 24, 32, 40. It doesn't seem like it's working, but I'm trying to follow it with the bracket, with the number. So, 4 plus 4 is 8, 8, 16, 24, 32, 40. That's, I don't think that's going to work. Nope, um, 9, 18, 27, 36. So, what if I go 4 times 4, 8, 12, 13? 16, what is 16 times 5? 4 times, 4 is 16. 4 times 4, times 5, divided by 10? No, okay, so. Um, 5, delete, 5 times, 4 plus 4, divided by 10? Okay, no, so that's not going to work. Let's see, 5 times, what if we did this? But that's, it doesn't make any sense to me. Okay, so, if we do, no, still not, and I don't understand why, so we'll go 10 times 4, 10 times 4 is 40, 40 minus 9, that doesn't work. So, 4 times 5, 4 times 4 is 16. 16, plus 10, that would only make 21. Okay, so we're going to go 10 times 5 is 50.","```python
start_state = (4, 4, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 4 is 9"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""5+4=9"",
    resulting_state=(4, 9, 10),
    comment='""5 plus 4 is 9""',
)

# ""4 plus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(5, 8, 10),
    comment='""4 plus 4 is 8""',
)

# ""5 times 8 is 42"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=42"",
    resulting_state=(10, 42),
    comment='""5 times 8 is 42"" - calculation error',
    result_calc_error=True,
)

# ""4 times 4, 8, 12, 13? 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 10, 16),
    comment='""4 times 4... 16""',
)

# ""what is 16 times 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16*5=80"",
    resulting_state=(10, 80),
    comment='""what is 16 times 5""',
)

# ""4 times 4, times 5, divided by 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*5/10=8"",
    resulting_state=(8,),
    comment='""4 times 4, times 5, divided by 10""',
)

# ""10 times 4 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*4=40"",
    resulting_state=(4, 5, 40),
    comment='""10 times 4 is 40""',
)

# ""4 times 4 is 16. 16, plus 10, that would only make 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+10=26"",
    resulting_state=(5, 26),
    comment='""4 times 4 is 16. 16, plus 10""',
)

# ""10 times 5 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(4, 4, 50),
    comment='""10 times 5 is 50""',
)
```"
269,"[6,7,12,12]",,180," Okay, 6 times 7 is 42 minus, well, 42, okay, so 12 plus 12 is 24, okay? 42 minus 24, I don't even know what that is mathematically, but let's just throw it in here and see. 6 times 7, okay, that's 42, minus 12 plus 12. Let's see if that does anything. 24. Okay, so 42 minus 24 is not 24, I guess, because 24 plus 24 is 48. I see. All right, well then, got me there. Okay, how about 7 plus, how about 12? Okay, 6 plus 7 is 24. Or no, 42. 42 minus 12 is 36. Right? 30, 42 minus 10 is 40, and then 40 minus 2 is 38. Maybe, I don't know. Okay. Minus 12. Plus 12. I don't know. That's not right. Okay. Plus 12. Wait, okay, I think I got this. Okay, because that's, oh, minus 12 plus 12. Is that right? I don't know what these equal. No, because that would be 0 plus 48. Minus 12. Um, no, I don't know. It's just 6 times 7 is easier, because it's, okay, what if I do addition? Okay. 7 plus 6 is, okay, 13. 13 plus 12 is 15. And then 15 plus 12, is that 24? Um, no, 12 plus 12 is 24. I got it. Um, yeah, I don't know. 12 plus, all right.","```python
start_state = (6, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 7 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(12, 12, 42),
    comment='""6 times 7 is 42""',
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(6, 7, 24),
    comment='""12 plus 12 is 24""',
)

# ""6 times 7, okay, that's 42, minus 12 plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(12, 12, 42),
    comment='""6 times 7, okay, that\'s 42, minus 12 plus 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-12+12=42"",
    resulting_state=(42,),
    comment='""6 times 7, okay, that\'s 42, minus 12 plus 12""',
)

# ""7 plus 6 is, okay, 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(12, 12, 13),
    comment='""7 plus 6 is, okay, 13""',
)

# ""13 plus 12 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12=15"",
    resulting_state=(12, 15),
    comment='""13 plus 12 is 15"" - participant makes calculation error',
    result_calc_error=True,
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(6, 7, 24),
    comment='""12 plus 12 is 24""',
)
```"
272,"[5,10,10,11]",(10-5)-(10,180," Okay, so we got 10 plus 10, that's 20. Uh, plus 11, that's 31. 31 minus 5 is, um, that's not 24. Is it? Uh, wait. Wait, let's just do 10 plus 11, that's 21. Uh, plus 10, that's 31 minus 5. I guess that's not, I already did that in my head and that didn't work. Okay. 10 divided by 10 is 1. No, that's not going to work. Okay, 11 times 5 is 55. Minus 10 is 45. Minus another 10 is 35. No. Okay, 11 plus 10 is 21, right? And then we add 10. No, I'm already, I already did that because of the 5. And then we, no, we add, um, add 10 minus 5. What's that equal? Uh, 21, no, that's not going to be right. 21 minus 10 times 5 is 5. Oh, 10, 10 minus, no, wait. 10 minus 5 is 6, right? Okay, 6 plus... plus 10 is 16 plus 11 is not 24. Ooh, this one, I don't think I'm going to get, uh, 11 plus 10 plus 10. What's that? 31. No, I keep doing this. Uh, 11 minus 10 is one. Um, no, that's not going to work either. I was going to plus five minus five. All right. Wait, 11. No, five times 10 is not, uh, 24. Great. Um, this one, 10 minus five. Oops. Um, minus minus, uh, 10.","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 10, that's 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 11, 20),
    comment='""10 plus 10, that\'s 20""',
)

# ""plus 11, that's 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+11=31"",
    resulting_state=(5, 31),
    comment='""plus 11, that\'s 31""',
)

# ""31 minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""31-5=26"",
    resulting_state=(26,),
    comment='""31 minus 5""',
)

# ""10 plus 11, that's 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(5, 10, 21),
    comment='""10 plus 11, that\'s 21""',
)

# ""plus 10, that's 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+10=31"",
    resulting_state=(5, 31),
    comment='""plus 10, that\'s 31""',
)

# ""10 divided by 10 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 5, 11),
    comment='""10 divided by 10 is 1""',
)

# ""11 times 5 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(10, 10, 55),
    comment='""11 times 5 is 55""',
)

# ""Minus 10 is 45""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""55-10=45"",
    resulting_state=(10, 45),
    comment='""Minus 10 is 45""',
)

# ""Minus another 10 is 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-10=35"",
    resulting_state=(35,),
    comment='""Minus another 10 is 35""',
)

# ""10 minus 5 is 6, right?"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=6"",
    resulting_state=(6, 10, 11),
    comment='""10 minus 5 is 6, right?"" - calculation error',
    result_calc_error=True,
)

# ""plus 10 is 16 plus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10+11=27"",
    resulting_state=(27,),
    comment='""plus 10 is 16 plus 11""',
)

# ""11 plus 10 plus 10. What's that? 31""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+10+10=31"",
    resulting_state=(5, 31),
    comment='""11 plus 10 plus 10. What\'s that? 31""',
)

# ""11 minus 10 is one""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-10=1"",
    resulting_state=(1, 5, 10),
    comment='""11 minus 10 is one""',
)

# ""10 minus five"" - this matches their final response
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 10, 11),
    comment='""10 minus five""',
)

# ""minus minus, uh, 10"" - participant ran out of time while typing this
```"
279,"[3,9,13,13]",13+,180," Um, I don't know, what the hell did that pop up, 3, 9, 13, 13, um, 13 times 39, 1, 1 times 9, 18 times, 1 times 9, 1 times 3, 9 divided by 3 is 3, 8 times 13, again it'll be 39, that's not helping me, um, 13, what about, 3rd parenthesis, 13 divided by, I know, 13, alright, 13, um, 13 times 9, no, that's not right, I don't, I know, he's pissed, he's outside, um, 13 plus 9, 21, plus 3 is 24, then I have 13, divide,","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 13, 13),
    comment='""9 divided by 3 is 3""',
)

# ""8 times 13, again it'll be 39"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(9, 13, 39),
    comment='""8 times 13, again it\'ll be 39"" seems to be a calculation error',
    result_calc_error=True,
)

# ""13 plus 9, 21, plus 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9+3=24"",
    resulting_state=(13, 24),
    comment='""13 plus 9, 21, plus 3 is 24"" - participant adds numbers but makes calculation error with 13+9',
    result_calc_error=True,
)
```"
284,"[1,5,5,10]",(10x5),180," Okay, so our number was 24, so it would be 5 times 5 is 5, 10, 15, 20, 25, minus 1 would be 24, but that won't be it. So we could do 5 times 5 is 25, minus 10, no, 10 times 5 is 50. Oh, okay, so it's 10 times 5, 10 times 5 divided by 5, 10 times 5 divided by 5, crap. Okay, I don't know how to do this in the order of operations. 10 times 5, 10 times 5 divided by 5. 10 times 5 divided by 5 plus, no, minus 1. Okay. So, 10 times 5 is 50, divided by 5 is 25, minus 1 is 27. No? Okay. 10 times 5, divided by 5, minus... 10 times 5, divided by 5, 10 times 5, which is divided by 50, is 25, minus 1 is 27. What?","```python
start_state = (1, 5, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 5, 10, 15, 20, 25"" - participant seems to be counting by 5s
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 10, 25),
    comment='""5 times 5 is 5, 10, 15, 20, 25""',
)

# ""minus 1 would be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-1=24"",
    resulting_state=(10, 24),
    comment='""minus 1 would be 24""',
)

# ""So we could do 5 times 5 is 25, minus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5-10=15"",
    resulting_state=(1, 15),
    comment='""So we could do 5 times 5 is 25, minus 10""',
)

# ""10 times 5 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(1, 5, 50),
    comment='""10 times 5 is 50""',
)

# ""10 times 5 divided by 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*5)/5=10"",
    resulting_state=(1, 10),
    comment='""10 times 5 divided by 5""',
)

# ""10 times 5 is 50, divided by 5 is 25, minus 1 is 27"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*5)/5-1=27"",
    resulting_state=(27,),
    comment='""10 times 5 is 50, divided by 5 is 25, minus 1 is 27"" - participant makes calculation error',
    result_calc_error=True,
)
```"
287,"[2,6,8,13]",(6/2)+8+13,128," Okay, um, no, let's see. 8 times 6, that's 54. 54 minus 13, 54 minus, that's 11. 11 times 2 is 22. Let's limit it. We could do 2, 4, 6, 8, 10, 12, 14, 16, 6, 7, 8. Um, 2, 4, 6, 8, 10, 12. 12 plus 13 is 25. No. We could do... 2 divided by 8 is 4. 4 plus 13 is 3. Okay, so, 2 goes into 6 three times. Okay. 2. So, 8. Divided by 2 is 3. Plus 6 plus 13. So, 2 plus 8 is 4. 10. 10. 10. 10. 10. 10. 10. 10. 10. 10. 10. 8 Plus 13. Right.","```python
start_state = (2, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 6, that's 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=54"",
    resulting_state=(2, 13, 54),
    comment='""8 times 6, that\'s 54""',
    result_calc_error=True
)

# ""54 minus 13, 54 minus, that's 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54-13=11"",
    resulting_state=(2, 11),
    comment='""54 minus 13, that\'s 11"" - participant made calculation error',
    result_calc_error=True,
)

# ""11 times 2 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(22,),
    comment='""11 times 2 is 22""',
)

# The participant then lists some numbers that don't seem to be operations

curr_state = graph.move_to_node(start_state)
# ""2 divided by 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2/8=4"",
    resulting_state=(4, 6, 13),
    comment='""2 divided by 8 is 4"" - calculation error',
    result_calc_error=True,
)

# ""4 plus 13 is 3"" seems to be a transcription error

curr_state = graph.move_to_node(start_state)
# ""2 goes into 6 three times""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/2=3"",
    resulting_state=(3, 8, 13),
    comment='""2 goes into 6 three times""',
)

# ""Plus 8 plus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+8+13=24"",
    resulting_state=(24,),
    comment='""Plus 8 plus 13""',
)
```"
289,"[3,7,7,9]",(7/7)+9+3,180," 7 times 7 is like 49, I think, 7 times 3, so 7 times 3 is 63, and then if you do 63, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, that would be 42, so that's not anywhere close. 9 times 3 is 3, 4, 5, 6, 7, 8, 9, 20, 21, 22, 23, 24, 25, 26, 27, contribution, 9 times 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 31, 32, 33, 31, 34, 34, 35, 36, 37, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 58, 55, 56, 67, 58, 59, 51, 52, 54, 55, 56, 57, 52, 53, 59, 53, 55, 56, 57, 56, 67, 57, 58, 58, 55, 56, 57, 58, 59, 51, 52, 53, 53, 58, 52, 55, 51,ca campus address, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, uh, 7, 9, 8, 9, 10, 11, 2, 5, no, um, um, we need to get the 9 down to 8, maybe, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 7 plus 3 is 10, 19, 20, 26, um, 3 times 7, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 29, 20, 27, 26, 25, 24, 23, I keep getting the 23, okay, that's, that's not it either, 27, 26, 27, 28, 29, 20, 21, um, it is like 7 divided by 7, it will be 1, oh, 27 divided by 7, 27 plus,ヽ ヰヾ 9 plus 7, Sí with a 2 2 3","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is like 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7 is like 49""',
)

# ""7 times 3 is 63"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=63"",
    resulting_state=(7, 9, 63),
    comment='""7 times 3 is 63""',
    result_calc_error=True,
)

# ""9 times 3"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""9 times 3""',
)

# A lot of counting and numbers that don't seem to represent operations

# ""7 plus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(7, 9, 10),
    comment='""7 plus 3 is 10""',
)

# ""3 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 9, 21),
    comment='""3 times 7""',
)

# ""7 divided by 7, it will be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 3, 9),
    comment='""7 divided by 7, it will be 1""',
)

# Based on their response (7/7)+9+3, they must have then added 9 and 3 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+9+3=13"",
    resulting_state=(13,),
    comment=""Based on their response, they tried adding 9 and 3 to 1"",
)

```"
299,"[7,8,8,11]",8x(11-7)-8,84," And let's see, that's 1. I could do 1. 24 minus 11 is 23. That one's so freaking hard. You ready to go pick up lunch, Nina? Zero. No. 1 times 8. 11 minus 7 is 4. 11 minus 7 is 4. 4 times 8 is 3. Why are you looking at me like that? Okay. 11 minus 7 is 4. Times 8 is 32. Minus 8. Alright, so we need to do 8 parentheses. Times 11 minus 7. Close parentheses minus 8. How is that invalid? 11 times... Times parentheses 11. Minus 7 parentheses minus 8.","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 11 is 23"" - participant seems to be working backward from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 11 is 23"" - participant seems to be working backward from 24',
)

# ""11 minus 7 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 8, 8),
    comment='""11 minus 7 is 4""',
)

# ""4 times 8 is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(8, 32),
    comment='""4 times 8 is 32""',
)

# ""Minus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-8=24"",
    resulting_state=(24,),
    comment='""Minus 8""',
)

# The participant then repeats their solution as they write it down: ""8 parentheses times 11 minus 7 close parentheses minus 8""
```"
300,"[4,4,5,10]",(10x4)x4/5,180," 4 times 4 is 16. 16 plus 5 is 21. 10 divided by 5 is 2. 2 times 4 is 8. That's not right. 10, 5, no, 5 plus 16 wouldn't be right. 1, oh, I know what it is. It's going to be, no, that's not right. It's going to be, so 10 times 2. But how do I do that? I can't do it. 5 minus 4 is 1. 1 times 10, that's not going to work. 4 times 5 is 20. This is another impossible one. Let's see. 10 times 4 is 40. What would 24 times 5 be? 24 times 5 would be 120. 20, so can I get to 120? 4, 40, oh, yeah, I can. Hold on. 4 times, divided by, 4, wait, how did I get to 120? 4 times 6, so 10 minus 4, and then you divide by 5. How is that not right? 6 times, oh, wait, no, no, no, I got it. So I should have said 10 times 4, close parentheses, divided by 5. 4? Okay. So we're going to say, parentheses, 10 times 4 is 40, times 4, 4, divided by 5, that's not right. 20,","```python
start_state = (4, 4, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 10, 16),
    comment='""4 times 4 is 16""',
)

# ""16 plus 5 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+5=21"",
    resulting_state=(10, 21),
    comment='""16 plus 5 is 21""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 4, 4),
    comment='""10 divided by 5 is 2""',
)

# ""2 times 4 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(4, 8),
    comment='""2 times 4 is 8""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""5 minus 4 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 4, 10),
    comment='""5 minus 4 is 1""',
)

# ""1 times 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*10=10"",
    resulting_state=(4, 10),
    comment='""1 times 10""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""4 times 5 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(4, 10, 20),
    comment='""4 times 5 is 20""',
)

# ""10 times 4 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*4=40"",
    resulting_state=(4, 5, 40),
    comment='""10 times 4 is 40""',
)

# The participant then talks about ""24 times 5 would be 120"" which seems to be working backwards from the goal
graph.set_subgoal(
    (24, 5),
    state_after_subgoal=(120,),
    comment='""24 times 5 would be 120""',
)

# Finally, the participant arrives at ""(10x4)x4/5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*4=40"",
    resulting_state=(4, 5, 40),
    comment='""parentheses, 10 times 4 is 40""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40*4/5=32"",
    resulting_state=(32,),
    comment='""times 4, divided by 5""',
)
```"
301,"[2,4,6,9]",4x(9-6)x2,93," All right. 2 times 9 is 28. Okay. 2 times 9 plus 4 plus 6. Wait. 2 times 18. How is that not right? 10, 11. That's not right. 7 times 4 is 27 minus 6. That's not right. I want to say 9 times 8 is 18, but that 4 is extra. 9 plus 6 minus 2 is 4. No. 6 minus 2 is 4. 4 and 4 is 18, 17. 9 minus 6 is 3. 3 times 6. 3 times 4. Oh. Times 4 times 2. But you've got to do it in a certain way. So we're going to say 4 times 3. So 4 times parentheses 9 minus 6, close parentheses, times 2.","```python
start_state = (2, 4, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 9 is 28"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=28"",
    resulting_state=(4, 6, 28),
    comment='""2 times 9 is 28"" - calculation error',
    result_calc_error=True,
)

# ""2 times 9 plus 4 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9+4+6=28"",
    resulting_state=(28,),
    comment='""2 times 9 plus 4 plus 6""',
)

# ""6 minus 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-2=4"",
    resulting_state=(4, 4, 9),
    comment='""6 minus 2 is 4""',
)

# ""9 minus 6 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(2, 3, 4),
    comment='""9 minus 6 is 3""',
)

# ""3 times 4 times 2"" - this is the solution they eventually submit
new_state = graph.explore_operation(
    curr_state,
    operation=""4*(9-6)*2=24"",
    resulting_state=(24,),
    comment='""4 times parentheses 9 minus 6, close parentheses, times 2""',
)
```"
303,"[5,8,9,11]",(8-,180," 9 is 22, 9 plus 11 is 20, plus 5 would be 25, 5 times 8 is 35, 40, 5 times 8 is 40, minus 9 is 31, 59, no I can't do that, 55, so 5 times 11 is 55, minus, no I can't divide those, no I can't do that. 8 times 9. So 5 times 9, I keep forgetting the parenthesis. 9 minus 11 is 2. 9 minus 11 is 2. 3, so 3 would be 27. Well, alright. 9 minus 11 is 2. 9 minus 11 is 2. 2 times 8 is 16, plus 5, 23. 8 minus 11 is 3. Oh, do that. 8 minus...","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 11 is 20"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(5, 8, 20),
    comment='""9 plus 11 is 20""',
)

# ""plus 5 would be 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+5=25"",
    resulting_state=(8, 25),
    comment='""plus 5 would be 25""',
)

# ""5 times 8 is 35, 40"" participant corrects calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(9, 11, 40),
    comment='""5 times 8 is 40""',
)

# ""minus 9 is 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-9=31"",
    resulting_state=(11, 31),
    comment='""minus 9 is 31""',
)

# ""5 times 11 is 55""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*11=55"",
    resulting_state=(8, 9, 55),
    comment='""5 times 11 is 55""',
)

# ""9 minus 11 is 2"" (participant makes calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-11=2"",
    resulting_state=(2, 5, 8),
    comment='""9 minus 11 is 2"" (participant makes calculation error)',
    result_calc_error=True,
)

# ""2 times 8 is 16, plus 5, 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8+5=23"",
    resulting_state=(23,),
    comment='""2 times 8 is 16, plus 5, 23""',
    result_calc_error=True,
)

# ""8 minus 11 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-11=3"",
    resulting_state=(3, 5, 9),
    comment='""8 minus 11 is 3""',
    result_calc_error=True,
)

```"
308,"[1,4,5,6]",,180," All right, we have 5 times 6 is 30, minus 4 is 26, minus 1 is 25, 5 times 4 is 20, 6 minus 1 is 5, so it's 25. 6 plus 4 is 10, plus 6 is 16, 5 plus 1 is 6, 6 times 6 is 36 can't do anything there. 5 times 5 is 25, no. 6 times 24 is, or 6 times 4 is 24, let me figure that out, 6 times 5 is 20, there's 30, 30, 5, 6 plus 1 is 7, that's 35, let me do that, 6, 1 plus 6 is 7, 7 times 4, 28, minus 5 is 23, right, yeah, 28 minus 5 is 23,","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 6 is 30, minus 4 is 26, minus 1 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6-4-1=25"",
    resulting_state=(25,),
    comment='""5 times 6 is 30, minus 4 is 26, minus 1 is 25""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 6, 20),
    comment='""5 times 4 is 20""',
)

# ""6 minus 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(4, 5, 5),
    comment='""6 minus 1 is 5""',
)

# ""6 plus 4 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+4=10"",
    resulting_state=(1, 5, 10),
    comment='""6 plus 4 is 10""',
)

# ""5 plus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(4, 6, 6),
    comment='""5 plus 1 is 6""',
)

# ""6 times 6 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(4, 36),
    comment='""6 times 6 is 36""',
)

# Move back to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 5, 24),
    comment='""6 times 4 is 24""',
)

# ""6 times 5 is 20"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=20"",
    resulting_state=(1, 4, 20),
    comment='""6 times 5 is 20"" - this is a calculation error',
    result_calc_error=True,
)

# ""6 plus 1 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(4, 5, 7),
    comment='""6 plus 1 is 7""',
)

# ""7 times 4, 28, minus 5 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4-5=23"",
    resulting_state=(23,),
    comment='""7 times 4, 28, minus 5 is 23""',
)
```"
310,"[7,10,11,13]",,180," 7 times 10...70... L minus 11, that's no, can't do that. 10 plus 11, 22 minus 13, no. 11 plus, er, 11 times... 13 divided by 10 plus 7... divided by 7 plus 10... heh. 11 times 11 is 122... 133... 144... Can you divide that by 7? Minus, did I do this? Yes. Plus 10... 144 divided by that... Is that not, no, that's not it. Um... 7 plus 10... 17... 13... 30... You add 13 minus 11... 7 plus 13 is 20... So 11 is 31 minus 10... 7 times 11 is 77... Okay, anywhere... 7 times 13... 70... 91... Can't divide that by that much... 11... 2...","```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 10...70""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(11, 13, 70),
    comment='""7 times 10...70""',
)

# ""minus 11"" from 70
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70-11=59"",
    resulting_state=(13, 59),
    comment='""minus 11""',
)

# ""10 plus 11, 22 minus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(7, 13, 21),
    comment='""10 plus 11, 22"" - participant miscalculates',
    result_calc_error=True,
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21-13=8"",
    resulting_state=(7, 8),
    comment='""minus 13""',
)

# ""13 divided by 10 plus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13/10+7=8.3"",
    resulting_state=(8.3, 11),
    comment='""13 divided by 10 plus 7""',
)

# ""11 times 11 is 122... 133... 144"" participant seems confused about multiplication
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=144"",
    resulting_state=(7, 10, 13, 144),
    comment='""11 times 11 is 122... 133... 144"" participant seems confused about multiplication',
    result_calc_error=True,
)

# ""7 plus 10... 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(11, 13, 17),
    comment='""7 plus 10... 17""',
)

# ""7 plus 13 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(10, 11, 20),
    comment='""7 plus 13 is 20""',
)

# ""7 times 11 is 77""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*11=77"",
    resulting_state=(10, 13, 77),
    comment='""7 times 11 is 77""',
)

# ""7 times 13... 70... 91""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13=91"",
    resulting_state=(10, 11, 91),
    comment='""7 times 13... 70... 91""',
)

```"
312,"[1,6,12,13]",,180," Okay, 13, 12. 13 plus 12. 13 plus 12. 13 plus 12 is 25. 13 times 6. 13 times 6. 13 times 6. What is 13 times 6? 13 times 6. 13 times 6 is 78 divided by 12. Is 6 and a half. 13, 12. 12, 6, and 1. 12 times 6. 12 times 6. 12 times 6 is 72 divided by 13 is 5.5. 13 plus 6. 2 plus 5. 13 plus 6. 16 TH also. 13 plus 6. 12 plus 6 is 18. 14. 14. 13 plus 6 13 plus 6 is 19 how do I get 24 here? how do I get 24? 24 6 times 6 times 1 is 6 13 minus 1 13 13 13 times 12 13 times 12 equals 156 156 divided by 6 clear","```python
start_state = (1, 6, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 12 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12=25"",
    resulting_state=(1, 6, 25),
    comment='""13 plus 12 is 25""',
)

# ""13 times 6 is 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(1, 12, 78),
    comment='""13 times 6 is 78""',
)

# ""divided by 12. Is 6 and a half""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""78/12=6.5"",
    resulting_state=(1, 6.5),
    comment='""divided by 12. Is 6 and a half""',
)

# ""12 times 6 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(1, 13, 72),
    comment='""12 times 6 is 72""',
)

# ""divided by 13 is 5.5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/13=5.5"",
    resulting_state=(1, 5.54),
    comment='""divided by 13 is 5.5""',
)

# ""13 plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(1, 12, 19),
    comment='""13 plus 6 is 19""',
)

# ""12 plus 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(1, 13, 18),
    comment='""12 plus 6 is 18""',
)

# ""6 times 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1=6"",
    resulting_state=(6, 12, 13),
    comment='""6 times 1 is 6""',
)

# ""13 times 12 equals 156""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*12=156"",
    resulting_state=(1, 6, 156),
    comment='""13 times 12 equals 156""',
)

# ""156 divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""156/6=26"",
    resulting_state=(1, 26),
    comment='""156 divided by 6""',
)
```"
313,"[6,7,8,10]",(6x7)-8-10,163," 10, 8, 18, 18, 18 plus 6, 18 plus 7 is 25, 7 plus 8 is 15, plus 10 is 25, minus 6, 6 times 7 is 42, 6 times 7 is 42, 6 times 7 is 42, minus 10, minus 10, is 32, minus 8, so how did I get that? 10 plus 8, 10 plus 8 is 16, 10 plus 8 is 16, 10 plus 8 equals 18, 18 plus 7 equals 25, minus 6 or 19. okay six six times seven is 42 six times seven is 42 six times seven it's 42 minus ten minus eight six times seven minus eight minus ten","```python
start_state = (6, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10, 8, 18"" seems to be adding 10+8
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(6, 7, 18),
    comment='""10, 8, 18"" seems to be adding 10+8',
)

# ""18 plus 7 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(6, 25),
    comment='""18 plus 7 is 25""',
)

# Going back to start state for ""7 plus 8 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(6, 10, 15),
    comment='""7 plus 8 is 15""',
)

# ""plus 10 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+10=25"",
    resulting_state=(6, 25),
    comment='""plus 10 is 25""',
)

# ""minus 6"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-6=19"",
    resulting_state=(19,),
    comment='""minus 6""',
)

# Going back to start state for ""6 times 7 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(8, 10, 42),
    comment='""6 times 7 is 42""',
)

# ""minus 10, is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-10=32"",
    resulting_state=(8, 32),
    comment='""minus 10, is 32""',
)

# ""minus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-8=24"",
    resulting_state=(24,),
    comment='""minus 8""',
)

# The participant then rechecks some previous calculations:
# ""10 plus 8 is 16"" (with calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=16"",
    resulting_state=(6, 7, 16),
    comment='""10 plus 8 is 16""',
    result_calc_error=True,
)

# ""10 plus 8 equals 18, 18 plus 7 equals 25, minus 6 or 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8+7-6=19"",
    resulting_state=(19,),
    comment='""10 plus 8 equals 18, 18 plus 7 equals 25, minus 6 or 19""',
)

# Finally, the participant settles on their original solution:
# ""six times seven minus eight minus ten""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7-8-10=24"",
    resulting_state=(24,),
    comment='""six times seven minus eight minus ten""',
)
```"
315,"[8,9,12,13]",(12+8)+13-9,161," 8, 9, 12, 13. 8 times 9 is 56. 8 times 9, 8 times 9, 8 times 9 is 72. Minus 12, minus 13, which is 7. 12 times 8. 12 times 8. 12 times 8. 12 times 8 is 96. Divided by 9. 10. Plus 13. 12 plus 9 is 21. 21. 12 plus 9. 12 plus 9 is 21. Plus 13. Minus 8. Plus 8. 26. 26. 12 plus 8 is 20. 12 plus 8 is 20. 20. Plus 13. Plus 13. Plus 13. 33. fidelity 3. Minus 9. Minus 9. 12 plus 8. Minus 8. Minus 9. Minus 8. Minus 8. plus 8. 13 minus 9.","```python
start_state = (8, 9, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 9 is 56"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=56"",
    resulting_state=(12, 13, 56),
    comment='""8 times 9 is 56"" - calculation error',
    result_calc_error=True,
)

# ""8 times 9 is 72"" - participant corrects calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(12, 13, 72),
    comment='""8 times 9 is 72""',
)

# ""Minus 12, minus 13, which is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72-12-13=47"",
    resulting_state=(47,),
    comment='""Minus 12, minus 13""',
)

# ""12 times 8 is 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(9, 13, 96),
    comment='""12 times 8 is 96""',
)

# ""Divided by 9. 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/9=10"",
    resulting_state=(10, 13),
    comment='""Divided by 9. 10""',
    result_calc_error=True,
)

# ""Plus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(23,),
    comment='""Plus 13""',
)

# ""12 plus 9 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 13, 21),
    comment='""12 plus 9 is 21""',
)

# ""Plus 13. Minus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+13-8=26"",
    resulting_state=(26,),
    comment='""Plus 13. Minus 8""',
)

# ""12 plus 8 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(9, 13, 20),
    comment='""12 plus 8 is 20""',
)

# ""Plus 13. 33""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+13=33"",
    resulting_state=(9, 33),
    comment='""Plus 13. 33""',
)

# ""Minus 9"" - this leads to 24 and is the solution they submitted
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-9=24"",
    resulting_state=(24,),
    comment='""Minus 9"" - this leads to 24 and is the solution they submitted',
)

```"
317,"[5,5,10,10]",,180," 10, 10 10 plus 10 is 20 plus 5, 25 10 times 10 is 100 100 divided by 5 25, 24, 5 plus 10 is 15, 5 plus 10 is 15, 15 times 5, 75 5 plus 10 times 5 is 50 minus 10, 10 times 5 is 50, minus 10 times 5 is 50, minus 10 is 40 5 times 5 5 5 10 10 10 times 5, 10 plus 5 is 15 plus 10 is 25 10 plus 5 is 15 plus 10 is 25 minus 5 is 20 5 times 5 divided by 5 divided by 10 10 divided by 5 is 5 10 divided by 5 10 divided by 5 is 5 times 10 is 50 divided by","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 10 is 20 plus 5, 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+5=25"",
    resulting_state=(5, 25),
    comment='""10 plus 10 is 20 plus 5, 25""',
)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 5, 100),
    comment='""10 times 10 is 100""',
)

# ""100 divided by 5 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""100/5=25"",
    resulting_state=(5, 25),
    comment='""100 divided by 5 25""',
    result_calc_error=True,
)

# ""5 plus 10 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+10=15"",
    resulting_state=(5, 10, 15),
    comment='""5 plus 10 is 15""',
)

# ""15 times 5, 75""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*5=75"",
    resulting_state=(10, 75),
    comment='""15 times 5, 75""',
)

# ""5 plus 10 times 5 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+10)*5=75"",
    resulting_state=(10, 75),
    comment='""5 plus 10 times 5 is 50"" - participant likely meant 75',
)

# ""minus 10 times 5 is 50, minus 10 is 40""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""75-10=65"",
    resulting_state=(65,),
    comment='""minus 10 is 40"" - participant seems to have made a calculation error',
    result_calc_error=True,
)

# ""5 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(10, 10, 25),
    comment='""5 times 5""',
)

# ""10 plus 5 is 15 plus 10 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5+10=25"",
    resulting_state=(5, 25),
    comment='""10 plus 5 is 15 plus 10 is 25""',
)

# ""minus 5 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-5=20"",
    resulting_state=(20,),
    comment='""minus 5 is 20""',
)

# ""10 divided by 5 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 10),
    comment='""10 divided by 5 is 5"" - participant made calculation error',
    result_calc_error=True,
)

# ""times 10 is 50""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(5, 20),
    comment='""times 10 is 50"" - participant made calculation error',
    result_calc_error=True,
)

```"
321,"[2,3,13,13]",(13-,180," Okay, so, um, okay, 13 plus 13 is 26. That's too, too much. Probably I need to do 12 times 2, but that's not going to work. Oh my god, that one's hard. So 2 times 3 is 6. Shoot. I don't even know how I'm going to get this to work. What's, uh, 13 times 3? What's 13 times 3? Shoot. Divided by 2? 13 times 3 divided by 2, is that 24? God, 13 times 3 is 39. No. Mmm. Plus 13? 52? Shoot. I don't even know. Dang it. 13 times 2 is 26. Mmm. Minus 3? No. This is too hard. Um, what's 3 minus 2? Is it 1? Mm-mm. Mm-mm. Um, 13 minus 13? Nope. 13 minus 3 is 10. That's not going to work. Mark 10 plus 13. Can you use the numbers more than once? 13 plus 3. 13 plus 3, what are we at? We're at 16. 16 times 2, 32. 32 minus 13? No. Oh my god. I don't know how to do this one. Um, what's 13 plus 13? 26 divided by 2? 13. 13 minus 2 is 11. 11 minus 2 is 11. 11. Okay. I don't know. 13 minus... Okay.","```python
start_state = (2, 3, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(2, 3, 26),
    comment='""13 plus 13 is 26""',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 13, 13),
    comment='""2 times 3 is 6""',
)

# ""13 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(2, 13, 39),
    comment='""13 times 3""',
)

# ""Plus 13? 52?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39+13=52"",
    resulting_state=(2, 52),
    comment='""Plus 13? 52?""',
)

# ""13 times 2 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(3, 13, 26),
    comment='""13 times 2 is 26""',
)

# ""Minus 3?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-3=23"",
    resulting_state=(13, 23),
    comment='""Minus 3?""',
)

# ""3 minus 2? Is it 1?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-2=1"",
    resulting_state=(1, 13, 13),
    comment='""3 minus 2? Is it 1?""',
)

# ""13 minus 13?""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-13=0"",
    resulting_state=(0, 2, 3),
    comment='""13 minus 13?""',
)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(2, 10, 13),
    comment='""13 minus 3 is 10""',
)

# ""13 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(2, 13, 16),
    comment='""13 plus 3""',
)

# ""16 times 2, 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16*2=32"",
    resulting_state=(13, 32),
    comment='""16 times 2, 32""',
)

# ""32 minus 13?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-13=19"",
    resulting_state=(19,),
    comment='""32 minus 13?""',
)

# ""13 plus 13? 26 divided by 2? 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+13)/2=13"",
    resulting_state=(2, 3, 13),
    comment='""13 plus 13? 26 divided by 2? 13""',
)

# ""13 minus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(3, 11, 13),
    comment='""13 minus 2 is 11""',
)

```"
322,"[3,5,7,10]",(,180," Okay, 3 times 7 is 21. Okay, 5 times 7 is 35. 35 minus 10 is 25. 25 minus 3, that doesn't work. 7 minus 10 is 3. 3 times 3 is 9. It's not going to work. Oh my god. What's 24 times 3? 72? 24 times 3 is 72. So, 7 times 10 is 70 divided by 3. 70 divided by 5? What's 70 divided by 5? 14 plus 3. There's no way to get to 24. This is fucking irritating. I don't know. Can you use numbers more than once? I don't know. 10 plus... No, you can't. You cannot. 10 plus 5 is 15. 10 plus 5 is 15. Plus 7 is 22. Plus 3 is 25. So, that's not going to work. None of these work out. These are not easy. Okay, so 7 times 3 is 21. 5 times 10 is 50. I'm just going to do that. 5 times 10. No. 3 times 10 is 30. 3 times 10. Okay, 30. So, 30. 30 divided by 5 is 6 plus 7 is 13. Yeah, this isn't working. This is not working. 5 times 3. 3 plus 7 is 22. 2. Nope. 10 divided by 5. 5 times 10 is 6 plus 7 is 5.","```python
start_state = (3, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(5, 10, 21),
    comment='""3 times 7 is 21""',
)

# ""5 times 7 is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(3, 10, 35),
    comment='""5 times 7 is 35""',
)

# ""35 minus 10 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-10=25"",
    resulting_state=(3, 25),
    comment='""35 minus 10 is 25""',
)

# ""25 minus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-3=22"",
    resulting_state=(22,),
    comment='""25 minus 3""',
)

# ""7 minus 10 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 3, 5),
    comment='""7 minus 10 is 3""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(5, 9),
    comment='""3 times 3 is 9""',
)

# ""7 times 10 is 70 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10/3=23.33"",
    resulting_state=(5, 23.33),
    comment='""7 times 10 is 70 divided by 3""',
)

# ""70 divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10/5=14"",
    resulting_state=(3, 14),
    comment='""70 divided by 5""',
)

# ""10 plus 5 is 15. Plus 7 is 22. Plus 3 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5+7+3=25"",
    resulting_state=(25,),
    comment='""10 plus 5 is 15. Plus 7 is 22. Plus 3 is 25""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(5, 10, 21),
    comment='""7 times 3 is 21""',
)

# ""5 times 10 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(3, 7, 50),
    comment='""5 times 10 is 50""',
)

# ""3 times 10 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(5, 7, 30),
    comment='""3 times 10 is 30""',
)

# ""30 divided by 5 is 6 plus 7 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30/5+7=13"",
    resulting_state=(13,),
    comment='""30 divided by 5 is 6 plus 7 is 13""',
)

# ""3 plus 7 is 22"" seems to be a transcription error since 3+7=10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7=10"",
    resulting_state=(5, 10, 10),
    comment='""3 plus 7""',
)

# ""10 divided by 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 7),
    comment='""10 divided by 5""',
)

```"
323,"[1,2,2,6]",(2+2)x6x1,33," Okay, so this is an easier one. 6 times 1, 6 times 4, is that 24? Yeah, so 2 plus 2, 2 plus 2, times 6, 6 times 1.","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 1"" - participant starts exploring
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1=6"",
    resulting_state=(2, 2, 6),
    comment='""6 times 1""',
)

# ""6 times 4"" - participant seems to be setting a subgoal, realizing they need to get to 4 to multiply by 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4, is that 24?""',
)

# ""2 plus 2"" - participant adds the 2s to get to 4
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(1, 4, 6),
    comment='""2 plus 2""',
)

# ""times 6, 6 times 1"" - participant multiplies by 6 and 1 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6*1=24"",
    resulting_state=(24,),
    comment='""times 6, 6 times 1""',
)
```"
325,"[4,4,4,7]",(7-4)x(4+4),151," So 4, so that's going to be 12. 4 plus 4 plus 4. 4 times 3 is 12 plus 7 is 19. That's not going to work. 7 plus 4. What's 7 times 4? Is there 28? 28 minus 4. Okay, so I have an extra 4, right? 7 times 4, okay, is what? Plus 4 minus 4? Shoot, that's not going to work. So 7 times 4 is 28, right? 7 times 4 is 28. Minus 4 is 24. And then plus 4? Oh, shoot. What? Shit. Oh my god. Okay, hold on. 7 times 4 is 28. Minus 4 is 24. Can't do anything with that other 4. I cannot do anything. 4 divided by 4. I'm going to get 1. 1. I'm just going to do it. Plus 4. I'm not, if I'm not thinking of it correctly. Okay, no. Not all the numbers used. All the numbers are used. That's not right. Okay. We really only do 7 times 4. I mean, we could do... Okay, so let's do 7 minus 4 is 3. Okay. So we have 3 times 4. That's not going to get us anywhere. Shoot. God. 3 times 8. Okay. So then... times. Times. 4 plus 4. ▪ ▪","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 4 plus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4+4=12"",
    resulting_state=(7, 12),
    comment='""4 plus 4 plus 4""',
)

# ""4 times 3 is 12 plus 7 is 19"" - participant got 3 from adding 4+4+4=12 first
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(19,),
    comment='""4 times 3 is 12 plus 7 is 19""',
)

# ""What's 7 times 4?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(4, 4, 28),
    comment='""What\'s 7 times 4?""',
)

# ""28 minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-4=24"",
    resulting_state=(4, 24),
    comment='""28 minus 4""',
)

# ""4 divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 24),
    comment='""4 divided by 4""',
)

# The participant backtracks: ""Okay, so let's do 7 minus 4 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 4, 4),
    comment='""7 minus 4 is 3""',
)

# ""3 times 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(4, 12),
    comment='""3 times 4""',
)

# ""3 times 8"" - participant likely got 8 from 4+4
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(4, 7, 8),
    comment='""4 plus 4""',
)

# Then they use the 3 from 7-4 and multiply by 8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4)*8=24"",
    resulting_state=(24,),
    comment='""3 times 8"" - using the 3 from 7-4',
)
```"
326,"[1,8,10,12]",(10-8)x12x1,51," Okay, okay. 10 plus 12 is 22. 22 plus 8 is 30. We're going to be too much. If we do 8 plus 10, we're at 18. 19, that's not going to work. 12 plus 1 is 13. 13 plus 8 is, what, 31. 31 minus 10, no. Okay, so let's do 10. Okay, so 10 minus 8. 10 minus 8, and we have 2. And then we do times 12 times 1.","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 12 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(1, 8, 22),
    comment='""10 plus 12 is 22""',
)

# ""22 plus 8 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+8=30"",
    resulting_state=(1, 30),
    comment='""22 plus 8 is 30""',
)

# ""If we do 8 plus 10, we're at 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(1, 12, 18),
    comment='""If we do 8 plus 10, we\'re at 18""',
)

# ""12 plus 1 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+1=13"",
    resulting_state=(8, 10, 13),
    comment='""12 plus 1 is 13""',
)

# ""13 plus 8 is, what, 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=31"",
    resulting_state=(10, 31),
    comment='""13 plus 8 is, what, 31""',
    result_calc_error=True,
)

# ""10 minus 8, and we have 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(1, 2, 12),
    comment='""10 minus 8, and we have 2""',
)

# ""And then we do times 12 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12*1=24"",
    resulting_state=(24,),
    comment='""And then we do times 12 times 1""',
)
```"
328,"[1,3,6,9]",(9/3),180," I need a 6x4, so 9-6 is 3. Not going to work. Let's do 3x9 is 27. 27-6-1 with 6-1 is 5, that's 22. 3x6 is 18. 18 plus 1 is 19. It's not going to work. Hold on. 9 divided by 3. 9 divided by 3 is 3 plus 1 times 6. Okay, so 9 divided by 3. Is that working? No, I didn't mean to do that. 9 divided by 3 plus, no, 3 times. Times. Multiplied by 6 multiplied by 1. Oh my god. God, incorrect answer. God damn it. What the fuck? 3 times 6 is 9. Shit, it's 4 times 6. Fucking sick of this shit. Okay. Damn it. Okay, so 9. So I need 4. So 3 plus 1 is 4. So... 4 times 6. So I need 9 out of there somehow. I can do, um... I'm going to do this. That's not going to work. Um... Gosh. 10. 6 plus 1. 7 plus 3 is 10 plus 9. I need a 4. I need a 4 and a... 6. Right? 4 and a 6. So it's... 4. Nope. Not going to work. Well, I can do... 9 divided by 3 is 3 plus 1 times. Okay, so 9. 9 divided by 3.","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need a 6x4"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""I need a 6x4""',
)

# ""9-6 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(1, 3, 3),
    comment='""9-6 is 3""',
)

# ""3x9 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(1, 6, 27),
    comment='""3x9 is 27""',
)

# ""27-6-1"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-6-1=20"",
    resulting_state=(20,),
    comment='""27-6-1""',
)

# ""3x6 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(1, 9, 18),
    comment='""3x6 is 18""',
)

# ""18 plus 1 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+1=19"",
    resulting_state=(9, 19),
    comment='""18 plus 1 is 19""',
)

# ""9 divided by 3 is 3 plus 1 times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3+1*6=9"",
    resulting_state=(9,),
    comment='""9 divided by 3 is 3 plus 1 times 6""',
)

# ""3 times 6 is 9"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=9"",
    resulting_state=(1, 9, 9),
    comment='""3 times 6 is 9"" - calculation error',
    result_calc_error=True,
)

# ""3 plus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(4, 6, 9),
    comment='""3 plus 1 is 4""',
)

# ""6 plus 1. 7 plus 3 is 10 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1+3+9=19"",
    resulting_state=(19,),
    comment='""6 plus 1. 7 plus 3 is 10 plus 9""',
)

# ""9 divided by 3"" - this matches their final response
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(1, 3, 6),
    comment='""9 divided by 3""',
)
```"
329,"[1,8,8,12]",((8/8)+1)x12,96," Okay, I need a 12 times 2. 8 plus 12 is 20. That will not work if I do 20 minus 20 plus 8, 20 plus 1. 8 plus 8 is 16. 16 plus 12 is 28. That's too much. 8 divided by 8 is 1. Okay, so 8 divided by 8 is 1. 1 plus 1 is 2 times 12 is 24. 8 divided by 8 is 1. 8 plus 1 and then times 12. That's not the correct syntax. That's not the correct syntax. Okay. Invalid equation, of course. 8 divided by 8 plus 1 times 12. Okay, so I need more parentheses. So, we'll do double parentheses. 8 divided by 8. Close that one out. Plus 1. Okay. And then we close the second one out. And then we multiply by 12. Take that. Take that.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need a 12 times 2"" suggests participant sets a subgoal of getting 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""I need a 12 times 2""',
)

# ""8 plus 12 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(1, 8, 20),
    comment='""8 plus 12 is 20""',
)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(1, 12, 16),
    comment='""8 plus 8 is 16""',
)

# ""16 plus 12 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+12=28"",
    resulting_state=(1, 28),
    comment='""16 plus 12 is 28""',
)

# ""8 divided by 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 1, 12),
    comment='""8 divided by 8 is 1""',
)

# ""1 plus 1 is 2 times 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+1)*12=24"",
    resulting_state=(24,),
    comment='""1 plus 1 is 2 times 12 is 24""',
)

# The rest of the transcript shows the participant working on the syntax of their answer
# rather than exploring new mathematical operations
```"
331,"[1,2,7,9]",(9x2)+7-1,51," Target number 24, um, let's see, can we get 8 times 3 somehow? I don't think so, we could get to 6, um, 6 times 4? Um, minus 1, not really. Um, let's see, 7 plus 2 is 9, 9 times 2 is 18, plus 7 minus 1, there we go. 9 times 2 is 18, plus 7 is 25, minus 1, should be good.","```python
start_state = (1, 2, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""can we get 8 times 3 somehow?"" - participant is setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""can we get 8 times 3 somehow?""'
)

# ""we could get to 6"" - participant seems to be setting another subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""we could get to 6""'
)

# ""7 plus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(1, 9, 9),
    comment='""7 plus 2 is 9""'
)

# ""9 times 2 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(1, 7, 18),
    comment='""9 times 2 is 18""'
)

# ""plus 7 minus 1"" continuing from 18
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7-1=24"",
    resulting_state=(24,),
    comment='""plus 7 minus 1""'
)
```"
332,"[1,4,5,6]",,180," Let's see, 24. How can we get 6 times 4? We can get 6 times 5. It's not what we want. We can do 4 minus, no, 5. What can we do with that 5? Oh wait, 6 times 5 is 30, and then, oh no, so close. 4 times, I keep getting 25. Is there any way we could do it with just 4, 5, and 6? I don't think so. I think we need the 1 in there. So, let's see. I don't think it's a divide. What number do we utilize the 1 in? Okay, 5 times 5. Let's see, we can get 4 times 1. Let's see, 4 plus 1 is 5, so we get 5, 5, 6. No, 5 plus 1, we get 4, 6, 6. No, 6 plus 1, we get 4, 5, 7. Does 4, 5, 7 get us anything? 7 times 4, 28 minus 5, 23. 7 plus 5? No. Where does the 1 go? We can get 3, 5, and 6. But 3, 5, and 6 doesn't get us anywhere. We can get 4, 4, 6. I don't think that gets us anywhere. We can get 4, 5, 5. Maybe it's like...","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""How can we get 6 times 4?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""How can we get 6 times 4?""',
)

# ""We can get 6 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 4, 30),
    comment='""We can get 6 times 5""',
)

# ""4 plus 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+1=5"",
    resulting_state=(5, 5, 6),
    comment='""4 plus 1 is 5""',
)

# ""5 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(4, 6, 6),
    comment='""5 plus 1""',
)

# ""6 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(4, 5, 7),
    comment='""6 plus 1""',
)

# ""7 times 4, 28 minus 5, 23""
curr_state = graph.move_to_node((4, 5, 7))
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4-5=23"",
    resulting_state=(23,),
    comment='""7 times 4, 28 minus 5, 23""',
)

# ""We can get 3, 5, and 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 5, 6),
    comment='""We can get 3, 5, and 6""',
)

# ""We can get 4, 4, 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 4, 6),
    comment='""We can get 4, 4, 6""',
)

# ""We can get 4, 5, 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(4, 5, 5),
    comment='""We can get 4, 5, 5""',
)

```"
335,"[1,11,13,13]",(13-11)x(13-1),30," Alright, so let's see if we can get 2 times 12, um, do 13 minus 11, which is 2, then times 13 minus 1, there we go, 13 minus 11 is 2, times 13 minus 1 is 12. Alright, so let's see if we can get 2 times 12, um, so let's see if we can get 2 times 12, um, so let's see if we can get 2 times 12, um, so","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""let's see if we can get 2 times 12"" - participant sets a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""let\'s see if we can get 2 times 12""',
)

# ""13 minus 11, which is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 13),
    comment='""13 minus 11, which is 2""',
)

# ""then times 13 minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*(13-1)=24"",
    resulting_state=(24,),
    comment='""then times 13 minus 1""',
)

# The rest of the transcript appears to be repetition
```"
336,"[2,3,5,13]",(13x2)-(5-3),120," gehenobenirdigemengemengemen let's see we can get we can get 13 13 13 divided by 13 plus 5 is going to be 18 divided by 2 is 9 9 times 3 doesn't work 13 plus 2 divided by 5 doesn't work, 7.5 we can get 13 times 2 is 26 oh 26 26 there we go, then 5 minus 3 ok so 13 times 2 is 26 minus 5 minus 3 should be good","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The first part appears to be transcription noise

# ""13 plus 5 is going to be 18 divided by 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+5)/2=9"",
    resulting_state=(3, 9),
    comment='""13 plus 5 is going to be 18 divided by 2 is 9""',
)

# ""9 times 3 doesn't work""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(27,),
    comment='""9 times 3 doesn\'t work""',
)

# ""13 plus 2 divided by 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+2)/5=7.5"",
    resulting_state=(3, 7.5),
    comment='""13 plus 2 divided by 5 doesn\'t work, 7.5""',
    result_calc_error=True,
)

# ""we can get 13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(3, 5, 26),
    comment='""we can get 13 times 2 is 26""',
)

# ""then 5 minus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(5-3)=24"",
    resulting_state=(24,),
    comment='""then 5 minus 3"" and participant combines with previous result',
)
```"
337,"[5,8,9,11]",(5-(11-9))x8,50," Alright, let's try to get to 8 times 3. Can we make 3 with 5, 9, and 11? 9 minus 5. 11 minus 9 is 2. 5 minus 2 is 3, so we can't. So let's just do 11 minus 9 is 2. Wait, wait, wait. So, 5. Okay, wait, wait, wait. In parentheses. 5 minus 11 minus 9, so it's 5 minus 2 is 3. Yep. And then times 8. So 5 minus 11 minus 9 is 3.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""let's try to get to 8 times 3"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""let\'s try to get to 8 times 3""',
)

# ""Can we make 3 with 5, 9, and 11?"" - participant is working toward the subgoal

# ""9 minus 5"" participant tries this operation
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 8, 11),
    comment='""9 minus 5""',
)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 5, 8),
    comment='""11 minus 9 is 2""',
)

# ""5 minus 2 is 3"" participant uses result from previous operation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 8),
    comment='""5 minus 2 is 3""',
)

# Having reached their subgoal of getting 3 and 8, participant multiplies them
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment=""Having reached the subgoal of 3 and 8, participant multiplies them"",
)

```"
338,"[1,2,3,3]",(3x2)x(1+3),25," Alright, let's see if we can get 6 times 4. So yeah, we can do 3 times 2 is 6 and then 3 plus 1 is 4. That's pretty easy. So 3 times 2 and then, which is 6, times 1 plus 3. Thanks for watching and have a great day!","```python
start_state = (1, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""let's see if we can get 6 times 4"" - participant sets subgoal of getting 6 and 4
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""let\'s see if we can get 6 times 4""',
)

# ""3 times 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(1, 3, 6),
    comment='""3 times 2 is 6""',
)

# ""3 plus 1 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(4, 6),
    comment='""3 plus 1 is 4""',
)

# Then they multiply the 6 and 4 they created
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""That\'s pretty easy. So 3 times 2 and then, which is 6, times 1 plus 3""',
)

```"
339,"[8,9,12,12]",(12+12)x(9-8),99," Alright, let's see if we can get 8 times 3, right off the bat. I think we can get to 3 with 12, 12, and 9, because 12, let's see, I'm pretty sure we can get to, surely there's a way to get to 3. From 9, 12, and 12. So we can do 12 minus 9 is 3, 12 divided by 3 is 4, 12 divided by 9 is 12 divided by 9. Can we not get 3 from 12, 12, and 9? Surely we can get to 3 from 12, 12, and 9. Alright, maybe not. 12 minus 9 is 3. Okay, let's look for something else. Okay, so we can get, we can get, oh, we can get 12 plus 12 and then times 9 minus 8. 12 plus 12 times then 9 minus 8.","```python
start_state = (8, 9, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""let's see if we can get 8 times 3"" - participant is setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""let\'s see if we can get 8 times 3""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 12),
    comment='""12 minus 9 is 3""',
)

# ""12 divided by 3 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 8),
    comment='""12 divided by 3 is 4""',
)

# ""12 divided by 9"" participant considers but doesn't complete this calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 8, 12),
    comment='""12 divided by 9""',
)

# The participant then tries a different approach
# ""12 plus 12 and then times 9 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(8, 9, 24),
    comment='""12 plus 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*(9-8)=24"",
    resulting_state=(24,),
    comment='""and then times 9 minus 8""',
)
```"
340,"[3,9,10,12]",,180," So I got 12 plus 12 times 3 minus 9. 12 times 3 equals 36 minus 10. No. 2 times 9. 10 times 9. Minus 3 divided by 3. Dang. 3 times 9 is 10 minus 12. 3 times 9 is 10 minus 12. 3 times 12. 3 times 9 is 10 minus 12. 5 plus 10. 12 divided by 3. Plus 10 plus 9. 9 divided by 3 plus times 12 times 10, so 9 divided by 3 times 10. 9 divided by 3 times 10, so 9 divided by 3 times 10.","```python
start_state = (3, 9, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 3 equals 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(9, 10, 36),
    comment='""12 times 3 equals 36""',
)

# ""minus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-10=26"",
    resulting_state=(9, 26),
    comment='""minus 10""',
)

# ""10 times 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*9=90"",
    resulting_state=(3, 12, 90),
    comment='""10 times 9""',
)

# ""Minus 3 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(90-3)/3=29"",
    resulting_state=(12, 29),
    comment='""Minus 3 divided by 3""',
)

# ""3 times 9 is 10 minus 12"" seems to be a transcription error or confusion
# The participant repeats this phrase multiple times

# ""12 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 9, 10),
    comment='""12 divided by 3""',
)

# ""Plus 10 plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+10+9=23"",
    resulting_state=(23,),
    comment='""Plus 10 plus 9""',
)

# ""9 divided by 3 times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3*10=30"",
    resulting_state=(12, 30),
    comment='""9 divided by 3 times 10""',
)
```"
341,"[5,10,10,11]",(,180," 2 times 5 divided by 2 times 11. 11 times 5. Okay, I have minus 5 times 2 divided by 2. Okay. I'm going to say 11. So, we get 10. 10 plus 10 divided by 5 times 11. 11. 11. And then I have 5 times 7 divided by 5 times 10. This is the easiest I've thought of at the end. My goodness.","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(10, 10, 55),
    comment='""11 times 5""',
)

# ""10 plus 10 divided by 5 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+10)/5*11=44"",
    resulting_state=(44,),
    comment='""10 plus 10 divided by 5 times 11""',
)

# ""5 times 10 divided by 5 times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10/5*10=100"",
    resulting_state=(10, 11, 100),
    comment='""5 times 7 divided by 5 times 10"" - using first 10 instead of 7',
)
```"
342,"[6,8,11,12]",,180," 12 minus 6 is 2 times 8 plus 11. 12 divided by 8 times 6 plus... So... 12 minus 6... 6 plus 8... plus 11... 12 divided by 8... 12 minus 11 is... 12 minus 11 is 1... plus 6... times 8... 8 times 6... minus 4... minus 6... minus... 12 divided by 6... times 8... 8 times 9... 6 plus 8 is 14, or is it 11 plus 8 plus 2 minus 6. 12 plus 8 plus 11 minus 6 is 11 plus 6 plus 2 minus 8. 6 plus 8 divided by 12.","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 6 is 2 times 8 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-6)*8+11=59"",
    resulting_state=(59,),
    comment='""12 minus 6 is 2 times 8 plus 11""',
)

# ""12 divided by 8 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8*6=9"",
    resulting_state=(9, 11),
    comment='""12 divided by 8 times 6""',
)

# ""12 minus 11 is 1... plus 6... times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-11+6)*8=56"",
    resulting_state=(56,),
    comment='""12 minus 11 is 1... plus 6... times 8""',
)

# ""8 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(11, 12, 48),
    comment='""8 times 6""',
)

# ""12 divided by 6... times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6*8=16"",
    resulting_state=(11, 16),
    comment='""12 divided by 6... times 8""',
)

# ""6 plus 8 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(11, 12, 14),
    comment='""6 plus 8 is 14""',
)

# ""11 plus 8 plus 2 minus 6"" - participant likely meant 11+8-6
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8-6=13"",
    resulting_state=(12, 13),
    comment='""11 plus 8 plus 2 minus 6""',
)

# ""12 plus 8 plus 11 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8+11-6=25"",
    resulting_state=(25,),
    comment='""12 plus 8 plus 11 minus 6""',
)

# ""11 plus 6 plus 2 minus 8"" - participant likely meant 11+6-8
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6-8=9"",
    resulting_state=(12, 9),
    comment='""11 plus 6 plus 2 minus 8""',
)

# ""6 plus 8 divided by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+8)/12=1.17"",
    resulting_state=(1.17, 11),
    comment='""6 plus 8 divided by 12""',
)
```"
347,"[2,6,8,9]",,180," Okay, so we have, I'm trying to think of things I could multiply here, or I guess add now. So 8, 16, that's one off, that gets me to 25. 8 minus 6 is 4. No, that's still too high. So we have, no, that leaves me with a 2 that I haven't used. So if I do 4 times, it's still one off. So if I do, no, that's too high. I'm trying to think of ways. No, not getting to 24. I'm running through a lot of scenarios quickly in my head. So, no, I keep, now I'm repeating myself in my head. Let's see, 8 minus 6 is 2 times 9. Nope, that's not working. 9 times 2 is 18. Maybe if we can get to one of these numbers, above 24 that matches one of the individual numbers, then I can subtract to get to 24. Let's see if that would work. No, that just gets me to 25. And then I have to subtract 6. That's not going to work. Um, 9 times 2, 9 times, 9 plus 6, 9 plus 7, 34 minus 6, still too high. God, this is not easy. Um, 15 times 2 is 30. No, it stands for 22. Um, 14 times 2 is 28. Minus 9 is too low. 8 and 9 is 34 minus 6.","```python
start_state = (2, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8, 16, that's one off, that gets me to 25"" - participant seems to be multiplying 8*2=16 and adding 9
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(6, 9, 16),
    comment='""8, 16""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=25"",
    resulting_state=(6, 25),
    comment='""that gets me to 25""',
)

# ""8 minus 6 is 4"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=4"",
    resulting_state=(2, 4, 9),
    comment='""8 minus 6 is 4"" - participant makes calculation error',
    result_calc_error=True,
)

# ""8 minus 6 is 2 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-6)*9=18"",
    resulting_state=(2, 18),
    comment='""8 minus 6 is 2 times 9""',
)

# ""9 times 2 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(6, 8, 18),
    comment='""9 times 2 is 18""',
)

# ""9 plus 6, 9 plus 7, 34 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(2, 8, 15),
    comment='""9 plus 6""',
)

# ""15 times 2 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*2=30"",
    resulting_state=(8, 30),
    comment='""15 times 2 is 30""',
)

# ""8 and 9 is 34 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9-6=11"",
    resulting_state=(2, 11),
    comment='""8 and 9 is 34 minus 6"" - participant seems to have made a calculation error',
    result_calc_error=True,
)
```"
348,"[9,11,12,13]",,180," Okay, so 12 and 13. If I'm adding these up, it's just going to get too high. Wait a minute, let me verify that. Yeah, it's still going to be too high. So 9 and 11 is 20. 33 minus 12 is 21. Um, let's see. 12 times 9 is 108. 13 times 11 is, um, let's see, that's 130 plus 11, 141. 141 minus 11 is 141. 141 minus 108 does not give me 24. Um, 11 times 9 is 99. And 12 times 13 is 156. So 156 minus 99 is way high. I'm not even getting close here. Um, 12 and 9 is 21. 24 minus 21 is, obviously, wrong. Um, 12 and 11. No. Geez. 11 minus 9 is 2 times 13. No, it's not right. 12 minus 11 is 1. Uh, nope, I'm still one off. If I add that to 13 plus 9, 12 plus 9 is 21. Plus 13 is, nope, I'm still one off. I think I've repeated myself here. 11, um, 13 minus 9 is, nope. Um, hmm. 12 times 11 is like 131, I think. 132. And 132 and 13 is what? I was thinking of using division, but I don't think that's getting there. Getting me to the right answer. Um, with 9, at least. Um, 12 minus...","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 13"" participant seems to be adding
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(9, 11, 25),
    comment='""12 and 13""',
)

# ""9 and 11 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(12, 13, 20),
    comment='""9 and 11 is 20""',
)

# ""12 times 9 is 108""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(11, 13, 108),
    comment='""12 times 9 is 108""',
)

# ""13 times 11 is, um, let's see, that's 130 plus 11, 141""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=141"",
    resulting_state=(9, 12, 141),
    result_calc_error=True,
    comment='""13 times 11 is, um, let\'s see, that\'s 130 plus 11, 141"" - calculation error',
)

# ""11 times 9 is 99""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*9=99"",
    resulting_state=(12, 13, 99),
    comment='""11 times 9 is 99""',
)

# ""And 12 times 13 is 156""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13=156"",
    resulting_state=(9, 11, 156),
    comment='""And 12 times 13 is 156""',
)

# ""12 and 9 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(11, 13, 21),
    comment='""12 and 9 is 21""',
)

# ""11 minus 9 is 2 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-9)*13=26"",
    resulting_state=(12, 26),
    comment='""11 minus 9 is 2 times 13""',
)

# ""12 minus 11 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 9, 13),
    comment='""12 minus 11 is 1""',
)

# ""12 plus 9 is 21. Plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9+13=34"",
    resulting_state=(11, 34),
    comment='""12 plus 9 is 21. Plus 13""',
)

# ""13 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 11, 12),
    comment='""13 minus 9""',
)

# ""12 times 11 is like 131, I think. 132""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(9, 13, 132),
    comment='""12 times 11 is like 131, I think. 132""',
)
```"
353,"[5,6,7,8]",,180," All right, 7 and 5 is 12, and 6 is 18, and 8 is 26. That's too high. 15 and 6 is 21. That's not useful with the 5. 7 times 5 is 35. Minus 6 is 29. Minus 8 is 21. That's no good. 7 times 6 is 42. Minus 13 is too high still. 35 I think I already tried using. 6 times 5 is 35. Minus 8 is 21. That's no good. 7 times 6 is 42. Minus 13 is too high still. 35 I think I already tried using. 8 times 7 is 30. No, that's not helping. 8 times 7 is 56. Minus 30 is still too off. Let's see. 7 and 5 is 12. 48 minus 12 is too high. 12 plus 14 is still too high. 12 plus 13 plus 13 times 3 is way high. 12 plus 13 plus 13 by 6, 30, 29. 12 plus 15 plus 13 minus 5 is. 6 minus 5 is 28, and 22. 7 minus 5 is 28. 27 minus 5 is 2 times 6. That's 20. 27 minus 4 is 0. 27 minus 4 is 0. 8 times 5 isС40. 8 times 5 is 40. No, that's 2. 7, let's see, 56, no, that's too high still. That's going to be too low. 8 minus 6 is 2 times 30. That's not helping. I guess if I could get to 4 times 6, that would be good. So let's see. Can I get to 4 at all? No, that's 7 and 5 is 2 times 8 is 16. That didn't give me any 4s. 8 minus 6 is 2 times 5 is 10. No, 7 minus.","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and 5 is 12, and 6 is 18, and 8 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(6, 8, 12),
    comment='""7 and 5 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(8, 18),
    comment='""and 6 is 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8=26"",
    resulting_state=(26,),
    comment='""and 8 is 26""',
)

# ""7 times 5 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(6, 8, 35),
    comment='""7 times 5 is 35""',
)

# ""Minus 6 is 29. Minus 8 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-6-8=21"",
    resulting_state=(21,),
    comment='""Minus 6 is 29. Minus 8 is 21""',
)

# ""7 times 6 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 8, 42),
    comment='""7 times 6 is 42""',
)

# ""6 times 5 is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(7, 8, 30),
    comment='""6 times 5 is 35"" - calculation error',
    result_calc_error=True,
)

# ""8 times 7 is 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(5, 6, 56),
    comment='""8 times 7 is 56""',
)

# ""7 and 5 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(6, 8, 12),
    comment='""7 and 5 is 12""',
)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 7, 40),
    comment='""8 times 5 is 40""',
)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 7),
    comment='""8 minus 6 is 2""',
)

# ""I guess if I could get to 4 times 6, that would be good"" - setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""I guess if I could get to 4 times 6, that would be good""',
)

# ""7 and 5 is 2 times 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+5)*8=16"",
    resulting_state=(6, 16),
    comment='""7 and 5 is 2 times 8 is 16""',
    result_calc_error=True,
)

# ""8 minus 6 is 2 times 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-6)*5=10"",
    resulting_state=(7, 10),
    comment='""8 minus 6 is 2 times 5 is 10""',
)
```"
355,"[2,2,9,11]",,180," 24, because 2 times 2 is 4, times 9, 9, 18, no that can't be. But if we do a, let's say, 11 times 2 is 24. But if we do 2, 9 divided by 2 is, no you can't do that either, it's odd. But if we do 9 minus, oh no, 11, no hold on, 9 minus 2 is 7, times, 7 minus 2 is 5, plus 11, no, oh, wait a minute. 11 minus 9 is 3, and then 3 times 2 is 6, and 6 times 2, no, can't be 9. So it must be 11 minus 2. 9 equals 9, and then 9 minus 2 equals 7, no. Let's see, if it's 2 divided by 2 is 1, times 9, 9 equals 9, plus 11, no, it's more than 24. But if you do 11 times 2 is 24, so 11 times 2 is 24, minus 9 is 15, no. Oh, this is difficult. So, 11 minus 2 is 7, and then 7 minus 2 is 5.","```python
start_state = (2, 2, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 2 is 4, times 9, 9, 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2*9=36"",
    resulting_state=(11, 36),
    comment='""2 times 2 is 4, times 9""',
)

# ""11 times 2 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=24"",
    resulting_state=(2, 9, 24),
    comment='""11 times 2 is 24"" - calculation error',
    result_calc_error=True,
)

# ""9 divided by 2"" participant considers but abandons this path

# ""9 minus 2 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(2, 7, 11),
    comment='""9 minus 2 is 7""',
)

# ""7 minus 2 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(5, 11),
    comment='""7 minus 2 is 5""',
)

# ""11 minus 9 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 2, 2),
    comment='""11 minus 9 is 3"" - though they actually got 2',
)

# ""3 times 2 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(2, 4),
    comment='""3 times 2 is 6"" - though using the actual numbers they had',
)

# ""11 minus 2. 9 equals 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 9, 9),
    comment='""11 minus 2. 9 equals 9""',
)

# ""9 minus 2 equals 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(7, 9),
    comment='""9 minus 2 equals 7""',
)

# ""2 divided by 2 is 1, times 9, 9 equals 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(2/2)*9=9"",
    resulting_state=(2, 9, 11),
    comment='""2 divided by 2 is 1, times 9, 9 equals 9""',
)

# ""plus 11"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(2, 20),
    comment='""plus 11""',
)

# ""11 times 2 is 24"" - repeating earlier calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=24"",
    resulting_state=(2, 9, 24),
    comment='""11 times 2 is 24"" - repeating earlier calculation error',
    result_calc_error=True,
)

# ""minus 9 is 15"" continuing from previous calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24-9=15"",
    resulting_state=(2, 15),
    comment='""minus 9 is 15""',
)

# ""11 minus 2 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 9, 9),
    comment='""11 minus 2 is 7"" - though they got 9',
)

# ""7 minus 2 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(7, 9),
    comment='""7 minus 2 is 5"" - though they got 7',
)
```"
358,"[1,3,9,10]",(9+3),180," Alright, 24. Nah, 10 minus 9 is 1. No. 9, 18, 27. Minus 1, 27. No. 10 minus 3 is 7. Plus 1 is 8. Now, 4. 3 plus 1 is 4. And then you multiply 4 by 9 is equal to 36. Minus 10 is 26. But if we... 9 minus 3 equals 6. Plus 1 equals 7. Plus 10 is 27. But if we do 3 minus 1 equals 2. Plus 9 times 2, 9, 18, 2, 2, 20. No. What if we do 10 minus... 1 equals 9. 9, 18, 27. 27 minus 9. No. Hold on. 9, 18, 9, 18. This is 9. Minus 3 equals... 6. 6, 12, 18, 4. No. This would have to be 9. Plus 3 equals 11. Ahh! Oh, yeah. 9 plus 3 equals 11. Plus... 1 plus 10. 24. No? Okay, so 9 plus 3 is... Oh, okay. 9 plus 3 is 12. And then plus 11. Just only 23. Ding dong. So... 9 plus...","```python
start_state = (1, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 9 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 1, 3),
    comment='""10 minus 9 is 1""',
)

# ""9, 18, 27"" seems to be multiplying 9 by 3
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(1, 10, 27),
    comment='""9, 18, 27"" seems to be multiplying 9 by 3',
)

# ""Minus 1, 27"" seems to be subtracting 1 from previous result
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-1=26"",
    resulting_state=(10, 26),
    comment='""Minus 1, 27""',
)

# ""10 minus 3 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(1, 7, 9),
    comment='""10 minus 3 is 7""',
)

# ""Plus 1 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(8, 9),
    comment='""Plus 1 is 8""',
)

# ""3 plus 1 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(4, 9, 10),
    comment='""3 plus 1 is 4""',
)

# ""multiply 4 by 9 is equal to 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(10, 36),
    comment='""multiply 4 by 9 is equal to 36""',
)

# ""Minus 10 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-10=26"",
    resulting_state=(26,),
    comment='""Minus 10 is 26""',
)

# ""9 minus 3 equals 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(1, 6, 10),
    comment='""9 minus 3 equals 6""',
)

# ""Plus 1 equals 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(7, 10),
    comment='""Plus 1 equals 7""',
)

# ""Plus 10 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(17,),
    comment='""Plus 10 is 27"" - though they say 27, they likely meant 17',
)

# ""3 minus 1 equals 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-1=2"",
    resulting_state=(2, 9, 10),
    comment='""3 minus 1 equals 2""',
)

# ""Plus 9 times 2, 9, 18, 2, 2, 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(10, 18),
    comment='""Plus 9 times 2, 9, 18, 2, 2, 20""',
)

# ""10 minus... 1 equals 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(3, 9, 9),
    comment='""10 minus... 1 equals 9""',
)

# ""9, 18, 27"" seems to be multiplying 9 by 3 again
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(1, 10, 27),
    comment='""9, 18, 27"" seems to be multiplying 9 by 3 again',
)

# ""9 plus 3 equals 11"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=11"",
    resulting_state=(1, 10, 11),
    comment='""9 plus 3 equals 11"" - calculation error',
    result_calc_error=True,
)

# ""9 plus 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(1, 10, 12),
    comment='""9 plus 3 is 12""',
)

# ""And then plus 11"" seems to be adding 1+10
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+1+10=23"",
    resulting_state=(23,),
    comment='""And then plus 11"" seems to be adding 1+10',
)
```"
359,"[5,6,8,8]",,180," 48 minus 8 times 8 equals 64. Minus 30 is 34. It can't be. What if we do 6 times 8? Of course, 48 minus 5 minus 8. That's 35. Thirty-thirty? Or eight? That's 40. Say that's 40. Forty divided by... nah. Let me see. Eight times eight equals 64. Divided by five... hold on. Eight times eight equals 64. Divided by six equals... Indeed, then. Eight minus six is two. And then two times eight equals 16. No, two and six... Hold on, that's 30. Thirty minus eight. That's thirty minus eight. That's twenty-two. No. You can't divide eight by eight. That's one. Minus... it's... no. Um... forty? Forty. Times six. Divided by eight. No. So it's... Um... six times... Six times eight is equal to forty-eight. And if you divide it by... Can you divide it by eight? Hmm... no. It's... if it's six minus... It's eight minus five.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""48 minus 8 times 8 equals 64"" - participant seems to be computing 8*8 first
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""48 minus 8 times 8 equals 64""',
)

# ""What if we do 6 times 8?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(5, 8, 48),
    comment='""What if we do 6 times 8?""',
)

# ""48 minus 5 minus 8. That's 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-5-8=35"",
    resulting_state=(35,),
    comment='""48 minus 5 minus 8. That\'s 35""',
)

# ""Eight times eight equals 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""Eight times eight equals 64""',
)

# ""Divided by six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/6=10.67"",
    resulting_state=(5, 10.67),
    comment='""Divided by six""',
)

# ""Eight minus six is two. And then two times eight equals 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 8),
    comment='""Eight minus six is two""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(5, 16),
    comment='""And then two times eight equals 16""',
)

# ""You can't divide eight by eight. That's one""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 5, 6),
    comment='""You can\'t divide eight by eight. That\'s one""',
)

# ""Six times eight is equal to forty-eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(5, 8, 48),
    comment='""Six times eight is equal to forty-eight""',
)

# ""And if you divide it by... Can you divide it by eight?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/8=6"",
    resulting_state=(5, 6),
    comment='""Can you divide it by eight?""',
)

# ""eight minus five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 8),
    comment='""eight minus five""',
)
```"
362,"[5,5,8,10]",,180," 5 times 5 is 21. Minus 2 is 25. Minus 2 is 23. So 8 minus 5 is 3. 8 minus 5 is 3. Hold on. So 8, 8 times 5 is 40. 5 times 10 is 50. Minus 8 is 42. Minus 8 is 43. Minus No. Um, 5 times 5 is 5. 25 minus 8. 25 minus 8 equals 17. 17. Plus 10 equals 5. No. Um, 5 times 10 is 15. 5 times 10 is 15. And then 50 divided by 8 equals... No, no, no. 50 divided by 5 is 10. No. Um, 8, 6, 10. Well, 5 minus, or 10 minus 5 is 5. And 5. And... Hold on. 8 minus, 10 minus 8 is 2. Minus... No, no, hold on. 8 minus 5 is 3. 3 minus 3 times 15. No. Um, 5 plus 5 is... No, 5. 5 plus 8 is 23. And 23...","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 21"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=21"",
    resulting_state=(8, 10, 21),
    comment='""5 times 5 is 21"" - calculation error',
    result_calc_error=True,
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 10),
    comment='""8 minus 5 is 3""',
)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(5, 10, 40),
    comment='""8 times 5 is 40""',
)

# ""5 times 10 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(5, 8, 50),
    comment='""5 times 10 is 50""',
)

# ""Minus 8 is 42"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""50-8=42"",
    resulting_state=(5, 42),
    comment='""Minus 8 is 42""',
)

# ""5 times 5 is 5. 25"" - participant corrects earlier error about 5*5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 10, 25),
    comment='""5 times 5 is 5. 25""',
)

# ""25 minus 8 equals 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-8=17"",
    resulting_state=(10, 17),
    comment='""25 minus 8 equals 17""',
)

# ""17. Plus 10 equals 5"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+10=5"",
    resulting_state=(5,),
    comment='""17. Plus 10 equals 5"" - calculation error',
    result_calc_error=True,
)

# ""5 times 10 is 15"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=15"",
    resulting_state=(5, 8, 15),
    comment='""5 times 10 is 15"" - calculation error',
    result_calc_error=True,
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 8),
    comment='""10 minus 5 is 5""',
)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 5, 5),
    comment='""10 minus 8 is 2""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 10),
    comment='""8 minus 5 is 3""',
)

# ""5 plus 8 is 23"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=23"",
    resulting_state=(5, 10, 23),
    comment='""5 plus 8 is 23"" - calculation error',
    result_calc_error=True,
)
```"
363,"[5,8,8,9]",(9-5)x8,180," 5 times 8 equals 40, and if you divide it by 8, you're going to get 5. So if you do 9 minus 8 equals 1. No, but if you do 8 minus 5, it's 3, and 3 times 8 is 24. But there is 9. 8 times 8 is 64. Divided by 9 is 64, divided by 5 is 9. So 8 times 9 is 81. Divided by 8, 1 plus 5 is 9. 9 times 8 is 72. Minus 8, 16, 24, 35, 40, minus 40, 32. 8 times 9 is 72. Divided by 5 is 32. It can't be 2. 8 times 8 is 64. Minus 9. Divided by 5. 11. 1. 8 divided by 8 is 1. 9 plus 45. 5 times. Hold on. 8, 16, 24, 8, 16, 9, 18. 9 minus 5 is 4. And 9 minus 5 is 4. And there's 2 8's left. And you multiply it by 8. It's 32. Minus 8. Ah, okay. Got it, got it. So, 9 minus 5 is 4. Times 8.","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 8 equals 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(8, 9, 40),
    comment='""5 times 8 equals 40""',
)

# ""and if you divide it by 8, you're going to get 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40/8=5"",
    resulting_state=(5, 9),
    comment='""and if you divide it by 8, you\'re going to get 5""',
)

# ""9 minus 8 equals 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 5, 8),
    comment='""9 minus 8 equals 1""',
)

# ""if you do 8 minus 5, it's 3, and 3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-5)*8=24"",
    resulting_state=(9, 24),
    comment='""if you do 8 minus 5, it\'s 3, and 3 times 8 is 24""',
)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 9, 64),
    comment='""8 times 8 is 64""',
)

# ""Divided by 9 is 64, divided by 5 is 9"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/5=9"",
    resulting_state=(9, 9),
    comment='""divided by 5 is 9""',
    result_calc_error=True,
)

# ""8 times 9 is 81""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(5, 8, 72),
    comment='""8 times 9 is 81"" - participant meant 72 based on later statements',
    result_calc_error=True,
)

# ""Divided by 8, 1 plus 5 is 9"" seems to be exploring division
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/8=9"",
    resulting_state=(5, 9),
    comment='""Divided by 8""',
)

# ""9 times 8 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(5, 8, 72),
    comment='""9 times 8 is 72""',
)

# ""Divided by 5 is 32"" seems to be dividing 72 by 5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/5=32"",
    resulting_state=(8, 32),
    comment='""Divided by 5 is 32""',
    result_calc_error=True,
)

# ""8 times 8 is 64. Minus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8-9=55"",
    resulting_state=(5, 55),
    comment='""8 times 8 is 64. Minus 9""',
)

# ""8 divided by 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 5, 9),
    comment='""8 divided by 8 is 1""',
)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 8, 8),
    comment='""9 minus 5 is 4""',
)

# ""And you multiply it by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(8, 32),
    comment='""And you multiply it by 8""',
)

# Finally, based on their submitted answer (9-5)x8, they must have done this:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-5)*8=32"",
    resulting_state=(8, 32),
    comment='Based on submitted answer ""(9-5)x8""',
)
```"
364,"[10,11,11,12]",(12+11)+(11-10),174," So, 24 minus 11 plus 11 equals 24 minus 12. Let's see. Eleven times eleven equals 121. Divided by ten. Eleven. Eleven times eleven equals 121. Divided by twelve. Eleven by eleven. 121. 121 minus twelve divided by ten. Eleven times eleven is 121 minus ten. And then divided by twelve. Now, ten plus eleven equals twenty-one. Ten plus eleven equals twenty-one. Twenty-one minus twelve. Plus eleven. Sorry, twenty. Twenty. There must be. Divided by eleven is one. Times ten is ten. Plus two is twenty-two. Thirty-three. If we do a 11 plus 12 equals 23, 11 plus 12 equals 23, okay, okay, I got this, 12 plus 11 equals 23 plus 11 minus 10.","```python
start_state = (10, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 11 plus 11 equals 24 minus 12"" - participant seems to be working backward from 24
graph.set_subgoal(
    (11, 11, 24),
    state_after_subgoal=(24,),
    comment='""24 minus 11 plus 11 equals 24 minus 12"" - working backward from goal',
)

# ""Eleven times eleven equals 121""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=121"",
    resulting_state=(10, 12, 121),
    comment='""Eleven times eleven equals 121""',
)

# ""Divided by ten""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""121/10=12.1"",
    resulting_state=(12, 12.1),
    comment='""Divided by ten""',
)

# ""121 minus twelve divided by ten""
new_state = graph.explore_operation(
    curr_state,
    operation=""(121-12)/10=10.9"",
    resulting_state=(10.9,),
    comment='""121 minus twelve divided by ten""',
)

# ""ten plus eleven equals twenty-one""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(11, 12, 21),
    comment='""ten plus eleven equals twenty-one""',
)

# ""Twenty-one minus twelve""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21-12=9"",
    resulting_state=(9, 11),
    comment='""Twenty-one minus twelve""',
)

# ""Plus eleven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(20,),
    comment='""Plus eleven""',
)

# ""11 plus 12 equals 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(10, 11, 23),
    comment='""11 plus 12 equals 23""',
)

# ""12 plus 11 equals 23 plus 11 minus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+11)+(11-10)=24"",
    resulting_state=(24,),
    comment='""12 plus 11 equals 23 plus 11 minus 10""',
)
```"
369,"[7,8,8,12]",(7+8-12)x8,42," 7 plus 8 is 12. 7 plus 8 is 12. Open brackets. 7 plus 8 is minus 8. 7 plus 8 minus 12, 12, close brackets, times 8.","```python
start_state = (7, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 8 is 12"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=12"",
    resulting_state=(8, 12, 12),
    comment='""7 plus 8 is 12"" - participant makes a calculation error',
    result_calc_error=True,
)

# The participant seems to correct themselves and try a different approach
# ""7 plus 8 minus 12, 12, close brackets, times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+8-12)*8=24"",
    resulting_state=(24,),
    comment='""7 plus 8 minus 12, close brackets, times 8""',
)
```"
374,"[6,10,10,13]",,180," 10 plus 10 is 20, plus 6 is 26, minus 13. Let's see, 10 plus 10 is 20, 33, minus 6, 19, minus 10, nope, okay. Let's see, I want to make 12, times 2, 16, minus 10, nope, 16 minus 13 gives me 3, plus 10, 16 plus 13 is 29, minus 10, so nope. 10 plus 10 is 20. 33 minus 6, no, 10 plus 10 is 20, minus, 10 plus 10 is 20, minus 6 is 14, oh, nope, okay, 19, minus 10 is 9, plus 10 is 19, nope. All right, let's see. Let's see. 10 minus 6 is 4, plus 10 is 14, plus 13. Let's see, 13 minus 10 is 3, 9, 19. Let's see. Let's see. what am I doing? Four times three, 12. Nope. Let's see. 13 minus 10 is three, plus six is nine, times 10. No. Let's see. What times six gets me to 24? Four? Okay, so we've got to make four. Let's see. 13 times 10 is three. Three. 13 times 10 is three. Three times eight. No, because that's four. Three times four is 12. Oh, geez Louise. Okay, let's see.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 10 is 20, plus 6 is 26, minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+6-13=13"",
    resulting_state=(13,),
    comment='""10 plus 10 is 20, plus 6 is 26, minus 13""',
)

# ""10 plus 10 is 20, 33, minus 6, 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+13-6=27"",
    resulting_state=(27,),
    comment='""10 plus 10 is 20, 33, minus 6, 19""',
)

# ""I want to make 12, times 2"" - setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""I want to make 12, times 2""',
)

# ""16 minus 10"" - participant likely got 16 from 6+10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10=16"",
    resulting_state=(10, 13, 16),
    comment='""16"" - participant likely got 16 from 6+10',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16-10=6"",
    resulting_state=(6, 13),
    comment='""16 minus 10""',
)

# ""10 plus 10 is 20, minus 6 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10-6=14"",
    resulting_state=(13, 14),
    comment='""10 plus 10 is 20, minus 6 is 14""',
)

# ""10 minus 6 is 4, plus 10 is 14, plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6+10+13=27"",
    resulting_state=(27,),
    comment='""10 minus 6 is 4, plus 10 is 14, plus 13""',
)

# ""13 minus 10 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 6, 10),
    comment='""13 minus 10 is 3""',
)

# ""13 minus 10 is three, plus six is nine, times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-10+6)*10=90"",
    resulting_state=(90,),
    comment='""13 minus 10 is three, plus six is nine, times 10""',
)

# ""What times six gets me to 24? Four?"" - setting another subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""What times six gets me to 24? Four?""',
)
```"
383,"[3,3,6,10]",(10-6)x(3+3),174," Okay, these were harder than I expected. All right, so 10. Let's see, 6 times 3 is 18. 10 times 3 is 20. No, it's 30. Minus 6 would equal 24, but you have an extra 3. 3 times 3 is 9. Times 6 is 27, but that doesn't give you anything to 10. 3 plus, I already did that, 3 plus 3 is 6. Plus 6 is 12. Plus 10 is 24. 10. Times, hmm? 6 divided by 3 is 2. And 10 times 3 is 30, so no. So 2. 2 times 10 is 20, but then you only have 3 left. 6 minus 3 is 3. 3 times 3 is 7. 3 times 3 is 9. 3 times 6 is 18. Now, 10 minus 6 is 4. And 4 times 3 is 12. Times 3 is not enough. 10. Minus. Parentheses. 6 minus 3. I don't know why I did the parentheses, because that's 3, so that makes 7. Times 3. I'm talking. I don't know why it keeps telling me I'm not. Oh, yikes. Okay. 10. 3 minus 3 is 0. That doesn't help. 3 divided by 3 is 1. 3 minus 3 is 1. Times 7. 10 minus 3 is 7. Times 3 is 21. Plus 6 is over. This would be 4. Ah! Okay. 10 minus 6. I think I need a parenthesis. 10 minus 6, times 3 plus 3. 10 minus 6.","```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 10, 18),
    comment='""6 times 3 is 18""',
)

# ""10 times 3 is 20. No, it's 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(3, 6, 30),
    comment='""10 times 3 is 30""',
)

# ""Minus 6 would equal 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-6=24"",
    resulting_state=(3, 24),
    comment='""Minus 6 would equal 24""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""Times 6 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=27"",
    resulting_state=(10, 27),
    comment='""Times 6 is 27""',
    result_calc_error=True,
)

# ""3 plus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 6, 10),
    comment='""3 plus 3 is 6""',
)

# ""Plus 6 is 12. Plus 10 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6+10=24"",
    resulting_state=(24,),
    comment='""Plus 6 is 12. Plus 10 is 24""',
    result_calc_error=True,
)

# ""6 divided by 3 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 3, 10),
    comment='""6 divided by 3 is 2""',
)

# ""And 10 times 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(3, 6, 30),
    comment='""And 10 times 3 is 30""',
)

curr_state = graph.move_to_node(start_state)
# ""6 minus 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3, 10),
    comment='""6 minus 3 is 3""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 10),
    comment='""3 times 3 is 9""',
)

# ""3 times 6 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(3, 10, 18),
    comment='""3 times 6 is 18""',
)

# ""10 minus 6 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(3, 3, 4),
    comment='""10 minus 6 is 4""',
)

# ""And 4 times 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(3, 12),
    comment='""And 4 times 3 is 12""',
)

# ""10 minus 6"" participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(3, 3, 4),
    comment='""10 minus 6""',
)

# Finally, based on their submitted answer (10-6)x(3+3), they must have combined the 4 they got from 10-6 with 3+3=6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*(3+3)=24"",
    resulting_state=(24,),
    comment='Based on submitted answer ""(10-6)x(3+3)"", they multiply 4 by (3+3)',
)
```"
384,"[1,3,3,10]",,180," Okay, so we've got 10 times 3 is 30. Minus 3 or 4, that wouldn't do anything. So this is 3 plus 1 would be 4. 4 times 3 is 12 plus 10 would be 24. 4 times 10 would be 40, that wouldn't do it. 3 minus 1 is 2, times 3 is 6, times 10 plus 10, nope. 3 times 3 is 9, minus 10 minus 3 is 7. Times 3 is 21, 7. 10 plus 3 is 13. 13 times 4, 13. Ah, so we've got 10 minus 3 times 3 minus 1. That is incorrect all. Answer, okay, because that's, oops, I meant to say, oh, 13 times 2, but that doesn't work either. Hmm, okay. 10 plus 1 is 11, times 3, 10. 10 plus 1 is 11, times 3, 10. 10 plus 1 is 11, times 3, 10. 10 times 3 is 30, minus 4 is 26. 10 times 1 times 3, those don't equal anything. So 10 minus 3 is 7. 7 times 3 is 21, that would get you to 22. 10 minus 3 is 7, and 3 minus 1 is 2. 10 minus 3 is 7, and 3 minus 1 is 2. seven times two, no. Seven times four would be 28. You can't use them more than once. I do not see an answer to any of this. Ten minus one, ten plus one is, is ten plus one is 11 times three is 33 minus three, no. Ten plus three is 13.","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(1, 3, 30),
    comment='""10 times 3 is 30""',
)

# ""3 plus 1 would be 4. 4 times 3 is 12 plus 10 would be 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+1)*3+10=22"",
    resulting_state=(22,),
    comment='""3 plus 1 would be 4. 4 times 3 is 12 plus 10 would be 24""',
)

# ""4 times 10 would be 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+1)*10=40"",
    resulting_state=(3, 40),
    comment='""4 times 10 would be 40""',
)

# ""3 minus 1 is 2, times 3 is 6, times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3-1)*3*10=60"",
    resulting_state=(60,),
    comment='""3 minus 1 is 2, times 3 is 6, times 10""',
)

# ""3 times 3 is 9, minus 10 minus 3 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 9, 10),
    comment='""3 times 3 is 9""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-10-1=-2"",
    resulting_state=(-2,),
    comment='""minus 10 minus 3 is 7""',
)

# ""10 plus 3 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(1, 3, 13),
    comment='""10 plus 3 is 13""',
)

# ""10 minus 3 times 3 minus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3)*3-1=20"",
    resulting_state=(20,),
    comment='""10 minus 3 times 3 minus 1""',
)

# ""10 plus 1 is 11, times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+1)*3=33"",
    resulting_state=(3, 33),
    comment='""10 plus 1 is 11, times 3""',
)

# ""10 times 3 is 30, minus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(1, 3, 30),
    comment='""10 times 3 is 30""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-3-3=24"",
    resulting_state=(1, 24),
    comment='""minus 4""',
)

# ""10 times 1 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*1*3=30"",
    resulting_state=(3, 30),
    comment='""10 times 1 times 3""',
)

# ""10 minus 3 is 7. 7 times 3 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3)*3=21"",
    resulting_state=(1, 21),
    comment='""10 minus 3 is 7. 7 times 3 is 21""',
)

# ""10 minus 3 is 7, and 3 minus 1 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3)*(3-1)=14"",
    resulting_state=(14,),
    comment='""10 minus 3 is 7, and 3 minus 1 is 2""',
)

# ""ten plus one is 11 times three is 33 minus three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+1)*3-3=30"",
    resulting_state=(30,),
    comment='""ten plus one is 11 times three is 33 minus three""',
)

# ""Ten plus three is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(1, 3, 13),
    comment='""Ten plus three is 13""',
)
```"
401,"[1,3,6,7]",6x3+(7-1),34," Okay, now once again, hmm, all right. Interesting. Let me see. I see. All right. So first, we need to do 6 times 3, so that'll give us 18. And now we just need 6 more, so we're going to have plus and then in parentheses 7 minus 3. Minus 1, so that's going to give us 6 times 3 is 18 plus 6 is 24.","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 3, so that'll give us 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 7, 18),
    comment='""6 times 3, so that\'ll give us 18""',
)

# ""And now we just need 6 more"" - participant sets a subgoal of getting 6 more
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""And now we just need 6 more""',
)

# ""7 minus 1"" to get the needed 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+(7-1)=24"",
    resulting_state=(24,),
    comment='""7 minus 1, so that\'s going to give us 6 times 3 is 18 plus 6 is 24""',
)
```"
410,"[2,3,13,13]",,180," Okay, 13 and 13 is 26. I need 26 minus 2, but what about the 3? What about 5? 5 and 13? No. 13 times 3 is 39. 39 divided by 2, that's not going to work. Let's see. The 3 times 13 divided by 13 will cancel it out. Hmm. I don't know about this one. The 3 is throwing me off. Let's see. 16. Let's try 16. 16 divided by 16. Okay, let's try. 16. I need 8. 16. 16 divided by 2 is 8. That's not going to work. 13 and 13. Let's see. Hmm. 13 and 13 is 26. 26 divided by 2 is 13. That doesn't work. 13, 14, 15. Let's try that. 15 divided by 2. 16, 14, 15.","```python
start_state = (2, 3, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 and 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(2, 3, 26),
    comment='""13 and 13 is 26""',
)

# ""13 times 3 is 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(2, 13, 39),
    comment='""13 times 3 is 39""',
)

# ""39 divided by 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39/2=19.5"",
    resulting_state=(13, 19.5),
    comment='""39 divided by 2""',
)

# ""The 3 times 13 divided by 13 will cancel it out""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13/13=3"",
    resulting_state=(2, 3),
    comment='""The 3 times 13 divided by 13 will cancel it out""',
)

# ""13 and 13 is 26. 26 divided by 2 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+13)/2=13"",
    resulting_state=(2, 3),
    comment='""13 and 13 is 26. 26 divided by 2 is 13""',
)
```"
411,"[1,7,10,13]",13x10/7+1,180," Let's see. 13 plus 10 is 23. How about 13 minus 10? Is negative 3, negative 3, no, that's not going to work. 13, 13 and 11 will give me 24, but what about the 7? 13, I need, I see 14 and 10. Let's try, let's try 7 times 13, what the hell is that? Divided by 10. Let's try 13. 13 times 7, which is I don't even know how much, divided by 10, which is I don't know how much, plus 1. Incorrect. Let's try a minus 1. incorrect we're guessing here I should probably use parentheses but let's see what is 13 times 7 26 52 is 4 52 plus 26 is 78 is 6 78 89 13 times 7 is 89 13 times 7 is 89 that doesn't even get me anywhere in the ballpark what is 13 times 10 is 130 let's try that 13 times 10 is 130 divided by 7 plus Plus one.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 10 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(1, 7, 23),
    comment='""13 plus 10 is 23""',
)

# ""How about 13 minus 10? Is negative 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(1, 3, 7),
    comment='""How about 13 minus 10? Is negative 3"" - participant meant 3, not -3',
)

# ""13 and 11 will give me 24"" - participant seems to be thinking about a different problem

# ""let's try 7 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13=89"", 
    resulting_state=(1, 10, 89),
    comment='""let\'s try 7 times 13"" followed by calculation',
    result_calc_error=True,
)

# ""13 times 10 is 130""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*10=130"",
    resulting_state=(1, 7, 130),
    comment='""13 times 10 is 130""',
)

# ""divided by 7 plus Plus one""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""130/7+1=24"",
    resulting_state=(24,),
    comment='""divided by 7 plus Plus one""',
    result_calc_error=True,
)

```"
412,"[2,8,10,12]",12x8,180," Okay, what do we got here? Well, I see, let's try 8 and 2 is 10, 10 and 10 is 20. Okay, if I just got rid of the 8, then I could do it easily, but I can't, so let's do 80. 80, I need to get to 12, so what's 80 divided by 12? 80 divided by 10 is 8. 80 divided by 12, probably 6, that's not going to work. All right, let's try 12 times 8 divided by 10 plus 2. Is that getting close? It says no way. Let's delete, delete, minus 2. Incorrect. Okay, probably need some parentheses. Hmm, 12 times 8, that's like 96. 96 divided by 10, well, that's not going to work. 96, well, if we need 12, let's see, 12. 10, 8, okay, I could do 12 minus 8 equals 4. That's not going to work. 12 minus 10 equals 2. 12 minus 10 equals 4. 2 times 8 is 16. That doesn't work. Hmm, 10 divided by 2 is 5. 5 plus 8. 5 is 13. That doesn't work.","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 and 2 is 10, 10 and 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+2=10"",
    resulting_state=(10, 10, 12),
    comment='""8 and 2 is 10""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(12, 20),
    comment='""10 and 10 is 20""',
)

# ""80 divided by 12"" participant likely got 80 from 8*10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(2, 12, 80),
    comment=""participant computes 8*10 to get 80"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80/12=6"",
    resulting_state=(2, 6),
    comment='""80 divided by 12, probably 6""',
    result_calc_error=True,
)

# ""12 times 8 divided by 10 plus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8/10+2=11.6"",
    resulting_state=(11.6,),
    comment='""12 times 8 divided by 10 plus 2""',
)

# ""12 times 8, that's like 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(2, 10, 96),
    comment='""12 times 8, that\'s like 96""',
)

# ""96 divided by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/10=9.6"",
    resulting_state=(2, 9.6),
    comment='""96 divided by 10""',
)

# ""12 minus 8 equals 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(2, 4, 10),
    comment='""12 minus 8 equals 4""',
)

# ""12 minus 10 equals 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(2, 2, 8),
    comment='""12 minus 10 equals 2""',
)

# ""2 times 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(2, 16),
    comment='""2 times 8 is 16""',
)

# ""10 divided by 2 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(5, 8, 12),
    comment='""10 divided by 2 is 5""',
)

# ""5 plus 8 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(12, 13),
    comment='""5 plus 8 is 13""',
)

```"
415,"[3,5,7,10]",,180," Target number 24. Okay, 7 and 5 is 12. I need to make something equal 2. I can't do that. 5 and 3 is 8. Okay, I can do that. 5 plus 3 in parentheses is 8. And 8 plus 10 is 18. And 18 plus 7. Is 24. Wait. 18 plus 7 is 25. That's not right. Hmm. Let's do delete. Start over. Let's try to 35. That's 7 times 5 is 35. No. 7 times 10 is 50. 50 divided by 7. No. That doesn't work. 70 divided by 5. 5 is 14, I think. Times 3. That doesn't work. Hmm. 3 and 5 is 8. 3 and 7 is 21. No. No. 10 times 3 is 30. 30 divided by 5 is 6. 6. That doesn't work. Hmm. 7 times 5 is 35. 35. 35 divided by 3. That doesn't work. 35 divided by 10 is 3.5. That doesn't work. Hmm. 7 minus 5 is 2. 2. 2. 2.","```python
start_state = (3, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and 5 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(3, 10, 12),
    comment='""7 and 5 is 12""',
)

# ""5 and 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(7, 8, 10),
    comment='""5 and 3 is 8""',
)

# ""8 plus 10 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(7, 18),
    comment='""8 plus 10 is 18""',
)

# ""18 plus 7 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(25,),
    comment='""18 plus 7 is 25""',
)

# ""Let's try to 35. That's 7 times 5 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(3, 10, 35),
    comment='""7 times 5 is 35""',
)

# ""7 times 10 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(3, 5, 70),
    comment='""7 times 10 is 50"" - participant likely meant 70',
)

# ""70 divided by 5 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70/5=14"",
    resulting_state=(3, 14),
    comment='""70 divided by 5 is 14""',
)

# ""3 and 5 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(7, 8, 10),
    comment='""3 and 5 is 8""',
)

# ""3 and 7 is 21"" - participant likely meant 3*7
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(5, 10, 21),
    comment='""3 and 7 is 21"" - participant likely meant 3*7',
)

# ""10 times 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(5, 7, 30),
    comment='""10 times 3 is 30""',
)

# ""30 divided by 5 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30/5=6"",
    resulting_state=(6, 7),
    comment='""30 divided by 5 is 6""',
)

# ""7 times 5 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(3, 10, 35),
    comment='""7 times 5 is 35""',
)

# ""35 divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35/3=11.67"",
    resulting_state=(10, 11.67),
    comment='""35 divided by 3""',
)

# ""35 divided by 10 is 3.5""
new_state = graph.explore_operation(
    curr_state,
    operation=""35/10=3.5"",
    resulting_state=(3, 3.5),
    comment='""35 divided by 10 is 3.5""',
)

# ""7 minus 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 3, 10),
    comment='""7 minus 5 is 2""',
)
```"
418,"[1,8,10,12]",(12-10+1)x8,109," Okay, we have 10, 12, and 8. 10 times 12 is 120. 120 divided by 8 is 15. Alright, what about 80? No, that doesn't work. 11 and 12? No. 13 and 10. Let's see. 12 minus 1 is 11. Okay. 11 plus 10? No. 1 times 8 is 8. 8 and 10 is 18? No. Let's do... Oh. Okay, I think I got it. 10...wait...delete. 12 minus 10 plus 1 is parentheses is 3. 3 times 8 is 25.","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 12 is 120""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(1, 8, 120),
    comment='""10 times 12 is 120""',
)

# ""120 divided by 8 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""120/8=15"",
    resulting_state=(1, 15),
    comment='""120 divided by 8 is 15""',
)

# ""what about 80?"" participant might be trying 8*10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(1, 12, 80),
    comment='""what about 80?""',
)

# ""12 minus 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(8, 10, 11),
    comment='""12 minus 1 is 11""',
)

# ""1 times 8 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*8=8"",
    resulting_state=(8, 10, 12),
    comment='""1 times 8 is 8""',
)

# ""8 and 10 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(12, 18),
    comment='""8 and 10 is 18""',
)

# ""12 minus 10 plus 1 is parentheses is 3. 3 times 8 is 25"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-10+1)*8=25"",
    resulting_state=(25,),
    comment='""12 minus 10 plus 1 is parentheses is 3. 3 times 8 is 25"" - participant makes calculation error',
    result_calc_error=True
)
```"
421,"[7,8,8,11]",(11-7)x8-8,49," Target number 24, okay, 11, 8, oh boy, 8 minus 7, 11 minus 8 is 3. So let's see, 11 minus 8 is 3 times 28 is 24, but we're going to get rid of the 7. How about 8, okay, 11 minus 7 is 5. 5 times 8 is 40 minus, that's not going to work. 32, no, that does work, okay, sorry. So we're going to do 11 minus 7, which gives me 4, times 8, which gives me 32 minus 8.","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 7"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 8, 11),
    comment='""8 minus 7""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 7, 8),
    comment='""11 minus 8 is 3""',
)

# ""11 minus 7 is 5"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=5"",
    resulting_state=(5, 8, 8),
    comment='""11 minus 7 is 5"" - participant made a calculation error',
    result_calc_error=True,
)

# ""5 times 8 is 40"" continuing from previous error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(8, 40),
    comment='""5 times 8 is 40""',
)

# Then participant realizes their error: ""11 minus 7, which gives me 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 8, 8),
    comment='""11 minus 7, which gives me 4""',
)

# ""times 8, which gives me 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(8, 32),
    comment='""times 8, which gives me 32""',
)

# ""minus 8"" to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-8=24"",
    resulting_state=(24,),
    comment='""minus 8""',
)
```"
423,"[3,4,8,10]",(10-8)x4x3,28," I don't need the rest of the voice. 24. 3, 4, 8, 10. 10 minus 8 is 2. 2 times 4 is 8. That would work. So let's do 10 minus 8, which is 2, times 4, which is 8, times 3, which is 20.","```python
start_state = (3, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 3, 4),
    comment='""10 minus 8 is 2""',
)

# ""2 times 4 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(3, 8),
    comment='""2 times 4 is 8""',
)

# ""times 3, which is 20"" - participant makes a calculation error here
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=20"",
    resulting_state=(20,),
    comment='""times 3, which is 20"" - participant makes a calculation error',
    result_calc_error=True,
)

# Note: The participant submitted (10-8)x4x3 which is correct, even though they made a calculation error in verbalizing it
```"
430,"[3,5,8,13]",,180," Target number 24. Let's see. 8 and 13. 8 minus 13 is 6. 8. This is another 8. 8 times 3 is 24 with the 5. 8. 64. Ugh. 13 minus 8 is 5. And then, oh my god, I don't know this one. 13 minus 3 is 8. Okay, so we're going to do 13 minus, okay, so I'm going to do parentheses. 13 minus 5. Close parentheses. Divided by, divided by, no, so that's 8. Ugh. No, 24. Divided by. 13 minus 5 is 8. 8 times 8. Let's do times 8. Divided by 3. Submit answer. No. Okay. Um, shit. Delete. Delete, delete, delete, delete. 15 and 13. 8. 8 times 2. Let's see. 8. Ugh. 13 minus 3 is 10. Plus 18. Plus 5. No. 13 minus 5 is 8. 8 and 8 is 16, 17, 18, 19. Ugh. 15, 2, 8, 26. 15, 45. Minus 11. I don't know. Um, 15. 8 minus 3 is 5. 25. Ugh. 5 times 3 is 15. That's 20. What the hell? 5. 5. 5. 5 is 25. Minus 3 doesn't work. 15 minus 8 is 7. No. 15. So this is 13. Ugh. 26. 13 and 13 is 26. Minus 3 is 20. 15. 15. Oh my god.","```python
start_state = (3, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 13 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8-13=6"",
    resulting_state=(3, 5, 6),
    comment='""8 minus 13 is 6"" - calculation error',
    result_calc_error=True,
)

# ""8 times 3 is 24 with the 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(5, 13, 24),
    comment='""8 times 3 is 24 with the 5""',
)

# ""13 minus 8 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(3, 5, 5),
    comment='""13 minus 8 is 5""',
)

# ""13 minus 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(5, 8, 10),
    comment='""13 minus 3 is 8"" - calculation error',
    result_calc_error=True,
)

# ""13 minus 5... so that's 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(3, 8, 8),
    comment='""13 minus 5... so that\'s 8""',
)

# ""8 times 8... Divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8/3=21.33"",
    resulting_state=(21.33,),
    comment='""8 times 8... Divided by 3""',
)

# ""13 minus 3 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(5, 8, 10),
    comment='""13 minus 3 is 10""',
)

# ""Plus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(8, 15),
    comment='""Plus 5""',
)

# ""13 minus 5 is 8. 8 and 8 is 16, 17, 18, 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(3, 8, 8),
    comment='""13 minus 5 is 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+3=19"",
    resulting_state=(19,),
    comment='""8 and 8 is 16, 17, 18, 19""',
)

# ""8 minus 3 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-3=5"",
    resulting_state=(5, 5, 13),
    comment='""8 minus 3 is 5""',
)

# ""5 times 3 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(8, 13, 15),
    comment='""5 times 3 is 15""',
)

# ""15 minus 8 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-8=7"",
    resulting_state=(7, 13),
    comment='""15 minus 8 is 7""',
)
```"
432,"[1,11,11,12]",,180," Target number 24. We have 12, 11, so we want parenthesis, 11 plus 1, close parenthesis, plus 12, wait, 11 plus 1 is 12. Oh my god. 11 plus 1 is 12, 12 plus 12 is 24, but then we have the 11 hanging out. We have two 11s. 11 plus 11 is 22. 11 plus 11 is 22. Minus 12 plus 1. I don't know. 11 plus 11. 11 minus 1 plus 12. Incorrect answers or not all numbers used. Okay. I get it. So let's see. 11 times 11. 11 times 11 is 121. 121. 121. 121 divided by 12. 121. 121 divided by 12 is what? 121 divided by 12 is what? 10. So that's not going to work. 12 times 11 equals. 12 times 11 equals. Yeah. 12. Yeah. Of course. um 11 plus 11 11 plus 11 equals plus 1 equals 23 I mean there's no way to do it this is not working 12 times 11 equals 132 divided by 11 equals 12 12 so you can't that doesn't happen either so I don't know 11 minus 12 12 minus 11 is 1 okay 1 and then 11 11 okay what about 11 plus 12 11 plus 12 is 23 plus 1","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(11, 12, 12),
    comment='""11 plus 1 is 12""',
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(11, 24),
    comment='""12 plus 12 is 24""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""11 plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(1, 12, 22),
    comment='""11 plus 11 is 22""',
)

# ""11 times 11 is 121""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=121"",
    resulting_state=(1, 12, 121),
    comment='""11 times 11 is 121""',
)

# ""121 divided by 12 is what? 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""121/12=10"",
    resulting_state=(1, 10),
    comment='""121 divided by 12 is what? 10""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""12 times 11 equals 132""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(1, 11, 132),
    comment='""12 times 11 equals 132""',
)

# ""divided by 11 equals 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""132/11=12"",
    resulting_state=(1, 12),
    comment='""divided by 11 equals 12""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""12 minus 11 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 11),
    comment='""12 minus 11 is 1""',
)

# ""11 plus 12 is 23 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12+1=24"",
    resulting_state=(11, 24),
    comment='""11 plus 12 is 23 plus 1""',
)
```"
434,"[3,3,6,10]",,180," Okay, target number 24. 10 and 6 is 16, 17, 18, 19, 20, 21, 22. It's only 22. So 3 times 3 is 9, plus, so 9 is 19, that's 25, that doesn't work. 3, so 6 divided by 3 is 2, 10 and 10 times 2 is 20, plus 3 is 23, that doesn't work. 2, 10, so 3 and 3 is 6. 12 plus 6 is 12, plus 10 is 22, that doesn't work. 3, so 6 divided by 3 is 12, this has no answer. 10, you're freaking me out, because you think that there's an answer, but there's no answer. So you just talk like an idiot. 10 plus 6 is 16, plus 3 is 19, plus 3 is 22, that doesn't work. 10 times 3 is 30, minus 9 is... Not 24, is 21. So 10 times 3 is 30, divided by 3 is 10, plus 6, no. 10 times 3 is 30, divided by 6 is 5, 5 times 3 is 15, that doesn't work. 6 times 10 is 60, divided by 3 is 30. That doesn't work. 60 divided by 3 times 3, 9. 60 divided by 9 is not 24. 6 times 3 is 18. 28... 6 times 3 is 18, plus 10 is 28. Minus 3 is 25. Oh my god. 6 times 3 is 18, right? I'm going crazy. 6 times 3 is 18. 18 times 3 is 54. That doesn't work either. Like, what the heck? 54 divided by 10 is 5.4. So, 18...","```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 and 6 is 16, 17, 18, 19, 20, 21, 22"" - participant adds all numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6+3+3=22"",
    resulting_state=(22,),
    comment='""10 and 6 is 16, 17, 18, 19, 20, 21, 22""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""6 divided by 3 is 2, 10 and 10 times 2 is 20, plus 3 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3*10+3=23"",
    resulting_state=(23,),
    comment='""6 divided by 3 is 2, 10 and 10 times 2 is 20, plus 3 is 23""',
)

# ""3 and 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 6, 10),
    comment='""3 and 3 is 6""',
)

# ""12 plus 6 is 12, plus 10 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6+10=22"",
    resulting_state=(22,),
    comment='""12 plus 6 is 12, plus 10 is 22""',
)

# ""10 plus 6 is 16, plus 3 is 19, plus 3 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6+3+3=22"",
    resulting_state=(22,),
    comment='""10 plus 6 is 16, plus 3 is 19, plus 3 is 22""',
)

# ""10 times 3 is 30, minus 9 is... Not 24, is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(3, 6, 30),
    comment='""10 times 3 is 30""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-6-3=21"",
    resulting_state=(21,),
    comment='""minus 9 is... Not 24, is 21""',
)

# ""10 times 3 is 30, divided by 6 is 5, 5 times 3 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3/6*3=15"",
    resulting_state=(15,),
    comment='""10 times 3 is 30, divided by 6 is 5, 5 times 3 is 15""',
)

# ""6 times 10 is 60, divided by 3 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10/3=20"",
    resulting_state=(3, 20),
    comment='""6 times 10 is 60, divided by 3 is 30""',
)

# ""60 divided by 9"" - participant uses 3*3=9 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 10),
    comment='""60 divided by 9"" - first computing 9',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10/9=6.67"",
    resulting_state=(6.67,),
    comment='""60 divided by 9""',
)

# ""6 times 3 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 10, 18),
    comment='""6 times 3 is 18""',
)

# ""plus 10 is 28. Minus 3 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+10-3=25"",
    resulting_state=(25,),
    comment='""plus 10 is 28. Minus 3 is 25""',
)

# ""18 times 3 is 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""18*3=54"",
    resulting_state=(10, 54),
    comment='""18 times 3 is 54""',
)

# ""54 divided by 10 is 5.4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54/10=5.4"",
    resulting_state=(5.4,),
    comment='""54 divided by 10 is 5.4""',
)
```"
437,"[7,12,12,13]",(12x13)+(12)/(7),180," Okay, 12 plus 12 is 24 right there. But then we have the 13 and the 7. 7 plus 13 is 20. Ugh. Let's do 24 plus 7, 31. No. 20. We have 20 and we have two 12s. We want 24. This one's not going to work either. It's just not going to work. So I have to talk for three minutes because the 12 and 20 is 32. No, it's not going to work. I've learned that there are sometimes no solutions. So I'm going to just figure out, you know, let's see, about 12 times 7 is like 84 plus 13 divided by 12. No, that's 8. Okay, of course not. So 84 uses that and then we can add 13 and then divide by... 12. No, it's going to be, it's going to, this number is not going to work. 12 times 13 equals 156 plus 12 equals 168 divided by 7. No. Oh, oh, that's right. So let's do 12 times 13. Plus 12 divided by 7. Ugh. Okay. What was it? It was 12 times 13 equals plus 12 equals divided by 7 equals. Okay. So I have to do parentheses somewhere. 12 times 13 plus... parentheses 12 and then divided by 7. Oh, not all numbers use. Okay, it's incorrect. 12 times 13 plus 12 and then the whole thing is divided by 7. The whole thing. How do I do that? Divided by 7. Divided by 7, like this. No. Okay. Because I want 12 times...","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24 right there""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(7, 13, 24),
    comment='""12 plus 12 is 24 right there""',
)

# ""7 plus 13 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(12, 12, 20),
    comment='""7 plus 13 is 20""',
)

# ""24 plus 7, 31"" - participant seems to be using the 24 from earlier
curr_state = graph.move_to_node((7, 13, 24))
new_state = graph.explore_operation(
    curr_state,
    operation=""24+7=31"",
    resulting_state=(13, 31),
    comment='""24 plus 7, 31""',
)

# ""12 times 7 is like 84""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(12, 13, 84),
    comment='""12 times 7 is like 84""',
)

# ""plus 13 divided by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(84+13)/12=8.08"",
    resulting_state=(8.08,),
    comment='""plus 13 divided by 12""',
)

# ""12 times 13 equals 156 plus 12 equals 168 divided by 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12*13+12)/7=24"",
    resulting_state=(24,),
    comment='""12 times 13 equals 156 plus 12 equals 168 divided by 7""',
)
```"
438,"[2,3,7,10]",(10x2)-3,180," All right, we have 17, 18, 19, 20, 21, 22. Really? 7 times 3 is 21? No. 70, let's see, 5 plus 7 is 12 plus 10 is 22. 14. Damn it. Let's see. 10 times 7 is 70. Divided by 3 is 23. No. Okay, 70 divided by 2. No, because that's 35. Let's try 6. 3 times 2 is 6 plus 7 is 13. That doesn't work. 27 times 3 is 21. Times 2 is 42. That doesn't work. 7 times 2 is 14. But then we have the 3. What the hell? 30. 10 times 3 is 30. Times 2 is 60. Divided by 7. That's not 24. Let's see. 7 times 2 is 14 plus 10 is 24. 7 plus 3 is 10 plus 2 is 7. God. That last one was frustrating because I had it. I just didn't know how to put them in order. So this is frustrating. 10 times 2 is 20. 20 minus 7 is, oh, 20. Let's see. 20 minus 7 is 13 plus 3. No. 20 minus 2 is 18. 20. Oh, no, I can't use 2 twice. 20 minus 3 is 17 plus 7. Oh, no, because 20, yes. So it's 10 times 2 is 20 minus 3 minus 3.","```python
start_state = (2, 3, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(2, 10, 21),
    comment='""7 times 3 is 21""',
)

# ""5 plus 7 is 12 plus 10 is 22"" - participant may have gotten 5 from 2+3
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+3+7+10)=22"",
    resulting_state=(22,),
    comment='""5 plus 7 is 12 plus 10 is 22""',
)

# ""10 times 7 is 70. Divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7/3=23"",
    resulting_state=(2, 23),
    comment='""10 times 7 is 70. Divided by 3""',
    result_calc_error=True,
)

# ""3 times 2 is 6 plus 7 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2+7=13"",
    resulting_state=(10, 13),
    comment='""3 times 2 is 6 plus 7 is 13""',
)

# ""7 times 3 is 21. Times 2 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3*2=42"",
    resulting_state=(10, 42),
    comment='""7 times 3 is 21. Times 2 is 42""',
)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 10, 14),
    comment='""7 times 2 is 14""',
)

# ""10 times 3 is 30. Times 2 is 60. Divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3*2/7=8.57"",
    resulting_state=(8.57,),
    comment='""10 times 3 is 30. Times 2 is 60. Divided by 7""',
)

# ""7 times 2 is 14 plus 10 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+10=24"",
    resulting_state=(3, 24),
    comment='""7 times 2 is 14 plus 10 is 24""',
)

# ""7 plus 3 is 10 plus 2 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3+2=12"",
    resulting_state=(10, 12),
    comment='""7 plus 3 is 10 plus 2 is 7""',
)

# ""10 times 2 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 7, 20),
    comment='""10 times 2 is 20""',
)

# ""20 minus 7 is 13 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20-7+3=16"",
    resulting_state=(16,),
    comment='""20 minus 7 is 13 plus 3""',
)

# Finally, the participant says ""10 times 2 is 20 minus 3"" which matches their submitted answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2-3=17"",
    resulting_state=(7, 17),
    comment='""10 times 2 is 20 minus 3""',
)
```"
445,"[7,8,8,9]",,180," Let's see. 8 plus 8 is 16. 16 plus 9 is 25. That doesn't do anything. Let's see. Let's see. 8 times 8 is 48. 9 times 7 is 63. 8 times 3 is 24. 9 minus 7 is 2. 2 plus 8 is 10. Plus 8 is 18. 8 minus 8 is 0. 9 plus 7 is 16. Plus 8 is 24. 8 minus 7 is 1. No, that's not going to work. 8 times 3 would be the easiest if I can get there. 9 minus 8 is 1. 8 minus 7 is 1. 9 plus 7 is 16. Plus 8 is 24. 9 minus 8 is 1. Hmm. 9 plus 8 is 17. Hmm. 8 times 8 is 64. I'd need 64 minus 40. I don't see that happening. 7 plus 8 is 1. 7 plus 8 is 1. It's 15. I would need another 9. . . . . . .","```python
start_state = (7, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 9, 16),
    comment='""8 plus 8 is 16""',
)

# ""16 plus 9 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=25"",
    resulting_state=(7, 25),
    comment='""16 plus 9 is 25""',
)

# Going back to start state for new attempts
curr_state = graph.move_to_node(start_state)

# ""8 times 8 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=48"",
    resulting_state=(7, 9, 48),
    result_calc_error=True,
    comment='""8 times 8 is 48"" - calculation error',
)

# ""9 times 7 is 63""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(8, 8, 63),
    comment='""9 times 7 is 63""',
)

# ""8 times 3 is 24"" - not clear where 3 comes from
# ""9 minus 7 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 8, 8),
    comment='""9 minus 7 is 2""',
)

# ""2 plus 8 is 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+8=10"",
    resulting_state=(8, 10),
    comment='""2 plus 8 is 10""',
)

# ""Plus 8 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(18,),
    comment='""Plus 8 is 18""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""8 minus 8 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=0"",
    resulting_state=(0, 7, 9),
    comment='""8 minus 8 is 0""',
)

# ""9 plus 7 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(8, 8, 16),
    comment='""9 plus 7 is 16""',
)

# ""Plus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8=24"",
    resulting_state=(8, 24),
    comment='""Plus 8 is 24""',
)

# ""8 minus 7 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 8, 9),
    comment='""8 minus 7 is 1""',
)

# ""9 minus 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 7, 8),
    comment='""9 minus 8 is 1""',
)

# ""9 plus 8 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(7, 8, 17),
    comment='""9 plus 8 is 17""',
)

# ""8 times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 9, 64),
    comment='""8 times 8 is 64""',
)

# ""7 plus 8 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(8, 9, 15),
    comment='""7 plus 8 is 15""',
)
```"
448,"[1,2,7,7]",,180," 7 times 2 is 14. No. 2 plus 1 is 3 times 7 is 21. 7 minus 1 is 6. 6 plus 2 is 8 plus 7 is 15. 7 times 7 is 49 divided by 2, ain't gonna work. 7 plus 7 is 14. 7 minus 2 is 5. Plus 1 is 6. 7 plus 7 is 14. 7 minus 2 is 5. Plus 1 is 6. 7 times 2 is 14. 7 plus 1 is 9. 7 plus 1 is 8. 8 times 2 is 16. Plus 7 is 25. 7 minus 1 is 6. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. 8 divided by 2 is 4. plus 2 is 9, 2 plus 1 is 3, 3 times 7 is 21, 14 divided by 2, no, 7 times 7, 49, 7 plus 1 is 8, 8 divided by 2 is 4, 4 times 7 is 28, 8, 1 plus 7 plus 7,","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""7 times 2 is 14""',
)

# ""2 plus 1 is 3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+1)*7=21"",
    resulting_state=(7, 21),
    comment='""2 plus 1 is 3 times 7 is 21""',
)

# ""7 minus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(2, 6, 7),
    comment='""7 minus 1 is 6""',
)

# ""6 plus 2 is 8 plus 7 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+2+7=15"",
    resulting_state=(15,),
    comment='""6 plus 2 is 8 plus 7 is 15""',
)

# ""7 times 7 is 49 divided by 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*7)/2=24.5"",
    resulting_state=(1, 24.5),
    comment='""7 times 7 is 49 divided by 2""',
)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='""7 plus 7 is 14""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(1, 5, 7),
    comment='""7 minus 2 is 5""',
)

# ""Plus 1 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 7),
    comment='""Plus 1 is 6""',
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""7 times 2 is 14""',
)

# ""7 plus 1 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(2, 7, 8),
    comment='""7 plus 1 is 8""',
)

# ""8 times 2 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(7, 16),
    comment='""8 times 2 is 16""',
)

# ""Plus 7 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+7=25"",
    resulting_state=(25,),
    result_calc_error=True,
    comment='""Plus 7 is 25""',
)

# ""7 minus 1 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(2, 6, 7),
    comment='""7 minus 1 is 6""',
)

# ""2 plus 1 is 3, 3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+1)*7=21"",
    resulting_state=(7, 21),
    comment='""2 plus 1 is 3, 3 times 7 is 21""',
)

# ""7 times 7, 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(1, 2, 49),
    comment='""7 times 7, 49""',
)

# ""7 plus 1 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(2, 7, 8),
    comment='""7 plus 1 is 8""',
)

# ""8 divided by 2 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/2=4"",
    resulting_state=(4, 7),
    comment='""8 divided by 2 is 4""',
)

# ""4 times 7 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(28,),
    comment='""4 times 7 is 28""',
)

# ""1 plus 7 plus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+7+7=15"",
    resulting_state=(2, 15),
    comment='""1 plus 7 plus 7""',
)
```"
456,"[3,5,12,12]",(5x12)-(12x3),147," Okay. It's all... Jesus, um... Um... I don't know, five times twelve, what would that be, I think that would be, um, Christ, what, seventy? Oh, wait, no, like, twelve times, oh, wow, sorry, sixty, okay, okay, what if I do twelve times three? Twenty-four, and sixty minus thirty, wait, what, oh, shit, thirty-six, oh, my God, okay, sorry, sixty minus thirty-six, twenty-four, guess not, oh, why am I multiplying this, Christ, um, sorry, so, okay, that's better, okay, so, it'd be twelve times five, it'd be sixty, and then, I'll subtract whatever that is, oh, yeah, um, thirty-six.","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""five times twelve, what would that be... sixty""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*12=60"",
    resulting_state=(3, 12, 60),
    comment='""five times twelve, what would that be... sixty""',
)

curr_state = graph.move_to_node(new_state)

# ""what if I do twelve times three? Twenty-four"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=24"",
    resulting_state=(60, 24),
    comment='""what if I do twelve times three? Twenty-four"" - participant makes calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""oh, shit, thirty-six"" - participant corrects their calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(5, 12, 36),
    comment='""oh, shit, thirty-six"" - participant corrects their calculation',
)

# ""sixty minus thirty-six, twenty-four""
# The participant has found the solution by subtracting 36 (12*3) from 60 (5*12)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5*12)-(12*3)=24"",
    resulting_state=(24,),
    comment='""sixty minus thirty-six, twenty-four""',
)
```"
457,"[3,3,11,12]",,180," So target number is 24. So if I do, let's see, I did like 11 minus 3 would be 8, minus 3 would be 5. No. Let's see. Okay. What else can I do here? 11 minus 3 would be 8, times 3 is 24, but then that doesn't help me with the 12. Oh, come on. Come on. Those practice ones were so easy. 3 minus 12 minus 3 would be 9, minus 3 would be 6, times, no. 12 minus 11 is 1. 3 times 3 is only 9, plus 1 would be 10. 12 minus 3 is 9. 11 minus 3 is 8. Holy crap. Why is this so difficult? 12 minus 3 is 9. 11 minus 3 is 8. So 9 times 8, no. 12 divided by 3 is 4. No. So 12 divided by 3 is 4. 11 minus 3 is 8, but then multiply those together and you get 32. That doesn't do me any good. 11 minus 3 is 8. No. Come on. Think, think, think. Okay. 3 minus 3 is 4.","```python
start_state = (3, 3, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 3 would be 8, minus 3 would be 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3-3=5"",
    resulting_state=(5, 12),
    comment='""11 minus 3 would be 8, minus 3 would be 5""',
)

# ""11 minus 3 would be 8, times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-3)*3=24"",
    resulting_state=(12, 24),
    comment='""11 minus 3 would be 8, times 3 is 24""',
)

# ""3 minus 12 minus 3 would be 9, minus 3 would be 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3-3=6"",
    resulting_state=(6, 11),
    comment='""3 minus 12 minus 3 would be 9, minus 3 would be 6""',
)

# ""12 minus 11 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 3, 3),
    comment='""12 minus 11 is 1""',
)

# ""3 times 3 is only 9, plus 1 would be 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3+1=10"",
    resulting_state=(10,),
    comment='""3 times 3 is only 9, plus 1 would be 10""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""12 minus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(3, 9, 11),
    comment='""12 minus 3 is 9""',
)

# ""11 minus 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(3, 8, 12),
    comment='""11 minus 3 is 8""',
)

# ""12 divided by 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(3, 4, 11),
    comment='""12 divided by 3 is 4""',
)

# Going back to start state for final operations
curr_state = graph.move_to_node(start_state)

# ""3 minus 3 is 4"" appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3-3=4"",
    resulting_state=(4, 11, 12),
    comment='""3 minus 3 is 4"" appears to be a calculation error',
    result_calc_error=True
)
```"
469,"[2,6,6,7]",,180," 2 times 7 is 14, that's okay. 6 divided by 2 is 3, no. 6 plus 7 is 13, that's not gonna work. 2 times 6 is 12, plus 13, nope, that's 24, that's 25. 7, no. 6 minus 4, no, 6 minus 2 is 4. 4 times 7 is 28, nope. 7... 7 times 6 is 42. That's not gonna, that's way too far. 6 times 6 is 36. Minus 14 is 22, though. So... 6 divided by 6 is 1. That's not gonna get me anywhere. 6... 7... 7 plus 6 is 13, no. 6 plus 6 is 18, no. Oh, this is hard. 6 plus 6 is 12. Times 2. But how do I...? I gotta get rid of the 7 somehow. I'm not seeing how to get there. Um, I'm gonna try to get rid of the 3 this time, I'm not sure. Um... Thank you.","```python
start_state = (2, 6, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(6, 6, 14),
    comment='""2 times 7 is 14""',
)

# ""6 divided by 2 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/2=3"",
    resulting_state=(3, 6, 7),
    comment='""6 divided by 2 is 3""',
)

# ""6 plus 7 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(2, 6, 13),
    comment='""6 plus 7 is 13""',
)

# ""2 times 6 is 12, plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(6, 7, 12),
    comment='""2 times 6 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(7, 18),
    comment='""plus 13, nope, thats 24, thats 25""',
)

# ""6 minus 2 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-2=4"",
    resulting_state=(4, 6, 7),
    comment='""6 minus 2 is 4""',
)

# ""4 times 7 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(6, 28),
    comment='""4 times 7 is 28""',
)

# ""7 times 6 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(2, 6, 42),
    comment='""7 times 6 is 42""',
)

# ""6 times 6 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 7, 36),
    comment='""6 times 6 is 36""',
)

# ""6 divided by 6 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/6=1"",
    resulting_state=(1, 2, 7),
    comment='""6 divided by 6 is 1""',
)

# ""7 plus 6 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(2, 6, 13),
    comment='""7 plus 6 is 13""',
)

# ""6 plus 6 is 18"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=18"",
    resulting_state=(2, 7, 18),
    comment='""6 plus 6 is 18"" - calculation error',
    result_calc_error=True,
)

# ""6 plus 6 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(2, 7, 12),
    comment='""6 plus 6 is 12""',
)

# ""Times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(7, 24),
    comment='""Times 2""',
)
```"
479,"[2,6,10,10]",6-2+10+10,23," For this, we have 6, 2, 10, and 10. 24 is easy, so it should just be like, you just have to get 4, put in 20 here.","```python
start_state = (2, 6, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""you just have to get 4, put in 20 here"" suggests the participant is setting subgoals of getting 4 and 20
graph.set_subgoal(
    (4, 20),
    state_after_subgoal=(24,),
    comment='""you just have to get 4, put in 20 here"" suggests participant wants to get 4 and 20',
)

# Based on their response of ""6-2+10+10"", they got 4 from 6-2 and 20 from 10+10
new_state = graph.explore_operation(
    curr_state,
    operation=""6-2=4"",
    resulting_state=(4, 10, 10),
    comment=""Based on response, participant computed 6-2=4"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(4, 20),
    comment=""Based on response, participant computed 10+10=20"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+20=24"",
    resulting_state=(24,),
    comment=""Based on response, participant computed 4+20=24"",
)
```"
502,"[1,4,5,11]",(11-5)x(4x1),159," Okay, 11 plus 1 is 22, 4 and 5 is 9. Huh. 11 plus 6, no. Huh. 12, not, okay. Alright, I see that I have to multiply some stuff. Uh, 5 times 4 is 20. There's no way to get, huh. 5 minus 1 is 4. Uh, 11 times 4, no. 5 minus 1 is 4. Okay, right now I'm seeing if there's a way I can make a 2. Why do I want to make a 2? No. I want to make a 2. I want to make a 3. Okay, so 4 minus 1 is 3. 11, no, that's not it. 11 minus 4 is 7. No, that's not it. Huh. Huh. I might be stumped on this one too. Eleven. Minus 1 is 10. No. Huh. Make a 20 and a 4. Okay. Alright, thank you for the reminder. Huh. I, like when I'm being quiet, I'm not being quiet. I'm not being quiet. I'm really just looking at the numbers. Again, I said it before. I'm trying to see how to put them together. Like 5, 11 minus 5 is 6. Oh, there we go. Okay. 11 minus 5 is 6. 6 times 4 times 1.","```python
start_state = (1, 4, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 1 is 22"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=22"",
    resulting_state=(4, 5, 22),
    comment='""11 plus 1 is 22""',
    result_calc_error=True,
)

# ""4 and 5 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(1, 9, 11),
    comment='""4 and 5 is 9""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 11, 20),
    comment='""5 times 4 is 20""',
)

# ""5 minus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 4, 11),
    comment='""5 minus 1 is 4""',
)

# ""4 minus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 5, 11),
    comment='""4 minus 1 is 3""',
)

# ""11 minus 4 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(1, 5, 7),
    comment='""11 minus 4 is 7""',
)

# ""Eleven. Minus 1 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(4, 5, 10),
    comment='""Eleven. Minus 1 is 10""',
)

# ""11 minus 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(1, 4, 6),
    comment='""11 minus 5 is 6""',
)

# ""6 times 4 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4*1=24"",
    resulting_state=(24,),
    comment='""6 times 4 times 1""',
)
```"
503,"[3,3,11,12]",(11x3)-(12-3),124," Let's go. 3, 3, 11, 12. Okay. Okay. 3, 3, 11, 12. Huh. Huh. Okay. I'm trying to find a way to make a 2 to multiply that with the 12. So I'm trying to see if there's, let's see, or if there's a way. Okay. 11 plus 3 is 14. No, that would make 23. Okay. Okay. 14 plus 12 is 26. Minus 3 is 24. Um, 11 minus 3 is 8. 8 times 3 is 24. But what would I do with the 12? 3 times 3 is 9. 9 plus 11 is 20. That doesn't work. Um, 12 times 3 is 36. No. 11 times 3 is 33. Oh, minus 9. Okay. So here we go. 11 times 3 is 33. Minus 9.","```python
start_state = (3, 3, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I'm trying to find a way to make a 2 to multiply that with the 12"" suggests a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""I\'m trying to find a way to make a 2 to multiply that with the 12""',
)

# ""11 plus 3 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+3=14"",
    resulting_state=(3, 12, 14),
    comment='""11 plus 3 is 14""',
)

# ""14 plus 12 is 26. Minus 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+12-3=23"",
    resulting_state=(23,),
    comment='""14 plus 12 is 26. Minus 3 is 24"" - participant seems to have made a calculation error',
)

# ""11 minus 3 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(3, 8, 12),
    comment='""11 minus 3 is 8""',
)

# ""8 times 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(12, 24),
    comment='""8 times 3 is 24""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 11, 12),
    comment='""3 times 3 is 9""',
)

# ""9 plus 11 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(12, 20),
    comment='""9 plus 11 is 20""',
)

# ""12 times 3 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(3, 11, 36),
    comment='""12 times 3 is 36""',
)

# ""11 times 3 is 33""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(3, 12, 33),
    comment='""11 times 3 is 33""',
)

# ""minus 9"" - participant realizes they can subtract 12-3=9 from 33
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-(12-3)=24"",
    resulting_state=(24,),
    comment='""minus 9"" - participant realizes they can subtract 12-3=9 from 33',
)
```"
522,"[4,6,11,11]",(11-11)+6x4,89," Target number 24. So we've got 4, 6, 11, 11. I feel like these are getting more and more difficult as we go. 4, 6, 11, 11. So 11 plus 11, 22. That's going to be too much. What if we do 4 times 11 equals 44, which will leave us 6 times 11. No, that's not right. What if we do 4 times 11 equals 44, which will leave us 6 times 11. No, that's not right. 11 minus 4 would be 7. Wait, can we go negative? Because if we do 4 minus 11. No, negative, that's not going to be a problem. 17. Wait, what if we get rid of the 11s? Because 4 times 6 would be right. Okay, yeah. Okay, 11. 11 minus 11. So that's going to be 0 plus 4 times 6. Or I did that backwards. 6 times 1.","```python
start_state = (4, 6, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 11, 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(4, 6, 22),
    comment='""11 plus 11, 22""',
)

# ""What if we do 4 times 11 equals 44""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(6, 11, 44),
    comment='""What if we do 4 times 11 equals 44""',
)

# ""11 minus 4 would be 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(6, 7, 11),
    comment='""11 minus 4 would be 7""',
)

# ""if we do 4 minus 11"" participant considers but rejects this

# ""Wait, what if we get rid of the 11s? Because 4 times 6 would be right""
# This suggests the participant is setting a subgoal to use 4*6=24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""what if we get rid of the 11s? Because 4 times 6 would be right""',
)

# ""11 minus 11. So that's going to be 0 plus 4 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-11=0"",
    resulting_state=(0, 4, 6),
    comment='""11 minus 11""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""0+4*6=24"",
    resulting_state=(24,),
    comment='""So that\'s going to be 0 plus 4 times 6""',
)

```"
523,"[2,7,7,10]",(7+7)+(10-2),180," I'm ready. Alright, 2, 7, 7, 10. So I have a 2, 7, 7, 10, and to get to 24. Okay. Um, 24. Okay, so that's 14. Ooh, okay, let's see. Um, let's see. 7 plus 7, that equals 14. Um, and okay. Okay, let's try this one. Okay, we have 7 plus 7, which make 14. Um, plus 10 minus, uh, wait a minute. Oh, shoot. Okay, delete. Um, plus parenthesis 10 minus 2. Let's see. Oh, not all numbers are used. What? A 7, 7. Yes, it is. 7, 7, 2, and 10. Yes, they are all used. Okay. Well, okay, we'll do it again. But they were all used. Okay. So we have 7 plus 7 in parentheses. Um, plus 10 minus 2. Oh, come on. Not all numbers used. Incorrect. They are all used. Oh, or not. Okay. Well, 7 plus 7, plus 7. Okay, that is 14. Plus 10 minus 2, 8. Okay. Oh, okay, that's not right then. Okay, that's not right. Um, because it's already. Yeah, well, it should. Because that makes 14. That makes 24. Okay, let's see. 7 plus 7, that is 14. And then you have 10. Um, hmm. Okay. Uh, all right. So I guess, how does that not work? Because it looks like it should. Okay. Okay, 7 plus 7 is 14.","```python
start_state = (2, 7, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7, that equals 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(2, 10, 14),
    comment='""7 plus 7, that equals 14""',
)

# ""10 minus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(8, 14),
    comment='""10 minus 2""',
)

# Then the participant seems to be adding 14 and 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+8=24"",
    resulting_state=(24,),
    comment='The participant combines their previous results: ""That makes 24""',
)

# The participant seems to get confused about whether all numbers are used, but they are using all numbers:
# 7+7=14, then 10-2=8, then 14+8=24
# They keep rechecking their work but don't try any new operations

```"
529,"[4,7,8,12]",(4+8+12)-7,180," Okay, 4, 7, 8, 12. Okay. Okay, so we have 4, 7, 8, 12. And together that adds up to, let's see, 8, 9, 10, 11. Okay, all together it comes up to 31, and I need it to be 24. Okay. Seven too many. Seven too many. Okay, so let me try this. Minus 7. Ah! Okay, so all the numbers were used. Okay, so why didn't that work? 4 plus 8 is 12. Oh, and 12 is 12. Okay, 12 and 12, that is 24. Okay. That is 24. Okay, I can see why that is wrong then. What was I thinking? Okay, what was I thinking about that? It doesn't make any sense. Okay. Okay, so all of this, well, I guess that's what I was thinking. Add those together and subtract 7. Did I add those other ones wrong? Let me see. I couldn't have. Okay, so that was 10 makes 20. 7, 8, 29, 30. Yeah, it makes 31 total. So it is... 7 too many. Huh. I just don't understand that. If I take those, it makes 24. Okay, so 4 plus 8 plus 12 minus 7. 4 plus 4. Why is it adding up?","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""And together that adds up to..."" participant adds all numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7+8+12=31"",
    resulting_state=(31,),
    comment='""together that adds up to...31""',
)

# ""Seven too many"" participant realizes they need to subtract 7 to get to 24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8+12-7=24"",
    resulting_state=(24,),
    comment='""Seven too many...so let me try this. Minus 7""',
)

# ""4 plus 8 is 12. Oh, and 12 is 12. Okay, 12 and 12, that is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(7, 12, 12),
    comment='""4 plus 8 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(7, 24),
    comment='""12 and 12, that is 24""',
)

# The participant then goes back to checking their original solution
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8+12-7=24"",
    resulting_state=(24,),
    comment='""so 4 plus 8 plus 12 minus 7""',
)

```"
531,"[1,3,6,13]",,180," Okay. I'm not doing very well here. Let's see. This is hard. This is very hard. Okay. So we have a 1. We have a 3, a 6, and a 13. Okay. Get to 24. Get to 24. Okay. Okay. So what do we do here? What does that really add up to? First place, 4. Plus 6 makes 10. Okay. So it is 23 altogether. 23. If I added that right. Okay. So 3. Let's see. 3 plus 1, that makes 4. 4. 2 plus 1 plus 4. So that's, what is that? 9 to 4. 4. Hmm. Let's see. 3. Let's see. 3 times 6 is 18. 18. 13. 18 and 13. Let's see. 9, 10, 11, 9. Oh, that's too much. My gosh. Why is this so hard? This is really hard. Okay. So if I do, um, okay. 24, 24, 24. We've got to come up with 24. Let's see. Let's see. If I did 1 plus 3, that makes 4. 4. And that makes 19. That's not enough. Um, let's see. 3 times 18 or 3. Urgh. I just don't know. Um, 6 divided by 3 make 2.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# First the participant adds all numbers
# ""First place, 4. Plus 6 makes 10... So it is 23 altogether""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+3+6+13=23"",
    resulting_state=(23,),
    comment='""First place, 4. Plus 6 makes 10... So it is 23 altogether""',
)

# ""3 plus 1, that makes 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(4, 6, 13),
    comment='""3 plus 1, that makes 4""',
)

# ""3 times 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(1, 13, 18),
    comment='""3 times 6 is 18""',
)

# ""1 plus 3, that makes 4... And that makes 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+3+6+13=19"",
    resulting_state=(19,),
    comment='""1 plus 3, that makes 4... And that makes 19"" - participant seems to have made a calculation error',
    result_calc_error=True
)

# ""6 divided by 3 make 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(1, 2, 13),
    comment='""6 divided by 3 make 2""',
)
```"
535,"[1,4,5,6]",,180," Use 1, 4, 5, and 6. 5 and... 4 and 6 is 24. So 6 divided by 6 is 1. 4 is 1. I can do 6 divided by 1 times... Okay, give me a break on this one, alright? 24... times 4 times 4 is 24 minus 5 would not be the answer. Alright, so delete, delete, delete, delete, delete. Okay. Um... 6 times... 6... 6 times... 6 times is 30. 30... 6 times 4 is 30. Shoot. 6 times... Wow, I can't get this. Seriously? 6... What am I missing? It's 20... 5 times 4 is 20... 20... 26... Aren't you gonna educate yourself? 20... 6 times 4 is 4... minus 30... 30... 30 minus 4 is 6... Um... 5 times 1 is 5... 25... nope. Um... 4 plus... 6... Okay, so it's on. 30... 30 minus... 5... is still only 30... 25... Shit, are you kidding me? Wow. I feel weird right now. 6...","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 and 6 is 24"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(1, 5, 24),
    comment='""4 and 6 is 24"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""6 divided by 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/1=6"",
    resulting_state=(4, 5, 6),
    comment='""6 divided by 1""',
)

# ""6 times 4 is 30"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=30"",
    resulting_state=(1, 5, 30),
    comment='""6 times 4 is 30"" - calculation error',
    result_calc_error=True,
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 6, 20),
    comment='""5 times 4 is 20""',
)

# ""5 times 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*1=5"",
    resulting_state=(4, 5, 6),
    comment='""5 times 1 is 5""',
)

# The rest of the transcript shows the participant struggling but not clearly stating any new operations
```"
548,"[2,6,8,9]",(9+6,180," Okay. 12, 8, 9, 17, 9 and 2. 9 plus 2 is 11. 11, 6 and 8, 14. Minus 1 maybe? But we're doing an order of operations. 12. So maybe it's 16. That leaves me with 8. Okay, 16. So we're going to 8 times 2 here. That's 16. Okay. 16 and 8. Wrong, wrong, wrong. 16 and 8. 16 and 8. No. 9 and 3. No, I think. Let's go this direction. 9 minus 6 is 3. 9 minus 2 is 6. So somewhere there's got to be a 4. Maybe. Or maybe. Let's see. 9 plus 8 is 17. 18, 19, 25. 25 minus 1. Let's see. Let's try this. 9 plus 8. Uh-oh. 9. 9 plus 8 is 17. Ah, 17. Plus 6. Clothes. Minus. Minus 2? 14 plus 9 is 23. 17 plus 6 is 23. 23 minus 2. Wrong. Let's say plus 2. Minus. 10, 19. 19 plus 6 is 25. 25. No. 6, 15. 15.","```python
start_state = (2, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+2=11"",
    resulting_state=(6, 8, 11),
    comment='""9 plus 2 is 11""',
)

# ""11, 6 and 8, 14"" seems to be adding 6+8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(11, 14),
    comment='""11, 6 and 8, 14""',
)

# ""8 times 2 here. That's 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(6, 9, 16),
    comment='""8 times 2 here. That\'s 16""',
)

# ""9 minus 6 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(2, 3, 8),
    comment='""9 minus 6 is 3""',
)

# ""9 minus 2 is 6"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=6"",
    resulting_state=(6, 6, 8),
    result_calc_error=True,
    comment='""9 minus 2 is 6"" - calculation error',
)

# ""9 plus 8 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(2, 6, 17),
    comment='""9 plus 8 is 17""',
)

# ""Plus 6"" from the 17 state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+6=23"",
    resulting_state=(2, 23),
    comment='""Plus 6""',
)

# ""23 minus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23-2=21"",
    resulting_state=(21,),
    comment='""23 minus 2""',
)

# The participant submitted ""(9+6"" but ran out of time before completing the expression
```"
553,"[2,6,8,13]",(13x2)-(8-6),52," Okay, so, 18 times 2 give us 26. 26, okay, 18 times 2, if you go to 26, 26 minus 2, minus 8, minus 6, minus 8, minus 6.","```python
start_state = (2, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""18 times 2 give us 26"" seems to be a slip of the tongue - they likely meant ""13 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(6, 8, 26),
    comment='""18 times 2 give us 26"" seems to be a slip of the tongue - they likely meant ""13 times 2""',
)

# ""26 minus 2"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-2=24"",
    resulting_state=(6, 8, 24),
    comment='""26 minus 2""',
)

# ""minus 8, minus 6"" participant seems to be trying different subtractions
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(8-6)=24"",
    resulting_state=(24,),
    comment='""minus 8, minus 6"" participant seems to be trying different subtractions and finds that subtracting (8-6) works',
)

```"
556,"[2,3,10,13]",(3,180, You will start with a set of 4 numbers and have to make the number 24. 13 is 39 39 minus 10 is 29 29 13 30 30 minus 18 18 30 minus 18 17 plus 2 is 19 2 times 20 3 times 10 is 13 30 divided by 2 30 divided by 2 is 15 15 plus 13 okay so and 3 times 10 13 divided by 2 15 plus 3 13 15 plus 15 plus 13 16 uh actually the combinations are there 10 plus 13 23 23 plus huge 25 25 minus 3 back to 22. that's difficult 3 times 2 is 6 6 6 plus 10 is 16 16 plus 13 29 so we have 10 times 2 10 times 2 is 20. 29 4 3 times 2 is 17 17 plus 13 13.,"```python
start_state = (2, 3, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 is 39"" seems to be 13*3
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(2, 10, 39),
    comment='""13 is 39"" seems to be multiplying 13 and 3',
)

# ""39 minus 10 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39-10=29"",
    resulting_state=(2, 29),
    comment='""39 minus 10 is 29""',
)

# ""3 times 10 is"" participant goes back to start numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(2, 13, 30),
    comment='""3 times 10 is""',
)

# ""30 divided by 2 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30/2=15"",
    resulting_state=(13, 15),
    comment='""30 divided by 2 is 15""',
)

# ""15 plus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+13=28"",
    resulting_state=(28,),
    comment='""15 plus 13""',
)

# ""10 plus 13 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(2, 3, 23),
    comment='""10 plus 13 23""',
)

# ""3 times 2 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(6, 10, 13),
    comment='""3 times 2 is 6""',
)

# ""6 plus 10 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10=16"",
    resulting_state=(13, 16),
    comment='""6 plus 10 is 16""',
)

# ""16 plus 13 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+13=29"",
    resulting_state=(29,),
    comment='""16 plus 13 29""',
)

# ""10 times 2 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 13, 20),
    comment='""10 times 2 is 20""',
)

# ""3 times 2 is 17"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=17"",
    resulting_state=(10, 13, 17),
    comment='""3 times 2 is 17"" seems to be a calculation error',
    result_calc_error=True,
)

# ""17 plus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+13=30"",
    resulting_state=(10, 30),
    comment='""17 plus 13""',
)
```"
560,"[3,7,7,9]",,180," Seven times seven is forty-nine. Forty-nine minus nine. Forty. Okay. Seven times seven is forty-nine. Forty-nine divided by three. Forty-nine divided by three. Okay. Three times nine is twenty-seven. Twenty-seven minus seven is twenty-seven. Forty-nine plus seven. Three minus seven. Seven minus three. Seven minus three will give me four. Four times. Four times seven will give me twenty-eight. Eighteen. Eighteen. Eighteen times seven. Eighteen plus seven. Twenty-five. I won't go there. So, seven times seven is forty-nine. Okay. Three minus nine is six. Six times seven is forty-two. Seven minus seven. Three plus seven is twenty-one. Twenty-one plus nine. Minus seven. Twenty-three. Nine times three. Seven times seven. Nine minus three times seven is nine. Seven minus three. Three minus eighteen. Eighteen. Three minus three is going to give us four. Four times nine. That is six. Minus seven. Forty-nine. So, we have a move. Seven times seven is forty-nine. Forty-nine divided by nine. Forty-nine divided by nine.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Seven times seven is forty-nine""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""Seven times seven is forty-nine""',
)

# ""Forty-nine minus nine. Forty""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49-9=40"",
    resulting_state=(3, 40),
    comment='""Forty-nine minus nine. Forty""',
)

# ""Forty-nine divided by three""
new_state = graph.explore_operation(
    curr_state,
    operation=""49/3=16.33"",
    resulting_state=(9, 16.33),
    comment='""Forty-nine divided by three""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""Three times nine is twenty-seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(7, 7, 27),
    comment='""Three times nine is twenty-seven""',
)

# ""Seven minus three will give me four""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 7, 9),
    comment='""Seven minus three will give me four""',
)

# ""Four times seven will give me twenty-eight""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(9, 28),
    comment='""Four times seven will give me twenty-eight""',
)

# Going back to start for new approach
curr_state = graph.move_to_node(start_state)
# ""Three minus nine is six"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 7, 7),
    comment='""Three minus nine is six"" (calculation error)',
)

# ""Six times seven is forty-two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(7, 42),
    comment='""Six times seven is forty-two""',
)

# Going back to start
curr_state = graph.move_to_node(start_state)
# ""Three plus seven is twenty-one"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7=21"",
    resulting_state=(7, 9, 21),
    comment='""Three plus seven is twenty-one"" (calculation error)',
    result_calc_error=True,
)

# ""Twenty-one plus nine. Minus seven. Twenty-three"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+9-7=23"",
    resulting_state=(23,),
    comment='""Twenty-one plus nine. Minus seven. Twenty-three""',
)

# Going back to start
curr_state = graph.move_to_node(start_state)
# ""Nine times three""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""Nine times three""',
)

# ""Seven times seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""Seven times seven""',
)

# ""Forty-nine divided by nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/9=5.44"",
    resulting_state=(3, 5.44),
    comment='""Forty-nine divided by nine""',
)
```"
563,"[4,7,7,8]",,180," Target number 24. Okay. Alright, let's see. 7 plus 7 is 14. Times 8. Divided by 4. No. Some of these I'm beginning to think are unsolvable. Let's see. 7 times 4 is 20. Okay. 7 times 7 is 49. 49 times 4 is 196. Divided by 8. No. Okay. 8 times 7 is 56. Times 7 is 392. Divided by 4. No. So, 4 times 7 times 8. Divided by 7. No. Okay. I am saying them out loud. Let's see. Okay. I'm just not talking very loud. Let's see. 8 times 4 is 32. Let's see. What's 8 times 7 times 7. Divided by 4. No. Let's see. 7 times 7 times 4. Divided by 8. No. It's close. That's not it. Let's try this. 14 times 4. No. 14 times 8. Divided by 4. Close. close. 11 times 7, no, 11 times 8, no, 32, 32 times 7, divided by 7, no, 7 times 7, 7 times 7, no, no, let's go, let's go 7 plus 4 times 8, no, all right, what if I just add them all up, 4 plus 7 plus 7 plus 8, 26, okay, let's go 49, minus 8, no, 49 minus 4, no, 56 minus 7, no, oh wait, 56 minus 4, divided by 7, no,","```python
start_state = (4, 7, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(4, 8, 14),
    comment='""7 plus 7 is 14""',
)

# ""Times 8. Divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*8/4=28"",
    resulting_state=(28,),
    comment='""Times 8. Divided by 4""',
)

# ""7 times 4 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(7, 8, 28),
    comment='""7 times 4 is 20"" - calculation error',
    result_calc_error=True,
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(4, 8, 49),
    comment='""7 times 7 is 49""',
)

# ""49 times 4 is 196. Divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49*4/8=24.5"",
    resulting_state=(24.5,),
    comment='""49 times 4 is 196. Divided by 8""',
)

# ""8 times 7 is 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(4, 7, 56),
    comment='""8 times 7 is 56""',
)

# ""Times 7 is 392. Divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56*7/4=98"",
    resulting_state=(98,),
    comment='""Times 7 is 392. Divided by 4""',
)

# ""4 times 7 times 8. Divided by 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7*8/7=32"",
    resulting_state=(32,),
    comment='""4 times 7 times 8. Divided by 7""',
)

# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 7, 32),
    comment='""8 times 4 is 32""',
)

# ""What's 8 times 7 times 7. Divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7*7/4=98"",
    resulting_state=(98,),
    comment='""What\'s 8 times 7 times 7. Divided by 4""',
)

# ""7 times 7 times 4. Divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7*4/8=24.5"",
    resulting_state=(24.5,),
    comment='""7 times 7 times 4. Divided by 8""',
)

# ""14 times 4"" - using the 14 from 7+7 earlier
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+7)*4=56"",
    resulting_state=(8, 56),
    comment='""14 times 4"" - using the 14 from 7+7',
)

# ""14 times 8. Divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+7)*8/4=28"",
    resulting_state=(28,),
    comment='""14 times 8. Divided by 4""',
)

# ""32 times 7, divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4*7/7=32"",
    resulting_state=(32,),
    comment='""32 times 7, divided by 7""',
)

# ""7 plus 4 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+4)*8=88"",
    resulting_state=(7, 88),
    comment='""7 plus 4 times 8""',
)

# ""what if I just add them all up, 4 plus 7 plus 7 plus 8, 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7+7+8=26"",
    resulting_state=(26,),
    comment='""what if I just add them all up, 4 plus 7 plus 7 plus 8, 26""',
)

# ""49, minus 8"" - using 49 from 7*7
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7-8=41"",
    resulting_state=(4, 41),
    comment='""49, minus 8"" - using 49 from 7*7',
)

# ""49 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7-4=45"",
    resulting_state=(8, 45),
    comment='""49 minus 4""',
)

# ""56 minus 7"" - using 56 from 8*7
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7-7=49"",
    resulting_state=(4, 49),
    comment='""56 minus 7"" - using 56 from 8*7',
)

# ""56 minus 4, divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*7-4)/7=7.43"",
    resulting_state=(7.43,),
    comment='""56 minus 4, divided by 7""',
)
```"
565,"[2,3,9,10]",,180," Alright, target number 24. Alright, 2 times 3 is 6, 6 times 9 is 54, 54 divided by 10, no, wait, what about, I think we gotta get rid of the 10 here somehow, so 10, 10 minus 2 is 8, 8 times 3 is 24, but then you still got the 9. Okay, 9 divided by 3 is 3, 2 times 3, no, okay, let's go 10, let's go 9 times 2 is 18, 18 plus 10 is 28, minus 3 is 25, that gets us close, let's see. Um, 9 minus 2 is 7, 7 times 3, nope, 7 times 10, nope, um, let's see, 2 times 3, nope, ah, 10 minus 3, 10 minus 3 is 7, 7 times 9 is 56, 56 divided by 2, no. Hmm, fine, hmm, let's see, so, let's try this, um, what if we did 10 times 2 is 20, oh, wait, 20, let's going to plus 9, 10 is 20, I think, 9, 9, 9, 9, 9, 2, 9, 9, 9, 1, 2, 2, 9, 5, 9. Hmm, let's see, um, okay, hmm, 10 plus 3 is 20, is 13 times 2, no, what if we did this 9 plus 10 is 19, times 2 is...","```python
start_state = (2, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 9, 10),
    comment='""2 times 3 is 6""',
)

# ""6 times 9 is 54""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(10, 54),
    comment='""6 times 9 is 54""',
)

# ""54 divided by 10"" participant starts but abandons this path

# ""10 minus 2 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(3, 8, 9),
    comment='""10 minus 2 is 8""',
)

# ""8 times 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(9, 24),
    comment='""8 times 3 is 24""',
)

# ""9 divided by 3 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(2, 3, 10),
    comment='""9 divided by 3 is 3""',
)

# ""9 times 2 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(3, 10, 18),
    comment='""9 times 2 is 18""',
)

# ""18 plus 10 is 28, minus 3 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+10-3=25"",
    resulting_state=(25,),
    comment='""18 plus 10 is 28, minus 3 is 25""',
)

# ""9 minus 2 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(3, 7, 10),
    comment='""9 minus 2 is 7""',
)

# ""10 minus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(2, 7, 9),
    comment='""10 minus 3 is 7""',
)

# ""7 times 9 is 56""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=56"",
    resulting_state=(2, 56),
    result_calc_error=True,
    comment='""7 times 9 is 56""',
)

# ""10 times 2 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 9, 20),
    comment='""10 times 2 is 20""',
)

# ""10 plus 3 is 20, is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(2, 9, 13),
    comment='""10 plus 3 is 13""',
)

# ""9 plus 10 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(2, 3, 19),
    comment='""9 plus 10 is 19""',
)

# ""times 2"" participant starts to multiply by 2 but doesn't complete the thought
```"
571,"[5,5,8,13]",,180," Target number 24, 5, 5, 8, and 13. 13 minus 8 is 5, so not much we can do there. But 5 minus 8 is 3. 13 plus 8 is 21, so that does not get us there. 5 plus 5 is 10. No. 8 times 13. Divide it by 5. No. 10. 5 times 13. Divide it by 3. Nope. Let's go... 40 minus 13 minus 5. 40 minus 13 minus 5 is 22. Nope. 5 plus 8 is 13. 13 times 13. Divide it by 5. Nope. 5 times 5. 5 times 5. Uh... Times 8. Divide it by 13. It's not going to do it. Um, but... 5 times 5 times 13. Divide that by 8. You might not get it. Um... Okay. Let's see. How can the numbers... 5, 5, 5, 8, and 13. I just don't know. Adding... the plot... Hmm... I need to find a different thing. Let's see. 5 minus 13 is 8. 8 plus 5 is 13. Nope. Hmm... Umm... Hmmm... Okay, 5 times 8 is 40. That's 13. okay let's try that let's try 40 minus 13 minus 5 is 22","```python
start_state = (5, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 8 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(5, 5, 5),
    comment='""13 minus 8 is 5""',
)

# ""5 minus 8 is 3"" - participant likely meant 8-5=3
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 13),
    comment='""5 minus 8 is 3"" - participant likely meant 8-5=3',
)

# ""13 plus 8 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(5, 5, 21),
    comment='""13 plus 8 is 21""',
)

# ""5 plus 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(8, 10, 13),
    comment='""5 plus 5 is 10""',
)

# ""8 times 13. Divide it by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*13/5=20.8"",
    resulting_state=(5, 20.8),
    comment='""8 times 13. Divide it by 5""',
)

# ""5 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*13=65"",
    resulting_state=(5, 8, 65),
    comment='""5 times 13""',
)

# ""40 minus 13 minus 5 is 22"" - the 40 likely came from 5*8
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8-13-5=22"",
    resulting_state=(22,),
    comment='""40 minus 13 minus 5 is 22"" - the 40 likely came from 5*8',
)

# ""5 plus 8 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(5, 13, 13),
    comment='""5 plus 8 is 13""',
)

# ""13 times 13. Divide it by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13/5=33.8"",
    resulting_state=(33.8,),
    comment='""13 times 13. Divide it by 5""',
)

# ""5 times 5. Times 8. Divide it by 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5*8/13=15.38"",
    resulting_state=(15.38,),
    comment='""5 times 5. Times 8. Divide it by 13""',
)

# ""5 times 5 times 13. Divide that by 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5*13/8=40.625"",
    resulting_state=(40.62,),
    comment='""5 times 5 times 13. Divide that by 8""',
)

# ""5 minus 13 is 8"" - participant likely meant 13-5=8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(5, 8, 8),
    comment='""5 minus 13 is 8"" - participant likely meant 13-5=8',
)

# ""8 plus 5 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(8, 13),
    comment='""8 plus 5 is 13""',
)

# ""5 times 8 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(5, 13, 40),
    comment='""5 times 8 is 40""',
)

# ""40 minus 13 minus 5 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-13-5=22"",
    resulting_state=(22,),
    comment='""40 minus 13 minus 5 is 22""',
)
```"
572,"[5,9,10,11]",(9x5)-(10+11),145," Alright, so the target number is 24, so let's see. If I add 19, and 5 would be 24, but then I have the 11, so if I add, let's see, 21, 30 minus 5 would be not quite it. Actually, if I add 20, let's see, 9 plus 11 would be 20. That's not going to work either. This is a hard task. Let's see. If I add 16 and 9, that would be 25. Okay, if I add 20 and 30, 20 and 10, that would be 30 minus 5 is 25, not 24. Let's see. 21 minus 9 would be 16. That wouldn't work. 21 minus 5. Or 21 minus 9. 21 minus 9 would be 12. Plus 5. That's not going to give it to you. Let's see. 11 plus 5 would be 16. Plus 10 would be 26. Minus 9. That's not going to work. 26. Seems like I need a big number and then subtract something. Oh, but I can multiply them too. I wasn't thinking of that. Okay, so I could say like 45, 9 times 5, minus 21. 45 minus 21. That would be it. Okay, so let's see. 9 times 5 is 45. Let's see. Minus 10. Minus 10. Plus 11.","```python
start_state = (5, 9, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I add 19, and 5 would be 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (19, 5),
    state_after_subgoal=(24,),
    comment='""If I add 19, and 5 would be 24""',
)

# ""9 plus 11 would be 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(5, 10, 20),
    comment='""9 plus 11 would be 20""',
)

# ""if I add 16 and 9, that would be 25"" - participant seems to be setting another subgoal
graph.set_subgoal(
    (16, 9),
    state_after_subgoal=(25,),
    comment='""if I add 16 and 9, that would be 25""',
)

# ""20 and 10, that would be 30 minus 5 is 25"" - participant seems to be setting another subgoal
graph.set_subgoal(
    (20, 10, 5),
    state_after_subgoal=(25,),
    comment='""20 and 10, that would be 30 minus 5 is 25""',
)

# ""21 minus 9 would be 12"" - participant seems to be setting another subgoal
graph.set_subgoal(
    (21, 9),
    state_after_subgoal=(12,),
    comment='""21 minus 9 would be 12""',
)

# ""11 plus 5 would be 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(9, 10, 16),
    comment='""11 plus 5 would be 16""',
)

# ""Plus 10 would be 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+10=26"",
    resulting_state=(9, 26),
    comment='""Plus 10 would be 26""',
)

# ""Oh, but I can multiply them too""
curr_state = graph.move_to_node(start_state)
# ""9 times 5 is 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(10, 11, 45),
    comment='""9 times 5 is 45""',
)

# ""Minus 10. Plus 11"" - participant tries different combinations with 45
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-(10+11)=24"",
    resulting_state=(24,),
    comment='""Minus 10. Plus 11"" - participant subtracts sum of 10 and 11 from 45',
)
```"
573,"[3,5,6,8]",,180," Okay, 24. So I could say like 8 times 6 is 48. That's too high to start with. I could multiply lower numbers like 3 times 5 is 15 plus 14. That would be too much. So I would say 15 plus 8 plus 6 is too high. Let's see, I could say like 5 times 6 would be 30 minus 8 would be 22 plus 3. That's too much. Let's see, 3 times 6 would be 18 plus 8 would be 26 minus 6. That's not going to work. How about 3 times 6? 3 times 8, 24. And then I would have to, okay, so 3 times 8 is 24. And then I would have to subtract. No, I'd have to add. So I could say like plus 6 would be 30 minus 5. That still doesn't give that to you though. Let's see, 5 times 8 would be 40. Minus 6, minus 3, or minus 18. No, minus 9 would be 31. That's not right. Let's see. 3 times 6, 3 times 8, 3 times 5 would be 15 plus 14 would be 29. So, or I could say 15 plus, no, that's not enough. Okay, let's see. If I said 5 times 8 would be 40. And I would have to subtract something net. So 5 times 8 minus 18, that's not enough. Minus 9, that's not enough. Oh, jeez, this is a hard one. Okay, so 5 times 6, 30. Or, let's see, if I add them all together, that would be 8, 14, 22. That's not enough. 8, 14, 22. So that means I have to multiply something. So I could start with 3 times 5 would be 15. I'd have to get 9 somehow. So, or 3 times...","```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 6 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(3, 5, 48),
    comment='""8 times 6 is 48. That\'s too high to start with.""',
)

# ""3 times 5 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(6, 8, 15),
    comment='""3 times 5 is 15""',
)

# ""15 plus 8 plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+8+6=29"",
    resulting_state=(29,),
    comment='""15 plus 8 plus 6""',
)

# ""5 times 6 would be 30 minus 8 would be 22 plus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(3, 8, 30),
    comment='""5 times 6 would be 30""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-8+3=25"",
    resulting_state=(25,),
    comment='""30 minus 8 would be 22 plus 3""',
)

# ""3 times 6 would be 18 plus 8 would be 26 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(5, 8, 18),
    comment='""3 times 6 would be 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8-6=20"",
    resulting_state=(5, 20),
    comment='""18 plus 8 would be 26 minus 6""',
)

# ""3 times 8, 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(5, 6, 24),
    comment='""3 times 8, 24""',
)

# ""plus 6 would be 30 minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+6-5=25"",
    resulting_state=(25,),
    comment='""plus 6 would be 30 minus 5""',
)

# ""5 times 8 would be 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(3, 6, 40),
    comment='""5 times 8 would be 40""',
)

# ""5 times 6, 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(3, 8, 30),
    comment='""5 times 6, 30""',
)

# ""if I add them all together, that would be 8, 14, 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6+5+3=22"",
    resulting_state=(22,),
    comment='""if I add them all together, that would be 8, 14, 22""',
)

# ""3 times 5 would be 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(6, 8, 15),
    comment='""3 times 5 would be 15""',
)
```"
574,"[4,7,8,13]",(13+8)+(7-4),73," Okay, I'll continue. Okay, 24, so I can get to 21 by 13 and 18. Let's see, so 13 plus 18 minus 7 plus 4, something like that. So it'd be 21 minus 3. Oh, maybe it's this one. 21 plus 7 minus 4. Okay, I think that's it. So if I say 13, okay, actually I want to go back. So I have 13 plus 8 plus 7 minus 4. 7 minus, whoops, okay, minus 4. So 21 plus 3. Okay, that's right.","```python
start_state = (4, 7, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can get to 21 by 13 and 18"" - participant seems to be setting a subgoal of 21
graph.set_subgoal(
    (21,),
    state_after_subgoal=(24,),
    comment='""I can get to 21 by 13 and 18""',
)

# ""13 plus 18"" - participant likely meant 13+8
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(4, 7, 21),
    comment='""13 plus 18"" - participant likely meant 13+8',
)

# ""21 plus 7 minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+7-4=24"",
    resulting_state=(24,),
    comment='""21 plus 7 minus 4""',
)

# The participant then says they want to go back and try something else
curr_state = graph.move_to_node(start_state)

# ""13 plus 8 plus 7 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8+(7-4)=24"",
    resulting_state=(24,),
    comment='""13 plus 8 plus 7 minus 4""',
)
```"
575,"[3,3,6,13]",,180," Okay, so target number 24. Okay, so if I added them all up, I would get 6, 12, 25. That wouldn't work. If I added like 19 plus 6, 19 plus 6 would be 25. That's too much. Just by 1 though. So, um, let's see. 3 times 3 would be 9. Um, plus 19, that would be too much. 9 times, uh, I don't know. Let's see, 3 times 6 would be 18. And then, let's see, I only need 6 more on top of that. So I could say, I have to add something to that. 3 times 6 plus 10, that wouldn't work. I'm saying 13 minus 3. I don't think that's going to work. Um, 3 times 13 would be 39. And then I'd have to subtract 15 somehow. So, 3 times 18 would be 21. That wouldn't work. Let's see. How about like 13 minus 6 would be 7. Times 6 would be 4. Um, that's twice as much as I need. Uh, let's see, 7 plus, or 7 times, okay, 7 times, excuse me, 3, or 3, so 6 times, uh, okay, I could say 3 times. All right. So 3 times 6 would be 18. Or I could say 13 minus 3 would be 10. And I have to combine 6 and 3. That's not going to work. Um, it's going to be over. So 13 minus 6, I already tried. That would be 7. Um, let's see. 6 plus 13 would be 19. I can't get to 24 by then. Minus 3 plus 3, that's not going to work. Um, let's see. 3. Um, so 13 minus 6 would be 7. Um, times 6. That's not going to work. How about 6 minus 3 would be 3. and then I","```python
start_state = (3, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I added them all up, I would get 6, 12, 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3+6+13=25"",
    resulting_state=(25,),
    comment='""if I added them all up, I would get 6, 12, 25""',
)

# ""19 plus 6 would be 25"" - participant likely got 19 from 13+3+3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3+3+6=25"",
    resulting_state=(25,),
    comment='""19 plus 6 would be 25"" - participant likely got 19 from 13+3+3',
)

# ""3 times 3 would be 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 13),
    comment='""3 times 3 would be 9""',
)

# ""3 times 6 would be 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(3, 13, 18),
    comment='""3 times 6 would be 18""',
)

# ""13 minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(3, 6, 10),
    comment='""13 minus 3""',
)

# ""3 times 13 would be 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(3, 6, 39),
    comment='""3 times 13 would be 39""',
)

# ""13 minus 6 would be 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(3, 3, 7),
    comment='""13 minus 6 would be 7""',
)

# ""Times 6 would be 4"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=4"",
    resulting_state=(3, 3, 4),
    comment='""Times 6 would be 4"" seems to be a calculation error',
    result_calc_error=True,
)

# ""3 times 6 would be 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(3, 13, 18),
    comment='""3 times 6 would be 18""',
)

# ""13 minus 3 would be 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(3, 6, 10),
    comment='""13 minus 3 would be 10""',
)

# ""6 plus 13 would be 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(3, 3, 19),
    comment='""6 plus 13 would be 19""',
)

# ""13 minus 6 would be 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(3, 3, 7),
    comment='""13 minus 6 would be 7""',
)

# ""6 minus 3 would be 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3, 13),
    comment='""6 minus 3 would be 3""',
)
```"
577,"[1,1,5,8]",(5-1-1)x8,34," Okay, next. Okay, let me get this one. Alright, if I could get 8 times 3, that would be great, but 1 plus, let's see, 8 times, so 5 minus 2 would be 3. Okay, there we go. Got that one. Okay, so I can say 5 minus, whoops, 5 minus 1 minus 1, that's going to give me 3 times 8. That one was easier.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I could get 8 times 3, that would be great"" - participant is setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""if I could get 8 times 3, that would be great""'
)

# ""5 minus 2 would be 3"" - participant realizes they can get 3 by subtracting the two 1s from 5
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1-1=3"",
    resulting_state=(3, 8),
    comment='""5 minus 1 minus 1, that\'s going to give me 3""'
)

# Then they multiply by 8 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""that\'s going to give me 3 times 8""'
)
```"
578,"[1,1,2,13]",(13x2)-1-1,110," Okay, so 24, um, if I could get something 12 times 2, that would work. Oh, so maybe this is getting a little easier. So if I had 13 plus 1 minus 1 would be 12, and then times 2, uh, oh, that's not right, uh, 13 minus 1 minus 1, to fix that. 13 minus 1 minus 1, again, times 2. Okay, so, oh, that's not it either. 13 minus 1 would be 12, which is what I want, times 2 would be 24, but then I still have another minus 1. So 13 plus 1 minus 1 would be 13, which would be too much. Oh, gosh, okay. Um, I guess that's not it. 12 times, oh, wait, no, that's 12, that's 11 times 2, which isn't enough. Uh, okay, so I'm keeping going. Let's see, um, okay, so 13, let's see, maybe I could do, like, 13 times 2, which would be 26 minus 2. Oh, that doesn't, okay, 13 times 2, which is 26 minus 1 minus 1.","```python
start_state = (1, 1, 2, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I could get something 12 times 2"" - participant sets a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""if I could get something 12 times 2, that would work""',
)

# ""13 plus 1 minus 1 would be 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1-1=13"",
    resulting_state=(2, 13),
    comment='""13 plus 1 minus 1 would be 12"" - participant made calculation error',
)

# ""13 minus 1 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1-1=11"",
    resulting_state=(2, 11),
    comment='""13 minus 1 minus 1""',
)

# ""13 minus 1 would be 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(1, 2, 12),
    comment='""13 minus 1 would be 12""',
)

# ""times 2 would be 24, but then I still have another minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(1, 24),
    comment='""times 2 would be 24, but then I still have another minus 1""',
)

# ""13 plus 1 minus 1 would be 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1-1=13"",
    resulting_state=(2, 13),
    comment='""13 plus 1 minus 1 would be 13""',
)

# ""13 times 2, which would be 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(1, 1, 26),
    comment='""13 times 2, which would be 26""',
)

# ""minus 1 minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-1-1=24"",
    resulting_state=(24,),
    comment='""minus 1 minus 1""',
)
```"
579,"[6,9,9,12]",(12+9+9)-6,50," 24. Okay, so I need to get something that like, you know, maybe it could be like 2 times 12 or 6 times 4. So 21 minus 9. Let's see. 9 minus 6 would be 3. 15. If I add them all up, that'd be 2436. So I don't want to do that. But if I add 15, 18. Okay, if 18 is 20, these are 24 altogether. That'd be 21 and 30. Oh, and that's 6. So if I add 12 plus 9 plus 9 is 30 minus 6 is 24.","```python
start_state = (6, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""maybe it could be like 2 times 12"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""maybe it could be like 2 times 12""',
)

# ""or 6 times 4"" - another subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""or 6 times 4""',
)

# ""9 minus 6 would be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 9, 12),
    comment='""9 minus 6 would be 3""',
)

# ""If I add them all up"" seems to be adding all numbers in start state
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9+9+6=36"",
    resulting_state=(36,),
    comment='""If I add them all up, that\'d be 36""',
)

# ""if I add 12 plus 9 plus 9 is 30 minus 6 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9+9-6=24"",
    resulting_state=(24,),
    comment='""if I add 12 plus 9 plus 9 is 30 minus 6 is 24""',
)
```"
589,"[2,2,3,11]",(11+3)-2)x2,180," Let's see. Numbers are 2, 2, 3, and 11. All right. Let's see. All right. Let's do. All right. Let's see. 11 minus 2. All right. Parentheses 11. Parentheses 11 minus 2 is 9. Parentheses 10, 11, 12. Let's see. Plus 3 is 12. 12 times 2 is 24. All right. Let's see. 11 minus 2. Oh, wrong one. Oh, shoot. Crap. All right. 11 minus 2 is 10. 10 plus 3 is 13. Let's see. 11 minus 2 plus 3 times 2. Let's see. All right. That's wrong. All right. Let's see. 2 plus 11 minus 2 plus 3. Parentheses. Parentheses times 2. Parentheses. Nope. All right. Struggling with this one. Parentheses 11. Plus 3. Parentheses minus 2. Parentheses minus 2 times 2. 11 plus 3 minus minus 2. Parentheses times 2. 11 plus 3 minus minus 2. Oh, crap.","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 3, 9),
    comment='""11 minus 2 is 9""',
)

# ""Plus 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(2, 12),
    comment='""Plus 3 is 12""',
)

# ""12 times 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""12 times 2 is 24""',
)

# ""11 minus 2 is 10"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=10"",
    resulting_state=(2, 3, 10),
    comment='""11 minus 2 is 10"" - participant makes calculation error',
    result_calc_error=True,
)

# ""10 plus 3 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(2, 13),
    comment='""10 plus 3 is 13""',
)

# ""11 minus 2 plus 3 times 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-2+3)*2=24"",
    resulting_state=(24,),
    comment='""11 minus 2 plus 3 times 2""',
)

# ""2 plus 11 minus 2 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+11-2+3=14"",
    resulting_state=(14,),
    comment='""2 plus 11 minus 2 plus 3""',
)

# ""Parentheses 11. Plus 3. Parentheses minus 2. Parentheses minus 2 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""((11+3)-2)*2=24"",
    resulting_state=(24,),
    comment='""Parentheses 11. Plus 3. Parentheses minus 2. Parentheses minus 2 times 2""',
)
```"
590,"[3,5,8,13]",,180," Expect sometimes, the truth will be not on your mind. Let's see, 13 minus 8 is 25, and that does not work. okay so I'm gonna have to get a piece of paper here, I can't do this in my head. Okay, so if we go, I shouldn't get a, I shouldn't use decimals, that would make it harder. Um, so if I multiply, it'd be 15, 20, that won't work, then let's see, uh, carry on, okay, then 8, okay, that won't work, I hope three minutes run out pretty soon, I don't know how to do this one, so, run, clock, run, let's see here, let's see, 30, 95, 28, no, see, that's not gonna work, let's see, no, that's not gonna work, let's see here,","```python
start_state = (3, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 8 is 25"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=25"",
    resulting_state=(3, 5, 25),
    comment='""13 minus 8 is 25"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""if I multiply, it'd be 15, 20"" - participant likely trying 3*5=15 and then 3*8=24
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(8, 13, 15),
    comment='""if I multiply, it\'d be 15""',
)

# The rest of the transcript contains numbers (30, 95, 28) but without clear operations being performed. The participant seems to be struggling and waiting for time to run out.

```"
599,"[2,3,7,10]",,180," This one almost looks like the same numbers I've had once before and did not do well with them, so let's see what we can do here. All right, so if I subtract those two and that gets me to 20, it doesn't work. Then let's see here, that doesn't work. Okay, so if I divide those two, it gets me, no, that brings me to 20. I can get 20 in about five different ways so far. Let's see here, there's 25 if I do that way, so that doesn't work. There's another way to get 20. There's a 50, that doesn't work. That doesn't work. Okay, so let's multiply those two. That would be, but then I have the three hanging over, so that doesn't work. And that gets me in the teens there. Okay, times the same. Okay, let's do that math problem here real quick. Divide by 3. No, that gets me a decimal. That's not going to work. That's not going to work. So, I'm not seeing the answer to this one. So, I'll just hang here for the three minutes to run out and then move on to, I think it's the last, maybe the last trial. I hope so. Last or next to the last, so. I'm frustrated with this and ready for it to be over. So, I'm going to keep plugging along here, but these have been too hard for me. There's probably simple answers for it. I'm just going to keep going. Not able to, not able to see them. So, we'll just keep jibber jabber in here until we run out this three minute timer.","```python
start_state = (2, 3, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I subtract those two and that gets me to 20""
# Most likely 10-7=3, then multiplying by something to get 20
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 3),
    comment='""if I subtract those two and that gets me to 20""',
)

# ""if I divide those two, it gets me, no, that brings me to 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(3, 5, 7),
    comment='""if I divide those two""',
)

# ""there's 25 if I do that way""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7+3+2=22"",
    resulting_state=(22,),
    result_calc_error=True,
    comment='""there\'s 25 if I do that way""',
)

# ""There's a 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7=70"",
    resulting_state=(2, 3, 70),
    comment='""There\'s a 50"" - participant likely meant to multiply 10*7 to get close to 50',
)

# ""Divide by 3. No, that gets me a decimal""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70/3=23.33"",
    resulting_state=(2, 23.33),
    comment='""Divide by 3. No, that gets me a decimal""',
)

# The rest of the transcript is the participant expressing frustration and waiting for time to run out
```"
601,"[1,11,11,12]",(1+(11/11))x12,96," Target number 24. So, 1, 11, 11, and 12. So, 11, let's go. 11 plus 11. 11. Oh, dang it. Okay. So, 11 plus 11 is 22. Nope. That's not going to be right. Okay. So, that would be 10. That would be 22. Nope. 1, 11, 11, and 12. Let's go. 1, 11, 11, and 12. Don't know how to do this. Okay. So, 11 divided by 11 is 11. Plus 1. That's not right. Okay. So. And we had to go 11. No. Wait. 1 plus 11 divided by 11. And times that. 12.","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(1, 12, 22),
    comment='""11 plus 11 is 22""',
)

# ""That would be 10"" - not clear what operation this refers to
# ""That would be 22"" - seems to be referring back to 11+11=22

# ""11 divided by 11 is 11"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11/11=11"",
    resulting_state=(1, 11, 12),
    comment='""11 divided by 11 is 11"" - calculation error',
    result_calc_error=True,
)

# ""Plus 1"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12),
    comment='""Plus 1""',
)

# ""1 plus 11 divided by 11. And times that. 12"" - this leads to their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+11/11)*12=24"",
    resulting_state=(24,),
    comment='""1 plus 11 divided by 11. And times that. 12"" - this leads to their final answer',
)
```"
602,"[1,4,12,12]",((4-1)x12)-12,57," Target number 24. Okay. 1, 4, 12, 12. I don't know how to do any of these. 1, 4, 12, 12. So, what would be the easiest way to do that? Nothing that I know how to do because I'm terrible at math. And so we have to ask AI to tell me how to do that. 1 over 12 is 24. This is a minus 4. Nope. So, if we do 4 minus 1. Nope, nope. 4 minus 1 times 12. 12 minus 12.","```python
start_state = (1, 4, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 over 12 is 24"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""1/12=24"",
    resulting_state=(4, 12, 24),
    comment='""1 over 12 is 24"" - calculation error',
    result_calc_error=True
)

# ""This is a minus 4"" isn't clear enough to code as an operation

# ""4 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 12, 12),
    comment='""4 minus 1""',
)

# ""4 minus 1 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(12, 36),
    comment='""4 minus 1 times 12""',
)

# ""12 minus 12"" - participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(24,),
    comment='""12 minus 12"" - participant subtracts 12 from previous result',
)
```"
613,"[4,8,8,11]",8+4+,180," Let me see. 8 plus 4 is 12. 8 plus 8 is 16. And 11 minus 4? Let me see. 11 plus 4 is 15. No, that's not going to go. 8 plus 11 is 19. Plus, 8 minus 4 is 5. 8 plus 7 is minus. Minus. Okay. 8 minus 4. 11, 8, 8 and 4. What are you talking about? Minus. Minus. Minus. Minus. Minus. Minus. 8 plus 8, 7, 8, 15, 23, oh shoot, let me see, I used the wrong numbers, let me see, 8 plus 8 equals 16 plus 11, no, what is 11 minus, oh no, no, I forgot, plus, parenthesis, 11 minus 4, parenthesis. 16, that's 23, golly, I needed one more point, 8 plus 4 equals 12, 12, 5, no,","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(8, 11, 12),
    comment='""8 plus 4 is 12""',
)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(4, 11, 16),
    comment='""8 plus 8 is 16""',
)

# ""11 plus 4 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4=15"",
    resulting_state=(8, 8, 15),
    comment='""11 plus 4 is 15""',
)

# ""8 plus 11 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(4, 8, 19),
    comment='""8 plus 11 is 19""',
)

# ""8 minus 4 is 5"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=5"",
    resulting_state=(5, 8, 11),
    comment='""8 minus 4 is 5"" - calculation error',
    result_calc_error=True,
)

# ""8 plus 8 equals 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(4, 11, 16),
    comment='""8 plus 8 equals 16""',
)

# ""plus 11"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+11=27"",
    resulting_state=(4, 27),
    comment='""plus 11""',
)

# ""8 plus 4 equals 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(8, 11, 12),
    comment='""8 plus 4 equals 12""',
)

```"
614,"[2,4,6,9]",9x2+6,180," 9 plus 6 is 15, times 2 is 30, 6 times 4 is 24, plus 9 is 33, you know, minus 2 is 2, 9 plus 6 is 15, no, that would be times 8, 4 times 9 is 36, let me try that, 9 times 4 is 36, minus 8, now that's 28, minus, 9 times 4, okay, 9 times 6 is 54, minus, minus 2 is 30, no, 9 times 4, 4 times 8, times 2, parenthesis, 54 minus 8, no, 36, 6 times, 6 times 4, 24, minus, 9 plus 2, parenthesis, 24 minus, that wouldn't even make sense, 9 times 2 is 18, 18, minus, let me see, 6 times 4, 18 minus 24, that doesn't make sense, why would I do that, 6 plus 4, maybe, parenthesis, 18 minus, no, 18 plus 4, 18 plus 6,","```python
start_state = (2, 4, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 6 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(2, 4, 15),
    comment='""9 plus 6 is 15""',
)

# ""times 2 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*2=30"",
    resulting_state=(4, 30),
    comment='""times 2 is 30""',
)

# ""6 times 4 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(2, 9, 24),
    comment='""6 times 4 is 24""',
)

# ""plus 9 is 33""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+9=33"",
    resulting_state=(2, 33),
    comment='""plus 9 is 33""',
)

# ""4 times 9 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(2, 6, 36),
    comment='""4 times 9 is 36""',
)

# ""minus 8"" (participant first computes 2+6=8)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+6=8"",
    resulting_state=(8, 36),
    comment='""minus 8"" (participant first computes 2+6=8)',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-8=28"",
    resulting_state=(28,),
    comment='""minus 8""',
)

# ""9 times 6 is 54""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(2, 4, 54),
    comment='""9 times 6 is 54""',
)

# ""minus 2 is 30"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54-2=30"",
    resulting_state=(4, 30),
    comment='""minus 2 is 30"" seems to be a calculation error',
    result_calc_error=True,
)

# ""6 times 4, 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(2, 9, 24),
    comment='""6 times 4, 24""',
)

# ""9 times 2 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(4, 6, 18),
    comment='""9 times 2 is 18""',
)

# ""18 plus 6"" - this matches their final response of 9x2+6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(4, 24),
    comment='""18 plus 6"" - this matches their final response of 9x2+6',
)
```"
618,"[3,4,8,10]",4x3x(10-8),148," Yeah, I have 3, 4, 8, and 10 to work with. I know, I've got to equal, maybe do half and half. Like 3 times 10 is 30, minus, I've got to get 6 for an answer, 8 times 1 is okay, 10, 14, plus, 8 minus 3, no, 8 plus 3, 12, minus, 12 plus, 10 minus 3 is 9, doesn't make sense, 10 plus 3 is 13, plus, 8 minus 4, 13 plus 8, minus 4. Let's see if I can make that. 3 numbers. One more. 30 minus 2 is 28 minus 2 is 28","```python
start_state = (3, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 10 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(4, 8, 30),
    comment='""3 times 10 is 30""',
)

# ""8 plus 3, 12"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8+3=12"",
    resulting_state=(4, 10, 12),
    comment='""8 plus 3, 12"" - participant makes calculation error',
    result_calc_error=True,
)

# ""10 minus 3 is 9"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=9"",
    resulting_state=(4, 8, 9),
    comment='""10 minus 3 is 9"" - participant makes calculation error',
    result_calc_error=True,
)

# ""10 plus 3 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(4, 8, 13),
    comment='""10 plus 3 is 13""',
)

# ""13 plus 8, minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8-4=17"",
    resulting_state=(17,),
    comment='""13 plus 8, minus 4""',
)

# Based on their final answer of 4x3x(10-8), they must have eventually tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3*(10-8)=24"",
    resulting_state=(24,),
    comment=""Based on their final answer"",
)
```"
621,"[6,6,7,10]",(10-7)x6+6,117," 70 minus 36, almost. 7 times 6 is 42. 60 minus 42, nope. 10 minus 6 is 4. 4 times 6 is 24, but then I'm stuck with a 7. 36 times 10, 360 divided by 7, nope. Double check. 70 minus 36 is 34. How about, uh, 70 minus 40. 70 minus 42 is 18. 10 minus 7 is 3. 6 times 6 is 36. 36 times 6 is 4. 6 minus 3 is 33. 10 minus 7 is 3. 3 times 6 is 18. 18 plus 6. 10 minus 7 is 3. 3 times 6. 6. 18 plus 6.","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 6 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(6, 10, 42),
    comment='""7 times 6 is 42""',
)

# ""10 minus 6 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 6, 7),
    comment='""10 minus 6 is 4""',
)

# ""4 times 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(7, 24),
    comment='""4 times 6 is 24""',
)

# ""36 times 10"" - participant likely got 36 from 6*6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(7, 10, 36),
    comment='""36 times 10"" - participant likely got 36 from 6*6',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36*10=360"",
    resulting_state=(7, 360),
    comment='""36 times 10""',
)

# ""360 divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""360/7=51.43"",
    resulting_state=(51.43,),
    comment='""360 divided by 7""',
)

# ""10 minus 7 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 6, 6),
    comment='""10 minus 7 is 3""',
)

# ""3 times 6 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(6, 18),
    comment='""3 times 6 is 18""',
)

# ""18 plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(24,),
    comment='""18 plus 6""',
)
```"
622,"[4,7,8,11]",,180," 7 times 4 is 28. 6 times 4 is 8. 8 times 3 is 11. 11 minus 7 is 4. 8 minus 4 is 4. We will get you there. 56 minus 44 is 12. 7 minus 4 is 3. 8 times 8 is 24. Then you are stuck with the 11. 11 minus 8 is 3. 7 times 7 is 21. 7 times 4 is 28. 28 plus 8 is 5. 5 is close. 8 times 4 is 32. 7 minus 11 is 14. 88. 4 is 28. 77, 97, 77, 97, 77, to the power of 8, nope, it's a decimal. So, I'm going to get 8 by 3, 4 plus 8 is 12, plus 8 is 20, 15, 8 plus 7 is 56, minus 40 is 4, I already tried that. Yep. 27, 31, 32, 35, 19 plus 7 plus 4 is 30, 11 plus 7 plus 4 is 32, so, come up with 48, we get 96 divided by 4, 9, 8, plus 7, 95,","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 11, 28),
    comment='""7 times 4 is 28""',
)

# ""11 minus 7 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 4, 8),
    comment='""11 minus 7 is 4""',
)

# ""8 minus 4 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 11),
    comment='""8 minus 4 is 4""',
)

# ""7 minus 4 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 8, 11),
    comment='""7 minus 4 is 3""',
)

# ""11 minus 8 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 7),
    comment='""11 minus 8 is 3""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 11, 28),
    comment='""7 times 4 is 28""',
)

# ""28 plus 8 is 5"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28+8=5"",
    resulting_state=(5, 11),
    comment='""28 plus 8 is 5"" - calculation error',
    result_calc_error=True,
)

# ""8 times 4 is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 11, 32),
    comment='""8 times 4 is 32""',
)

# ""4 plus 8 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(7, 11, 12),
    comment='""4 plus 8 is 12""',
)

# ""11 plus 7 plus 4 is 32"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7+4=32"",
    resulting_state=(8, 32),
    comment='""11 plus 7 plus 4 is 32"" - calculation error',
    result_calc_error=True,
)
```"
623,"[4,5,5,9]",,180," 5 times 5 is 10, plus 13 is 23, 4 plus 5 is 9, 9 times 5 is 45, and divided by 9, that doesn't work. 5 times 5 is 25, 9 times 5 is 36, 5 plus 5 is 10, 10 times 4 is 3, minus 9 is 31. 45 times 4 is 35, 4 times 5 is 20, 9 times 5 is 45, 45, and divide by 9, 9 times 5 9 times 4 is 36, 36 minus 9 is 37, 9 plus 5 is 14, 9 times 4 is 36, 9 times 4 is 36, 13, 14 times 5 is 26, 5 times 4 is 27, 17 and a half. Yeah, it's a tough one. Hm. So, that's a good one. 9 times 9 is 81, and 5, 16 plus 2, 13, 25, 9, 14, 10, 13, 36, 10, 45, 1, 45, 9, 36 minus 10, that's going to be 24.","```python
start_state = (4, 5, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 10"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=10"",
    resulting_state=(4, 9, 10),
    comment='""5 times 5 is 10"" - calculation error',
    result_calc_error=True,
)

# ""4 plus 5 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(5, 9, 9),
    comment='""4 plus 5 is 9""',
)

# ""9 times 5 is 45""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(9, 45),
    comment='""9 times 5 is 45""',
)

# ""and divided by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45/9=5"",
    resulting_state=(5,),
    comment='""and divided by 9""',
)

# ""5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 9, 25),
    comment='""5 times 5 is 25""',
)

# ""9 times 5 is 36"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=36"",
    resulting_state=(4, 5, 36),
    comment='""9 times 5 is 36"" - calculation error',
    result_calc_error=True,
)

# ""5 plus 5 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(4, 9, 10),
    comment='""5 plus 5 is 10""',
)

# ""10 times 4 is 3, minus 9 is 31"" - calculation errors
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*4=31"",
    resulting_state=(9, 31),
    comment='""10 times 4 is 3, minus 9 is 31"" - calculation errors',
    result_calc_error=True,
)

# ""4 times 5 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 9, 20),
    comment='""4 times 5 is 20""',
)

# ""9 times 5 is 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(4, 5, 45),
    comment='""9 times 5 is 45""',
)

# ""9 times 4 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(5, 5, 36),
    comment='""9 times 4 is 36""',
)

# ""9 plus 5 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(4, 5, 14),
    comment='""9 plus 5 is 14""',
)

# ""14 times 5 is 26"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*5=26"",
    resulting_state=(4, 26),
    comment='""14 times 5 is 26"" - calculation error',
    result_calc_error=True,
)

# ""5 times 4 is 27"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=27"",
    resulting_state=(5, 9, 27),
    comment='""5 times 4 is 27"" - calculation error',
    result_calc_error=True,
)

# The rest of the transcript contains numbers without clear operations between them
```"
625,"[4,4,9,11]",,180," 11-9 is 2, 2x4 is 8, 8x4 is 32, 4 plus 4, 9x4 is 36, 9x4 is 15, nope, 9-4 is 5, 5x4 is 20, nope, so 11-9 is 20 and then we can add 4, how do you use 4 and 4 to get 4? Let's try, 11, 11-1 is 2, I'm going to try that, 11 plus 9 is 20, 20, 20 plus 9 is 4, plus 4 is 24, 4 divided by 4 is 1, 11 plus 4 is 15, 15 plus 9 is 24, and then still got another 4. 9 plus, nope, 8, 19 plus 9 is 10, nope, 4 times 4 is 16, 16, 20 is 36, think I'm on the right path. 11 plus 9 is 20. Plus. 24. Can't take away, can't multiply. 7 times 4. 11 times 4. 24. Plus. 9. 9. 9.","```python
start_state = (4, 4, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11-9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 4, 4),
    comment='""11-9 is 2""',
)

# ""2x4 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(4, 8),
    comment='""2x4 is 8""',
)

# ""8x4 is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(32,),
    comment='""8x4 is 32""',
)

# Going back to start state for ""9x4 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(4, 11, 36),
    comment='""9x4 is 36""',
)

# ""9x4 is 15"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=15"",
    resulting_state=(4, 11, 15),
    comment='""9x4 is 15""',
    result_calc_error=True,
)

# ""9-4 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-4=5"",
    resulting_state=(4, 5, 11),
    comment='""9-4 is 5""',
)

# ""5x4 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(11, 20),
    comment='""5x4 is 20""',
)

# ""11 plus 9 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(4, 4, 20),
    comment='""11 plus 9 is 20""',
)

# ""20 plus 4 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+4=24"",
    resulting_state=(4, 24),
    comment='""20 plus 4 is 24""',
)

# ""11 plus 4 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4=15"",
    resulting_state=(4, 9, 15),
    comment='""11 plus 4 is 15""',
)

# ""15 plus 9 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+9=24"",
    resulting_state=(4, 24),
    comment='""15 plus 9 is 24""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(9, 11, 16),
    comment='""4 times 4 is 16""',
)

# ""11 plus 9 is 20"" - participant tries this combination again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(4, 4, 20),
    comment='""11 plus 9 is 20""',
)

# ""11 times 4"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=44"",
    resulting_state=(4, 9, 44),
    comment='""11 times 4""',
)
```"
627,"[3,3,12,12]",(12+12)/(3/3),73," 12 minus 3 is 8. 12 divided by 3 is 4. 10 to the 4th is 32. 36 is 36. 3 plus 3 is 6. Times 12, divided by 12, nope. 12 minus 3 is 9. 12 minus 3 is 9. 9 times 3 is 27. Let's do 12 and 12. 24 and 3 divided by 3 is 1. Apprentice A, 12 plus 12. That's 24. Divided by Apprentice A, 3 divided by 3 is 1.","```python
start_state = (3, 3, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 3 is 8"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=8"",
    resulting_state=(3, 8, 12),
    comment='""12 minus 3 is 8"" - calculation error',
    result_calc_error=True,
)

# ""12 divided by 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(3, 4, 12),
    comment='""12 divided by 3 is 4""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 12, 12),
    comment='""3 plus 3 is 6""',
)

# ""Times 12, divided by 12"" participant seems to be trying operations with the 6 they just computed
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12/12=6"",
    resulting_state=(6,),
    comment='""Times 12, divided by 12""',
)

# ""12 minus 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(3, 9, 12),
    comment='""12 minus 3 is 9""',
)

# ""9 times 3 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(12, 27),
    comment='""9 times 3 is 27""',
)

# ""Let's do 12 and 12. 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 3, 24),
    comment='""Let\'s do 12 and 12. 24""',
)

# ""and 3 divided by 3 is 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 24),
    comment='""3 divided by 3 is 1""',
)

# The participant then repeats their solution: ""12 plus 12. That's 24. Divided by Apprentice A, 3 divided by 3 is 1""
# This matches their submitted answer of (12+12)/(3/3)
```"
628,"[9,9,11,13]",(11+13)/(9/9),51, 13 x 11 is 2. 9 x 9 is 18. Plus 2 is 20. Let's see what 13 x 9 is. 13 x 9 is 17. Minus 8 is 1. That's 36. 13 minus 9 is 4. Then I need to get a 6 from 11 and 9. Then I get a word. We'll do the old 24 x 1. 11 plus 13 in parentheses. 24 divided by parentheses. 9 divided by 9.,"```python
start_state = (9, 9, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 x 11 is 2"" seems to be a transcription error or calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=2"",
    resulting_state=(9, 9, 2),
    comment='""13 x 11 is 2"" seems to be a calculation error',
    result_calc_error=True,
)

# ""9 x 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=18"",
    resulting_state=(11, 13, 18),
    comment='""9 x 9 is 18""',
    result_calc_error=True,
)

# ""13 x 9 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9=17"",
    resulting_state=(9, 11, 17),
    comment='""13 x 9 is 17""',
    result_calc_error=True,
)

# ""Then I need to get a 6 from 11 and 9"" suggests setting a subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""Then I need to get a 6 from 11 and 9""',
)

# Finally, the participant arrives at their solution: ""11 plus 13 in parentheses. 24 divided by parentheses. 9 divided by 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11+13)/(9/9)=24"",
    resulting_state=(24,),
    comment='""11 plus 13 in parentheses. 24 divided by parentheses. 9 divided by 9""',
)
```"
637,"[3,3,3,9]",(9-3),180," Okay, 3 times 3 is 9. 3 plus 3 is 6. Times 6 is 36. 9 times 3 is 27. Minus 3 is 24. Okay, 3 plus 3 is 6. Times 3 is 18. Plus 9 is 27. 3 plus 3 is 6. 81 divided by 3 is 27. I don't know. I don't know, y'all. I'm thinking. Let's do 9 divided by 3 times 3. So 3 times 3 is 9. Okay, now let's do 9 minus 3 is 6 times 9 minus 3 I don't know. I don't know, you guys. 9 9 minus 3 is 6 times","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 9, 9),
    comment='""3 times 3 is 9""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 6, 9),
    comment='""3 plus 3 is 6""',
)

# ""Times 6 is 36"" - participant seems to multiply 6 by 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(9, 18),
    comment='""Times 6 is 36""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 3, 27),
    comment='""9 times 3 is 27""',
)

# ""Minus 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(3, 24),
    comment='""Minus 3 is 24""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""3 plus 3 is 6. Times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*3=18"",
    resulting_state=(9, 18),
    comment='""3 plus 3 is 6. Times 3 is 18""',
)

# ""Plus 9 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+9=27"",
    resulting_state=(27,),
    comment='""Plus 9 is 27""',
)

# ""3 plus 3 is 6"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 6, 9),
    comment='""3 plus 3 is 6""',
)

# ""81 divided by 3 is 27"" - participant must have multiplied 9*9 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(3, 3, 81),
    comment='""81 divided by 3 is 27"" - first multiply 9*9',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""81/3=27"",
    resulting_state=(3, 27),
    comment='""81 divided by 3 is 27""',
)

# ""9 divided by 3 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3*3=9"",
    resulting_state=(3, 3, 9),
    comment='""9 divided by 3 times 3""',
)

# ""9 minus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 3, 6),
    comment='""9 minus 3 is 6""',
)
```"
638,"[8,8,8,11]",(11-8)x8,180," Let's do negative 8 plus 8 is 0. 11. 8 times 3 is 24, so we can do 8. It has to be something 11 minus 8. Plus 8 is 19. Plus 8 is 27. Minus 8 is 19 again. 8 times 11 minus 8 is 8 times 3 is 24. 8 times 11 minus 8 is 24. Guys, I actually don't know. 8 plus 8 is 16. Plus 8 is 24. But you have that 11 right here, so it's like... 8 minus 8 is 0. Plus 8 is 8. Plus 11 is 19. 8 over 8 is 1. Times 8 is 8. Plus 11 is 19. I don't know. 8 plus 8 is 19. Plus 11 is 27. Minus 8 is 19. 8 plus 11 is 19. 8 plus 11 is 19. 8 plus 11 is 19. Okay, let's do 11 minus 8, so that's 3. Times... 24.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""negative 8 plus 8 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=0"",
    resulting_state=(0, 8, 11),
    comment='""negative 8 plus 8 is 0""',
)

# ""8 times 3 is 24"" - participant seems to recognize this as a goal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""11 minus 8. Plus 8 is 19. Plus 8 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8+8+8=27"",
    resulting_state=(27,),
    comment='""11 minus 8. Plus 8 is 19. Plus 8 is 27""',
    result_calc_error=True,
)

# ""8 times 11 minus 8 is 8 times 3 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(11-8)=24"",
    resulting_state=(8, 24),
    comment='""8 times 11 minus 8 is 8 times 3 is 24""',
)

# ""8 plus 8 is 16. Plus 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+8=24"",
    resulting_state=(11, 24),
    comment='""8 plus 8 is 16. Plus 8 is 24""',
)

# ""8 minus 8 is 0. Plus 8 is 8. Plus 11 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8+8+11=19"",
    resulting_state=(19,),
    comment='""8 minus 8 is 0. Plus 8 is 8. Plus 11 is 19""',
)

# ""8 over 8 is 1. Times 8 is 8. Plus 11 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8*8+11=19"",
    resulting_state=(19,),
    comment='""8 over 8 is 1. Times 8 is 8. Plus 11 is 19""',
)

# ""8 plus 8 is 19. Plus 11 is 27. Minus 8 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+11-8=19"",
    resulting_state=(19,),
    comment='""8 plus 8 is 19. Plus 11 is 27. Minus 8 is 19""',
    result_calc_error=True,
)

# ""11 minus 8, so that's 3. Times... 24.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8)*8=24"",
    resulting_state=(8, 24),
    comment='""11 minus 8, so that\'s 3. Times... 24.""',
)
```"
644,"[3,3,7,13]",,180," Okay, it has to be... this 13 is kind of awkward. 13 minus 7 is 6. Okay, so it has to be 7 minus 3 is 4 times 6. No. 13. 13 minus 7 is 6. But then it would have to be 4s. No. 13 times 7 is 91. 3 minus 3 is 6. Times 13 minus 7 is 6. 3 plus 3 is 6. Times 3 is 42. Minus 13 would be 29. 13 times 3 is 39. Minus... Minus 10 is 29. 7 times 3 is 21. Negative 13. Minus 3 is negative 10. Hmm. Hmm. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 minus 3 is 4 13 minus 3 is 10","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7 is 6""',
)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(3, 4, 13),
    comment='""7 minus 3 is 4""',
)

# ""13 times 7 is 91""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(3, 3, 91),
    comment='""13 times 7 is 91""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 7, 13),
    comment='""3 plus 3 is 6""',
)

# ""Times 3 is 42. Minus 13 would be 29"" - participant seems to be multiplying 6*3 and subtracting 13
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(7, 13, 18),
    comment='""Times 3 is 42. Minus 13 would be 29""',
)

# ""13 times 3 is 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 7, 39),
    comment='""13 times 3 is 39""',
)

# ""7 times 3 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3 is 21""',
)

# After a long pause...

# ""7 minus 3 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(3, 4, 13),
    comment='""7 minus 3 is 4""',
)

# ""13 minus 3 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(3, 7, 10),
    comment='""13 minus 3 is 10""',
)
```"
646,"[2,8,10,13]",(2x13)-(10-8),150, Eight times two plus eighteen plus ten. Eight times two plus ten. Eight plus two. Okay. Ten plus thirteen. Twenty-three. Twenty-three minus two. Divided by eight. Delete. Ten plus two. Eight. Twenty. Twenty subtracted by eight. I don't get this one. This one's too complicated. Eight. Ten. I don't get this. This is way too freaking complicated. I'm so confused. Two plus thirteen. Ten times eight. Minus eight equals... Incorrect answer. Two minus...oh. Times thirteen. Minus ten. Minus eight. Minus eight. Minus ten. Minus eight.,"```python
start_state = (2, 8, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Eight times two plus eighteen plus ten""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(10, 13, 16),
    comment='""Eight times two""',
)

# ""Ten plus thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(2, 8, 23),
    comment='""Ten plus thirteen. Twenty-three.""',
)

# ""Twenty-three minus two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23-2=21"",
    resulting_state=(8, 21),
    comment='""Twenty-three minus two""',
)

# ""Divided by eight""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21/8=2.62"",
    resulting_state=(2.62,),
    comment='""Divided by eight""',
)

# ""Ten plus two""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2=12"",
    resulting_state=(8, 12, 13),
    comment='""Ten plus two""',
)

# ""Two plus thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+13=15"",
    resulting_state=(8, 10, 15),
    comment='""Two plus thirteen""',
)

# ""Ten times eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(2, 13, 80),
    comment='""Ten times eight""',
)

# ""Two times thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=26"",
    resulting_state=(8, 10, 26),
    comment='""Times thirteen""',
)

# Based on their final answer (2x13)-(10-8), they must have then computed:
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(10-8)=24"",
    resulting_state=(24,),
    comment='Based on their final answer ""(2x13)-(10-8)"", they computed 26-(10-8)',
)
```"
649,"[7,9,11,11]",(9-7)+11+11,64," 7 plus 9 is 13, 2 plus 2 is 22. Okay, so this would be 7 minus 9 plus 11 plus 11 equals... Okay, so 7 minus 9 is 2. Mmm, plus 11 plus 11, 22, 24. Okay, 7 minus... Let's try... 9 minus 7 plus 11 plus 11 equals...","```python
start_state = (7, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 9 is 13"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=13"",
    resulting_state=(11, 11, 13),
    comment='""7 plus 9 is 13"" - calculation error',
    result_calc_error=True,
)

# ""2 plus 2 is 22"" seems to be a transcription error, as they likely meant ""11 plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(7, 9, 22),
    comment='""2 plus 2 is 22"" seems to be a transcription error, as they likely meant ""11 plus 11 is 22""',
)

# ""7 minus 9 is 2"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7-9=2"",
    resulting_state=(2, 11, 11),
    comment='""7 minus 9 is 2"" - calculation error',
    result_calc_error=True,
)

# ""plus 11 plus 11, 22, 24"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+11+11=24"",
    resulting_state=(24,),
    comment='""plus 11 plus 11, 22, 24""',
)

# ""9 minus 7 plus 11 plus 11 equals..."" - participant tries a different order
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7+11+11=24"",
    resulting_state=(24,),
    comment='""9 minus 7 plus 11 plus 11 equals...""',
)
```"
650,"[3,9,13,13]",,180," Nine, minus three, six. Divided by thirteen plus thirteen. okay so this one is more complicated than the other one minus 13 plus 9 times 3 equals my brain does not like this my brain does not like this at all so 3 divided by 9 is 3 plus 13 divided by 13 equals yeah I definitely don't get this 3 plus 9 is 12 divided by 13 minus 13 equals 10 maybe 5 2 1 I don't know three times 9 plus 13 minus 13 .. 13 minus 13 times 9 13 x 9 minus three My brain hurts like bad this is horrible guys","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Nine, minus three, six""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 13, 13),
    comment='""Nine, minus three, six""',
)

# ""Divided by thirteen plus thirteen"" - participant seems to be trying to divide 6 by 13 and add 13
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/13+13=13.46"",
    resulting_state=(13.46,),
    comment='""Divided by thirteen plus thirteen""',
)

# ""minus 13 plus 9 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-13+9*3=27"",
    resulting_state=(27,),
    comment='""minus 13 plus 9 times 3""',
)

# ""3 divided by 9 is 3"" - this is incorrect but we'll record it
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/9=3"",
    resulting_state=(3, 13, 13),
    comment='""3 divided by 9 is 3"" - calculation error',
    result_calc_error=True,
)

# ""plus 13 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+13/13=4"",
    resulting_state=(4,),
    comment='""plus 13 divided by 13""',
)

# ""three times 9 plus 13 minus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9+13-13=27"",
    resulting_state=(27,),
    comment='""three times 9 plus 13 minus 13""',
)

# ""13 minus 13 times 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-13*9=-104"",
    resulting_state=(-104, 3),
    comment='""13 minus 13 times 9""',
)

# ""13 x 9 minus three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9-3=114"",
    resulting_state=(13, 114),
    comment='""13 x 9 minus three""',
)
```"
651,"[2,3,7,9]",(7+9)x(3/2),76," 2 times 3 plus 7 plus 9. Let's see here. 7 plus 9 is 13. So if we divide, is it divided or multiply? Times 2 divided by 3, which is 6. 13 times 6, is that 6? 2 divided by 6. 2 divided by 3, 7, 5. Ugh, darn it. 7 plus 9, 3. Close.","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 3 plus 7 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3+7+9=22"",
    resulting_state=(22,),
    comment='""2 times 3 plus 7 plus 9""',
)

# ""7 plus 9 is 13"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=13"",
    resulting_state=(2, 3, 13),
    comment='""7 plus 9 is 13"" - calculation error',
    result_calc_error=True,
)

# ""Times 2 divided by 3, which is 6"" - participant seems confused about the calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""2/3=6"",
    resulting_state=(7, 9, 6),
    comment='""Times 2 divided by 3, which is 6"" - calculation error',
    result_calc_error=True,
)

# ""2 divided by 3"" - trying a different approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2/3=0.67"",
    resulting_state=(0.67, 7, 9),
    comment='""2 divided by 3""',
)

# Based on their final answer (7+9)x(3/2), they eventually figured out the correct calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+9)*(3/2)=24"",
    resulting_state=(24,),
    comment=""Based on their submitted answer"",
)
```"
654,"[5,5,6,11]",,180," 6 divided by 11 minus 5 plus 5. This is hard. I don't like this. 6 plus 5, which is 11. 11. 6 minus 5 plus 11. No. I don't get this, guys. 11 times 6 minus 5. I said times 6. Minus 5 minus 5. I hate this. So stupid. 11 times 5 is 55. 6 times 5 is 30. 5 times 5 is... 5 times 5... 5 minus 11 minus 6. No. I hate math. Literally. Divided by 11 plus 6 minus 5. Nope. Oh my god. This sucks. 11 plus 6, which is 17. Plus 5. Minus 5. Nope. I hate math. I legit hate math. I mean, like, I really hate math, guys. Nope. Huh. 11 plus 6.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 divided by 11 minus 5 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/11-5+5=0.55"",
    resulting_state=(0.55,),
    comment='""6 divided by 11 minus 5 plus 5""',
)

# ""6 plus 5, which is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(5, 11, 11),
    comment='""6 plus 5, which is 11""',
)

# ""6 minus 5 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5+11=12"",
    resulting_state=(5, 12),
    comment='""6 minus 5 plus 11""',
)

# ""11 times 6 minus 5 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*6-5-5=56"",
    resulting_state=(56,),
    comment='""11 times 6 minus 5 minus 5""',
)

# ""11 times 5 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(5, 6, 55),
    comment='""11 times 5 is 55""',
)

# ""6 times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(5, 11, 30),
    comment='""6 times 5 is 30""',
)

# ""5 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(6, 11, 25),
    comment='""5 times 5""',
)

# ""5 minus 11 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-11-6=-12"",
    resulting_state=(5, -12),
    comment='""5 minus 11 minus 6""',
)

# ""11 plus 6, which is 17. Plus 5. Minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6+5-5=17"",
    resulting_state=(17,),
    comment='""11 plus 6, which is 17. Plus 5. Minus 5""',
)
```"
658,"[2,3,5,10]",,180," 1, 2, 3, 5, 10. 2 times 3 equals 6. 5 times 10 is too high. 10 minus 5 equals 5, 6 times 5 is 30. So that won't work. 3 plus 5 equals 8. 10 times 2 equals 20. That's too high. 5 minus 3 equals 2 plus 2. Nope. 10 times 2 gets me to 20. 3 and 5 doesn't work. Gives me 22. 10 times 3 equals 30. 5 times 3 equals 15. That gives me 15. Shit. Shit. 10 times 5 equals 15. Plus 2 divided by 3. 52 divided by 3. 5, 6, 7. It doesn't divide. I'm not going to get this one. 5 times 3 equals 15. I already did that one. 10 plus 2 equals 8. But 10 divided by 2 equals 5. That doesn't work. 10 minus 2 equals 8. 10 plus 2 equals 12. Um. Um. Um. 10 minus 5 equals 2. 10 up equals 5. And then 5 times 3 equals 15. And 5 times 5 equals 25. And 5 times 5 equals 25. Minus 2 equals 23. Minus 3 equals 22. Plus 2. Okay.","```python
start_state = (2, 3, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 3 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(5, 6, 10),
    comment='""2 times 3 equals 6""',
)

# ""10 minus 5 equals 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(2, 3, 5),
    comment='""10 minus 5 equals 5""',
)

# ""6 times 5 is 30""
curr_state = graph.move_to_node((5, 6, 10))
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(10, 30),
    comment='""6 times 5 is 30""',
)

# ""3 plus 5 equals 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(2, 8, 10),
    comment='""3 plus 5 equals 8""',
)

# ""10 times 2 equals 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 5, 20),
    comment='""10 times 2 equals 20""',
)

# ""5 minus 3 equals 2 plus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3+2=4"",
    resulting_state=(4, 10),
    comment='""5 minus 3 equals 2 plus 2""',
)

# ""10 times 2 gets me to 20. 3 and 5 doesn't work. Gives me 22"" - seems to be adding 3 and 5 to previous result
curr_state = graph.move_to_node((3, 5, 20))
new_state = graph.explore_operation(
    curr_state,
    operation=""20+3+5=28"",
    resulting_state=(28,),
    comment='""Gives me 22"" - calculation error',
    result_calc_error=True
)

# ""10 times 3 equals 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(2, 5, 30),
    comment='""10 times 3 equals 30""',
)

# ""5 times 3 equals 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(2, 10, 15),
    comment='""5 times 3 equals 15""',
)

# ""10 times 5 equals 15. Plus 2 divided by 3"" - there seems to be a calculation error here
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*5+2)/3=52/3"",
    resulting_state=(17.33,),
    comment='""10 times 5 equals 15. Plus 2 divided by 3""',
    result_calc_error=True,
)

# ""10 divided by 2 equals 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(3, 5, 5),
    comment='""10 divided by 2 equals 5""',
)

# ""10 minus 2 equals 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(3, 5, 8),
    comment='""10 minus 2 equals 8""',
)

# ""10 plus 2 equals 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2=12"",
    resulting_state=(3, 5, 12),
    comment='""10 plus 2 equals 12""',
)

# ""10 minus 5 equals 2"" - seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=2"",
    resulting_state=(2, 2, 3),
    comment='""10 minus 5 equals 2"" - calculation error',
    result_calc_error=True,
)

# ""5 times 3 equals 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(2, 10, 15),
    comment='""5 times 3 equals 15""',
)

# ""5 times 5 equals 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(2, 3, 10, 25),
    comment='""5 times 5 equals 25""',
)

# ""Minus 2 equals 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-2=23"",
    resulting_state=(3, 10, 23),
    comment='""Minus 2 equals 23""',
)

# ""Minus 3 equals 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23-3=20"",
    resulting_state=(10, 20),
    comment='""Minus 3 equals 22"" - calculation error',
    result_calc_error=True
)
```"
662,"[1,2,7,7]",,180," 1, 2, 7, 7. 7 plus 7 is 14. Times 2 is 28. 7 times 2 equals 14 times plus 7, 28. Nope, that doesn't work. 7 plus 7 equals 14. Times 2 is 28. I'm getting 28. 2 plus 1 equals 3. Times 7 equals 21. Nope. 28 divided by 2 is 14. Divided by 3. 7 divided by 7 takes a 2 small. 7 times 1 has to be plus or multiplying. 7 times 2 is 14. 7 times 2 is 14. 7 plus 2 is 9. Plus 7 is 16. Plus 1 is 17. 7 times 7 is 49. Divided by 2 is too high. Divided by 2 is 9. 7 plus 7 is 14. Minus 2 equals 12. Minus 1 is 11. Which gives me 22. 14 minus 1 equals 11 times 2. This one is not solvable in my brain. Ummm. I did 7 times 7. 7 plus 7 divided by. Ummm. 2 times 7. 2 plus 7. I did all of them. What am I missing? I'm missing...","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='""7 plus 7 is 14""',
)

# ""Times 2 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*2=28"",
    resulting_state=(1, 28),
    comment='""Times 2 is 28""',
)

# ""7 times 2 equals 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""7 times 2 equals 14""',
)

# ""plus 7, 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+7=21"",
    resulting_state=(1, 21),
    comment='""plus 7, 28"" though they say 28, they seem to compute 21',
)

# ""2 plus 1 equals 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 7, 7),
    comment='""2 plus 1 equals 3""',
)

# ""Times 7 equals 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 21),
    comment='""Times 7 equals 21""',
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""7 times 2 is 14""',
)

# ""7 plus 2 is 9. Plus 7 is 16. Plus 1 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2+7+1=17"",
    resulting_state=(17,),
    comment='""7 plus 2 is 9. Plus 7 is 16. Plus 1 is 17""',
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(1, 2, 49),
    comment='""7 times 7 is 49""',
)

# ""Divided by 2 is 9"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/2=9"",
    resulting_state=(1, 9),
    comment='""Divided by 2 is 9"" seems to be a calculation error',
    result_calc_error=True,
)

# ""7 plus 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='""7 plus 7 is 14""',
)

# ""Minus 2 equals 12. Minus 1 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-2-1=11"",
    resulting_state=(11,),
    comment='""Minus 2 equals 12. Minus 1 is 11""',
)

# ""14 minus 1 equals 11 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(14-1)*2=26"",
    resulting_state=(26,),
    comment='""14 minus 1 equals 11 times 2""',
)

# The rest of the transcript is the participant summarizing operations they've already tried
```"
663,"[7,8,8,9]",,210," Oh, 7, 8, 8, 9. Um, well, shit. Where to begin? 9 plus 8 equals 17 plus 8 equals 15 plus 7 equals 22. Oh, 25. Whoops. 25 plus 7 is 32. I can't math. So, it's adding everything together, which is clearly not it. But 32, 24. What if I do 9 plus 8 plus 7? 34 minus 8. Nope. I'll do 26. plus 7 plus 8, 8 to 23, nope, I don't like this survey, I'm talking, I'm talking, I'm talking, I'm talking about what, I clearly am not going to do that, so divided by minus 8 plus 8 is 16 plus 7 is 23, and there's no way to do that, I'm going to get 9 in there, what if I did 8 times 8, 64, minus 7, 64, 6, 6, 6, 7, 57, and that doesn't divide by 9 at all, 9 times 8 equals 72, minus 8, 64, divided by 64, minus 7 is not going evenly, I'm going to miss this one too,","```python
start_state = (7, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 8 equals 17 plus 8 equals 15 plus 7 equals 22. Oh, 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8+8+7=25"",
    resulting_state=(25,),
    comment='""9 plus 8 equals 17 plus 8 equals 15 plus 7 equals 22. Oh, 25"" - participant makes calculation errors',
    result_calc_error=True,
)

# ""What if I do 9 plus 8 plus 7? 34""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8+7=34"",
    resulting_state=(8, 34),
    comment='""What if I do 9 plus 8 plus 7? 34"" - calculation error',
    result_calc_error=True,
)

# ""minus 8"" from the 34 they just calculated
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""34-8=26"",
    resulting_state=(26,),
    comment='""minus 8""',
)

# ""8 plus 8 is 16 plus 7 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+7=23"",
    resulting_state=(9, 23),
    comment='""8 plus 8 is 16 plus 7 is 23""',
)

# ""8 times 8, 64, minus 7, 64, 6, 6, 6, 7, 57""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8-7=57"",
    resulting_state=(9, 57),
    comment='""8 times 8, 64, minus 7, 64, 6, 6, 6, 7, 57""',
)

# ""9 times 8 equals 72, minus 8, 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8-8=64"",
    resulting_state=(7, 64),
    comment='""9 times 8 equals 72, minus 8, 64""',
)

# ""minus 7"" from 64
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64-7=57"",
    resulting_state=(57,),
    comment='""minus 7""',
)
```"
664,"[1,5,5,6]",,180," 1, 5, 5, 6. This is harder than I thought it was going to be. Okay. 5 times 5 is 25. Minus 1 is 24. But I have a 6 to deal with. 6 plus 5 equals 11. Times 5 does not work. 5 plus 5 equals 10. 6 times 5 equals 30. 30 divided by 5 equals 6. 5 times 5 equals 25. Minus 1. I still need to deal with the 6. Let's see. I did 6 times 5. I did 5 times 5. I did pluses. Okay. 5 plus 1 equals 6 times 5. 6 equals 36 minus 5 is 31. 6 plus 1 equals 7. Times 5 equals 35. That doesn't work. 6 plus 1 divided by 5 is just 7 because it cancels. Um. Um. 6 plus 5 equals 11. 5 plus 6 equals. 5 plus 1 equals 6. 6 plus 1 equals 7. 5 plus 5 equals 7. 5 plus 5 equals 7. 5 plus 5 equals 5. I'm not going to get this one either. Um. I'm seeing your thoughts out loud. Yep yep yep yep yep yep yep. Um. Thinking. These are impossible. Um. .","```python
start_state = (1, 5, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 25. Minus 1 is 24.""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 6, 25),
    comment='""5 times 5 is 25""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-1=24"",
    resulting_state=(6, 24),
    comment='""Minus 1 is 24""',
)

# ""6 plus 5 equals 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(1, 5, 11),
    comment='""6 plus 5 equals 11""',
)

# ""Times 5 does not work"" - participant multiplies 11 by remaining 5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(1, 55),
    comment='""Times 5 does not work""',
)

# ""5 plus 5 equals 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(1, 6, 10),
    comment='""5 plus 5 equals 10""',
)

# ""6 times 5 equals 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 5, 30),
    comment='""6 times 5 equals 30""',
)

# ""30 divided by 5 equals 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30/5=6"",
    resulting_state=(1, 6),
    comment='""30 divided by 5 equals 6""',
)

# ""5 plus 1 equals 6 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*5=30"",
    resulting_state=(5, 30),
    comment='""5 plus 1 equals 6 times 5""',
)

# ""minus 5 is 31"" - participant seems to make a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-5=31"",
    resulting_state=(31,),
    comment='""minus 5 is 31"" - participant makes calculation error',
    result_calc_error=True,
)

# ""6 plus 1 equals 7. Times 5 equals 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+1)*5=35"",
    resulting_state=(5, 35),
    comment='""6 plus 1 equals 7. Times 5 equals 35""',
)

# ""6 plus 1 divided by 5 is just 7 because it cancels""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+1)/5=7"",
    resulting_state=(5, 7),
    comment='""6 plus 1 divided by 5 is just 7 because it cancels"" - participant makes calculation error',
    result_calc_error=True,
)

# The rest appears to be the participant repeating operations they've already tried or making statements about the difficulty
```"
666,"[3,5,7,11]",,180," Okay, so 3, 5 times 3, that equals 15, plus, uh, okay, so 5 times 7, that's 35. 5 minus 11, 35, oh, fuck. Okay, so 5 times 7 minus 11, but that already gets me to 20. What do I do with this 3? Hmm. That's not right, is it? Yeah. Okay, so let me delete all that. Okay, so 7 times, whoop, what did I do? Times 3, that's 21. Okay, so let me delete that. Okay, so 11 plus 5, that's 26. Minus 7, excuse me, oh, uh, 11, 26, minus 7, that's, ah, shoot, that's not right either, that's, uh, 20, yeah. Okay, so, okay, so 11 plus 7. I don't think this is, I don't think my keypad's working. Okay, so, that's 18. Okay, so let's do 11 times, oh, maybe I should do it in the quotation, so 11 times 3, that's 33, minus 7. 9. Minus 5, that's too much, it's not right. Hmm, this is hard. 11. Times 7, that's 77. No, that's way too high. 7. 7. Hmm.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 3, that equals 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(7, 11, 15),
    comment='""5 times 3, that equals 15""',
)

# ""5 times 7, that's 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(3, 11, 35),
    comment='""5 times 7, that\'s 35""',
)

# ""5 times 7 minus 11"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7-11=24"",
    resulting_state=(3, 24),
    comment='""5 times 7 minus 11""',
)

# ""7 times 3, that's 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(5, 11, 21),
    comment='""7 times 3, that\'s 21""',
)

# ""11 plus 5, that's 26"" - participant made calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=26"",
    resulting_state=(3, 7, 26),
    result_calc_error=True,
    comment='""11 plus 5, that\'s 26""',
)

# ""Minus 7"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-7=19"",
    resulting_state=(3, 19),
    comment='""Minus 7""',
)

# ""11 plus 7... that's 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(3, 5, 18),
    comment='""11 plus 7... that\'s 18""',
)

# ""11 times 3, that's 33""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(5, 7, 33),
    comment='""11 times 3, that\'s 33""',
)

# ""minus 7"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-7=26"",
    resulting_state=(5, 26),
    comment='""minus 7""',
)

# ""Minus 5"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-5=21"",
    resulting_state=(21,),
    comment='""Minus 5""',
)

# ""11 Times 7, that's 77""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7=77"",
    resulting_state=(3, 5, 77),
    comment='""11 Times 7, that\'s 77""',
)
```"
668,"[5,6,8,8]",6x(5-(8/8)),156," Alright, 6 times 5 is 30. And then, uh, that's not gonna work. Okay. 8, oh, okay, I think I can do this. Okay, so 8 times 8 is 64. Alright, I think. And then divide that by 6. Oh, 64, that doesn't divide evenly. Okay, if we do 8 times 6. So, 8 times 6 is 48. And then, minus, if we do 8 times 5. And now that's not gonna equal, like, jeez. Okay, so. Do any of these add up? 8 times, no. Divided by 8. So that would be 1. But that's 30. That doesn't work. Oh, oh, oh, oh, oh, oh, I get it. Okay, so 6 times 8. Oh, I got this one, but I don't know if I can write it. 5 minus. 5 minus 8. Divided by 8. Do, do. Submit.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(8, 8, 30),
    comment='""6 times 5 is 30""',
)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""8 times 8 is 64""',
)

# ""divide that by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/6=10.67"",
    resulting_state=(5, 10.67),
    comment='""divide that by 6""',
)

# ""8 times 6 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 8, 48),
    comment='""8 times 6 is 48""',
)

# ""8 times 5"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 8, 40),
    comment='""8 times 5""',
)

# ""Divided by 8. So that would be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(5, 6, 1),
    comment='""Divided by 8. So that would be 1""',
)

# Finally the participant figures out the solution: 6*(5-(8/8))
# First they compute 8/8=1
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 5, 6),
    comment='""Divided by 8""',
)

# Then 5-1=4
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 6, 8),
    comment='""5 minus""',
)

# Finally 6*4=24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(8, 24),
    comment=""Final multiplication to get to 24"",
)
```"
675,"[1,1,7,10]",7x(1+1)+10,74," Okay, 24, okay. Um, let's see. 24, so 7 times 2 plus 10, so 7 times 1. Oh, wait, wait, wait, okay. 7 times 1 plus 1 plus 10. Are you saying that's invalid? Okay, um, let's see, okay. 7 plus... No, I'm on 7 times, so 7 times parenthesis 1 plus 1 parenthesis plus 10.","```python
start_state = (1, 1, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 2 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+10=24"",
    resulting_state=(24,),
    comment='""7 times 2 plus 10""',
)

# ""7 times 1 plus 1 plus 10"" - participant tries a different way to write it
new_state = graph.explore_operation(
    curr_state,
    operation=""7*1+1+10=18"",
    resulting_state=(18,),
    comment='""7 times 1 plus 1 plus 10""',
)

# ""7 times parenthesis 1 plus 1 parenthesis plus 10"" - participant finds the correct way to write it
new_state = graph.explore_operation(
    curr_state,
    operation=""7*(1+1)+10=24"",
    resulting_state=(24,),
    comment='""7 times parenthesis 1 plus 1 parenthesis plus 10""',
)
```"
678,"[7,10,10,12]",,180," 10 plus 12 is 22. Twenty-two minus seven is fourteen. Twenty-two minus seven is twenty-two. Twenty-two. No, that's 15, so plus 10 would be 25, so 10 plus 10 is 20, plus 12 is 32, minus 7, let's try that again, plus 10 plus 12 minus 7, no, why does it keep saying it means all the numbers, I hate when it says that, so 20 plus 12 is 32, 31, 30, 29, 28, 27, 26, that's 25, so 7 plus 10 is 17, plus 10 is 27, that's not it, 7 plus 7, 7 times 12, is, 7 is, 7 times 12 is 84, minus 20, no, so 10 times 10 is 100, divided by 12, that's 100 divided by 12. Let's see, incorrect two, I don't know, I need a pen and paper for this, I can't do this in my head, 12 plus 7 is 19, plus 10 is 29, so that's not it, 7 times 10 is 70, minus 22, that's not it, this is starting to wear me down, 10 plus 10 is 20,","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 12 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(7, 10, 22),
    comment='""10 plus 12 is 22""',
)

# ""Twenty-two minus seven is fourteen"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22-7=14"",
    resulting_state=(10, 14),
    comment='""Twenty-two minus seven is fourteen"" - calculation error',
    result_calc_error=True,
)

# Move back to previous state to try the correct calculation
curr_state = graph.move_to_node((7, 10, 22))
new_state = graph.explore_operation(
    curr_state,
    operation=""22-7=15"",
    resulting_state=(10, 15),
    comment='""No, that\'s 15""',
)

# ""plus 10 would be 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+10=25"",
    resulting_state=(25,),
    comment='""plus 10 would be 25""',
)

# ""10 plus 10 is 20, plus 12 is 32, minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+12-7=25"",
    resulting_state=(25,),
    comment='""10 plus 10 is 20, plus 12 is 32, minus 7""',
)

# ""7 plus 10 is 17, plus 10 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10+10=27"",
    resulting_state=(12, 27),
    comment='""7 plus 10 is 17, plus 10 is 27""',
)

# ""7 times 12 is 84""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(10, 10, 84),
    comment='""7 times 12 is 84""',
)

# ""10 times 10 is 100, divided by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*10)/12=8.33"",
    resulting_state=(7, 8.33),
    comment='""10 times 10 is 100, divided by 12""',
)

# ""12 plus 7 is 19, plus 10 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7+10=29"",
    resulting_state=(10, 29),
    comment='""12 plus 7 is 19, plus 10 is 29""',
)

# ""7 times 10 is 70""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(10, 12, 70),
    comment='""7 times 10 is 70""',
)

# ""10 plus 10 is 20"" - participant starts over again
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(7, 12, 20),
    comment='""10 plus 10 is 20""',
)
```"
679,"[3,3,11,12]",,180," eleven plus three is fourteen plus twelve is fourteen plus twelve is thirty-six, so that's not right. Okay, so three plus three is six plus twelve is eighteen. No, so eleven plus eleven is twenty-three plus three is twenty-six minus three is back to twenty-three. So twelve times three is thirty-six minus eleven. What's thirty-six minus eleven? That's twenty-six. I can't do this math in my head. Okay, so twelve plus eleven divided by three. Twelve times three plus eleven plus three. No. Maybe I need parenthesis. Okay. Okay. Now I need to be minus eleven plus three. Okay. Minus eleven minus three. That's not right. Okay. I don't know. I can't. I can't. I don't have the brain power to do too many more of these. This is really wearing me down. And then I can't even use my keyboard. I've got to use the dark one, the stupid touch screen, because it won't let me type numbers in. Okay. Eleven times three is thirty-three. Thirty-three minus twelve.","```python
start_state = (3, 3, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""eleven plus three is fourteen plus twelve is fourteen plus twelve is thirty-six""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+3+12=36"",
    resulting_state=(3, 36),
    comment='""eleven plus three is fourteen plus twelve is thirty-six""',
    result_calc_error=True,
)

# ""three plus three is six plus twelve is eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3+12=18"",
    resulting_state=(11, 18),
    comment='""three plus three is six plus twelve is eighteen""',
)

# ""eleven plus eleven is twenty-three plus three is twenty-six minus three is back to twenty-three""
# This seems to be a calculation error since 11+11=22, not 23
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+3-3=11"",
    resulting_state=(11, 12),
    comment='""eleven plus three is twenty-six minus three is back to twenty-three""',
    result_calc_error=True,
)

# ""twelve times three is thirty-six minus eleven""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3-11=25"",
    resulting_state=(3, 25),
    comment='""twelve times three is thirty-six minus eleven""',
)

# ""twelve plus eleven divided by three""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+11)/3=7.67"",
    resulting_state=(3, 7.67),
    comment='""twelve plus eleven divided by three""',
)

# ""Twelve times three plus eleven plus three""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3+11+3=50"",
    resulting_state=(50,),
    comment='""Twelve times three plus eleven plus three""',
)

# The participant expresses frustration with the interface

# ""Eleven times three is thirty-three""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(3, 12, 33),
    comment='""Eleven times three is thirty-three""',
)

# ""Thirty-three minus twelve""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-12=21"",
    resulting_state=(3, 21),
    comment='""Thirty-three minus twelve""',
)
```"
680,"[6,9,9,11]",,180," 18 plus 6 is 25. 6 plus 9 is 15. Plus 11 is 26. Plus 11 is 26. Plus 11 is 26. Minus 9, so no. Minus 9, so no. 9 plus 9 is 18. I did this already, didn't I? I did this already, didn't I? 18 plus 20. I mean, 18 plus 11 is 29. I mean, 18 plus 11 is 29. I mean, 18 plus 11 is 29. 29 minus 6 is 23. 29 minus 6 is 23. I don't know. I don't know these. I don't know these. I'm starting to make my brain hurt. I'm starting to make my brain hurt. Let's just put it in. 11 plus 9. 11 plus 9. Plus 9 minus 6. Plus 9 minus 6. Okay. Okay. 11 plus 6. 11 plus 6. Plus 9 minus 9. I don't know. I'm just typing anything now because I'm really tired of this. This has drained me so much in this short amount of time. Um. 9 plus 9 plus 6. 9 plus 9 plus 6. 9 plus 9 plus 6. I got it wrong. I got it wrong. Okay. Okay. Okay. I don't know. I don't know. I don't know this. Plus 11 minus 9 is 3. 11 minus 9 is 2. 9 plus 6, that's 15, that's 17. So 9 plus 9 is 18 minus 11. Plus 18 minus 11. 7 plus 6 is 13.","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""18 plus 6 is 25"" - participant likely got 18 from 9+9
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 11, 18),
    comment='""18 plus 6 is 25"" - participant first computes 9+9',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=25"",
    resulting_state=(11, 25),
    comment='""18 plus 6 is 25"" - participant adds 6 to 18',
    result_calc_error=True,
)

# Going back to start state for ""6 plus 9 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+9=15"",
    resulting_state=(9, 11, 15),
    comment='""6 plus 9 is 15""',
)

# ""Plus 11 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+11=26"",
    resulting_state=(9, 26),
    comment='""Plus 11 is 26""',
)

# ""Minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-9=17"",
    resulting_state=(17,),
    comment='""Minus 9""',
)

# ""9 plus 9 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 11, 18),
    comment='""9 plus 9 is 18""',
)

# ""18 plus 11 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+11=29"",
    resulting_state=(6, 29),
    comment='""18 plus 11 is 29""',
)

# ""29 minus 6 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""29-6=23"",
    resulting_state=(23,),
    comment='""29 minus 6 is 23""',
)

# ""11 plus 9 Plus 9 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9+9-6=23"",
    resulting_state=(23,),
    comment='""11 plus 9 Plus 9 minus 6""',
)

# ""11 plus 6 Plus 9 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6+9-9=17"",
    resulting_state=(17,),
    comment='""11 plus 6 Plus 9 minus 9""',
)

# ""9 plus 9 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+6=24"",
    resulting_state=(11, 24),
    comment='""9 plus 9 plus 6""',
)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 6, 9),
    comment='""11 minus 9 is 2""',
)

# ""9 plus 6, that's 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(9, 11, 15),
    comment='""9 plus 6, that\'s 15""',
)

# ""9 plus 9 is 18 minus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 11, 18),
    comment='""9 plus 9 is 18 minus 11"" - first computing 9+9',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-11=7"",
    resulting_state=(6, 7),
    comment='""9 plus 9 is 18 minus 11"" - then subtracting 11',
)

# ""7 plus 6 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(13,),
    comment='""7 plus 6 is 13""',
)
```"
682,"[2,2,11,13]",,180," We have 11, 13, 13, 11, 13 plus 2 is 15, 15 plus, let me see, let me see, let me see, let me see, target numbers are different, we have these. Uh huh. Vision of how to come somewhere here. Uh huh. We will hit 24 numbers. Uh huh. It is not, it is 13. 13, so, 13 divided by 2, how come, let me use my calculator. Calculator. Calculator. 13 divided to 6.5. 6.5. 6.5. Plus. Plus. 11 mm-hmm plus 2 19 not really i think this one this one minus this one is 11. 11 times 2 is 22 now 22 plus 13 minus 2 13 minus 2 becomes 11 2 times 2 is 4 4 minus 13 minus 4","```python
start_state = (2, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 2 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(2, 11, 15),
    comment='""13 plus 2 is 15""',
)

# ""13 divided by 2"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13/2=6.5"",
    resulting_state=(2, 6.5, 11),
    comment='""13 divided by 2""',
)

# ""plus 11"" continuing from 6.5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6.5+11=17.5"",
    resulting_state=(2, 17.5),
    comment='""plus 11""',
)

# ""plus 2 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17.5+2=19"",
    resulting_state=(19,),
    comment='""plus 2 19""',
    result_calc_error=True,
)

# ""this one minus this one is 11"" seems to refer to 13-2=11
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(2, 11, 11),
    comment='""this one minus this one is 11""',
)

# ""11 times 2 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(11, 22),
    comment='""11 times 2 is 22""',
)

# Going back to start state for remaining operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 11, 13),
    comment='""2 times 2 is 4""',
)

```"
687,"[3,5,8,13]",(8x5)-(13+3),118," 2 times, what is 12? 10. Aha, if I take 5 plus 8, that's 13. 10, that's 23. No, 24. 24. What is 13? 13 minus 8, that's 5. Okay, 15 plus 5, that's 30. That's some quite extra. That's some quite extra. 8 times 5, that's 30. Minus 13. Minus 3. Minus 3. Yeah. Untag. 8 times 5, which is 40. Minus. Minus 13. 8 plus 3 minus 13, 40 minus. Why is that? Aha, let me delete this first. Plus 3.","```python
start_state = (3, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I take 5 plus 8, that's 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(3, 13, 13),
    comment='""if I take 5 plus 8, that\'s 13""',
)

# ""13 minus 8, that's 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(3, 5, 5),
    comment='""13 minus 8, that\'s 5""',
)

# ""15 plus 5, that's 30"" - not clear where 15 comes from, might be a transcription error

# ""8 times 5, that's 30"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=30"",
    resulting_state=(3, 13, 30),
    comment='""8 times 5, that\'s 30"" - participant made a calculation error',
    result_calc_error=True,
)

# ""Minus 13. Minus 3."" - participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-13-3=14"",
    resulting_state=(14,),
    comment='""Minus 13. Minus 3.""',
)

# ""8 times 5, which is 40"" - participant corrects their earlier calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(3, 13, 40),
    comment='""8 times 5, which is 40""',
)

# ""Minus 13"" and ""Plus 3"" - participant tries different combinations with 40
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-(13+3)=24"",
    resulting_state=(24,),
    comment='""Minus 13"" and ""Plus 3"" - participant finds the solution',
)
```"
692,"[2,12,12,13]",(2x12)x(13-12),41," Oh, we are going to have to do, this one might be the most complicated. Some major subtraction and multiplication here. We're not going to do an open and close bracket this time. We're going to get our 24 there. Multiply the next bracket by, because we're going to make this a 1 over here.","```python
start_state = (2, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""because we're going to make this a 1 over here"" suggests they plan to subtract 12 from 13
# This appears to be setting a subgoal
graph.set_subgoal(
    (1, 24),
    state_after_subgoal=(24,),
    comment='""because we\'re going to make this a 1 over here"" suggests they plan to get 1 from 13-12',
)

# First they compute 2*12=24
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(12, 13, 24),
    comment=""Based on their response, they first compute 2*12"",
)

# Then they compute 13-12=1 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(24, 1),
    comment=""Based on their response, they compute 13-12"",
)

# Finally they multiply 24*1=24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1=24"",
    resulting_state=(24,),
    comment=""Based on their response, they multiply 24*1"",
)
```"
702,"[2,2,5,12]",,180," 8, 8, 12 minus 5 is 5, hmm, I gotta get a 6, 8, let's see, 4 and 5 is not, no, 4, 8, 8 minus 3, 8 minus 10, minus 5 is 5, no, ooh, 6, 12 minus 2, 2, 5, 12, so it will be 12, 2, 2, 5, 12, 12 times 2 is 24, nope, that's not gonna work, uh, 2, 5, 3, uh, minus 2 is 1, nope, 4, nope, jeez, this one I can't, let me see, 7, times 2 is 14 plus 12, nope, shoot, it's 5, anyway, 7, oh, 2 plus 5 is 7, minus 2, no, that's not, what was I just gonna say, 7, 2 plus 5 is 7, 19, oh, man, what did I say, 2 plus 2, maybe I said 10, 2 times 5, 2 times 5 is 10, minus 2, that's not gonna work either, ooh, okay, I gotta get this, 12, 6, 11, that's not gonna work, hmm, 4, 4, oh, gosh, 7 times 2 is 14, nope, that's not gonna work, 4, nope, what is this one, 7, 14, that's 26, nope, 7, 19, 4 and 5 is 9, that's not gonna work, 10, 11,","```python
start_state = (2, 2, 5, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 5 is 5"" - this appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12-5=5"",
    resulting_state=(2, 2, 5),
    comment='""12 minus 5 is 5"" - calculation error',
    result_calc_error=True,
)

# ""12 times 2 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(2, 5, 24),
    comment='""12 times 2 is 24""',
)

# ""2 plus 5 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+5=7"",
    resulting_state=(2, 7, 12),
    comment='""2 plus 5 is 7""',
)

# ""times 2 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(12, 14),
    comment='""times 2 is 14""',
)

# ""2 times 5 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(2, 10, 12),
    comment='""2 times 5 is 10""',
)

# ""4 and 5 is 9"" - participant likely got 4 from 2+2
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+2)+5=9"",
    resulting_state=(9, 12),
    comment='""4 and 5 is 9"" - participant likely got 4 from 2+2',
)
```"
703,"[2,7,7,10]",,180," So I want 24. So 10 minus 7 is 3. 3 times 7 is 21. 10 minus 2 is 8. Nope. 7 minus 2 is 5. Nope. 10 minus 7 is 3. 3 times 2 is 6. Nope. Oh my gosh. 10 divided by 2. That's 5 times 7 is 35. Minus 7. Nope. 7. 49. Nope. 49. No. Jeez. 8, 56, 9, 19, and 7. 19. 17. Okay. 17 plus 7. Zero. 17 would be 10 plus 7 is 17. 17 plus 7. 17 plus 7. Nope. 14. Oops. 20. It would be. Oh my god. 10 minus 7 is 3 times. 10 minus 2 is 8. 8. I think my brain fried out. All right. 2 plus 7 is 9. 2 plus 7 is 9 plus 10. 9 plus 7. No, it's 26. 10 and 2 is 12. 12 minus 7 is 5. It can't be. 14. Are you going to stay 5-2, or 4-1 for 2 and 5-3? NOPE. 7. No way. All right. There you go.","```python
start_state = (2, 7, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 7),
    comment='""10 minus 7 is 3""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 21),
    comment='""3 times 7 is 21""',
)

# ""10 minus 2 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(7, 7, 8),
    comment='""10 minus 2 is 8""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(5, 7, 10),
    comment='""7 minus 2 is 5""',
)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 7),
    comment='""10 minus 7 is 3""',
)

# ""3 times 2 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(6, 7),
    comment='""3 times 2 is 6""',
)

# ""10 divided by 2. That's 5 times 7 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/2)*7=35"",
    resulting_state=(2, 7, 35),
    comment='""10 divided by 2. That\'s 5 times 7 is 35""',
)

# ""Minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-7=28"",
    resulting_state=(2, 28),
    comment='""Minus 7""',
)

# ""7. 49"" likely means 7*7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(2, 10, 49),
    comment='""7. 49"" likely means 7*7',
)

# ""10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(2, 7, 17),
    comment='""10 plus 7 is 17""',
)

# ""17 plus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+7=24"",
    resulting_state=(2, 24),
    comment='""17 plus 7""',
)

# ""10 minus 7 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 7),
    comment='""10 minus 7 is 3""',
)

# ""10 minus 2 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(7, 7, 8),
    comment='""10 minus 2 is 8""',
)

# ""2 plus 7 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+7=9"",
    resulting_state=(7, 9, 10),
    comment='""2 plus 7 is 9""',
)

# ""9 plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(7, 19),
    comment='""9 plus 10""',
)

# ""10 and 2 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2=12"",
    resulting_state=(7, 7, 12),
    comment='""10 and 2 is 12""',
)

# ""12 minus 7 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 7),
    comment='""12 minus 7 is 5""',
)

```"
705,"[4,8,8,12]",8+8-4+12,64," Okay, uh, 12 times 4, uh, let's see, we need 24, so 8 times, I'm telling my thoughts","```python
start_state = (4, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(8, 8, 48),
    comment='""12 times 4""',
)

# ""we need 24, so 8 times"" suggests participant is setting a goal
graph.set_subgoal(
    (8, 8),
    state_after_subgoal=(24,),
    comment='""we need 24, so 8 times"" suggests participant is thinking about using the two 8s',
)

# Based on their response of ""8+8-4+12"", they eventually found this solution
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8-4+12=24"",
    resulting_state=(24,),
    comment=""Based on their submitted response"",
)
```"
706,"[6,7,8,10]",(8-6)x7+10,166," Okay, so, let's see, 10, let's see, okay, let's see if I can get, I can do 6 times 4, so if I can get 4 out of those, that's 42, let's see, we can go 8 minus 7 is 1, 6, okay, so, 5 minus 6 is 7, 1, 2, 2, 1, 2, 2. 6, okay so, 10 minus 6 is 4. Ours is 2, 2, 2, 2. Let's see, 10 minus 7 is 1, 6 is 5, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 3, 2. see here. Let's go 42, uh, 56. Um, I can go, I'm saying my thoughts out loud. So maybe you're not hearing them or you just want to hear what my thoughts are. Like I'm getting on a plane, um, tomorrow. So I got a pack and this one's not coming to me. It's not as easy as I thought. Maybe 2 times 7 is 14. How about that? How about 8 minus 6 is 2 times 7 is 14 plus 10. I just need to put the parentheses in there. So parentheses, 8 minus 6 equals 2 times 7 is 14 plus 10.","```python
start_state = (6, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can do 6 times 4"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""I can do 6 times 4""',
)

# ""8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 6, 10),
    comment='""8 minus 7 is 1""',
)

# ""10 minus 6 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 7, 8),
    comment='""10 minus 6 is 4""',
)

# ""10 minus 7 is"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 6, 8),
    comment='""10 minus 7 is""',
)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 7, 10),
    comment='""8 minus 6 is 2""',
)

# ""times 7 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(10, 14),
    comment='""times 7 is 14""',
)

# ""plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(24,),
    comment='""plus 10""',
)

```"
707,"[5,6,8,13]",(8-5),200," Okay, so that's 14 minus 1, 5 is 18, so 13, 11, well that's 24, but you've got to get rid of the 8. So, let's see, um, that's 14, that's 30, that's 30, that's 30, that's 30. That's not going to work. Let's see here. Maybe we can get a 2 out of it, 13. We can get a 2 out of it, maybe. Or a 5. Let's see, a 6. 6 times 4, let's see if we can get 4. 13, 5. Okay, that would be 0. Maybe we can get a 4. Let's see if we can get a 3. There's 7, maybe 2. Let's see if we can get a 13. Let's see if we can get a 7. 13 minus 8. I keep talking, but the thing keeps coming up. So, my microphone's on. Uh, that's 5. Let's see, times 5 is 25 minus 6. Um, oh, let's do some division. Let's see, so that's 5 times 5. Well, that's not quite right, is it? What if we did 8 divided by 6 is... no, that's not going to work. Um, so, let's do some division. Okay, so, let's I think it's an ad.","```python
start_state = (5, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""that's 14 minus 1, 5 is 18"" - participant seems to be doing 13+5=18
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=18"",
    resulting_state=(6, 8, 18),
    comment='""that\'s 14 minus 1, 5 is 18""',
)

# ""that's 30"" repeated several times - participant may be adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8+6+5=32"",
    resulting_state=(32,),
    comment='""that\'s 30"" - participant seems to be adding numbers',
    result_calc_error=True
)

# ""13 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(5, 5, 6),
    comment='""13 minus 8""',
)

# ""times 5 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(6, 25),
    comment='""times 5 is 25""',
)

# ""8 divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/6=1.33"",
    resulting_state=(5, 13, 1.33),
    comment='""8 divided by 6""',
)

# The participant submitted (8-5) but this doesn't make 24. They may have run out of time before completing their solution.
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 13),
    comment='The participant submitted (8-5) but this doesn\'t make 24',
)
```"
708,"[5,5,10,10]",(5x5)-(10/10),196," Okay, 5, 5, 10, 10 to get 24. Okay, so how about 10 divided by 5 is 2. 10 is 5. We got 50. Let's see, 50 times 5. Let's see, what can we do here? Let's see, we got 10 minus 5 is 5. Okay, 10 plus 5 is 15. 5 and 5 is 25. Uh... . 10, okay, 10 plus 5 is 15. . Um... Plus 10 is 25. Minus 5 is not quite it. I'm getting there. I think we got to go, we got to get a 1. Um... We got to get a 1 out of it. So, let's see. We got to get a 1 out of it. So... But that's hard to do, because once I use up the 5's to get a 1, then I have 20. Um... We can go 10 divided by 10 equals 1 times... How about this? 5 times 5 equals 25. Minus 10 times 10. No, 10 divided by 10. . . . . . . . .","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 10),
    comment='""10 divided by 5 is 2""',
)

# ""10 is 5"" is unclear, but ""We got 50"" suggests multiplying numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(5, 10, 50),
    comment='""We got 50""',
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 10),
    comment='""10 minus 5 is 5""',
)

# ""10 plus 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(5, 10, 15),
    comment='""10 plus 5 is 15""',
)

# ""5 and 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(10, 10, 25),
    comment='""5 and 5 is 25""',
)

# ""Plus 10 is 25. Minus 5"" - continuing from 15
curr_state = graph.move_to_node((5, 10, 15))
new_state = graph.explore_operation(
    curr_state,
    operation=""15+10-5=20"",
    resulting_state=(20,),
    comment='""Plus 10 is 25. Minus 5""',
)

# ""We got to get a 1 out of it"" suggests setting a subgoal
graph.set_subgoal(
    (1,),
    state_after_subgoal=(24,),
    comment='""We got to get a 1 out of it""',
)

# ""10 divided by 10 equals 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 5, 5),
    comment='""10 divided by 10 equals 1""',
)

# Based on their response, they combine 5*5=25 with 10/10=1 to get 24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5-(10/10)=24"",
    resulting_state=(24,),
    comment=""Based on their response (5*5)-(10/10), they combine the operations to get 24"",
)
```"
714,"[8,9,12,13]",,208," 12 minus 9 is 3 times 8 is 24. Let's see, 12 minus 9 is 3. 12 minus 9 is 3 times 8 is 24. That would be it. But we gotta get rid of the 13 somehow. 12 minus... 13 minus 12 is 1. How can we get 3 out of that? 8 and 8 are 16. 16... Oh, how about that? 8 and 8... 16 plus 9 is 25. How did I get the 16? Thank you. Thank you. 9, 12 times 2, 12 times 2 is 24, so what's 13 minus 9, 13 minus 9 is 4, 13 minus 9 is 4. Hmm.","```python
start_state = (8, 9, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 9 is 3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(13, 24),
    comment='""12 minus 9 is 3 times 8 is 24""',
)

# ""13 minus 12 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 8, 9),
    comment='""13 minus 12 is 1""',
)

# ""8 and 8 are 16"" - participant seems to be doubling 8
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(9, 12, 13, 16),
    comment='""8 and 8 are 16""',
)

# ""16 plus 9 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=25"",
    resulting_state=(12, 13, 25),
    comment='""16 plus 9 is 25""',
)

# ""12 times 2 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(8, 9, 13, 24),
    comment='""12 times 2 is 24""',
)

# ""13 minus 9 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 8, 12),
    comment='""13 minus 9 is 4""',
)
```"
719,"[3,3,9,9]",(3+9),180," 3, 3, 9, 9. So, 3 times 3 is 9. Then we're left with 3 nines. 9, 9, 9. 9 plus 9 is 18, 1 plus 9 is 9. Oh, it doesn't work. So, 3 times 9 is 21. 21, 1. So, 3, so 6 times. So, 6 times 9. That doesn't work. Let's see. So, how about we do 3 plus 9, that's 11. 11 times 3, 33. And we're left with 2. And that can work. So, what was it? I forgot what I did. Hold on. It was... It was 3... 3... 3 plus 9, which would get us 11, I think. No, I guess it's 12. I don't know. 12 times 3 is 36, so we're left with 9. So how about we do 12 times 9. 12 times 9 is 36, so we're left with 9.","```python
start_state = (3, 3, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 9, 9),
    comment='""3 times 3 is 9""',
)

# ""9 plus 9 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(9, 18),
    comment='""9 plus 9 is 18""',
)

# Going back to start state for ""3 times 9 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(3, 9, 27),
    comment='""3 times 9 is 21"" - participant makes calculation error',
    result_calc_error=True,
)

# ""So, 6 times 9"" - participant likely got 6 from 3+3
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*9=54"",
    resulting_state=(9, 54),
    comment='""So, 6 times 9"" - participant likely got 6 from 3+3',
)

# ""3 plus 9, that's 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+9=11"",
    resulting_state=(3, 9, 11),
    comment='""3 plus 9, that\'s 11"" - participant makes calculation error',
    result_calc_error=True,
)

# ""11 times 3, 33""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(9, 33),
    comment='""11 times 3, 33""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+9=12"",
    resulting_state=(3, 9, 12),
    comment='""3 plus 9, which would get us 11, I think. No, I guess it\'s 12""',
)

# ""12 times 3 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(9, 36),
    comment='""12 times 3 is 36""',
)

# ""12 times 9 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(3, 108),
    comment='""12 times 9 is 36"" - participant makes calculation error',
    result_calc_error=True,
)
```"
722,"[2,4,6,9]",(4x9)-(6-2),180," Why am I still- I thought we were done. Let's see, 2 times 9 is 16, 1, 2 times 9 is 10. No, that's too much. How about we subtract 4, and that'd be 2, 6, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20. You're killing me, it's only 22. Okay. Let's see, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47, Okay. Okay. I guess that wouldn't work. I guess, I don't know. Wait, what's four times nine? I don't know.","```python
start_state = (2, 4, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 9 is 16"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=16"",
    resulting_state=(4, 6, 16),
    comment='""2 times 9 is 16"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""2 times 9 is 10"" - participant corrects themselves but still makes an error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=10"",
    resulting_state=(4, 6, 10),
    comment='""2 times 9 is 10"" - participant still makes an error',
    result_calc_error=True,
)

# The participant then seems to be counting numbers out loud but it's not clear what operations they're trying

# ""what's four times nine?""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(2, 6, 36),
    comment='""what\'s four times nine?""',
)

# Based on their submitted answer (4x9)-(6-2), they must have then computed 6-2=4 and subtracted that from 36
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-(6-2)=32"",
    resulting_state=(32,),
    comment=""Based on submitted answer, participant subtracted (6-2) from 36"",
)
```"
724,"[3,3,3,9]",,180," As you perform the task, try to say kind of stumped on this one. Let's see. Let's get to 24. Oh, okay, I see. So if you do 9 times 3, that gives you 27. And then if you divide by 3 divided by 3, that's divided by 1, that should give you 24. Oh, nope, that didn't work. Because that's 27. Okay, that's not right. Ah, hmm. Yeah, I'm stumped on this one. Let's see. 3 times 3 is 9. If you add 9 and 3, that's only going to give you 21. 3 times 3 times 3 is 27. And if you subtract 9, that's too many, or too little. 3 times 3 times 3 is 27.","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3, that gives you 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 3, 27),
    comment='""9 times 3, that gives you 27""',
)

# ""And then if you divide by 3 divided by 3"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27/3/3=3"",
    resulting_state=(3,),
    comment='""And then if you divide by 3 divided by 3""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 3, 9, 9),
    comment='""3 times 3 is 9""',
)

# ""If you add 9 and 3, that's only going to give you 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3+9=21"",
    resulting_state=(3, 21),
    comment='""If you add 9 and 3, that\'s only going to give you 21""',
)

# ""3 times 3 times 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3=27"",
    resulting_state=(9, 27),
    comment='""3 times 3 times 3 is 27""',
)

# ""And if you subtract 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-9=18"",
    resulting_state=(18,),
    comment='""And if you subtract 9""',
)

```"
726,"[3,4,7,9]",(3x9)+4-7,133," All right, these numbers are smaller. Let's see here. So, target number is 24. See, we got a 3, so if we could get 72 somehow, but I don't see how to do that. 63, 7 times 9 plus 4 is 67. That's not going to work. If you add everything together, you only get 23. 7, let's see. 3 times 7 plus 9 is 30 minus 4 is 26. 7 times 9 is 36. 9 times 4 plus 3 minus 9 is 22. 9 times 4 is 36 minus the other 2 is only 26. Huh. Let's see. 9 times 4 is 36. Oh, wait, I just did that. 26. Let's see. I can get, let's see, maybe 28 or 25. No, no, that's not going to work. Okay. 9 divided by 3 is 3 plus, times 7 plus 4 is 25. 3 times 9, there we go. So 3 times 9. Is 27 plus 4 minus 7.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if we could get 72 somehow"" - participant seems to be setting a subgoal of 72/3=24
graph.set_subgoal(
    (72,),
    state_after_subgoal=(24,),
    comment='""if we could get 72 somehow""',
)

# ""7 times 9 plus 4 is 67""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9+4=67"",
    resulting_state=(3, 67),
    comment='""7 times 9 plus 4 is 67""',
)

# ""If you add everything together, you only get 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4+7+9=23"",
    resulting_state=(23,),
    comment='""If you add everything together, you only get 23""',
)

# ""3 times 7 plus 9 is 30 minus 4 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7+9-4=26"",
    resulting_state=(26,),
    comment='""3 times 7 plus 9 is 30 minus 4 is 26""',
)

# ""7 times 9 is 36"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=36"",
    resulting_state=(3, 4, 36),
    comment='""7 times 9 is 36"" - calculation error',
    result_calc_error=True,
)

# ""9 times 4 plus 3 minus 9 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(3, 7, 36),
    comment='""9 times 4 is 36""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36+3-7=32"",
    resulting_state=(32,),
    comment='""9 times 4 plus 3 minus 9 is 22"" - calculation error',
    result_calc_error=True,
)

# ""9 times 4 is 36 minus the other 2 is only 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4-7-3=26"",
    resulting_state=(26,),
    comment='""9 times 4 is 36 minus the other 2 is only 26""',
)

# ""9 divided by 3 is 3 plus, times 7 plus 4 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9/3)*7+4=25"",
    resulting_state=(25,),
    comment='""9 divided by 3 is 3 plus, times 7 plus 4 is 25""',
)

# ""3 times 9, there we go. So 3 times 9. Is 27 plus 4 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9+4-7=24"",
    resulting_state=(24,),
    comment='""3 times 9, there we go. So 3 times 9. Is 27 plus 4 minus 7""',
)
```"
731,"[3,3,7,13]",,180," Okay, 2 3's, a 7, and a 13. Okay, let's add them up first. That's 26, that won't work. 13 times 3 is 39, and minus 7 minus 3 is 29. Let's see, what's 91 divided by 3? That's 27, so that would work. So if you do 13 times 7, that's 91, and divide by 3, and then minus 3 gives you 24. What? Incorrect answer. Hold on. Okay, maybe I have to put more parentheses. 13 times 7 is 91. Whoops. Times 7. Divided by 3. Oh, wait a minute, that's not right. I was thinking of 81 divided by 3, not 91. Okay, that is wrong. Okay. Let's see. Let's see, let's see, let's see. 7 times 3 times 3 is 42, minus 13 is 29. That doesn't work. 13 plus 7 is 20. And then if you add 3 divided by 3, it's only 21. 3 times 3 is 9. Let's see. What's 24 times 7? 168. And there's no way to get that out of 33 and 13. 13. 13 times 3, that's still just 20. I don't think I'm going to be able to solve this one. 13 times 7. Oh, I did that before. That's what I started out with. That's not right. 3 times 3 is... 168. Thank you.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""let's add them up first. That's 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+3+3=26"",
    resulting_state=(26,),
    comment='""let\'s add them up first. That\'s 26""',
)

# ""13 times 3 is 39, and minus 7 minus 3 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3-7-3=29"",
    resulting_state=(29,),
    result_calc_error=True,
    comment='""13 times 3 is 39, and minus 7 minus 3 is 29""',
)

# ""13 times 7, that's 91, and divide by 3, and then minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*7)/3-3=27"",
    resulting_state=(27.33,),
    comment='""13 times 7, that\'s 91, and divide by 3, and then minus 3""',
)

# ""7 times 3 times 3 is 42, minus 13 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3*3-13=29"",
    resulting_state=(29,),
    result_calc_error=True,
    comment='""7 times 3 times 3 is 42, minus 13 is 29""',
)

# ""13 plus 7 is 20. And then if you add 3 divided by 3, it's only 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+3/3=21"",
    resulting_state=(21,),
    comment='""13 plus 7 is 20. And then if you add 3 divided by 3, it\'s only 21""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(7, 9, 13),
    comment='""3 times 3 is 9""',
)

# ""13 times 3, that's still just 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 7, 39),
    comment='""13 times 3, that\'s still just 20"" - participant made calculation error saying 39 is 20',
)

# ""13 times 7"" participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(3, 3, 91),
    comment='""13 times 7"" participant tries this again',
)
```"
732,"[3,3,3,4]",(3x3),180," Okay, 3 3s and a 4. Let's see, obviously adding all those up isn't going to do anything for you. 3 times 4 is 12, times 3 is 36, divided by 3 is 12, that won't work. 3 times 3 times 3 is 27, minus 4 is 23, that won't work. Let's see, 4 times 6 is 24. How do I get to 6? Oh, I get it, okay. So if I do 4 times 3, oh no, wait, that doesn't work. I had it, I thought. No, I think I did my math wrong. Oh no, wait, 4 times 6, so you do 4 times, and then 3 plus 3 is 6, so that's 24, and then plus... Oh, shoot. I was thinking 27. That's not going to work. Darn. Darn, darn, darn. I'm going to run out of time again. Ugh. Yeah, I don't think I can get this one. Ugh. Yeah, I'm stuck. I'm not seeing a solution here. Not sure why. Yeah, 4 plus 3 plus 3 is 10, times 3 is 30. Or... 3 plus 3 times 3, ooh. 3 times 3 is 9.","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 4 is 12, times 3 is 36, divided by 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4*3/3=12"",
    resulting_state=(12,),
    comment='""3 times 4 is 12, times 3 is 36, divided by 3 is 12""',
)

# ""3 times 3 times 3 is 27, minus 4 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3-4=23"",
    resulting_state=(23,),
    comment='""3 times 3 times 3 is 27, minus 4 is 23""',
)

# ""4 times 6 is 24. How do I get to 6?"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 times 6 is 24. How do I get to 6?""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 4, 6),
    comment='""3 plus 3 is 6""',
)

# ""4 plus 3 plus 3 is 10, times 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+3+3)*3=30"",
    resulting_state=(30,),
    comment='""4 plus 3 plus 3 is 10, times 3 is 30""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 4, 9),
    comment='""3 times 3 is 9""',
)
```"
745,"[11,13,13,13]",(13-13)+11+13,29," Okay, so then if I do 13 and 11 is 15. So if I do 13, okay, I've got to figure out these stupid order of operations. Okay, 13 minus 13 is fine, which that equals 0 plus 11 plus that. Okay.","```python
start_state = (11, 13, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 and 11 is 15"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=15"",
    resulting_state=(13, 13, 15),
    comment='""13 and 11 is 15"" seems to be a calculation error',
    result_calc_error=True,
)

# ""13 minus 13 is fine, which that equals 0 plus 11 plus that""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-13)+11+13=24"",
    resulting_state=(24,),
    comment='""13 minus 13 is fine, which that equals 0 plus 11 plus that""',
)

```"
746,"[1,4,5,11]",,180," Target number is 24. So if I do 11 plus, so 5 and 4 is 9, plus 1 is, okay so it can't be just addition, I have to have something else. So 11, okay so I can't reach it with multiplying all of those together so it has to be something with the 11. So 11 times 5 is 55. It's too much. Okay, so 9 times 4 is 20. Okay, so I still have something to do with the division. I hate division. Okay, um, does it have something to do with division? 12. So if I do 12 times, oh god, it's 12 times 5 is 60, and 60 divided by 4 is 15. So if I do 12 times 4 divided by, oh that's not going to be an equal number. Um, Jesus Christ. Okay. 5 times, okay can I add anything here then? What if I do, um, 15, that won't work. Uh, what if I do 6 times 4? 6 times 4 is 24, yeah. Then I have the 11. Okay. Um, well if I do 11, plus 1, plus 4, plus 5 is... Okay. I hate this, it's 21. Um... This is terrible. Uh, 1 plus... It has to have something to do with division, and I just suck at division because it's not intuitive. Mmm... 11... 11... I th- what is it? 11 divided by...","```python
start_state = (1, 4, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 and 4 is 9, plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+4+1=10"",
    resulting_state=(10, 11),
    comment='""5 and 4 is 9, plus 1""',
)

# ""11 times 5 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(1, 4, 55),
    comment='""11 times 5 is 55""',
)

# ""9 times 4 is 20"" - participant likely got 9 from adding 5+4
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+4)*4=36"",
    resulting_state=(1, 11, 36),
    comment='""9 times 4 is 20"" - participant made calculation error',
    result_calc_error=True
)

# ""12 times 5 is 60, and 60 divided by 4 is 15"" - participant seems to have gotten 12 from 11+1
new_state = graph.explore_operation(
    curr_state,
    operation=""(11+1)*5/4=15"",
    resulting_state=(15,),
    comment='""12 times 5 is 60, and 60 divided by 4 is 15""',
)

# ""6 times 4 is 24"" - participant may have gotten 6 from 11-5
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-5)*4=24"",
    resulting_state=(1, 24),
    comment='""6 times 4 is 24""',
)

# ""11, plus 1, plus 4, plus 5 is... 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1+4+5=21"",
    resulting_state=(21,),
    comment='""11, plus 1, plus 4, plus 5 is... 21""',
)

# The participant then mentions division but doesn't complete any more calculations
```"
747,"[5,10,13,13]",(5x10)-13-13,72," Okay, back in business. God, what is this? 13. 26. Okay, what is 13 times 13? 139? Right? 13 times 13, carry the 1. No, 69, because it's 3 more times than that, and plus I have to out-carry that. Okay, yeah. So it's 69. So that is not multiplying the big ones together. Lord, okay. That is 50. What is, so 13 and 13 is 26. 50 and minus 26. Okay, so it's 5 times, okay, 5 times 10 is 30. Minus 13 minus 13, that should be 24.","```python
start_state = (5, 10, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13. 26"" - participant adds the 13s
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(5, 10, 26),
    comment='""13. 26"" - participant adds the 13s',
)

# ""what is 13 times 13? 139?"" participant tries multiplying 13s but makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=139"",
    resulting_state=(5, 10, 139),
    comment='""what is 13 times 13? 139?"" participant makes calculation error',
    result_calc_error=True,
)

# ""No, 69"" participant corrects their calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=69"",
    resulting_state=(5, 10, 69),
    comment='""No, 69"" participant corrects their calculation but is still incorrect',
    result_calc_error=True,
)

# ""That is 50"" - participant likely multiplying 5*10
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(13, 13, 50),
    comment='""That is 50"" - participant multiplies 5*10',
)

# ""13 and 13 is 26"" - participant adds 13s again
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(5, 10, 26),
    comment='""13 and 13 is 26"" - participant adds 13s again',
)

# ""5 times 10 is 30"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=30"",
    resulting_state=(13, 13, 30),
    comment='""5 times 10 is 30"" - participant makes calculation error',
    result_calc_error=True,
)

# ""Minus 13 minus 13, that should be 24"" - participant finds the correct solution
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5*10)-13-13=24"",
    resulting_state=(24,),
    comment='""Minus 13 minus 13, that should be 24"" - participant finds correct solution',
)
```"
749,"[7,10,10,12]",10-,180," So I only have to use these once, but can I use them more than once? Maybe I didn't read the instructions correctly. Because if I do 10 times 12. No, I can't click on these more than once. Okay, so I'm not, I read the instructions right. Um, so 7, uh, 12 minus 7 is 4. Okay, I need the little stupid my dear Aunt Sally brackets. 12 minus 7 is 4, and then 10 and 10 is 20. So plus 10 plus 10, that would be 24. Okay. Incorrect. Answer or not all numbers used. Wait a minute. 10 plus 10 is 20. I don't understand. Because if you do 12 minus 7. Oh my freaking god, that's 5. I'm a dumb ass. Uh, okay, so that's not it. Um, I was, I thought I was onto something there. That's fine. So, I can't do 17. If I do 19 divided by 10, that doesn't work. 10 minus 7 is 3. 3 won't help me in here, because if I do 3 plus 12. 16. 16, 26. 10 divided by 10 is 1. 12. I can't do division with a 7, that doesn't help me. So if I do 32, by adding all of those together, minus, 2 minus 5, that doesn't get me to 26. 24, that's 25. Okay. I was so sure with that other one I did, man, okay. 10 minus 12 is two. Two times seven is four, oh, 10, my, oh.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 12"" participant considers but realizes they can't use numbers more than once
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(7, 10, 120),
    comment='""10 times 12"" participant considers but realizes they can\'t use numbers more than once',
)

# ""12 minus 7 is 4"" participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=4"",
    resulting_state=(4, 10, 10),
    comment='""12 minus 7 is 4"" participant makes calculation error',
    result_calc_error=True,
)

# ""and then 10 and 10 is 20"" participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(4, 20),
    comment='""and then 10 and 10 is 20""',
)

# ""plus 10 plus 10, that would be 24"" participant adds the 4 from earlier
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+4=24"",
    resulting_state=(24,),
    comment='""plus 10 plus 10, that would be 24""',
)

# Participant realizes their error: ""Wait a minute... Oh my freaking god, that's 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 10, 10),
    comment='""Oh my freaking god, that\'s 5"" participant corrects earlier calculation error',
)

# ""10 minus 7 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 10, 12),
    comment='""10 minus 7 is 3""',
)

# ""3 plus 12. 16"" participant continues calculation with error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+12=16"",
    resulting_state=(10, 16),
    comment='""3 plus 12. 16"" participant makes calculation error',
    result_calc_error=True,
)

# ""16, 26"" participant adds 10
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+10=26"",
    resulting_state=(26,),
    comment='""16, 26"" participant adds 10',
)

# ""10 divided by 10 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 7, 12),
    comment='""10 divided by 10 is 1""',
)

# ""32, by adding all of those together"" participant seems to be adding all numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10+10+12=39"",
    resulting_state=(39,),
    comment='""32, by adding all of those together"" though participant gets 39',
)

# ""10 minus 12 is two""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(2, 7, 10),
    comment='""10 minus 12 is two""',
)

# ""Two times seven is four"" participant makes calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=4"",
    resulting_state=(4, 10),
    comment='""Two times seven is four"" participant makes calculation error',
    result_calc_error=True,
)
```"
751,"[7,9,9,13]",(13-7)+9+9,86," 24. 13 is, I hate 7. Okay. 9 minus, 9 minus 7 is, dear lord, 4. And then 4 minus, I need this to be a 15 if I want to use that 9 like that. So if I do, that doesn't work. If I do 20, make that into 20 and then divide. So if I do, what about 13 minus 7? That would be, oh, get rid of the 2. So it would be 12 minus 5, or sorry, 11 minus 5, which would be 6. Okay. So if I do that, I need this stupid little brackets. Okay. 13 minus 7, which I'm not going to do them all because that's 6. 99 is 18. Okay. So yeah, then you're going to do that. You're going to add those together and that makes 20.","```python
start_state = (7, 9, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 7 is, dear lord, 4"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=4"",
    resulting_state=(4, 9, 13),
    comment='""9 minus 7 is, dear lord, 4"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""13 minus 7? That would be... 6"" - participant makes another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 9),
    comment='""13 minus 7? That would be... 6"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""99 is 18"" - participant seems to be adding the two 9s
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 18),
    comment='""99 is 18"" - participant seems to be adding the two 9s',
)

# ""add those together and that makes 20"" - participant adds 18 and 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(24,),
    comment='""add those together and that makes 20"" - though participant says 20, they seem to mean 24 since that\'s the target',
)

```"
756,"[3,9,13,13]",9/(13/13),180," So, 13 and 13 is 26, 29, 39, okay, 38 rather. Okay, so let's say 9, let me see, 13 times 13 is 1, 9 times 3 is 27, so it's going to be 4 minus 4. Mmm, 9, 10 and 12, 13, 9, plus 9, 10 and 12. Mm-mm, okay, parentheses, 13 and 2, 13, let's see, 13 plus 9. That's 200, that's not right, mm-hmm, so 13 divided by 13, that'll be 1, times, hmm okay okay let's go back so nine minus nine um let's see 13 divided by what 13 would be one don't come into 10 if I added it 9 if I divide it okay find it by 13 divided by 13 it's gonna be a 1 so that's 9 divided by 1 which would be 9","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 and 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13 and 13 is 26""',
)

# ""29, 39, okay, 38 rather"" seems to be adding 3 and 9 to 26
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+3+9=38"",
    resulting_state=(38,),
    comment='""29, 39, okay, 38 rather"" seems to be adding 3 and 9 to 26',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""9 times 3 is 27""',
)

# ""13 divided by 13, that'll be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 3, 9, 13),
    comment='""13 divided by 13, that\'ll be 1""',
)

# ""9 divided by 1 which would be 9"" - participant seems to be dividing 9 by (13/13)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/1=9"",
    resulting_state=(3, 9, 13),
    comment='""9 divided by 1 which would be 9""',
)

```"
757,"[5,5,6,11]",11+6,180," Alright, so we'll do 11 plus 6, and that's 17, plus 5, um, mm-mm, so it'll be like 11 divided by parentheses 6, mm-mm, okay, okay, 11 divided by 5 times 5 is 25. So, we'll do that, so 5 times 5 is 25, mm-hmm, alright, um, plus, wait, um, hmm, my goodness, plus, and then we have, um, 25, plus 11, ugh, why are you telling me I'm not done? I'm not done yet, plus 11, uh, minus 6, okay, um, plus 11 minus 6, 11 minus 6, 6, 7, 8, 9, 10, 11, that's 5, so 5 times 5 is 25, plus 11 minus 6, 6, 7, 8, 9, 10, 11, that's plus 5. 30. Nope. 5 times 5, um, mm-mm, 5 times, so let's try it, 11 plus, mm-mm, 6, 7, 8, 9, 10, 18.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 6, and that's 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(5, 5, 17),
    comment='""11 plus 6, and that\'s 17""',
)

# ""plus 5"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+5=22"",
    resulting_state=(5, 22),
    comment='""plus 5""',
)

# ""11 divided by parentheses 6"" participant starts over
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/6=1.83"",
    resulting_state=(5, 5, 1.83),
    comment='""11 divided by parentheses 6""',
)

# ""11 divided by 5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""11/5*5=25"",
    resulting_state=(6, 25),
    comment='""11 divided by 5 times 5 is 25""',
    result_calc_error=True,
)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(6, 11, 25),
    comment='""5 times 5 is 25""',
)

# ""plus 11 minus 6"" from the 25 state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+11-6=30"",
    resulting_state=(30,),
    comment='""plus 11 minus 6""',
)

# ""11 plus 6"" participant starts over again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(5, 5, 17),
    comment='""11 plus 6""',
)

```"
758,"[2,3,7,9]",(7x9,180," 9 times 3 is 27, 9 times 3 is 27, divided by, uh uh, that's not going, uh uh, minus, 27 minus, um, 7, it's going to be 20, nope, minus, 2, plus, 7, mm-mm, that's not it, um, let's see, 7 times 3 is 21, okay, 21, plus, um, no, whoo, so 1 minus, nope, okay, so let's try 7 times 2, so 14, plus, uh, 9, 14, plus, uh, 9, um, divided by 3 is 3, so it's 14 plus 3, nope, and then 14, 9 times 3 is 27, so 14 plus 27 is surely not it, alright, start over here, uh, 9, 9 times, okay, so 9 times, 7 times 9 is 6 to 3, I can't remember, 6 to 3, alright, 8 times 5 is 6 to 3, so 9 times 5, We can stop here, okay, 1 plus 6 is 6 to 3, ummm ______. to the interest. Nope? Nope, that's okay.","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(2, 7, 27),
    comment='""9 times 3 is 27""',
)

# ""27 minus 7, it's going to be 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-7=20"",
    resulting_state=(2, 20),
    comment='""27 minus 7, it\'s going to be 20""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(2, 9, 21),
    comment='""7 times 3 is 21""',
)

# Going back to start state again
curr_state = graph.move_to_node(start_state)
# ""7 times 2, so 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 9, 14),
    comment='""7 times 2, so 14""',
)

# ""14 plus 9 divided by 3 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(14+9)/3=3"",
    resulting_state=(3,),
    result_calc_error=True,
    comment='""14 plus 9 divided by 3 is 3"" - calculation error',
)

# ""9 times 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(2, 7, 27),
    comment='""9 times 3 is 27""',
)

# ""7 times 9 is 6 to 3"" seems to be a transcription error, participant is trying to calculate 7*9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(2, 3, 63),
    comment='""7 times 9 is 6 to 3"" seems to be calculating 7*9=63',
)

# The rest of the transcript is unclear or seems to contain transcription errors
```"
764,"[3,3,7,13]",7(3x3),180," I'll give us 21, and then we're going to add 3. Oh, wait, I didn't know what we were going to switch. Okay, so we have 21. Plus 3. Hmm. We do 13 plus 7. 13 plus 7 is 21. Plus 3 minus 3. 7 times 3. 7 times 3. 7 times 3 is... 21. 21. 22. 23.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I'll give us 21"" - participant seems to be working toward a subgoal of 21
graph.set_subgoal(
    (21,),
    state_after_subgoal=(24,),
    comment='""I\'ll give us 21""',
)

# ""13 plus 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=21"", 
    resulting_state=(3, 3, 21),
    comment='""13 plus 7 is 21""',
    result_calc_error=True, # 13+7=20, not 21
)

# ""Plus 3 minus 3"" - participant tries adding and subtracting the remaining numbers
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+3-3=21"",
    resulting_state=(21,),
    comment='""Plus 3 minus 3""',
)

# ""7 times 3"" participant tries a different approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3""',
)

# Based on their submitted response of 7(3x3), they must have eventually tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(7, 9, 13),
    comment=""Based on submitted response, participant multiplied 3*3"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(13, 63),
    comment=""Based on submitted response, participant multiplied 7*9"",
)
```"
769,"[3,3,3,4]",,180," We do 4 times 3 equals 12, then times 3. 12 plus 9 equals 21 plus 3. So we have 3 plus 3 gives you 9. And then... And then... And then... 4 times... That's 21. That's 21. That's 21. That's 21. That's 21. That's 21. 3 plus 3 plus 4 times 3.","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 3 equals 12, then times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3*3=36"",
    resulting_state=(3, 36),
    comment='""4 times 3 equals 12, then times 3""',
)

# ""3 plus 3 gives you 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 4, 6),
    comment='""3 plus 3 gives you 9"" - participant made calculation error',
    result_calc_error=True,
)

# ""3 plus 3 plus 4 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3+4)*3=30"",
    resulting_state=(30,),
    comment='""3 plus 3 plus 4 times 3""',
)

# The participant keeps repeating ""That's 21"" but it's not clear how they got to 21
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3+3+4=21"",
    resulting_state=(21,),
    comment='""That\'s 21"" repeated several times, though the calculation is incorrect',
    result_calc_error=True,
)
```"
770,"[2,3,6,6]",6x2,180," 6 divided by 6. 6 plus 6 is 12. Okay, so if we have 6 plus 6 is 12 times 2 will give us 24. Okay, so if we take 6 times 2, gives us 12. And then 6 times 3 is 18. 12 and 18, that's not right. 6 times 2 is 18. 6 times 2 is 18. 12. 12. 12. 12. 12. 12. 12. That was better taking care of her than I am. She said, they're going. Oh, yeah. Oh, my gosh. Oh, my gosh. Oh, no. No.","```python
start_state = (2, 3, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/6=1"",
    resulting_state=(1, 2, 3),
    comment='""6 divided by 6""',
)

# ""6 plus 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(2, 3, 12),
    comment='""6 plus 6 is 12""',
)

# ""if we have 6 plus 6 is 12 times 2 will give us 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(3, 24),
    comment='""12 times 2 will give us 24""',
)

# Going back to start state: ""if we take 6 times 2, gives us 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(3, 6, 12),
    comment='""6 times 2, gives us 12""',
)

# ""And then 6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(2, 6, 18),
    comment='""6 times 3 is 18""',
)

# ""6 times 2 is 18"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=18"",
    resulting_state=(3, 6, 18),
    comment='""6 times 2 is 18"" - calculation error',
    result_calc_error=True,
)

# The rest appears to be off-task speech or transcription errors
```"
776,"[1,5,6,11]",11-6x,180," What is the number? 15611 611 15611 611 15611 11 11 11 11 11 11 11-1 10 11 11 11 11 11 156 156 156 11-1 10 36 36-11 611-6 four times six twenty four four times six twenty four bye she know you eleven minus six eleven you raise six to become four then you multiply by five and add one you close the brackets valid equation you know it is good but how you make it you know it is good but how you make it how you make it bracket bracket eleven you raise six to get four then you multiply the plus then you divide by three then you multiply four multiply by five 5, add 1, pull the bracket, multiply by 11, this is 6, 8, 9, 10, 11, 11, 6, 7, 8, 9, 10, 11, 11, 11, 11, you'd like to see it, get home, and write 5 more.","```python
start_state = (1, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11-1 10"" participant tries subtracting 1 from 11
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(5, 6, 10),
    comment='""11-1 10""',
)

# ""four times six twenty four"" participant sets a subgoal of getting to 24
graph.set_subgoal((4, 6), comment='""four times six twenty four""')

# ""eleven minus six"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(1, 5, 5),
    comment='""eleven minus six""',
)

# ""eleven you raise six to become four then you multiply by five and add one""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-6)*5+1=26"",
    resulting_state=(26,),
    comment='""eleven you raise six to become four then you multiply by five and add one""',
)

# The rest of the transcript appears to be the participant trying to verbalize different combinations
# but without clear mathematical operations being performed
```"
779,"[3,9,10,12]",,191," What is the number 24? It is here. There are 3, 9, 10 and 12. I want 24. 9 divided by 3 is 2. 30 subtract 7. 9 divided by 3 8 9. 12 flower. 10 divided by 12. 10 minus 9 2. 10 9 2. 2 divided by 9 4. 10-3 three this is what we get this is what we get wait a minute wait a minute three seven then it's twelve aha twelve minus three is eight eight eight eight eight eight eight nothing plus five 9 plus 10 3 2 4 5 4 5 6 7 9 8 9 12 minus 9, 3, 3 times, 3 times 3 is 9, 9 times 10 is 8. That's it, that's it, that's it.","```python
start_state = (3, 9, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 divided by 3 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 10, 12),
    comment='""9 divided by 3 is 2"" - participant made calculation error saying 2 instead of 3',
    result_calc_error=True
)

# ""10 divided by 12"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""10/12=0.833"",
    resulting_state=(0.83, 3, 9),
    comment='""10 divided by 12""',
)

# ""10 minus 9 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 3, 12),
    comment='""10 minus 9"" - not clear where ""2"" came from',
)

# ""12 minus three is eight"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(9, 9, 10),
    comment='""12 minus three is eight"" - participant made calculation error',
    result_calc_error=True
)

# ""9 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(3, 12, 19),
    comment='""9 plus 10""',
)

# ""12 minus 9, 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 3, 10),
    comment='""12 minus 9, 3""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 10),
    comment='""3 times 3 is 9""',
)

# ""9 times 10 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*10=90"",
    resulting_state=(90,),
    comment='""9 times 10 is 8"" - participant made calculation error',
    result_calc_error=True
)
```"
780,"[1,2,3,8]",(8,180," 1,2,3,8 8 times 3 is 24 8 times 4 is 24 24? We have already finished that. We have already finished that. We have finished that. Yes, we have finished that. 8 times 3 Then you add 2 2 plus 1 here No, no, no. You delete. You less into brackets green when you add 1 Man, you told me how we are going to solve this and show it to me. Show it to me? Yes. So, how many cases do we have? 8 times 3 is 24 Then 2 plus 1 is 3 No, no, no, no. No, no, no, no. No, no, no, no. 8 times 3 is 24. 24 minus 3 To eliminate that 2 and 1 What does that mean? 8 plus 2 is 10 plus 1 7 How do you do that? 8 minus 2 is 6 3 plus 1 is 4 So, 6 times 4 is 24 Tell me How do I explain it to you? 8 minus 8 minus 2 is 6 Then there is 3 plus 1 comes to 4 3 plus 1 comes to 4 So, it is 6 times 2 Then we solve it. 4 4 4 4 4 4 4 2 2 2 to get 6 then you multiply by bracket 3 add 1 then you multiply by bracket 2 add bracket 3 add bracket 3 add bracket 4 add bracket","```python
start_state = (1, 2, 3, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(1, 2, 24),
    comment='""8 times 3 is 24""',
)

# ""Then 2 plus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 3, 8),
    comment='""Then 2 plus 1 is 3""',
)

# ""24 minus 3"" participant seems to be trying to use the 24 from earlier
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3-3=21"",
    resulting_state=(1, 2, 21),
    comment='""24 minus 3""',
)

# ""8 plus 2 is 10 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+2+1=11"",
    resulting_state=(3, 11),
    comment='""8 plus 2 is 10 plus 1""',
)

# ""8 minus 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(1, 3, 6),
    comment='""8 minus 2 is 6""',
)

# ""3 plus 1 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(4, 6),
    comment='""3 plus 1 is 4""',
)

# ""So, 6 times 4 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""So, 6 times 4 is 24""',
)

# The rest of the transcript seems to be the participant trying to explain their solution path to someone else, rather than exploring new operations
```"
782,"[3,5,12,12]",,182," Ok, let's see what we got here. 3 times, oops, let's see, let's do 3 times 12 equals 36 minus 12. Nope, nope, nope, nope, that's not going to work. Okay, let's see. So we need 5 times 3 is 15. Nope, nope, nope, nope, nope, nope, nope, nope, nope, nope, nope, nope, nope. 5 minus 3 is 2. There we go. Hold on a second. Okay, hold on a second. So, let's see, hold on, let me try this. Hold on, let me get that. What if we did 12 times 12 divided by 3 plus 5? And what does that give us? Nope. Okay. 144. 144 divided by 8. 8. Oh, no, that's not, yeah, 8 and 2 is 16. No, it's 14. Okay, so, okay, so, let's see. 12 times 5 is 60. Divided by 3 is 20. Nope, that's not going to do it. 3 plus 5 is 16. Nope, nope, nope, nope, nope, nope 3 times No. 4. How about, we're done here. 3 times 10? Nope, nope, nope. How about 12 plus 12? 12 times 3. 12 times 3. Okay, now we can we can try that again. Okay. It's 36 minus 12, but then we got 5, and that gives me 24. That ain't going to work either. Daggum. Why can't we stay with single-digit numbers? That would have been much more fun when I was doing single digits. This is crazy. Fives and tens was terrible. Let's see here. Here, 5 times 12 is 65. Hold on.","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 12 equals 36 minus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12-12=24"",
    resulting_state=(5, 24),
    comment='""3 times 12 equals 36 minus 12""',
)

# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(12, 12, 15),
    comment='""5 times 3 is 15""',
)

# ""5 minus 3 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 12, 12),
    comment='""5 minus 3 is 2""',
)

# ""12 times 12 divided by 3 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12/3+5=53"",
    resulting_state=(53,),
    comment='""12 times 12 divided by 3 plus 5""',
)

# ""144 divided by 8"" - participant seems to be working with 12*12=144
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(3, 5, 144),
    comment='""144"" from multiplying 12 times 12',
)

# ""12 times 5 is 60. Divided by 3 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5/3=20"",
    resulting_state=(12, 20),
    comment='""12 times 5 is 60. Divided by 3 is 20""',
)

# ""3 plus 5 is 16"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=16"",
    resulting_state=(12, 12, 16),
    comment='""3 plus 5 is 16"" - calculation error',
    result_calc_error=True,
)

# ""12 plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 5, 24),
    comment='""12 plus 12""',
)

# ""12 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(5, 12, 36),
    comment='""12 times 3""',
)

# ""36 minus 12, but then we got 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(5, 24),
    comment='""36 minus 12, but then we got 5""',
)

# ""5 times 12 is 65"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*12=65"",
    resulting_state=(3, 12, 65),
    comment='""5 times 12 is 65"" - calculation error',
    result_calc_error=True,
)
```"
783,"[8,9,12,13]",12,188," Okay, let's see what we've got here. 72, man, this is a higher, I don't know what in the world, what in Sam Hill is going on? 12 times 13, divided by, I don't know, 9 times, oh, hold on a second, hold on, hold on, hold on, let's see, if we did 13, minus 9, 13 minus 9, that gives me 6, 6, 6 times 12, divided by 8, what does that do? Nope. That doesn't do it, I don't even know what the fuck that would have been, minus 9 is 6 times 12, 72, 72 divided by 8 is not 24, okay, so, let's see, alright, 12 minus 8, 12 minus 9 is 3, hmm, 13 is still in the way, I can do it with them, 3, bitch, what the fuck?guitar, what the fuck? sugarauraporatioẹ Okay, so, let's see, 13 minus 12 is 1, plus 9, Plus 9. I am saying it out loud. Plus 9. Nope, that ain't working. Let's see here. Microphone a little bit closer maybe. How about 8 times 9 divided by 12 plus 13. Nope. Okay. Let's see here. About 12 times 13 plus 8 divided by 9. Nope, that's not it. How about we do 12.","```python
start_state = (8, 9, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 13"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13=156"",
    resulting_state=(8, 9, 156),
    comment='""12 times 13""',
)

# ""13 minus 9, that gives me 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=6"",
    resulting_state=(6, 8, 12),
    comment='""13 minus 9, that gives me 6""',
)

# ""6 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=72"",
    resulting_state=(8, 72),
    comment='""6 times 12""',
)

# ""72 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/8=9"",
    resulting_state=(9,),
    comment='""72 divided by 8""',
)

# ""12 minus 9 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 13),
    comment='""12 minus 9 is 3""',
)

# ""13 minus 12 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 8, 9),
    comment='""13 minus 12 is 1""',
)

# ""plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+9=10"",
    resulting_state=(8, 10),
    comment='""plus 9""',
)

# ""8 times 9 divided by 12 plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9/12+13=19"",
    resulting_state=(19,),
    comment='""8 times 9 divided by 12 plus 13""',
)

# ""12 times 13 plus 8 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13+8/9=157"",
    resulting_state=(157,),
    comment='""12 times 13 plus 8 divided by 9""',
)

```"
785,"[1,6,12,13]",-,188," Okay, let's see here, we've got 13, 13 minus 1 is 12, plus 12, that's 24. Nah, divided by 6, nope, nope, nope, that's not going to work. Let's see here, we've got 13 plus 6, 12 times 6, 12 times 6, 12 times 6, let's see. Mmmmmm, how about, let's see, 12 times 6, 12 times 6, divided by 13, Thirteen plus one. Nope. Okay. How about six? Six. Six plus thirteen. Thirteen. Nope. Nope. Nope. That's not it. How about... Thirteen. Thirteen. Thirteen minus one. Twelve. Twelve. Twelve. Twelve plus twelve divided by six equals... Nope. Let's do... Twelve minus...","```python
start_state = (1, 6, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 1 is 12, plus 12, that's 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1+12=24"",
    resulting_state=(6, 24),
    comment='""13 minus 1 is 12, plus 12, that\'s 24""',
)

# ""divided by 6"" participant tries to divide result by 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24/6=4"",
    resulting_state=(4,),
    comment='""divided by 6""',
)

# ""13 plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(1, 12, 19),
    comment='""13 plus 6""',
)

# ""12 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(1, 13, 72),
    comment='""12 times 6""',
)

# ""12 times 6 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/13=5.54"",
    resulting_state=(1, 5.54),
    comment='""12 times 6 divided by 13""',
)

# ""Thirteen plus one""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(6, 12, 14),
    comment='""Thirteen plus one""',
)

# ""Six plus thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(1, 12, 19),
    comment='""Six plus thirteen""',
)

# ""Thirteen minus one. Twelve.""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(6, 12, 12),
    comment='""Thirteen minus one. Twelve.""',
)

# ""Twelve plus twelve divided by six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+12)/6=4"",
    resulting_state=(4,),
    comment='""Twelve plus twelve divided by six""',
)

# ""Twelve minus..."" participant starts to try something else but doesn't complete the thought

```"
786,"[6,7,8,10]",(8-6)x7+,191," Okay, let's see here. Let's see. How would I do this? Let's see, 10. Let's do 10 minus 6. And 4. 10 minus 6 is 4 times 8. Divide it by 7. Let's see. 8 minus 1. 8 minus 7 is 1. I'm doing it. 8 minus 6. 8 minus 6 is 2. 2 times 7 is 14 plus 10 equals what? 8 minus 6 is 2. 2 times 7 is 14. 14 plus 10 is 24. How is that not correct? Oh, okay, I see. Hold on. Times. Okay, hold on. I got you. I got you. 8 times 8 minus 6 is 2 times 7. Times 7. But that's right. Hold on. 8 minus 6 is 2. 8 minus 6. 8 minus 6 is 2. Okay, I got it. Okay, I got you. I got you. Okay, hold on a second. All right, here we go. Do this. 8 minus 6 times 7 plus 10. What? That's not... 8 minus 6 is 2. 2 times 7 is 14. All right, I'm doing it, I'm doing it, I'm doing it. 8 minus 6 is 2 times 7 is 14 plus 10.","```python
start_state = (6, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 6. And 4.""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 7, 8),
    comment='""10 minus 6. And 4.""',
)

# ""times 8. Divide it by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8/7=4.57"",
    resulting_state=(4.57,),
    comment='""times 8. Divide it by 7""',
)

# ""8 minus 7 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 6, 10),
    comment='""8 minus 7 is 1""',
)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 7, 10),
    comment='""8 minus 6 is 2""',
)

# ""2 times 7 is 14 plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7+10=24"",
    resulting_state=(24,),
    comment='""2 times 7 is 14 plus 10""',
)

# The participant repeats this calculation several times, seemingly verifying it
# ""8 minus 6 is 2. 2 times 7 is 14. 14 plus 10 is 24""

# They seem to be trying to figure out how to write it properly
# ""8 minus 6 times 7 plus 10""

# Finally they settle on (8-6)x7+ as their response, though they ran out of time before completing it
```"
791,"[4,5,5,9]",(5x4)+(9-5),180," All right. Oh wow. I think I've got to make 9 smaller. That's just too big. So let's say 9 minus 5 is 4 times 4 is 16 times 5. Okay, that's not going to work. What if I do 5 minus 4 is 1? No, that's not it. Maybe if I do 5 minus 5 somehow? No. This is a confusing one. I think I've got to somehow get 8 and 4. No, 8 and 3. I don't really know how to do that. I can, oh, I can do this. 9 minus 4. 9 minus 5. That's not going to work, is it? It's not a gun. Hmm. Maybe I can do 9 plus, oh, this is just, I'm so stupid. No, I'm not. It's not quite there, is it? I've got to get to 12. That's what I've got to do. How do I get to 12 times 2? Um. Jesus. Maybe if I... This is just tough. Don't tell me I've got to use the fractions. That would just be cruel. Okay, let me think here. Maybe if I go with 9 minus 4? Okay, that's 5. Oh, what if I do 9? Alright, no, that's not going to result in a number of 4. I need to get to... Oh, I see, I see, I see. I see the way. 5 times 4 plus 9 minus 5. Alright.","```python
start_state = (4, 5, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 5 is 4 times 4 is 16 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 4, 5),
    comment='""9 minus 5 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 16),
    comment='""4 times 4 is 16""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16*5=80"",
    resulting_state=(80,),
    comment='""16 times 5""',
)

# ""What if I do 5 minus 4 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 5, 9),
    comment='""What if I do 5 minus 4 is 1""',
)

# ""Maybe if I do 5 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-5=0"",
    resulting_state=(0, 4, 9),
    comment='""Maybe if I do 5 minus 5""',
)

# ""I think I've got to somehow get 8 and 4. No, 8 and 3"" suggests setting a subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""I think I\'ve got to somehow get 8 and 4. No, 8 and 3""',
)

# ""9 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-4=5"",
    resulting_state=(5, 5, 5),
    comment='""9 minus 4""',
)

# ""9 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 5, 4),
    comment='""9 minus 5""',
)

# ""I've got to get to 12. That's what I've got to do. How do I get to 12 times 2?"" suggests setting another subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""I\'ve got to get to 12. That\'s what I\'ve got to do. How do I get to 12 times 2?""',
)

# ""Maybe if I go with 9 minus 4? Okay, that's 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-4=5"",
    resulting_state=(5, 5, 5),
    comment='""Maybe if I go with 9 minus 4? Okay, that\'s 5""',
)

# Finally ""5 times 4 plus 9 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4+(9-5)=24"",
    resulting_state=(24,),
    comment='""5 times 4 plus 9 minus 5""',
)
```"
792,"[8,9,11,11]",,180," Okay. Interesting. I think that doesn't make any sense though. This is a tough one, is what I can tell. 8 times 9, what's that? What does that make? That's a ridiculous number I don't need. 11 plus 9 is 20. That's useful. And now, then what the fuck do I do? 24 is only divisible by 8 here, so I need to get the 3. If I can do that, that would be good. Because otherwise we only get the 23 at the first place. Maybe if I do 11 divided by... 11, and then... That's 1. Add that to 9. 8 plus... no, that doesn't work. 11 minus 9... That's 2. What can I do with that? I can... Oh, 11 minus 8 is 3. So 9 and 3 is... No, that doesn't work. Yeah, I don't know about this one. This one's gonna be tough. I don't know if I'm gonna get that. Yeah, this is a rough one. Maybe... 11 and 9? No, that's only 23. Jesus. This is rough. 11 times? Maybe if I do multiplication, that might help? Division? I don't really see how division's gonna help me. 11 minus 11 to get 0. And then... That's it. I don't know. Yeah. This... I think I'm gonna fail this one. Yeah. Whatever. And I... I'll hit the next one. This one's...","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 9, what's that?""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(11, 11, 72),
    comment='""8 times 9, what\'s that?""',
)

# ""11 plus 9 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(8, 11, 20),
    comment='""11 plus 9 is 20""',
)

# ""24 is only divisible by 8 here, so I need to get the 3"" - participant seems to set a subgoal of getting 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 is only divisible by 8 here, so I need to get the 3""',
)

# ""11 divided by... 11, and then... That's 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/11=1"",
    resulting_state=(1, 8, 9),
    comment='""11 divided by... 11, and then... That\'s 1""',
)

# ""Add that to 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+9=10"",
    resulting_state=(8, 10),
    comment='""Add that to 9""',
)

# ""11 minus 9... That's 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 8, 11),
    comment='""11 minus 9... That\'s 2""',
)

# ""11 minus 8 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 9, 11),
    comment='""11 minus 8 is 3""',
)

# ""11 and 9? No, that's only 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=23"",
    resulting_state=(8, 11, 23),
    comment='""11 and 9? No, that\'s only 23""',
    result_calc_error=True,
)

# ""11 minus 11 to get 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-11=0"",
    resulting_state=(0, 8, 9),
    comment='""11 minus 11 to get 0""',
)
```"
797,"[4,7,8,11]",,180,"rategy steve I can also make 12, 12 and 4, I can make 12 and 4. Can I make 12 and 2? Is that possible? I feel like I can't. What if I try and get 48, divide by 2, probably not going to work, let's see, 11, 7, 8 times 8, yeah, okay, nothing, okay, 8 and 4, what's that, 32, 32 minus 11, no, that's not functional, let's 56 divide by 4, 14, 14 plus 11, nope, god damn it, I think this one's a male, 11, 11, 12, nope, not working, what if I try and make 12 and 4, I can't do anything about that, okay, 18 plus 8, what's that give me, no, not enough, great, maybe I've been thinking about this all along though, if 18 is a possibility here, no, I don't think that does help at all, oh, great. Uh, because that only gets me 26, yeah, no, I don't think I'm going to get this one either, so I'll be done.","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can also make 12"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (12, 4),
    state_after_subgoal=(24,),
    comment='""I can also make 12, 12 and 4, I can make 12 and 4""',
)

# ""Can I make 12 and 2?"" sets another subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""Can I make 12 and 2?""',
)

# ""What if I try and get 48, divide by 2"" sets another subgoal
graph.set_subgoal(
    (48,),
    state_after_subgoal=(24,),
    comment='""What if I try and get 48, divide by 2""',
)

# ""8 and 4, what's that, 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 11, 32),
    comment='""8 and 4, what\'s that, 32""',
)

# ""32 minus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-11=21"",
    resulting_state=(7, 21),
    comment='""32 minus 11""',
)

curr_state = graph.move_to_node(start_state)
# ""56 divide by 4, 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 11, 56),
    comment='""56 divide by 4, 14"" - first computing 7*8=56',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/4=14"",
    resulting_state=(11, 14),
    comment='""56 divide by 4, 14""',
)

# ""14 plus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+11=25"",
    resulting_state=(25,),
    comment='""14 plus 11""',
)

curr_state = graph.move_to_node(start_state)
# ""18 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(4, 8, 18),
    comment='""18 plus 8"" - first computing 11+7=18',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8=26"",
    resulting_state=(4, 26),
    comment='""18 plus 8"" - then adding 8 to get 26',
)
```"
798,"[7,7,11,12]",(7+12)-,180," 7 plus 7 is 14 plus 11 is something minus 12. Um... 7 plus 7, 7 is 14, plus 12. 12 is 26 minus 11. 11 plus... 11 plus 7 is 18, plus 12, plus 7, I don't know. 11 plus 12 is... 11 plus 12 is... 24. 7 plus 7 is 14. 7 times 11 is 18. 7 plus 12 is something. 7 plus 12... 34. 4. 4. 4. 4. 4. 4. 7 plus 12 minus... 7 plus 12 minus...","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14 plus 11 is something minus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(11, 12, 14),
    comment='""7 plus 7 is 14""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+11=25"",
    resulting_state=(12, 25),
    comment='""14 plus 11""',
)

# ""7 plus 7, 7 is 14, plus 12. 12 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+12=26"",
    resulting_state=(11, 26),
    comment='""7 plus 7, 7 is 14, plus 12. 12 is 26""',
)

# ""11 plus 7 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(7, 12, 18),
    comment='""11 plus 7 is 18""',
)

# ""plus 12, plus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+12+7=37"",
    resulting_state=(37,),
    comment='""plus 12, plus 7""',
)

# ""11 plus 12 is... 24"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=24"",
    resulting_state=(7, 7, 24),
    comment='""11 plus 12 is... 24"" - calculation error',
    result_calc_error=True,
)

# ""7 times 11 is 18"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*11=18"",
    resulting_state=(7, 12, 18),
    comment='""7 times 11 is 18"" - calculation error',
    result_calc_error=True,
)

# ""7 plus 12 is something. 7 plus 12... 34"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=34"",
    resulting_state=(7, 11, 34),
    comment='""7 plus 12... 34"" - calculation error',
    result_calc_error=True,
)

# The participant then repeats ""4"" several times and ends with ""7 plus 12 minus..."" which matches their submitted response of ""(7+12)-""

```"
799,"[1,3,6,7]",,180," 6 times 3 is 12, plus... no. 6 plus 7 is 13, plus 3 is 16. 7 times... I don't know. 7 times 3 equals 21. 6 times 3 equals 12. 7 plus 1 is 8. No. 3 plus 1 is 4. 4 plus 7... no. Um... 6 plus 3 is 9. 9 plus 7 is 14, plus 1 is 16. Um... 7 times 3 is 21. 21... plus 6... no. No. No. No. No. No.","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 3 is 12"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=12"",
    resulting_state=(1, 7, 12),
    comment='""6 times 3 is 12""',
    result_calc_error=True
)

# ""6 plus 7 is 13, plus 3 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7+3=16"",
    resulting_state=(1, 16),
    comment='""6 plus 7 is 13, plus 3 is 16""',
)

# ""7 times 3 equals 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 6, 21),
    comment='""7 times 3 equals 21""',
)

# ""6 times 3 equals 12"" - participant repeats earlier calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=12"",
    resulting_state=(1, 7, 12),
    comment='""6 times 3 equals 12""',
    result_calc_error=True
)

# ""7 plus 1 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(3, 6, 8),
    comment='""7 plus 1 is 8""',
)

# ""3 plus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(4, 6, 7),
    comment='""3 plus 1 is 4""',
)

# ""6 plus 3 is 9. 9 plus 7 is 14, plus 1 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3+7+1=16"",
    resulting_state=(16,),
    comment='""6 plus 3 is 9. 9 plus 7 is 14, plus 1 is 16""',
    result_calc_error=True,
)

# ""7 times 3 is 21"" - participant repeats earlier calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 6, 21),
    comment='""7 times 3 is 21""',
)

# ""21... plus 6... no"" participant considers adding 6 but abandons it
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+6=27"",
    resulting_state=(1, 27),
    comment='""21... plus 6... no""',
)
```"
800,"[2,3,5,10]",,180, 2 times 3 equals 6. 10 times 2 is 20. Plus 5 is 25. Minus 3 is 21. No. Uh... 3 times 5 is 15. Plus 10 is 25. Minus 2? No. Um... 5 plus 3 is 8. Times 2 is 16. Plus 10... ... Uh... 2... plus 3 equals 5 times 5 equals... 25... ... ... divided by 10... ... 10... times... 2 equals 20... plus 3... No. ... 10 plus 5 equals 15... plus... ... ... times 2... equals 30... minus 3... ... ... Um... Um... Thank you.,"```python
start_state = (2, 3, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 3 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(5, 6, 10),
    comment='""2 times 3 equals 6""',
)

# ""10 times 2 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 5, 20),
    comment='""10 times 2 is 20""',
)

# ""Plus 5 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+5=25"",
    resulting_state=(3, 25),
    comment='""Plus 5 is 25""',
)

# ""Minus 3 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-3=21"",
    resulting_state=(21,),
    result_calc_error=True,
    comment='""Minus 3 is 21""',
)

# ""3 times 5 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(2, 10, 15),
    comment='""3 times 5 is 15""',
)

# ""Plus 10 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+10=25"",
    resulting_state=(2, 25),
    comment='""Plus 10 is 25""',
)

# ""5 plus 3 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(2, 8, 10),
    comment='""5 plus 3 is 8""',
)

# ""Times 2 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(10, 16),
    comment='""Times 2 is 16""',
)

# ""Plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+10=26"",
    resulting_state=(26,),
    comment='""Plus 10""',
)

# ""2... plus 3 equals 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3=5"",
    resulting_state=(5, 5, 10),
    comment='""2... plus 3 equals 5""',
)

# ""times 5 equals... 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(10, 25),
    comment='""times 5 equals... 25""',
)

# ""10... times... 2 equals 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 5, 20),
    comment='""10... times... 2 equals 20""',
)

# ""plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+3=23"",
    resulting_state=(5, 23),
    comment='""plus 3""',
)

# ""10 plus 5 equals 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(2, 3, 15),
    comment='""10 plus 5 equals 15""',
)

# ""times 2... equals 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*2=30"",
    resulting_state=(3, 30),
    comment='""times 2... equals 30""',
)

# ""minus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-3=27"",
    resulting_state=(27,),
    comment='""minus 3""',
)
```"
801,"[7,8,8,9]",(8x8)-(7x9,180," 8 plus 8 is 16. 9 plus 7 is 16. 16 plus 16 is 32. Nope. 16 plus 9 is 32. 16 plus 9 is 25. 8 plus 7 is 15. Plus 9... That's 24, but then there's an extra 8. Why are these so hard? 9 times 8. 9 times 8 is something 7 times 8, so let's see. 9 times 8 minus 7 times 8. Worth a shot. I wish I knew my times tables better. 8 times 8. 8 times 8 is something 8 times 8 minus 7 times 9","```python
start_state = (7, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 9, 16),
    comment='""8 plus 8 is 16""',
)

# ""9 plus 7 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(8, 8, 16),
    comment='""9 plus 7 is 16""',
)

# ""8 plus 7 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(8, 9, 15),
    comment='""8 plus 7 is 15""',
)

# ""Plus 9... That's 24, but then there's an extra 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+9=24"",
    resulting_state=(8, 24),
    comment='""Plus 9... That\'s 24, but then there\'s an extra 8""',
)

# ""9 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(7, 8, 72),
    comment='""9 times 8""',
)

# ""7 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(8, 9, 56),
    comment='""7 times 8""',
)

# ""8 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 9, 64),
    comment='""8 times 8""',
)

# ""8 times 8 minus 7 times 9"" - this is their final answer
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64-(7*9)=24"",
    resulting_state=(24,),
    comment='""8 times 8 minus 7 times 9"" - this is their final answer',
    result_calc_error=True,  # Since 64-63=1, not 24
)
```"
802,"[6,8,12,12]",(12x8)-(12x6),179, 12 divided by 6 equals 2. 12 divided by 6 equals 2 plus 8 is 10 plus 12. 12 plus 12 is 24 minus 6 plus 8. 12 plus 12 is 24. 6 plus 8 is 14. 12 plus 8 is... 30. 12 plus 6 is... 18. No. 6 times 12 is... 8 times 12 is... 96. And... 12 times 6 is... 72. So... 12... 12 times 8... minus... 12 times 6...,"```python
start_state = (6, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 divided by 6 equals 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 8, 12),
    comment='""12 divided by 6 equals 2""',
)

# ""plus 8 is 10 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+8+12=22"",
    resulting_state=(22,),
    comment='""plus 8 is 10 plus 12""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(6, 8, 24),
    comment='""12 plus 12 is 24""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(12, 12, 14),
    comment='""6 plus 8 is 14""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=30"",
    resulting_state=(6, 12, 30),
    comment='""12 plus 8 is... 30"" - calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(8, 12, 18),
    comment='""12 plus 6 is... 18""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=72"",
    resulting_state=(8, 12, 72),
    comment='""6 times 12 is...""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(6, 12, 96),
    comment='""8 times 12 is... 96""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(8, 12, 72),
    comment='""12 times 6 is... 72""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12*8)-(12*6)=24"",
    resulting_state=(24,),
    comment='""12... 12 times 8... minus... 12 times 6...""',
)
```"
804,"[1,2,7,7]",,180, 7 times 2 is 14 plus 7 is 91. 7 plus 2 is 9 plus 7 is 1. 7 plus 2 is 3 times 7 is 21. 2 times 7 is 14 plus 8. 2 times 7 is 14 plus 7 plus 1. I don't know. This is frustrating. 1 plus 2 is 3 is 3. 7 plus 7 is 14. 2 plus 7 is 14. Plus 7 is 1. 1 plus 7 is 21. 1 plus 7 is 8. Plus 7. 7 plus 1 equals 8. Plus 7 is 16 times 2.,"```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 2 is 14 plus 7 is 91"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+7=91"",
    resulting_state=(1, 91),
    comment='""7 times 2 is 14 plus 7 is 91"" - calculation error',
    result_calc_error=True,
)

# ""7 plus 2 is 9 plus 7 is 1"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2+7=1"",
    resulting_state=(1, 1),
    comment='""7 plus 2 is 9 plus 7 is 1"" - calculation error',
    result_calc_error=True,
)

# ""7 plus 2 is 3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+2)*7=21"",
    resulting_state=(1, 21),
    comment='""7 plus 2 is 3 times 7 is 21"" - calculation error',
    result_calc_error=True,
)

# ""2 times 7 is 14 plus 8"" - not clear where 8 comes from
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(1, 7, 14),
    comment='""2 times 7 is 14""',
)

# ""2 times 7 is 14 plus 7 plus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+7+1=22"",
    resulting_state=(22,),
    comment='""14 plus 7 plus 1""',
)

# ""1 plus 2 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+2=3"",
    resulting_state=(3, 7, 7),
    comment='""1 plus 2 is 3""',
)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='""7 plus 7 is 14""',
)

# ""2 plus 7 is 14"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2+7=14"",
    resulting_state=(1, 7, 14),
    comment='""2 plus 7 is 14"" - calculation error',
    result_calc_error=True,
)

# ""1 plus 7 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+7=8"",
    resulting_state=(2, 7, 8),
    comment='""1 plus 7 is 8""',
)

# ""Plus 7 is 16 times 2"" - participant seems to be adding 7 to 8 and then multiplying by 2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+7)*2=30"",
    resulting_state=(30,),
    comment='""Plus 7 is 16 times 2"" - participant seems to be adding 7 to 8 and then multiplying by 2',
)
```"
805,"[3,4,8,12]",(8+,180," 4 times 8 is 24. 4 times 8 is 16 plus 16 is 22. 12 plus 8 is 16 plus 4. I am saying my thoughts out loud. 6, 7, 8, 9, 10 plus 3, that's 23. 8 plus 4 equals 12 plus 12 equals 24. 4 times 3 equals 12. 12 plus 8 equals 16 plus 12. That's too high. 8 plus 12 is 30. 30. 8 plus 12 minus 4 plus 3. No. 8 plus 12 is 30. 8 plus 12 equals 30. Minus. Minus. Minus. Minus. 12. 8 plus. 8 plus.","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 8 is 24"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=24"",
    resulting_state=(3, 12, 24),
    comment='""4 times 8 is 24"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""4 times 8 is 16 plus 16 is 22"" - participant corrects the multiplication but makes an addition error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(3, 12, 32),
    comment='""4 times 8 is 16 plus 16 is 22"" - participant makes an addition error',
    result_calc_error=True,
)

# ""12 plus 8 is 16 plus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8+4=24"",
    resulting_state=(3, 24),
    comment='""12 plus 8 is 16 plus 4""',
)

# ""6, 7, 8, 9, 10 plus 3, that's 23"" - not clear what operations led to this

# ""8 plus 4 equals 12 plus 12 equals 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4+12=24"",
    resulting_state=(3, 24),
    comment='""8 plus 4 equals 12 plus 12 equals 24""',
)

# ""4 times 3 equals 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(8, 12, 12),
    comment='""4 times 3 equals 12""',
)

# ""12 plus 8 equals 16 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8+12=32"",
    resulting_state=(32,),
    comment='""12 plus 8 equals 16 plus 12""',
)

# ""8 plus 12 is 30"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=30"",
    resulting_state=(3, 4, 30),
    comment='""8 plus 12 is 30"" - calculation error',
    result_calc_error=True,
)

# ""8 plus 12 minus 4 plus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12-4+3=19"",
    resulting_state=(19,),
    comment='""8 plus 12 minus 4 plus 3""',
)

# The participant ends by repeating ""8 plus"" multiple times but doesn't complete the calculation
```"
806,"[5,5,7,10]",,180," 5 times 5 equals 25. 7 times 10 equals 30. 5 times 7 equals 35. 5 times 100 minus 35 is 96, nope. 5 times 7 is 35. 5 times 7 is 35, plus 10 is 45, divided by 5, no. 10 plus 5 is 15. 10 plus... 5 minus 7 times 5, I don't know. 5 times 7 is 35. 5 times 10 is 50, I already tried that. 10 minus 7, 10, 9, 8, is 8. Times 5 is 40. Minus 5, that's not it. 5 plus 7. 7, 8, 9, 10, 11, 12. 12 plus 10 is 20. 2 plus 5 is 27. 7... 15 plus...","```python
start_state = (5, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 equals 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(7, 10, 25),
    comment='""5 times 5 equals 25""',
)

# ""7 times 10 equals 30"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=30"",
    resulting_state=(5, 5, 30),
    comment='""7 times 10 equals 30"" - calculation error',
    result_calc_error=True,
)

# ""5 times 7 equals 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(5, 10, 35),
    comment='""5 times 7 equals 35""',
)

curr_state = graph.move_to_node(new_state)
# ""5 times 100 minus 35 is 96"" - seems to be a transcription error, likely meant ""5 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10-35=15"",
    resulting_state=(15,),
    comment='""5 times 100 minus 35 is 96"" - seems to be a transcription error, likely meant ""5 times 10""',
)

curr_state = graph.move_to_node(start_state)
# ""5 times 7 is 35, plus 10 is 45, divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5*7+10)/5=9"",
    resulting_state=(9,),
    comment='""5 times 7 is 35, plus 10 is 45, divided by 5""',
)

# ""10 plus 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(5, 7, 15),
    comment='""10 plus 5 is 15""',
)

# ""5 minus 7 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-7)*5=-10"",
    resulting_state=(-10, 10),
    comment='""5 minus 7 times 5""',
)

# ""5 times 7 is 35"" - repeating previous calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(5, 10, 35),
    comment='""5 times 7 is 35""',
)

# ""5 times 10 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(5, 7, 50),
    comment='""5 times 10 is 50""',
)

# ""10 minus 7... is 8"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=8"",
    resulting_state=(5, 5, 8),
    comment='""10 minus 7... is 8"" - calculation error',
    result_calc_error=True,
)

# ""Times 5 is 40""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(5, 40),
    comment='""Times 5 is 40""',
)

# ""Minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-5=35"",
    resulting_state=(35,),
    comment='""Minus 5""',
)

curr_state = graph.move_to_node(start_state)
# ""5 plus 7... 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(5, 10, 12),
    comment='""5 plus 7... 12""',
)

# ""12 plus 10 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10=22"",
    resulting_state=(5, 22),
    comment='""12 plus 10 is 20"" - calculation error',
    result_calc_error=True,
)
```"
808,"[2,8,10,13]",(13x2)/8,180," This is stressful, by the way. Okay, so 24. 10, 13, 8, 2. So we have 10, 13, 8, 2. Um, 8 minus 2 is 6. 13 plus 6 is 19. No, 10. Let's see, how about 10 times... 8 divided by 2, 24. Uh, how about 10 divided by 2, so it's 5 plus, no, 5, crap, 18, 24. 21. So 13 plus 8 is 8, 9, 10, 11, 21. We need 3. So, where would we get the 3? Uh, 2 times 13 is 26. What's 26? No. 26. Oh my god, why can't I get this one? I'm spazzing out because it is, um, stressful to do this timed. 13 minus 2 is 11 plus 10. No, I'm wrong, I'm wrong, I'm wrong. Um, 2 plus 10 is 20. Oh, my God. Six. Eight times two is 16, plus 10 is 20. Now, where am I? This is not working. Okay, 13 minus two is 11, times 10? No. I think I'm just going to get this one wrong. Eight plus two is 10. 15. Oh, this is ridiculous. 13. What's 13 times two? 26. 26 divided by...","```python
start_state = (2, 8, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(6, 10, 13),
    comment='""8 minus 2 is 6""',
)

# ""13 plus 6 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(10, 19),
    comment='""13 plus 6 is 19""',
)

# Going back to start state for ""10 times... 8 divided by 2, 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*(8/2)=40"",
    resulting_state=(13, 40),
    comment='""10 times... 8 divided by 2""',
)

# ""10 divided by 2, so it's 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(5, 8, 13),
    comment='""10 divided by 2, so it\'s 5""',
)

# ""13 plus 8 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(2, 10, 21),
    comment='""13 plus 8 is 21""',
)

# ""2 times 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=26"",
    resulting_state=(8, 10, 26),
    comment='""2 times 13 is 26""',
)

# ""13 minus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(8, 10, 11),
    comment='""13 minus 2 is 11""',
)

# ""2 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+10=12"",
    resulting_state=(8, 12, 13),
    comment='""2 plus 10 is 20"" - though they seem to have made a calculation error',
)

# ""Eight times two is 16, plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2+10=26"",
    resulting_state=(13, 26),
    comment='""Eight times two is 16, plus 10 is 20"" - though they seem to have made a calculation error',
)

# ""13 minus two is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(8, 10, 11),
    comment='""13 minus two is 11""',
)

# ""Eight plus two is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+2=10"",
    resulting_state=(10, 10, 13),
    comment='""Eight plus two is 10""',
)

# ""13 times two? 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(8, 10, 26),
    comment='""13 times two? 26""',
)

# Based on their final response of (13x2)/8, they must have divided 26 by 8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26/8=24"",
    resulting_state=(10, 24),
    result_calc_error=True,
    comment='Based on their final response of (13x2)/8, they divided 26 by 8 to get 24',
)
```"
811,"[4,4,8,10]",4x4+8+(-10),180," Alright, um, 4, 4, 8, 10. So 18, um, 19, 20, 21, 22. So we need to do something like 8, oh, let's do parentheses. Let's do parentheses 8 divided by 4. So we've got 2, um, and then it's 14, oh crap. Um, oh, 8 divided by 4 is 2. 2, 4. Okay, so 14. Um, 8 divided by 4, uh, where was I going with this? Okay. Uh, 8, 16. So, we just need to... Turn 8, 16. Turn... Mmm... Sorry, I'm doing math over here. Um, so I'm thinking if we did like 8, I don't know what I was just doing. 4 times 4 plus 8. So that would be 16 plus 8 would be 24. Right? But then what would we do with a 10? Um, negative... 10... Plus... Mm-mm. Mm-mm-mm-mm-mm. What if we did... 8 times... Nope, nope, nope, that's not what we're... We're done. 4 times 4... 16... Plus 8... Is... 16 plus 8, that's... That's the right answer, right? 6... That's 24. And then we've got that 10 we need to get rid of. So what do we need to get rid of the 10 with? Um... Plus... Parentheses... Negative... 10? Um... That makes it positive.","```python
start_state = (4, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So 18, um, 19, 20, 21, 22"" seems to be adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4+8+10=26"",
    resulting_state=(26,),
    comment='""So 18, um, 19, 20, 21, 22"" seems to be adding numbers, though calculation is off',
    result_calc_error=True,
)

# ""8 divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 4, 10),
    comment='""8 divided by 4""',
)

# ""8, 16"" participant seems to be multiplying 4*4
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 10, 16),
    comment='""8, 16"" participant seems to be multiplying 4*4',
)

# ""4 times 4 plus 8. So that would be 16 plus 8 would be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8=24"",
    resulting_state=(10, 24),
    comment='""4 times 4 plus 8. So that would be 16 plus 8 would be 24""',
)

# The participant realizes they still need to deal with the 10
# ""And then we've got that 10 we need to get rid of""
# They eventually decide to add -10, which keeps the 24 result
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+(-10)=24"",
    resulting_state=(24,),
    comment='""And then we\'ve got that 10 we need to get rid of"" They decide to add -10',
)
```"
812,"[2,2,6,7]",,180," I was really on to the last answer, which is frustrating. Okay, so let's see, 7 times 2 is 14. But where do we get to the 24? How do we get to the 24 from here? 6 times 4. So what if we did, what's 6 times 4? Um, what if we did, or what if we did, um, 6 times 2, 7 times 2 is 14. So if we did 7 times 2 and got 14, then we could add... Um, 14... What if we did 6 times 2? Oops. Okay, 6, how do we do 6 divided by 2? So we have 3 plus... No, 3 times... No, no, no, no. Um, it's gotta be something like 2 times 2 plus... So that's 4 plus 13, so no. Um... Oh crap. 7 minus 2 plus... 6 times 2. That's not it. Um, I'm getting closer though. 5 plus 6 is 11. 11 times 2. Um, um, um, um, um, um. Oh, what if we... Minus 2 times 6. Where does that put us? Um, 7 times 2. Oh, that would make it 12. Uh... So we did 7 minus 2, that would be 5. Mm, mm, mm. Oh crap, my thing keeps...","```python
start_state = (2, 2, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 6, 14),
    comment='""7 times 2 is 14""',
)

# ""6 times 4"" - participant seems to be considering making 4 from 2*2
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 6, 7),
    comment='""6 times 4"" - participant seems to be considering making 4 from 2*2',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(7, 24),
    comment='""6 times 4""',
)

# ""6 times 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(2, 7, 12),
    comment='""6 times 2""',
)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 6, 14),
    comment='""7 times 2 is 14""',
)

# ""6 divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/2=3"",
    resulting_state=(2, 3, 7),
    comment='""6 divided by 2""',
)

# ""2 times 2 plus""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 6, 7),
    comment='""2 times 2 plus""',
)

# ""7 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(2, 5, 6),
    comment='""7 minus 2""',
)

# ""5 plus 6 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(2, 11),
    comment='""5 plus 6 is 11""',
)

# ""11 times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(22,),
    comment='""11 times 2""',
)

# ""7 times 2... that would make it 12"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=12"",
    resulting_state=(2, 6, 12),
    comment='""7 times 2... that would make it 12"" - participant makes calculation error',
    result_calc_error=True,
)

# ""7 minus 2, that would be 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(2, 5, 6),
    comment='""7 minus 2, that would be 5""',
)
```"
822,"[3,5,6,8]",(8x3)x(6-5),44," 3, 5, 6, 8. 3, 5, 6, 8. That sounds like an interesting one. Let me do multiplication, because I can get 8 and 3 together for 24. So let me do 8 times 3, that's 24. That's our 24 that we need to keep. And then multiply by 6. And then how do we get the number 2? Oh, 24 times 1 is 24. So let's do that.","```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let me do multiplication, because I can get 8 and 3 together for 24"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""Let me do multiplication, because I can get 8 and 3 together for 24""',
)

# ""So let me do 8 times 3, that's 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(5, 6, 24),
    comment='""So let me do 8 times 3, that\'s 24""',
)

# ""And then multiply by 6"" - participant tries this path
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*6=144"",
    resulting_state=(5, 144),
    comment='""And then multiply by 6""',
)

# ""24 times 1 is 24"" - participant realizes they need to get 1 somehow
# Based on their final answer (8x3)x(6-5), they figured out they could get 1 from 6-5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 3, 8),
    comment='""how do we get the number 2? Oh, 24 times 1 is 24"" - participant realizes they need to get 1',
)

# Then multiply 24 by 1 to get the final answer
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3*1=24"",
    resulting_state=(24,),
    comment=""Multiply 24 by 1 to get final answer"",
)
```"
827,"[1,6,8,9]",(9-6)x8x1,16," 8, 9, oh I love this, 8, 9, 6, 1, so we'll get 8 times 3 again, so we do 9 minus 6 times 8 is 24, and then times 1 is fine.","```python
start_state = (1, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""so we'll get 8 times 3 again"" suggests participant is setting a subgoal of getting 8*3=24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""so we\'ll get 8 times 3 again""',
)

# ""so we do 9 minus 6 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-6)*8=24"",
    resulting_state=(1, 24),
    comment='""so we do 9 minus 6 times 8 is 24""',
)

# ""and then times 1 is fine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1=24"",
    resulting_state=(24,),
    comment='""and then times 1 is fine""',
)
```"
829,"[3,5,12,12]",,180, 12 x 3 is 5. 12 x 3 is 4. That doesn't get me there. 5 x 3 is 15. Doesn't get me there. 12 x 12 is 1. That doesn't do me any good. This is weird. 5 x 12 is 60. 24 x 48 is 72. 60 x 3 gives me 20. That doesn't help me. 12 x 12 is 144. 12 x 15 is 144. 144 x 5 doesn't get me anything. 12 x 3 is 50-something. 40-something. 40-something. 12 x 3 is 36. 12 x 3 is 36. minus 12 is 24. minus 12 is 24. minus 12 is 24. minus 12 is 24. is what 12 times 9 108 90 plus 18 yeah 108 divided by 12 minus 5 7 8 by 7 nope whoo that's tough 12 you can use any number of arithmetic but I can only use each number once 5 is throwing me man 60,"```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 x 3 is 5"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=5"",
    resulting_state=(5, 5, 12),
    comment='""12 x 3 is 5"" - calculation error',
    result_calc_error=True,
)

# ""12 x 3 is 4"" another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=4"",
    resulting_state=(4, 5, 12),
    comment='""12 x 3 is 4"" - calculation error',
    result_calc_error=True,
)

# ""5 x 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(12, 12, 15),
    comment='""5 x 3 is 15""',
)

# ""12 x 12 is 1"" seems to be another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=1"",
    resulting_state=(1, 3, 5),
    comment='""12 x 12 is 1"" - calculation error',
    result_calc_error=True,
)

# ""5 x 12 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*12=60"",
    resulting_state=(3, 12, 60),
    comment='""5 x 12 is 60""',
)

# ""24 x 48 is 72"" seems to be a calculation error and uses numbers not in the start state
# ""60 x 3 gives me 20"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60*3=20"",
    resulting_state=(12, 20),
    comment='""60 x 3 gives me 20"" - calculation error',
    result_calc_error=True,
)

# ""12 x 12 is 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(3, 5, 144),
    comment='""12 x 12 is 144""',
)

# ""12 x 15 is 144"" uses a number (15) not in the start state

# ""12 x 3 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(5, 12, 36),
    comment='""12 x 3 is 36""',
)

# ""minus 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(5, 24),
    comment='""minus 12 is 24""',
)

# ""12 times 9"" seems to be using numbers not in the start state
# ""108 divided by 12 minus 5"" seems to be using numbers not all from the start state

# ""5 is throwing me man 60"" suggests participant is stuck and returns to previous calculation of 5*12=60
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*12=60"",
    resulting_state=(3, 12, 60),
    comment='""5 is throwing me man 60"" suggests participant returns to previous calculation',
)
```"
830,"[3,5,6,11]",((11-5)x3)+6,109," All right, 3, 5, 6, 11. We've got some odd numbers here. 11 times 5 is 55, minus 18. No, 11 times 3 is 33, minus 11. It's close. I need that to be 9. 11 times, no, so let's not do 11 times something. Shoot. I kind of need to, though. Plus 11. So 24 minus 11 is 13. I need those 3 to equal 13. 5 plus 6 plus 3 is 14. I can't do that. Let's do 15. 15 times 6. That's not going to be anything worthwhile. Yeah, divide by 11. So let's do 11. 11 minus 6 is 5 times 5. It's 25 minus 3. That's not it. 11 minus 5 times 6 will give me the same thing. 11 minus 6. No, 11 minus 5 times 3 plus 6. There we go. 11 minus 5 is 6 times 3 is 18. All right. 11 minus 5 is 6 times 3 is 18 plus 6, 24.","```python
start_state = (3, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 5 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(3, 6, 55),
    comment='""11 times 5 is 55""',
)

# ""11 times 3 is 33""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(5, 6, 33),
    comment='""11 times 3 is 33""',
)

# ""24 minus 11 is 13"" participant seems to be working backward from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 11 is 13"" participant seems to be working backward from 24',
)

# ""5 plus 6 plus 3 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6+3=14"",
    resulting_state=(11, 14),
    comment='""5 plus 6 plus 3 is 14""',
)

# ""11 minus 6 is 5 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-6)*5=25"",
    resulting_state=(3, 25),
    comment='""11 minus 6 is 5 times 5""',
)

# Finally the participant finds the solution
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-5)*3+6=24"",
    resulting_state=(24,),
    comment='""11 minus 5 times 3 plus 6. There we go.""',
)
```"
834,"[8,9,12,13]",(8/(13-9))x12,35," 13, 12, and 8, 9. If I could just do 12 times 2, but I can't really get there. 13 minus 9 is 4. Yeah. So I want 8 divided by 13 minus 9. And then multiply that by 12. 4 divided by 4 is 2 times 12.","```python
start_state = (8, 9, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I could just do 12 times 2"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""If I could just do 12 times 2""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 8, 12),
    comment='""13 minus 9 is 4""',
)

# ""8 divided by 13 minus 9. And then multiply that by 12""
# First we need to move to the state with 4 in it
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4*12=24"",
    resulting_state=(24,),
    comment='""8 divided by 13 minus 9. And then multiply that by 12""',
)

```"
835,"[4,8,8,12]",(8/(8-4))x12,27," Let's try to do it 12 times 2 again, which, we can do that. 8 minus, so no, clear, delete. We want 8 divided by parentheses 8 minus 4 times 12.","```python
start_state = (4, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let's try to do 12 times 2 again"" suggests they want to get to 24 by multiplying 12 by 2
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""Let\'s try to do 12 times 2 again""'
)

# ""8 minus"" participant starts an operation but stops
# ""clear, delete"" suggests they are starting over

# ""8 divided by parentheses 8 minus 4 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/(8-4)*12=24"",
    resulting_state=(24,),
    comment='""8 divided by parentheses 8 minus 4 times 12""',
)
```"
839,"[3,4,8,11]",8x4-11+3,112," All right, 8, 11 minus 4. Okay, so obviously, so wait, that will be 19, 20, 21, 22, 23. Nope, okay. How about 4 times 3 is 12, plus 8 is, nope, okay. How about 11 plus 4 is 15, plus 8. 15 plus 8 is 15. It's going to be 22, nope, okay. 4 plus 3 is 7. That's 18. Hang on. 4 plus 3 is 7. Plus 11 is 18. Shut up! Plus 8? Oh, fuck you. Okay. Okay. How about 8 times 4 is 36. 6 times 4 minus 11 plus 3. 6 times 4 minus 11 plus 3.","```python
start_state = (3, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8, 11 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(3, 7, 8),
    comment='""8, 11 minus 4""',
)

# ""4 times 3 is 12, plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3+8=20"",
    resulting_state=(11, 20),
    comment='""4 times 3 is 12, plus 8""',
)

# ""11 plus 4 is 15, plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4+8=23"",
    resulting_state=(3, 23),
    comment='""11 plus 4 is 15, plus 8""',
)

# ""4 plus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+3=7"",
    resulting_state=(7, 8, 11),
    comment='""4 plus 3 is 7""',
)

# ""Plus 11 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(8, 18),
    comment='""Plus 11 is 18""',
)

# ""8 times 4 is 36"" - participant made a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=36"",
    resulting_state=(3, 11, 36),
    comment='""8 times 4 is 36"" - participant made a calculation error',
    result_calc_error=True
)

# ""6 times 4 minus 11 plus 3"" - participant likely meant ""8 times 4"" since that's what they submitted
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4-11+3=24"",
    resulting_state=(24,),
    comment='""6 times 4 minus 11 plus 3"" - participant likely meant ""8 times 4"" since that\'s what they submitted',
)
```"
840,"[1,7,10,13]",(13-10)x(7+1),147," All right. 23. Ah, okay. I see. Sneaky bastards. 17? How about 7 times 10? God damn it! 10 divided by 13 plus 1. Okay. Oh my god. Okay. 17, 18. No. 14 plus 7 is 21. Nope. 11 plus 7 is 18. Nope. How about 10 times 13? Divided by 7 times 1? Huh. Okay. Okay. Seven plus 13 is going to be 20. I am! 20? Nope. Okay. Okay. 18. Let's see. That's 18. How about 13 minus... Ah! 13 minus 10 times 7 plus 1.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""17?"" participant may be adding 10+7
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(1, 13, 17),
    comment='""17?""',
)

# ""How about 7 times 10?""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(1, 13, 70),
    comment='""How about 7 times 10?""',
)

# ""10 divided by 13 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/13+1=1.77"",
    resulting_state=(1.77, 7),
    comment='""10 divided by 13 plus 1""',
)

# ""17, 18"" participant may be trying different additions
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7+1=18"",
    resulting_state=(13, 18),
    comment='""17, 18"" participant may be trying different additions',
)

# ""14 plus 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+1=21"",
    resulting_state=(10, 21),
    comment='""14 plus 7 is 21"" - participant likely meant 13+7+1',
)

# ""11 plus 7 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7+1=18"",
    resulting_state=(13, 18),
    comment='""11 plus 7 is 18"" - participant likely meant 10+7+1',
)

# ""How about 10 times 13? Divided by 7 times 1?""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13/(7*1)=18.57"",
    resulting_state=(18.57,),
    comment='""How about 10 times 13? Divided by 7 times 1?""',
)

# ""Seven plus 13 is going to be 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(1, 10, 20),
    comment='""Seven plus 13 is going to be 20""',
)

# Finally, ""13 minus 10 times 7 plus 1"" leads to the solution
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-10)*(7+1)=24"",
    resulting_state=(24,),
    comment='""13 minus... Ah! 13 minus 10 times 7 plus 1""',
)
```"
842,"[3,5,7,10]",(10/5)+(,192," 3 times 5 is 35, 45. 10 plus 7 is 17. Plus 7 plus 5 plus 3. Okay. Shut up! Okay. 3 times 5 is 15. Nope. 3 times 7 is 21. How about 3 times 10 is 30. Nope. How about 10 times 5 is 50 minus 21? Nope. Okay. How about 70? Nope. Okay. I am 7 plus 3 is 10 plus 10. Nope. 7 plus 5 is 12. Nope. 10 plus 3 is 13. Nope. 3 times 5 is 15. 3 times 5 times 7 divided by 10? Yeah, I think so. Alright. 3 times 5 plus 7 minus 10? Nope. Okay. How about 10 minus 3 is 7? Nope. Okay. How about 10 minus 3 is 7? Nope. Okay. How about 10 minus 4 is 7? Nope. Okay. 10 minus 5 is 5 times 7? Nope. Okay. 10 minus 7? Nope. Okay. 10 divided by 5 is 2. Ooh! I am so lost. 10 is 5 times 7? Nope. 10 divided by 5 equals 2 times 7 plus 3? No. Okay. 10 divided by 5 plus...","```python
start_state = (3, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 5 is 35, 45"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=45"",
    resulting_state=(7, 10, 45),
    comment='""3 times 5 is 35, 45"" - calculation error',
    result_calc_error=True,
)

# ""10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(3, 5, 17),
    comment='""10 plus 7 is 17""',
)

# ""Plus 7 plus 5 plus 3"" seems to be adding all numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7+5+3=25"",
    resulting_state=(25,),
    comment='""Plus 7 plus 5 plus 3"" seems to be adding all numbers',
)

# ""3 times 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(7, 10, 15),
    comment='""3 times 5 is 15""',
)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(5, 10, 21),
    comment='""3 times 7 is 21""',
)

# ""3 times 10 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(5, 7, 30),
    comment='""3 times 10 is 30""',
)

# ""10 times 5 is 50 minus 21"" - participant first computes 10*5=50
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(3, 7, 50),
    comment='""10 times 5 is 50""',
)

# Then subtracts 21 which they computed earlier
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(5, 10, 21),
    comment='""minus 21"" - participant uses 3*7=21 computed earlier',
)

# ""7 plus 3 is 10 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3+10=20"",
    resulting_state=(5, 20),
    comment='""7 plus 3 is 10 plus 10""',
)

# ""7 plus 5 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(3, 10, 12),
    comment='""7 plus 5 is 12""',
)

# ""10 plus 3 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(5, 7, 13),
    comment='""10 plus 3 is 13""',
)

# ""3 times 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(7, 10, 15),
    comment='""3 times 5 is 15""',
)

# ""3 times 5 times 7 divided by 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5*7/10=10.5"",
    resulting_state=(10.5,),
    comment='""3 times 5 times 7 divided by 10""',
)

# ""3 times 5 plus 7 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5+7-10=12"",
    resulting_state=(12,),
    comment='""3 times 5 plus 7 minus 10""',
)

# ""10 minus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 7),
    comment='""10 minus 3 is 7""',
)

# ""10 minus 5 is 5 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-5)*7=35"",
    resulting_state=(3, 35),
    comment='""10 minus 5 is 5 times 7""',
)

# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 7),
    comment='""10 divided by 5 is 2""',
)

# ""10 divided by 5 equals 2 times 7 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7+3=17"",
    resulting_state=(17,),
    comment='""10 divided by 5 equals 2 times 7 plus 3""',
)
```"
849,"[1,11,13,13]",,180," pleasure. Wrong answer is not correct. 13 minutes 13 minutes 11 years and 2 Correct answer is comma 1 comma 11 comma 13 comma 13 I'll do it but we had it 30 minus 11 13 minus 11 13 plus 1 2 times 14 13 times 13 yes 13 plus 13 yes plus 13 26 26 26 plus 1 plus 1 divided by 11 divided by 11 division now okay 13 times 13 times 13 13 times 13 um 196 196 plus one plus one 169 plus 170 divided by 11 divided by 11. 13 plus 11 13 times 11 13 times times 11 minus 13 minus 13. 130 divided by 11. no no w okay 13 times 13. 13 divided by 13. divided by 13. 1 times 1 times 1 times 11 11. 1 times 22. okay 13 plus 11. 24 24 divided by 13 13 plus 1 13 times 11 divided by 13 13 times 11 divided by 13. I bought only 11. 13, 13, I don't need it. 13, 13. Okay, basic. I better bracket brackets now.","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 13),
    comment='""13 minus 11""',
)

# ""13 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(11, 13, 14),
    comment='""13 plus 1""',
)

# ""13 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(1, 11, 169),
    comment='""13 times 13""',
)

# ""13 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(1, 11, 26),
    comment='""13 plus 13""',
)

# ""26 plus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+1=27"",
    resulting_state=(11, 27),
    comment='""26 plus 1""',
)

# ""divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27/11=2.45"",
    resulting_state=(2.45,),
    comment='""divided by 11""',
)

# ""13 times 13"" again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(1, 11, 169),
    comment='""13 times 13""',
)

# ""plus one plus one""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169+1=170"",
    resulting_state=(11, 170),
    comment='""plus one""',
)

# ""divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""170/11=15.45"",
    resulting_state=(15.45,),
    comment='""divided by 11""',
)

# ""13 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=143"",
    resulting_state=(1, 13, 143),
    comment='""13 times 11""',
)

# ""minus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""143-13=130"",
    resulting_state=(1, 130),
    comment='""minus 13""',
)

# ""13 divided by 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 1, 11),
    comment='""13 divided by 13""',
)

# ""1 times 1 times 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*1*11=11"",
    resulting_state=(11,),
    comment='""1 times 1 times 11""',
)

# ""13 plus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 13, 24),
    comment='""13 plus 11""',
)

# ""24 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24/13=1.85"",
    resulting_state=(1, 1.85),
    comment='""24 divided by 13""',
)

# ""13 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(11, 13, 14),
    comment='""13 plus 1""',
)

# ""13 times 11 divided by 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11/13=11"",
    resulting_state=(1, 11),
    comment='""13 times 11 divided by 13""',
)
```"
857,"[4,5,5,9]",(9x5,180," Okay, 10 plus 14. Okay, so we need this to go away. 9 minus 4 equals 5. 9 minus 5 equals 4. 9. I would need 15 more. So, 4 minus 1 equals 1. 0. I would need 15 more. Okay. Hmm. 3 times 8 is 24. So, how do I get 3? 9 minus 1. Okay, so if I have a 1, then I only got 5 and 9 left. 10. 9 minus 4 equals 36. So, that ain't going to work. Hmm. 4 times 5 is 20. 9 times 5 is 45. 3 times 5 is 25. That ain't going to work. 25. 36 minus 25. That's not going to work. Is that your car in the driveway? Oh, damn. Hmm. 4 plus 18. 4 plus 18. No. Dang. Divided by 24. 9 times 5 is 45. 45. No, open the fucking door. That is a stupid device. Your instructions are very unclear. All right, let's get that sass key and see if we find it.","```python
start_state = (4, 5, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 4 equals 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-4=5"",
    resulting_state=(5, 5, 5),
    comment='""9 minus 4 equals 5""',
)

# ""9 minus 5 equals 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 4, 5),
    comment='""9 minus 5 equals 4""',
)

# ""4 minus 1 equals 1"" - not clear where the 1 comes from, might be a transcription error

# ""3 times 8 is 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""3 times 8 is 24"" - participant seems to be setting a subgoal',
)

# ""9 minus 1"" - not clear where the 1 comes from

# ""4 times 5 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 9, 20),
    comment='""4 times 5 is 20""',
)

# ""9 times 5 is 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(4, 5, 45),
    comment='""9 times 5 is 45""',
)

# The rest of the transcript contains various interruptions and frustrations but no clear mathematical operations
```"
859,"[1,1,4,6]",6x4x1x1,55," One times one, six times four. That's some good math, I guess. One times six, times four, times one. Why is that invalid? Six times four, times one, times one.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""One times one""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*1=1"",
    resulting_state=(1, 4, 6),
    comment='""One times one""',
)

# ""six times four""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 1, 24),
    comment='""six times four""',
)

# ""One times six, times four, times one""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*6*4*1=24"",
    resulting_state=(24,),
    comment='""One times six, times four, times one""',
)

# The participant seems to question if this is valid, then repeats essentially the same calculation
# ""Six times four, times one, times one""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4*1*1=24"",
    resulting_state=(24,),
    comment='""Six times four, times one, times one""',
)
```"
862,"[2,3,9,10]",10+3+9+2,102, 10 minus 9 plus 9 plus 10. 5 is not helpful. 5 is not helpful. 6 and 4 is what you want. 10 minus 9 divided by 3 is 3. That's so hard. 2 times 3 is 6. 9 is 9. No. 3. 9 divided by 3 is 3. No. 9 divided by... No. 10 plus 3 plus 9 plus 2. 10 plus 3 plus 9 plus 2.,"```python
start_state = (2, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 9 plus 9 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 2, 3),
    comment='""10 minus 9 plus 9 plus 10""',
)

# ""10 minus 9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-9)/3=0.33"",
    resulting_state=(0.33, 2),
    comment='""10 minus 9 divided by 3 is 3"" - participant made calculation error',
    result_calc_error=True
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 9, 10),
    comment='""2 times 3 is 6""',
)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(2, 3, 10),
    comment='""9 divided by 3 is 3""',
)

# ""10 plus 3 plus 9 plus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3+9+2=24"",
    resulting_state=(24,),
    comment='""10 plus 3 plus 9 plus 2""',
)
```"
868,"[6,10,10,13]",(13-10)x10-6,136," Oh, all right. Hmm. This one might take a little bit longer. How do I get to 24? It's got to be something 20 minus, no, 23. Nope. Huh. 10 minus 6 is 4. Yeah, I know. Say aloud my thoughts. I'm trying to think this through. 23 minus 10 is 13 plus 6. That doesn't work. Okay. 13 minus 6 is 7. Okay. 10 minus 6 is 7. That's not going to work. 100, what is 6 times 3? It's 18. Let's try it. 10 times 10 minus, close open parentheses, 13 times 6. Submit answer. Not all numbers used are incorrect answer. 13 minus 10 is 3. I got it. Okay. 13 minus 10 is 3 times 10 is 30 minus 6 is 24. Okay. Yeah, we forgot parentheses. All right. 13 minus 10, close parentheses, that's 3 times 10 is 30 minus 6, submitting... committee.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 6 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 10, 13),
    comment='""10 minus 6 is 4""',
)

# ""23 minus 10 is 13 plus 6"" - participant seems to be working backwards from 23
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(6, 10, 23),
    comment='""23 minus 10 is 13 plus 6""',
)

# ""13 minus 6 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(7, 10, 10),
    comment='""13 minus 6 is 7""',
)

# ""10 minus 6 is 7"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=7"",
    resulting_state=(7, 10, 13),
    comment='""10 minus 6 is 7"" - participant made a calculation error',
    result_calc_error=True,
)

# ""10 times 10 minus, close open parentheses, 13 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10-13*6=22"",
    resulting_state=(22,),
    comment='""10 times 10 minus, close open parentheses, 13 times 6""',
)

# ""13 minus 10 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 6, 10),
    comment='""13 minus 10 is 3""',
)

# ""13 minus 10 is 3 times 10 is 30 minus 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10-6=24"",
    resulting_state=(24,),
    comment='""13 minus 10 is 3 times 10 is 30 minus 6 is 24""',
)
```"
871,"[2,6,10,10]",(10+10+6)-2,46," 24. 20. Let's see. 2 times 6 is 12. Let's see. 60 minus 10 is 50. Divided by 2 is 25. 25. 20. Oh, hallelujah. All right. 10 plus 10 is 20. Plus 6 is 26 minus 2. Oh, thank you.","```python
start_state = (2, 6, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(10, 10, 12),
    comment='""2 times 6 is 12""',
)

# ""60 minus 10 is 50. Divided by 2 is 25"" - participant likely got 60 from 6*10
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10-10/2=25"",
    resulting_state=(25,),
    comment='""60 minus 10 is 50. Divided by 2 is 25""',
    result_calc_error=True,
)

# ""10 plus 10 is 20. Plus 6 is 26 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+6-2=24"",
    resulting_state=(24,),
    comment='""10 plus 10 is 20. Plus 6 is 26 minus 2""',
)
```"
872,"[12,12,13,13]",(13/13)x(12+12),81," Next one. Oh, yeah, I just haven't figured out. Let's see. What is 13 times 13? Is that what, 139? 169. Divided by 12. It's not going to work. 12 times 12 is what, 144? Hmm. Oh, boy, this one's going to be tough. 25 minus 12. We've got to get, what is it, 13 divided by, got it, 13 divided by 13 is 1 times 12. 12 plus 12.","```python
start_state = (12, 12, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What is 13 times 13? Is that what, 139? 169""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(12, 12, 169),
    comment='""What is 13 times 13? Is that what, 139? 169""',
)

# ""Divided by 12"" participant considers dividing 169 by 12
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169/12=14.08"",
    resulting_state=(12, 14.08),
    comment='""Divided by 12""',
)

# ""12 times 12 is what, 144?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(13, 13, 144),
    comment='""12 times 12 is what, 144?""',
)

# ""13 divided by 13 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 12, 12),
    comment='""13 divided by 13 is 1""',
)

# ""times 12 plus 12"" participant multiplies by (12+12)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*(12+12)=24"",
    resulting_state=(24,),
    comment='""times 12 plus 12""',
)
```"
875,"[5,6,7,13]",(6x7)-5-13,59," Try this one. 30 minus 7. Oh, this is hard. Let's see. What's 13 times 5? Is that 85? That's not gonna... 7 times 6 is 42 plus 13. You can't divide that by 5. That's 11. 13 and 13 is 26. 6 and 7 is 42. Minus 18. Okay, I gotta remember how to do that. Okay, close parentheses. 6 times 7. Okay, I gotta remember how to do that. Okay, close parentheses. 6 times 7. Okay, I gotta remember how to do that. Okay, close parentheses. 6 times 7. Is 42 minus 5 minus 13.","```python
start_state = (5, 6, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""30 minus 7"" - not clear where 30 comes from, might be 6*5

# ""What's 13 times 5? Is that 85?""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*5=85"",
    resulting_state=(6, 7, 85),
    comment='""What\'s 13 times 5? Is that 85?""',
    result_calc_error=True,
)

# ""7 times 6 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 13, 42),
    comment='""7 times 6 is 42""',
)

# ""plus 13"" from the new state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42+13=55"",
    resulting_state=(5, 55),
    comment='""plus 13""',
)

# ""You can't divide that by 5. That's 11."" seems to be dividing 55 by 5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""55/5=11"",
    resulting_state=(11,),
    comment='""You can\'t divide that by 5. That\'s 11.""',
)

# ""6 and 7 is 42"" - participant means 6*7=42
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(5, 13, 42),
    comment='""6 and 7 is 42""',
)

# Finally, participant says ""6 times 7 is 42 minus 5 minus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-5-13=24"",
    resulting_state=(24,),
    comment='""6 times 7 is 42 minus 5 minus 13""',
)
```"
879,"[5,6,7,7]",(5x,180," Target number 24. I have two 7s, a 6, and a 5. Okay, well... Hmm... Hmm... 7 times 7 is 49. Hmm, that doesn't exactly work. 42... Hmm... Well, that's hard. Okay. Try this way. 7 times 7 is 49. What if we divide by 6? Nope. And then divide by 5? No. Okay, let's try 7 times 6, which is 42. What if we divide by 7? 6. But... If we multiply that by 5, that does not become 24. So it's 42 divided by 5. Nope, that doesn't work. Wait, 7 times 5. 35. 35. Minus 6? Minus 7? No. Minus 7? Minus 7? No. Hmm, no. 7 times... Let's try 7 times 6. Or... No. Let's try 5 times 6, which is 30. Hmm... Minus 7? 23. Hmm... I don't know, guys. 6 minus 7? That's right. Okay. Okay. Okay. Okay. Okay. Okay. Okay.","```python
start_state = (5, 6, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(5, 6, 49),
    comment='""7 times 7 is 49""',
)

# ""What if we divide by 6?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/6=8.17"",
    resulting_state=(5, 8.17),
    comment='""What if we divide by 6?""',
)

# ""And then divide by 5?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8.17/5=1.63"",
    resulting_state=(1.63,),
    comment='""And then divide by 5?""',
)

# ""7 times 6, which is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 7, 42),
    comment='""7 times 6, which is 42""',
)

# ""What if we divide by 7?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42/7=6"",
    resulting_state=(5, 6),
    comment='""What if we divide by 7?""',
)

# ""If we multiply that by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(30,),
    comment='""If we multiply that by 5""',
)

# ""42 divided by 5""
curr_state = graph.move_to_node((5, 7, 42))
new_state = graph.explore_operation(
    curr_state,
    operation=""42/5=8.4"",
    resulting_state=(7, 8.4),
    comment='""42 divided by 5""',
)

# ""7 times 5. 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(6, 7, 35),
    comment='""7 times 5. 35""',
)

# ""Minus 6? Minus 7?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-6=29"",
    resulting_state=(7, 29),
    comment='""Minus 6?""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""29-7=22"",
    resulting_state=(22,),
    comment='""Minus 7?""',
)

# ""5 times 6, which is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(7, 7, 30),
    comment='""5 times 6, which is 30""',
)

# ""Minus 7? 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-7=23"",
    resulting_state=(7, 23),
    comment='""Minus 7? 23""',
)

# ""6 minus 7?"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-7=-1"",
    resulting_state=(-1, 5, 7),
    comment='""6 minus 7?""',
)
```"
881,"[8,8,8,11]",11+8,180," Okay, I got 3 eights and an 11. That's 8. That's 19. That's 8. That's 27. No. Okay. Alright. 8 times 8 times 8 is 512. 8 times 8 is 64. We divide that by 11. That's not a number. 11 times 8 is 88. Divided by 8 is 11. Plus 8 is 19. So that doesn't work. Mmm. Is it 8? No. 7. 7. 7. 7. 7. 7. 7. 7. Should I do 11 minus 8? That should be 3, right? Yeah. That's 3. But I would only need to times that by 1 eight, and I got 2 eights. Wait No, that would make it 3 again That would make it 3 again Times 8 is 24 Now how do I get rid of this other Freaking 8, bro 8 times 8 is 64 Divided by 11, you can't divide that by 11 Divided by 8 is still 8 Plus 11 is 19 11 plus 8 19 19 Plus 8 Minus 8 is 19 So that also doesn't work Let's see 8 Divided by 8 Is 1 Shit No, that's 24 Guys 1 plus 8","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""That's 8. That's 19. That's 8. That's 27"" seems to be adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11+8=27"",
    resulting_state=(8, 27),
    comment='""That\'s 8. That\'s 19. That\'s 8. That\'s 27""',
)

# ""8 times 8 times 8 is 512""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8*8=512"",
    resulting_state=(11, 512),
    comment='""8 times 8 times 8 is 512""',
)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""8 times 8 is 64""',
)

# ""11 times 8 is 88""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(8, 8, 88),
    comment='""11 times 8 is 88""',
)

# ""Divided by 8 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88/8=11"",
    resulting_state=(8, 11),
    comment='""Divided by 8 is 11""',
)

# ""Plus 8 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(19,),
    comment='""Plus 8 is 19""',
)

# ""11 minus 8? That should be 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8? That should be 3""',
)

# ""Times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(8, 24),
    comment='""Times 8 is 24""',
)

# ""8 times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""8 times 8 is 64""',
)

# ""Divided by 8 is still 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/8=8"",
    resulting_state=(8, 11),
    comment='""Divided by 8 is still 8""',
)

# ""Plus 11 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(19,),
    comment='""Plus 11 is 19""',
)

# Go back to start state
curr_state = graph.move_to_node(start_state)

# ""8 Divided by 8 Is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 8, 8, 11),
    comment='""8 Divided by 8 Is 1""',
)

# ""1 plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+8=9"",
    resulting_state=(9, 8, 11),
    comment='""1 plus 8""',
)
```"
882,"[1,11,12,12]",(12+,180," Alright, I got two 12s, an 11, and a 1. 12 times 12 is 144. 12 times 11 is 132. 12 plus 12 is 24. But I have an 11 and a 1. 12 plus 11 plus 1. Why are these hard? Um... It's... 12... 12 divided by 12 is 1, okay. Plus 11 would be 12. But then, I'm only at 12. 12 okay divided by 12 is 1 plus 11 is 12 okay let's see what else we can do 1 plus 11 is 12 let's see 12 plus 12 is 24 right okay see that's hard guys 12 times I am my microphone's on 12 divided by 12 is 1 but that becomes 12 plus 12 is 24 I can't divide it by 12 because then that becomes 2 I can't multiply it by 12 because that's not 24 I can't subtract 12 because then that's 12 12 times 11 is what 132 divided by 12 is 11 plus 1 is still 12 so it's 12 times 12 okay 144 divide that by 11 that's a decimal what 12 plus 1 let's try this route 12","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 12 is 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 times 12 is 144""',
)

# ""12 times 11 is 132""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(1, 12, 132),
    comment='""12 times 11 is 132""',
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12 is 24""',
)

# ""12 plus 11 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11+1=24"",
    resulting_state=(12, 24),
    comment='""12 plus 11 plus 1""',
)

# ""12 divided by 12 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 1, 11),
    comment='""12 divided by 12 is 1""',
)

# ""Plus 11 would be 12"" - using the 1 from previous operation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(1, 12),
    comment='""Plus 11 would be 12""',
)

# ""1 plus 11 is 12"" - participant tries this again from start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 12, 12),
    comment='""1 plus 11 is 12""',
)

# ""12 plus 12 is 24"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12 is 24""',
)

# ""12 times 11 is what 132 divided by 12 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11/12=11"",
    resulting_state=(1, 11),
    comment='""12 times 11 is what 132 divided by 12 is 11""',
)

# ""plus 1 is still 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12,),
    comment='""plus 1 is still 12""',
)

# ""12 times 12 okay 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 times 12 okay 144""',
)

# ""divide that by 11 that's a decimal""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/11=13.09"",
    resulting_state=(1, 13.09),
    comment='""divide that by 11 that\'s a decimal""',
)

# ""12 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+1=13"",
    resulting_state=(11, 12, 13),
    comment='""12 plus 1""',
)
```"
883,"[3,3,3,9]",(9-(3/3),180," Okay, we got three 3's and a 9. 9 times 3 is 27. Minus 3 is 24. But that means I have to get rid of that other 3. Yeah. 9 times 3 plus 3 is 30. Okay. 9 times 3 is 27. Minus 3 is 27. Hmm. Divided by 3 is 9. Times it by 3, it's still 27. Um... Let's try it this way. 3 times 3 is 9. Times 9 is 81. Divided by 3, 27. Minus 3 is 27. It's gotta be done one of these ways. I don't... Plus 3 is 30, but then minus 3 is still 27. What? There's gotta be... I don't think this is possible. Look, I don't think this is possible. I am saying my thoughts out loud. You prompt me one more time and I'm gonna beat you up. Okay, 3 divided by 3 is 1. But 9 times 3 is 27 and minus 1 is 26. So that doesn't work. work. Wait, wait, wait, wait, wait. What about nine divided by three is three. Times three is not, God dang it. I don't know guys. Okay. So nine, let's see if this works. So that becomes three divided by three is one. So nine minus one is eight.","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 3, 27),
    comment='""9 times 3 is 27""',
)

# ""Minus 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(3, 24),
    comment='""Minus 3 is 24""',
)

# ""9 times 3 plus 3 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3+3=30"",
    resulting_state=(3, 30),
    comment='""9 times 3 plus 3 is 30""',
)

# ""9 times 3 is 27. Minus 3 is 27"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-3=27"",
    resulting_state=(3, 27),
    comment='""9 times 3 is 27. Minus 3 is 27"" seems to be a calculation error',
    result_calc_error=True,
)

# ""Divided by 3 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27/3=9"",
    resulting_state=(9,),
    comment='""Divided by 3 is 9""',
)

# ""Times it by 3, it's still 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(27,),
    comment='""Times it by 3, it\'s still 27""',
)

# ""3 times 3 is 9. Times 9 is 81""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*9=81"",
    resulting_state=(3, 81),
    comment='""3 times 3 is 9. Times 9 is 81""',
)

# ""Divided by 3, 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""81/3=27"",
    resulting_state=(27,),
    comment='""Divided by 3, 27""',
)

# ""3 divided by 3 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 9),
    comment='""3 divided by 3 is 1""',
)

# ""But 9 times 3 is 27 and minus 1 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-1=26"",
    resulting_state=(26,),
    comment='""But 9 times 3 is 27 and minus 1 is 26""',
)

# ""nine divided by three is three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 3, 3),
    comment='""nine divided by three is three""',
)

# ""three divided by three is one. So nine minus one is eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 9),
    comment='""three divided by three is one""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(3, 8),
    comment='""So nine minus one is eight""',
)
```"
887,"[7,10,11,13]",,180," Target number 24, 7, 10, 11, and 13. Okay, so 13 plus 11 is 24, but we got to do something with the 10 and the 7. 17. I feel like this is going to be some adding and subtracting. 13 plus 10 is 23 minus 11. 13 plus 10 is 23 minus 11. 23 minus 11 is 12. Plus 7 is 29. No, 19. That doesn't work. 10 plus 11 plus 7 is 18. 18 minus 10 is 8 plus 13. It's only 21. That was harder than I thought. 13 plus 7 is 20. That doesn't help us. 10 plus 11 is 22. Or 21. 21. 7. I guess we can times and divide. I'm starting to see it into big numbers, bigger than I can do in my head. 13. 13. 11. 13. I think we're going to have to times and then know. What if we subtract 11 from 13? That would give us 2. 2. 2. 2.","```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 11 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(7, 10, 24),
    comment='""13 plus 11 is 24""',
)

# ""13 plus 10 is 23 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10-11=12"",
    resulting_state=(7, 12),
    comment='""13 plus 10 is 23 minus 11. 23 minus 11 is 12""',
)

# ""Plus 7 is 29. No, 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(19,),
    comment='""Plus 7 is 29. No, 19""',
)

# ""10 plus 11 plus 7 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11+7=28"",
    resulting_state=(13, 28),
    comment='""10 plus 11 plus 7 is 18"" - participant miscalculated',
)

# ""18 minus 10 is 8 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""28-10+13=21"",
    resulting_state=(21,),
    comment='""18 minus 10 is 8 plus 13. It\'s only 21""',
)

# ""13 plus 7 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(10, 11, 20),
    comment='""13 plus 7 is 20""',
)

# ""10 plus 11 is 22. Or 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(7, 13, 21),
    comment='""10 plus 11 is 22. Or 21""',
)

# ""What if we subtract 11 from 13? That would give us 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 7, 10),
    comment='""What if we subtract 11 from 13? That would give us 2""',
)

```"
888,"[5,8,9,11]",(5+9-11)x8,71," Target number 24. 5, 8, 9, 11. Okay, how can we get to 24? 8 times 3. How do we get to 3? 5, 5 plus 9 is 14 minus 11. Okay, 5 plus 9 is 14 minus 11. We got to remember order of operations. So, let's put those in parenthesis. Parenthesis, 5 plus 9 minus 11 in parenthesis. So, that gives us 14. I think that gives us 3. So, how many times that? By 8. I think that gives us 3. So, how many times that? By 8. I think that gives us 3. So, how many times that? By 8. I think that's right.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3. How do we get to 3?"" - participant is setting a subgoal to get to 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3. How do we get to 3?""',
)

# ""5 plus 9 is 14 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9-11=3"",
    resulting_state=(3, 8),
    comment='""5 plus 9 is 14 minus 11""',
)

# Then the participant multiplies by 8 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""So, how many times that? By 8.""',
)

```"
889,"[1,2,3,3]",(2x3)x(3+1),83," Target number 24, 1, 2, 3, 3. Okay, so 6, 6 times 4 is 24. So if we do, we do parenthesis 2 plus 3 parenthesis, that gives us 4 and then we want to times that by parenthesis 1 plus 3 parenthesis. I think that's right. Incorrect. Shoot. 2 plus 3 is 5. I need to do 2 times 3. Okay. 2 times 3 parenthesis. Oops, wrong one. Parenthesis plus parenthesis 3 plus 1 parenthesis. Okay, let's try that. Oh, still incorrect. What? Oh, not plus, times. Times. Parenthesis 3 plus 1. Okay. That should be right.","```python
start_state = (1, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6, 6 times 4 is 24"" - participant sets a subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6, 6 times 4 is 24""',
)

# ""if we do, we do parenthesis 2 plus 3 parenthesis""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3=5"",
    resulting_state=(1, 3, 5),
    comment='""if we do, we do parenthesis 2 plus 3 parenthesis""',
)

# ""times that by parenthesis 1 plus 3 parenthesis""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*(1+3)=20"",
    resulting_state=(20,),
    comment='""times that by parenthesis 1 plus 3 parenthesis""',
)

# ""Incorrect. Shoot. 2 plus 3 is 5. I need to do 2 times 3""
# Participant realizes their mistake and goes back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(1, 3, 6),
    comment='""I need to do 2 times 3""',
)

# ""Parenthesis plus parenthesis 3 plus 1 parenthesis"" - participant tries adding instead of multiplying
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+(3+1)=10"",
    resulting_state=(10,),
    comment='""Parenthesis plus parenthesis 3 plus 1 parenthesis""',
)

# ""Oh, not plus, times. Times. Parenthesis 3 plus 1""
# Participant realizes they need to multiply instead of add
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(1, 3, 6),
    comment='""2 times 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*(3+1)=24"",
    resulting_state=(24,),
    comment='""Times parenthesis 3 plus 1""',
)
```"
892,"[2,3,5,13]",(13x2)-5+3,128," 2, 3, 5, 13, so we can get 6, and 13 minus 5 is 8, 6 and 8, no, 3 plus 5 is 8, 13 minus 2 is 11, 2 times 5 is 10, 2 times 13 is 26, 3, 3 times 5 plus 2 is 7, that doesn't help, 5 minus 2 is 3. 13, gotta change the 13 to something more usable. 13 plus 2 is 15, 13 minus 2 is 11, 13 plus 3 is 26, 13 minus 3 is 10, 13 plus 5 is 28, minus 5 is 18. 13 times 2 is 26. 26 minus 5 is 21. Oh, 13, parenthesis, 13 times 2 is 26. Minus 5 is 21 plus 3.","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""so we can get 6"" - participant likely means 2*3=6
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(5, 6, 13),
    comment='""so we can get 6""',
)

# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(2, 3, 8),
    comment='""13 minus 5 is 8""',
)

# ""3 plus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(2, 8, 13),
    comment='""3 plus 5 is 8""',
)

# ""13 minus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(3, 5, 11),
    comment='""13 minus 2 is 11""',
)

# ""2 times 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(3, 10, 13),
    comment='""2 times 5 is 10""',
)

# ""2 times 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=26"",
    resulting_state=(3, 5, 26),
    comment='""2 times 13 is 26""',
)

# ""3 times 5 plus 2 is 7"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5+2=7"",
    resulting_state=(7, 13),
    comment='""3 times 5 plus 2 is 7"" - participant made a calculation error',
    result_calc_error=True,
)

# ""5 minus 2 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 3, 13),
    comment='""5 minus 2 is 3""',
)

# ""13 plus 2 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(3, 5, 15),
    comment='""13 plus 2 is 15""',
)

# ""13 minus 2 is 11"" - repeating earlier calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(3, 5, 11),
    comment='""13 minus 2 is 11""',
)

# ""13 plus 3 is 26"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=26"",
    resulting_state=(2, 5, 26),
    comment='""13 plus 3 is 26"" - calculation error',
    result_calc_error=True,
)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(2, 5, 10),
    comment='""13 minus 3 is 10""',
)

# ""13 plus 5 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=28"",
    resulting_state=(2, 3, 28),
    comment='""13 plus 5 is 28""',
    result_calc_error=True,
)

# ""minus 5 is 18"" - unclear what this refers to

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(3, 5, 26),
    comment='""13 times 2 is 26""',
)

# ""26 minus 5 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-5=21"",
    resulting_state=(3, 21),
    comment='""26 minus 5 is 21""',
)

# ""plus 3"" - participant adds 3 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+3=24"",
    resulting_state=(24,),
    comment='""plus 3"" - participant adds 3 to get to 24',
)
```"
899,"[1,5,10,13]",,180," Darn, darn, darn. Okay, times, okay, maybe, that's 130. 130, 130, if you do 10 times 13, and then, what is it if you divide it by 5 plus 1? You got 6 times, it wouldn't be that, though. Okay, never mind. Stop messing, don't be on that, Kaylin. Move from that. Don't get on that. 5, 1, 5, 10, 13, 1, 5, 10, 13. Oh my gosh, I know my time is coming to an end. What is, what will it be? I don't know. 12. Yeah, awesome. Stay a little over here. Well, let's see. Let's see, let's see, let's see. 12. . Thank you.","```python
start_state = (1, 5, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if you do 10 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(1, 5, 130),
    comment='""if you do 10 times 13""',
)

# ""what is it if you divide it by 5 plus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""130/(5+1)=21.67"",
    resulting_state=(21.67,),
    comment='""what is it if you divide it by 5 plus 1""',
)

# The participant then says ""You got 6 times, it wouldn't be that, though"" and decides to abandon this approach
# The rest of the transcript shows the participant listing the numbers but not performing any clear operations
# They mention ""12"" but don't indicate any operation to get there

```"
905,"[9,11,12,13]",,180," But, do you, 13 and that is 25, 13, 24 times, times four. Times three, would be 12 times six, so no. Well, nine times is 99, 13 times 12. That's too much for my brain to handle. I'm gonna say 12 times 12. Is 144, yeah, that's, it wouldn't be that, okay. 11 times 12 is 132, 132, if we do nine times 13, nine times 12, nine times 12 is, nine times 12 is 98, if you add another nine. Okay, let's try it, I don't know, okay. 11 times 12, parentheses, minus 13 times nine, okay, no. I might not get this one. Um, well, I say, if you divide, um, no.","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 and that is 25"" - participant might be adding 13+12
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12=25"",
    resulting_state=(9, 11, 25),
    comment='""13 and that is 25""',
)

# ""13 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*12=156"",
    resulting_state=(9, 11, 156),
    comment='""13 times 12""',
)

# ""12 times 12 is 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(9, 11, 13, 144),
    comment='""12 times 12 is 144""',
)

# ""11 times 12 is 132""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(9, 13, 132),
    comment='""11 times 12 is 132""',
)

# ""nine times 12 is 98"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=98"",
    resulting_state=(11, 13, 98),
    comment='""nine times 12 is 98""',
    result_calc_error=True,
)

# ""11 times 12, parentheses, minus 13 times nine""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12-13*9=15"",
    resulting_state=(15,),
    comment='""11 times 12, parentheses, minus 13 times nine""',
)
```"
906,"[6,10,10,13]",,180," Okay, well, these are bigger numbers. Okay, so I need to use the divided by for this. Those are supposed to be easy ones. Okay, 13 plus 10, that's 23. 23 times 6. No, 23 times 10 is going to be 230. Hmm, what if I do 13 minus 10 is 3, plus 10 again is 13, and then plus 6 is only going to give me to 19. So what if I do 13 minus 6, that would leave me as 7. Plus 10 is 7. Plus another 10 is 27. So that's too big. Man, I am really not good at this. 10 plus 10 is 20. Minus 6 is 14. Oh, wait. Minus 6 is 14. Then I'd have to add 13. And that would put me at 27. So 7 again. 10 times 10 is 100. Minus 6 is 90. Wait, 100 minus 13 would be 87. No, that wouldn't get, dividing by 6 wouldn't get me where I need to go. I don't think that's even divisible by 6. Um, let's see here. 10 times 10 is 100. Minus 6 is 94. 94 divided by 13. I don't think that works either. That would be way too small of a number. Hmm. 13 minus 6. Gives me 7. Times 10. No, if I did times 10 and then divided by 10, it'd just bring me back to the same number. 7 times 10 is 70. Divided by 10 is 7. Um, 6 times 10 is 60. Divided by 10 is 6. Plus 13 is 19. 10 plus 13 is 23.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 10, that's 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(6, 10, 23),
    comment='""13 plus 10, that\'s 23""',
)

# ""23 times 10 is going to be 230""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23*10=230"",
    resulting_state=(6, 230),
    comment='""23 times 10 is going to be 230""',
)

# Going back to start state: ""13 minus 10 is 3, plus 10 again is 13, and then plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10+10+6=19"",
    resulting_state=(19,),
    comment='""13 minus 10 is 3, plus 10 again is 13, and then plus 6 is only going to give me to 19""',
)

# ""13 minus 6, that would leave me as 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(7, 10, 10),
    comment='""13 minus 6, that would leave me as 7""',
)

# ""Plus 10 is 7. Plus another 10 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10+10=27"",
    resulting_state=(27,),
    comment='""Plus 10 is 7. Plus another 10 is 27""',
)

# ""10 plus 10 is 20. Minus 6 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10-6=14"",
    resulting_state=(13, 14),
    comment='""10 plus 10 is 20. Minus 6 is 14""',
)

# ""Then I'd have to add 13. And that would put me at 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+13=27"",
    resulting_state=(27,),
    comment='""Then I\'d have to add 13. And that would put me at 27""',
)

# ""10 times 10 is 100. Minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10-6=94"",
    resulting_state=(13, 94),
    comment='""10 times 10 is 100. Minus 6 is 94""',
)

# ""94 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""94/13=7.23"",
    resulting_state=(7.23,),
    comment='""94 divided by 13""',
)

# ""13 minus 6. Gives me 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(7, 10, 10),
    comment='""13 minus 6. Gives me 7""',
)

# ""7 times 10 is 70. Divided by 10 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10/10=7"",
    resulting_state=(7,),
    comment='""7 times 10 is 70. Divided by 10 is 7""',
)

# ""6 times 10 is 60. Divided by 10 is 6. Plus 13 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10/10+13=19"",
    resulting_state=(19,),
    comment='""6 times 10 is 60. Divided by 10 is 6. Plus 13 is 19""',
)

# ""10 plus 13 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(6, 10, 23),
    comment='""10 plus 13 is 23""',
)
```"
907,"[6,8,8,10]",,180," Okay, 10 minus 8 is 2. 2 times 8 is 16. 16 plus 6 is 22, right? 16 plus 6 is 22. Yes. 8 times 8 is 64. Then divided by 6 would be, I don't know, I don't think that's divisible by 6. 6 plus 8 is 14. How do I make that extra? Plus 10 is 24, but how do I make that extra 8 not matter? Have to use every number? 8. No, that would just multiply everything in there. I don't want to do that. 10 minus 8 is 2 times 8 is 16 plus 6. Oh, yeah, that's only 22. I already did that. 10 plus 8 is 18. Plus 6 is 24. Okay. an extra 8. 10 plus 8 is 16, plus another 8. Wait, what? There's 26. And the 6's in the way. Too big would make the number too small. 8 minus 6 is 2. 10 minus 6 is 4, plus 8 is 12, plus 8 is 20. 8 plus 6 is 24. No, 8 plus 6 is 14. As soon as 24. And then I could only do minus 8 or plus 8 or divided by 8 or times 8, and that would all change the number.","```python
start_state = (6, 8, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 6, 8),
    comment='""10 minus 8 is 2""',
)

# ""2 times 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(6, 16),
    comment='""2 times 8 is 16""',
)

# ""16 plus 6 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(22,),
    comment='""16 plus 6 is 22""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(6, 10, 64),
    comment='""8 times 8 is 64""',
)

# ""Then divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/6=10.67"",
    resulting_state=(10, 10.67),
    comment='""Then divided by 6""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""6 plus 8 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(8, 10, 14),
    comment='""6 plus 8 is 14""',
)

# ""Plus 10 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(8, 24),
    comment='""Plus 10 is 24""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""10 plus 8 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(6, 8, 18),
    comment='""10 plus 8 is 18""',
)

# ""Plus 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(8, 24),
    comment='""Plus 6 is 24""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""10 plus 8 is 16"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=16"",
    resulting_state=(6, 8, 16),
    comment='""10 plus 8 is 16"" (calculation error)',
    result_calc_error=True,
)

# ""plus another 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8=26"",
    resulting_state=(6, 26),
    comment='""plus another 8""',
    result_calc_error=True,
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 8, 10),
    comment='""8 minus 6 is 2""',
)

# ""10 minus 6 is 4, plus 8 is 12, plus 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6+8+8=20"",
    resulting_state=(20,),
    comment='""10 minus 6 is 4, plus 8 is 12, plus 8 is 20""',
)

# ""8 plus 6 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(8, 10, 14),
    comment='""8 plus 6 is 14""',
)

```"
908,"[4,5,5,8]",,180," 8 times 4 is 20. Plus 8 is 28. Minus 5 is 23. Dang, that's so close. 8 times 5 divided by 3 is 40. Divided by 4 is 10. Plus 5 is 5. 5 times 5 is 25. Plus 8. No, 25 plus 4 is 29. Minus 8 is 21. 25 times 4 is 100. 100 is not divisible by 8, so I can't do that. 8 times 4 is 32. 32 minus 5. 5 is 27. Minus another 5 is 22. That's too small. Okay. 8 minus 5 is 3. Times 5 is 15. Plus 4 is 20. 8 minus 4 is 4. 4 times 5 is 20. Plus 5 is 25. I can get like almost every number besides 24. Um, 5 minus 4 is 1. Um, 1 plus 5 is 6. 6 times 8 is way too big. Um, 8 minus 5 is 3. 3 plus 4. You know, 3 times 4 is 12. 12 times 5 is way too big. 12 plus 5 is way too small. Oh my gosh. 8 minus 4 is 4. Plus 5 is 20. Plus 5 is 25. This is where that 1 would come in handy. 5 minus 4 is 1. 8.","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 4 is 20"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=20"",
    resulting_state=(5, 5, 20),
    comment='""8 times 4 is 20"" - calculation error',
    result_calc_error=True,
)

# ""8 times 5 divided by 4 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5/4=10"",
    resulting_state=(5, 10),
    comment='""8 times 5 divided by 4 is 10""',
)

# ""5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 8, 25),
    comment='""5 times 5 is 25""',
)

# ""25 plus 4 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+4=29"",
    resulting_state=(8, 29),
    comment='""25 plus 4 is 29""',
)

# ""Minus 8 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""29-8=21"",
    resulting_state=(21,),
    comment='""Minus 8 is 21""',
)

# ""8 times 4 is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(5, 5, 32),
    comment='""8 times 4 is 32""',
)

# ""32 minus 5. 5 is 27. Minus another 5 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-5-5=22"",
    resulting_state=(22,),
    comment='""32 minus 5. 5 is 27. Minus another 5 is 22""',
)

# ""8 minus 5 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 4, 5),
    comment='""8 minus 5 is 3""',
)

# ""Times 5 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(4, 15),
    comment='""Times 5 is 15""',
)

# ""Plus 4 is 20"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+4=19"",
    resulting_state=(19,),
    comment='""Plus 4 is 20"" - participant miscalculates',
    result_calc_error=True,
)

# ""8 minus 4 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 5, 5),
    comment='""8 minus 4 is 4""',
)

# ""4 times 5 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 20),
    comment='""4 times 5 is 20""',
)

# ""Plus 5 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+5=25"",
    resulting_state=(25,),
    comment='""Plus 5 is 25""',
)

# ""5 minus 4 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 5, 8),
    comment='""5 minus 4 is 1""',
)

# ""1 plus 5 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(6, 8),
    comment='""1 plus 5 is 6""',
)

# ""6 times 8 is way too big""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(48,),
    comment='""6 times 8 is way too big""',
)

# ""8 minus 5 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 4, 5),
    comment='""8 minus 5 is 3""',
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(5, 12),
    comment='""3 times 4 is 12""',
)

# ""12 times 5 is way too big""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(60,),
    comment='""12 times 5 is way too big""',
)

# ""8 minus 4 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 5, 5),
    comment='""8 minus 4 is 4""',
)

# ""Plus 5 is 20"" - participant seems to multiply instead of add
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 20),
    comment='""Plus 5 is 20"" - participant seems to multiply instead of add',
)

# ""Plus 5 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+5=25"",
    resulting_state=(25,),
    comment='""Plus 5 is 25""',
)

# ""5 minus 4 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 5, 8),
    comment='""5 minus 4 is 1""',
)
```"
909,"[2,6,10,10]",10+10+6-2,32, 10 plus 10 is 20. 10 plus 10 plus 6 minus 2. 10 plus 10 is 20. 20 plus 6 is 27. 20 plus 6 minus 2 is 24.,"```python
start_state = (2, 6, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(2, 6, 20),
    comment='""10 plus 10 is 20""',
)

# ""20 plus 6 is 27"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+6=27"",
    resulting_state=(2, 27),
    comment='""20 plus 6 is 27"" - calculation error',
    result_calc_error=True,
)

# ""20 plus 6 minus 2 is 24"" - participant corrects their calculation
curr_state = graph.move_to_node((2, 6, 20))  # go back to before the error
new_state = graph.explore_operation(
    curr_state,
    operation=""20+6-2=24"",
    resulting_state=(24,),
    comment='""20 plus 6 minus 2 is 24""',
)
```"
913,"[5,6,7,13]",5x6+13-7,180," 13 plus 7 is 20. 20 plus 6 is 26. No, 20 plus 5. No. 6 plus 5 is 11. Plus 7 is 18. 7 minus 6 is 1. 1 plus 5 is 7. 7 is 6. Plus 13 is 19. 6 minus 5 is 1. Plus 7 is 8. Plus 13 is 21. 7 minus 5 is 2. Times 6 is 12. Plus 13 is 25. 13 minus 6 is 7. 7 plus 5 is 12. Plus 7 is 19. 13 minus 7. Did I just do that? No. 13 minus 7 is what? That's 3. And then there's 4 left. So 16. 13 minus 7. No. What? 13 minus 7 is 6. 6 plus 6 is 12. 12 plus 5 is only 17. 13 plus 5 is 18. No. 19, 20, 21, 22, 23, 24. But then what? 7 7 hmm 7 plus 6 is 13 13 13 26 26 5 times 6 5 10 15 20 25 30 plus 7 minus 13 37 minus 13 is what 37 minus 13 is 24 wait how did I just do that 5 times 6 plus 7 7 no wait plus 13 minus 7","```python
start_state = (5, 6, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 7 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(5, 6, 20),
    comment='""13 plus 7 is 20""',
)

# ""20 plus 6 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+6=26"",
    resulting_state=(5, 26),
    comment='""20 plus 6 is 26""',
)

# ""6 plus 5 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(7, 11, 13),
    comment='""6 plus 5 is 11""',
)

# ""Plus 7 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(13, 18),
    comment='""Plus 7 is 18""',
)

# ""7 minus 6 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 5, 13),
    comment='""7 minus 6 is 1""',
)

# ""1 plus 5 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(6, 13),
    comment='""1 plus 5 is 7"" - participant may have made calculation error',
)

# ""Plus 13 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(19,),
    comment='""Plus 13 is 19""',
)

# ""6 minus 5 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 7, 13),
    comment='""6 minus 5 is 1""',
)

# ""Plus 7 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+7=8"",
    resulting_state=(8, 13),
    comment='""Plus 7 is 8""',
)

# ""Plus 13 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+13=21"",
    resulting_state=(21,),
    comment='""Plus 13 is 21""',
)

# ""7 minus 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 6, 13),
    comment='""7 minus 5 is 2""',
)

# ""Times 6 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(12, 13),
    comment='""Times 6 is 12""',
)

# ""Plus 13 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(25,),
    comment='""Plus 13 is 25""',
)

# ""13 minus 6 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(5, 7, 7),
    comment='""13 minus 6 is 7""',
)

# ""7 plus 5 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(7, 12),
    comment='""7 plus 5 is 12""',
)

# ""Plus 7 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(19,),
    comment='""Plus 7 is 19""',
)

# ""13 minus 7 is what? That's 3"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=3"",
    resulting_state=(3, 5, 6),
    comment='""13 minus 7 is what? That\'s 3"" - calculation error',
    result_calc_error=True,
)

# ""13 minus 7 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(5, 6, 6),
    comment='""13 minus 7 is 6""',
)

# ""6 plus 6 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(5, 12),
    comment='""6 plus 6 is 12""',
)

# ""12 plus 5 is only 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+5=17"",
    resulting_state=(17,),
    comment='""12 plus 5 is only 17""',
)

# ""13 plus 5 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=18"",
    resulting_state=(6, 7, 18),
    comment='""13 plus 5 is 18""',
)

# ""7 plus 6 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(5, 13, 13),
    comment='""7 plus 6 is 13""',
)

# ""5 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(7, 13, 30),
    comment='""5 times 6""',
)

# Finally, based on their response, they found 5*6+13-7=36
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6+13-7=36"",
    resulting_state=(36,),
    comment=""Based on final response"",
)
```"
919,"[2,3,7,10]",(10+7+3+2),180," 7-3, 7-3, no 7-2 equals 5, 5 plus 10 plus 3, oh, 7-3 equals 4, 7-3 equals 4, 7-3 equals 4, 4 times 2 is 8, 8 plus 10, bruh, 10 minus 7 is 3, 3, maybe 10 minus 3, 10 minus 3 is 7, maybe 10 minus 2, maybe? 10 minus, fuck, 10 minus 2 is 8, 8, 8 times 3 is 24, alright. Let me 10 divided by 2, 5. 5 times 3 is 4. 5 times 3, 5 times, 5 times, 15 plus 7, no, that gives me 5, 5 times 7, 35, no. Okay. Okay. 10 plus 7, 3 plus 2, no, 2, 3, 7, 10, 2, 3, 7, 10. 7 plus 3. 8. 10 10 plus How do I get 3 from this 4 8 30 2 So I'm stumped I'm not sure You","```python
start_state = (2, 3, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7-3, 7-3, no 7-2 equals 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(3, 5, 10),
    comment='""7-2 equals 5""',
)

# ""5 plus 10 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+10+3=18"",
    resulting_state=(18,),
    comment='""5 plus 10 plus 3""',
)

# ""7-3 equals 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(2, 4, 10),
    comment='""7-3 equals 4""',
)

# ""4 times 2 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(8, 10),
    comment='""4 times 2 is 8""',
)

# ""8 plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(18,),
    comment='""8 plus 10""',
)

# ""10 minus 7 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 3),
    comment='""10 minus 7 is 3""',
)

# ""10 minus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(2, 7, 7),
    comment='""10 minus 3 is 7""',
)

# ""10 minus 2 is 8, 8, 8 times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(3, 7, 8),
    comment='""10 minus 2 is 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(7, 24),
    comment='""8 times 3 is 24""',
)

# ""10 divided by 2, 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(3, 5, 7),
    comment='""10 divided by 2, 5""',
)

# ""5 times 3 is 4"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=4"",
    resulting_state=(4, 7),
    comment='""5 times 3 is 4"" - calculation error',
    result_calc_error=True,
)

# ""15 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3+7=22"",
    resulting_state=(22,),
    comment='""15 plus 7""',
)

# ""5 times 7, 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(3, 35),
    comment='""5 times 7, 35""',
)

# ""10 plus 7, 3 plus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7+3+2=22"",
    resulting_state=(22,),
    comment='""10 plus 7, 3 plus 2""',
)

```"
923,"[1,4,12,12]",(4-1)x12-12,36," Let's see, 1, 4, 12, 12, let's see, 12 divided by 12, yeah, 12, times 12, 30, how do I get there, oh, wait, I do, oh, let me see, 4 minus 12, minus 1, 3, times 12, 36, minus 12, 20.","```python
start_state = (1, 4, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 divided by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 1, 4),
    comment='""12 divided by 12""',
)

# ""times 12, 30"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=30"",
    resulting_state=(1, 4, 30),
    comment='""times 12, 30"" seems to be a calculation error',
    result_calc_error=True,
)

# ""4 minus 12, minus 1, 3"" participant seems to be computing 4-1=3
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 12, 12),
    comment='""4 minus 12, minus 1, 3"" participant seems to be computing 4-1=3',
)

# ""times 12, 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(12, 36),
    comment='""times 12, 36""',
)

# ""minus 12, 20"" - participant makes calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=20"",
    resulting_state=(20,),
    comment='""minus 12, 20"" - participant makes calculation error',
    result_calc_error=True,
)

# Based on their response, they must have eventually realized 36-12=24
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(24,),
    comment='Based on their response ""(4-1)x12-12"", they must have eventually realized 36-12=24',
)
```"
932,"[1,3,3,10]",,180," 3 times 3 is 9. No. 10 plus 3 is 13. Minus 1 is 12. Times 3 is 36. 10 plus 1 is 11. 3 times 3 is 9. No, that makes 20. 3 times 10 is 30. Minus 3 plus 1 is 26. 3 times 3 is 9. 10 minus 3 is 7. 10 minus 3 is 7. Minus 1 is 6. Times 3 is only 18. 3 plus 3 is 6. 6 times 10 is 60. Plus 1 is 60. 3 plus 3. 3 times 1 is 3 plus 3. Plus 3 is 16. 1 plus 3 is 18. Plus 3 is 0. Plus 10. That is 7 times 1. 17, 10 plus 1 is 11, times 3 is 33, minus 3 is 30, 1 times 10, 1 times 10, 1 times 10,","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""10 plus 3 is 13. Minus 1 is 12. Times 3 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+3-1)*3=36"",
    resulting_state=(36,),
    comment='""10 plus 3 is 13. Minus 1 is 12. Times 3 is 36""',
)

# ""10 plus 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+1=11"",
    resulting_state=(3, 3, 11),
    comment='""10 plus 1 is 11""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""3 times 10 is 30. Minus 3 plus 1 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10-3+1=26"",
    resulting_state=(26,),
    comment='""3 times 10 is 30. Minus 3 plus 1 is 26""',
    result_calc_error=True,
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""10 minus 3 is 7. Minus 1 is 6. Times 3 is only 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3-1)*3=18"",
    resulting_state=(18,),
    comment='""10 minus 3 is 7. Minus 1 is 6. Times 3 is only 18""',
)

# ""3 plus 3 is 6. 6 times 10 is 60. Plus 1 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*10+1=61"",
    resulting_state=(61,),
    comment='""3 plus 3 is 6. 6 times 10 is 60. Plus 1 is 60""',
)

# ""3 times 1 is 3 plus 3. Plus 3 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*1+3+3=9"",
    resulting_state=(9, 10),
    comment='""3 times 1 is 3 plus 3. Plus 3 is 16"" - though their calculation of 16 seems incorrect',
)

# ""10 plus 1 is 11, times 3 is 33, minus 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+1)*3-3=30"",
    resulting_state=(30,),
    comment='""10 plus 1 is 11, times 3 is 33, minus 3 is 30""',
)

# The final ""1 times 10"" repeated three times doesn't seem to lead to a complete calculation
```"
935,"[5,5,7,10]",,180," Okay, 24. Let's see. There's a 5, a 5, a 7, and a 10. Let's see. What is 7 times 5 divided by 5? Let's see. Nope, that wouldn't work. Yeah. I was thinking 7 times 10, 70, and then like maybe dividing it something. But that doesn't seem like it would work out. Let's see. 5 times 7. Let's see. 5 times 7 would be 35. And then not really a way to make 9. Let's see. Maybe 50 minus 35? Nope. Let's see. Could I get anything from 2? Okay. Let's see. Let's see. 5 times 5 is 35. Let's see. If I do 5, let's see. 7 minus 5 is 2. And then 2 times 10. Why not just make 25? Let's see. 5 times 7 is 35 minus 10. That would be 25. Let's see. 10 minus 7. That would be 25. And that would be 3, nope, let's see, let's see what kind of roots I could make. I could make, what, 3 times 8 or 4 times 6 to get there, or what would be 3 times 24? That'd be 72, right, yeah, okay, yeah, 72. Let's see, da-da-da-da, 3 times 5, let's see, and then let's see, I could do 5, actually, let's, nope, I can make 14, nope, I don't think I can, let's see.","```python
start_state = (5, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What is 7 times 5 divided by 5?""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5/5=7"",
    resulting_state=(7, 10),
    comment='""What is 7 times 5 divided by 5?""',
)

# ""7 times 10, 70""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(5, 5, 70),
    comment='""7 times 10, 70""',
)

# ""5 times 7 would be 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(5, 10, 35),
    comment='""5 times 7 would be 35""',
)

# ""5 times 5 is 35"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=35"",
    resulting_state=(7, 10, 35),
    comment='""5 times 5 is 35"" - calculation error',
    result_calc_error=True,
)

# ""7 minus 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 5, 10),
    comment='""7 minus 5 is 2""',
)

# ""And then 2 times 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(5, 20),
    comment='""And then 2 times 10""',
)

# ""5 times 7 is 35 minus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7-10=25"",
    resulting_state=(5, 25),
    comment='""5 times 7 is 35 minus 10""',
)

# ""10 minus 7. That would be 25"" seems to be a transcription error since 10-7=3

# ""3 times 8"" participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""3 times 8"" participant seems to be setting a subgoal',
)

# ""4 times 6"" participant sets another subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 times 6"" participant sets another subgoal',
)

```"
939,"[1,1,5,5]",(5+1)x(5-1),14," Here's a 1, a 1, and a 5, and a 5. Let's see. I could make that into 6 and 4 pretty easily. 5 plus 1 times 5 minus 1.","```python
start_state = (1, 1, 5, 5)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I could make that into 6 and 4 pretty easily"" - participant is setting subgoals
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""I could make that into 6 and 4 pretty easily""'
)

# ""5 plus 1 times 5 minus 1"" - participant executes their plan
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*(5-1)=24"",
    resulting_state=(24,),
    comment='""5 plus 1 times 5 minus 1""',
)
```"
952,"[1,6,8,13]",(13+,180," So, you got 13, 8, 8 and 6 is 14, 15, no, 7, or, 8, 6, 14, 14, that's not too much, so it would be, 13 plus 1 is 13, okay, 8, 8, 3, 2, 6, 8, 9, 19, it's not right either, 8, 9, 10, 11, 12, 13, 14, 14, 14, 14 is 28, so how does that work, oh, minus, okay, so, 3, 6, plus 8, and, okay, so, this, 6, plus 8, 6 plus 8, bracket, bracket, and times, no, minus, minus, 13 plus 1, bracket, bracket, ah, okay, try it again, wait, right, shut up, dog, okay, so, the bracket, 13 plus 1, and minus, 8 plus 6, no, why am I not using all the numbers, wait, 8 plus, it's 14 and 14, oh, okay, hold on, So it'd be 8, 9, so it'd be minus something. So it'd be 13 minus 6. No. 8 times 6 is 24. So that's 14. So, oh, okay, 8. 14, 14, okay, so that'd be, no, right, way to 8. 8. So, 13 plus 1. 14. Okay, so, 13 plus 1.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 and 6 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(1, 13, 14),
    comment='""8 and 6 is 14""',
)

# ""13 plus 1 is 13"" (this is a calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=13"",
    resulting_state=(6, 8, 13),
    comment='""13 plus 1 is 13"" - calculation error',
    result_calc_error=True,
)

# ""6 plus 8"" again
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(1, 13, 14),
    comment='""6 plus 8""',
)

# ""13 plus 1"" again
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(6, 8, 14),
    comment='""13 plus 1""',
)

# ""13 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 7, 8),
    comment='""13 minus 6""',
)

# ""8 times 6 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=24"",
    resulting_state=(1, 13, 24),
    comment='""8 times 6 is 24""',
    result_calc_error=True,
)

# The participant seems to keep coming back to ""13 plus 1"" but never completes a full solution path to 24
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(6, 8, 14),
    comment='""13 plus 1. 14""',
)
```"
954,"[4,5,6,10]",(4x5)+(10-6),93," 24, okay so, times 6 is 11, so 14, times 50 is 10, 10, 10, 10 and 4, so, 10 minus 5 is 5, 11, no, 11, 5 times 6 is... 18, 20, 1, 2, 3, 10, 10 minus 6 is 4, 4 times 4 is 16, 17, 18, 19, 20, 21, no, sorry, okay, let's try this one, no, wait, 4, so there's 4, there's 6, 6 times 6 is 12, no, still not, okay, okay, so 5 times, oh, okay, so it'd be 10, maybe how do I do that, okay, 4 times 5 is 20, 20 plus 6, wait, 10 minus 6.","```python
start_state = (4, 5, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""times 6 is 11"" - not clear what's being multiplied
# ""times 50 is 10"" - not clear what's being multiplied
# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(4, 5, 6),
    comment='""10 minus 5 is 5""',
)

# ""5 times 6 is..."" participant seems to be trying a new calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(4, 10, 30),
    comment='""5 times 6 is...""',
)

# ""10 minus 6 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 4, 5),
    comment='""10 minus 6 is 4""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 16),
    comment='""4 times 4 is 16""',
)

# ""6 times 6 is 12"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=12"",
    resulting_state=(4, 5, 10, 12),
    comment='""6 times 6 is 12"" - calculation error',
    result_calc_error=True
)

# ""4 times 5 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(6, 10, 20),
    comment='""4 times 5 is 20""',
)

# ""10 minus 6"" - participant finds the final solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+(10-6)=24"",
    resulting_state=(24,),
    comment='""10 minus 6"" - participant finds the final solution',
)
```"
955,"[3,7,7,9]",,180," So that'd be 9, 10, 11, 12, 9, 9 plus 7, 16, 18, 19, 20, 21, 22, 23, 24. 7 times 3 is 21, okay, 9 times 7, okay, 9 times 3 is 27, 27 minus 7, no. 7 is 56, right, 9, 16, 2, 3 is 21, 9 times 7 is, I'm going to do that, 7 plus 7 is 14. Now we need 10 more over here, um, 9. Plus 3 would be 12, 12, does not work either, 7 plus 7 is 14, minus 3, 14, 14, 17, 18, 19, 20, 21, 22, 23, it's 23. Let me show, 9 plus 7 is 16, minus 10, 10, um, 10, 23, 23, 23, I'm going to do this one not too yet, 9.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 7, 16"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(3, 7, 16),
    comment='""9 plus 7, 16""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(7, 9, 21),
    comment='""7 times 3 is 21""',
)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""9 times 3 is 27""',
)

# ""27 minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-7=20"",
    resulting_state=(7, 20),
    comment='""27 minus 7""',
)

# ""7 plus 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(3, 9, 14),
    comment='""7 plus 7 is 14""',
)

# ""Plus 3 would be 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+3=17"",
    resulting_state=(9, 17),
    comment='""Plus 3 would be 12"" - though they seem to have made a calculation error',
    result_calc_error=True,
)

# ""7 plus 7 is 14, minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""14-3=11"",
    resulting_state=(9, 11),
    comment='""7 plus 7 is 14, minus 3""',
)

# ""9 plus 7 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(3, 7, 16),
    comment='""9 plus 7 is 16""',
)

```"
966,"[3,7,7,9]",7+3,180," Okay, 3, 7, 7, 9. So if we do 7, 7, 14, 14, 14, no, 14 minus 9, 5, 5 times 3, 15, about 7, 21, 21, 21, no, 21, about 7 plus 9, that could be right, 7 and 9, 16. 16 minus 3, no, 16, or 9 divided by 3, 9 divided by 3, 3 plus 7, hmm, plus 7, no. So 3, uh-uh, I need a bigger number, about 9, or what about 9 plus 3, 12, uh. 7 plus 7, now, plus 7 plus 7 is 26. Mmm, 12, 12 times 7, and then, no, I don't want to work either. Okay. 12. About, like, 12. And we just have 7, so about 7 and 3, 10.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7, 7, 14"" - participant adds the 7s
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(3, 9, 14),
    comment='""7, 7, 14""',
)

# ""14 minus 9, 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-9=5"",
    resulting_state=(3, 5),
    comment='""14 minus 9, 5""',
)

# ""5 times 3, 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(15,),
    comment='""5 times 3, 15""',
)

# ""7 plus 9, that could be right, 7 and 9, 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(3, 7, 16),
    comment='""7 plus 9, that could be right, 7 and 9, 16""',
)

# ""9 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 7, 7),
    comment='""9 divided by 3""',
)

# ""3 plus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7=10"",
    resulting_state=(7, 10),
    comment='""3 plus 7""',
)

# ""7 plus 7 is 26"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=26"",
    resulting_state=(3, 9, 26),
    comment='""7 plus 7 is 26"" - calculation error',
    result_calc_error=True,
)

# ""7 and 3, 10"" - this matches their submitted response of ""7+3"" though it's incorrect
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(7, 9, 10),
    comment='""7 and 3, 10"" - this matches their submitted response of ""7+3"" though it\'s incorrect',
)
```"
968,"[1,5,5,10]",10+1,180," 1, 5, 5, 10. Okay. 5 and 5. 5 times 5 is 25. What if we did 5 plus 1? We get 6. Hmm. 6 times 10. No. Divided by 5, that's 12. 6. Or we do 25. 5 times 5. I think I already did that. 25. No. Or we do 10 divided by 2. 15. That'll only be 15. Or we do 10 times... Hmm. If we did 10 times 5, it'd be 50. And we would only have this. So I feel like this turns to a 6. And then we have 6 and 5. 11. Hmm. Hmm. 6 and 10. 6 and 10. 16. No, that's still 21. If we did... 5. 5. Yeah, like 10 divided by... No, no, no. We don't have a 2. But to do 10 divided by 5, which would be 2. No. And then 2 times 5. 10. 11. Hmm. 5 times 10. 50. 50 divided by 5. Nope, that's 10. 11. It's gotta be 5 and 1, which is 6. What about then? 6 times 5, we get 30. Would that bring us 40? 40. Or if we subtracted it, 20. Hmm. More 11. We do 11.","```python
start_state = (1, 5, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""What if we did 5 plus 1? We get 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(5, 6, 10),
    comment='""What if we did 5 plus 1? We get 6""',
)

# ""6 times 10"" from the new state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(5, 60),
    comment='""6 times 10""',
)

# ""Divided by 5, that's 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60/5=12"",
    resulting_state=(12,),
    comment='""Divided by 5, that\'s 12""',
)

# ""10 divided by 2. 15"" - participant seems to be trying different operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(1, 2, 5, 5),
    comment='""10 divided by 5, which would be 2""',
)

# ""2 times 5. 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(1, 5, 10),
    comment='""2 times 5. 10""',
)

# ""5 times 10. 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(1, 5, 50),
    comment='""5 times 10. 50""',
)

# ""50 divided by 5. Nope, that's 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""50/5=10"",
    resulting_state=(1, 10),
    comment='""50 divided by 5. Nope, that\'s 10""',
)

# ""5 and 1, which is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(5, 6, 10),
    comment='""5 and 1, which is 6""',
)

# ""6 times 5, we get 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(10, 30),
    comment='""6 times 5, we get 30""',
)

```"
972,"[1,4,7,12]",12x(7-4-1),25," Alright. I want 12 times 2 would be the simple answer. So, 7 minus 4 minus 1.","```python
start_state = (1, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I want 12 times 2 would be the simple answer"" - participant sets a subgoal of getting 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""I want 12 times 2 would be the simple answer""',
)

# ""7 minus 4 minus 1"" - participant finds a way to make 2
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4-1=2"",
    resulting_state=(2, 12),
    comment='""7 minus 4 minus 1""',
)

# Then they multiply by 12 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment=""Participant multiplies by 12 to reach goal"",
)
```"
973,"[1,3,6,13]",6+3+13+1,181," Okay. This one's harder because I want 6 times 2. I don't know what to do with that 13. This one's harder. I'm struggling. Kind of doing some trial and error here. It's simple. I can just add them all together. Stop trying to be complicated. Hmm? Thought I used all the numbers. Maybe put some parentheses. Not all numbers were used, yet they are all used. That's weird. I've got a 1, a 3, a 6, and a 13. How much more complicated can this be? Okay. 6 plus 3 plus 13 plus 1. . . . . . . .","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I want 6 times 2"" suggests participant is looking for ways to get 12
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""I want 6 times 2"" suggests participant is looking for ways to get 12',
)

# ""I can just add them all together""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3+13+1=23"",
    resulting_state=(23,),
    comment='""I can just add them all together""',
)

# The participant seems to spend the rest of the time checking their work and being confused about why it doesn't equal 24
# They try the same operation again at the end: ""6 plus 3 plus 13 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3+13+1=23"",
    resulting_state=(23,),
    comment='""6 plus 3 plus 13 plus 1""',
)
```"
977,"[2,7,9,13]",(9-7)x13-2),180," You know, 7 times 4 is 28. So how do I get to a 4. 13 minus 9 will give me 4 times 7 minus 2? But, yeah, that doesn't work. I've got the parenthesis, I think, in the wrong places. Okay. Thirteen. Minus 9 is 4 times 7 minus 2. I think that's correct. Oh, no, it's not. That's 26. Try it a different way. 9 minus 7 times... No, I can't use 9 twice. I can't use 9 twice. I can't use 9 times.","```python
start_state = (2, 7, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 4 is 28"" - participant seems to be setting a subgoal of getting 4
graph.set_subgoal(
    (4, 7),
    state_after_subgoal=(28,),
    comment='""7 times 4 is 28"" - participant seems to be setting a subgoal of getting 4',
)

# ""13 minus 9 will give me 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(2, 4, 7),
    comment='""13 minus 9 will give me 4""',
)

# ""times 7 minus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7-2=26"",
    resulting_state=(26,),
    comment='""times 7 minus 2"" participant calculates this equals 26',
)

# ""Try it a different way. 9 minus 7 times...""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 2, 13),
    comment='""9 minus 7""',
)

# The participant then realizes they can't use 9 twice and stops this line of thinking

```"
978,"[1,7,8,10]",((,180," Let's try getting to a 2. So, 10 minus 8 times 7. Nope. Times... Oh, goodness. Times 8 minus 1. Nope. Wrong parentheses. So 10 minus 7 is 3. Uh oh, this is frustrating. It's like I'm doing just trial and error. Okay. Okay. 7 minus 1 is 6. Ah. I want to get 3. 3. Oh, times 8. So I want to do...","```python
start_state = (1, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let's try getting to a 2"" - participant sets subgoal
graph.set_subgoal(
    (2,),
    state_after_subgoal=(24,),
    comment='""Let\'s try getting to a 2""',
)

# ""10 minus 8 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-8)*7=14"",
    resulting_state=(1, 14),
    comment='""10 minus 8 times 7""',
)

# ""Times 8 minus 1"" - participant tries a different operation
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(7, 7, 10),
    comment='""Times 8 minus 1""',
)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(1, 3, 8),
    comment='""10 minus 7 is 3""',
)

# ""7 minus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(6, 8, 10),
    comment='""7 minus 1 is 6""',
)

# ""I want to get 3"" - participant sets new subgoal
graph.set_subgoal(
    (3,),
    state_after_subgoal=(24,),
    comment='""I want to get 3""',
)

# ""Oh, times 8"" - participant seems to be considering multiplying their subgoal of 3 by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""Oh, times 8"" - participant seems to be considering multiplying their subgoal of 3 by 8',
)
```"
981,"[2,2,5,12]",(12/2)x(5-2),180," Okay, the simple answer would be 2 times 12, but in order to do simple, I have to use all the numbers. I could do 4 times 7, but I don't have anything to subtract. I need an 8 times 3. Except all I can see is there's 5, 6, 7, or there's a 6, and a 3, oh, maybe 12 minus 2 minus 2. Okay. That gives me 8, yeah, no, gives me 10, whoops, divided by 5 would give me 2, but I got nothing. 12 divided by 2 gives me 6. Okay, 6 times 5 minus 2, that's 3, not the right answer. So 6 times 3 is 18. I don't know.","```python
start_state = (2, 2, 5, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 12"" - participant notes this but realizes they need to use all numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(2, 5, 24),
    comment='""2 times 12, but in order to do simple, I have to use all the numbers""',
)

# ""I need an 8 times 3"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""I need an 8 times 3""',
)

# ""12 minus 2 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-2-2=8"",
    resulting_state=(5, 8),
    comment='""12 minus 2 minus 2. Okay. That gives me 8""',
)

# ""divided by 5 would give me 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/5=2"",
    resulting_state=(2,),
    result_calc_error=True,
    comment='""divided by 5 would give me 2""',
)

# ""12 divided by 2 gives me 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(2, 5, 6),
    comment='""12 divided by 2 gives me 6""',
)

# ""6 times 5 minus 2, that's 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*(5-2)=18"",
    resulting_state=(18,),
    comment='""6 times 5 minus 2, that\'s 3"" followed by ""So 6 times 3 is 18""',
)
```"
984,"[4,4,4,7]",(7-4)x(4+4),145," 12 plus 7 is 21. 7 times 4 is 28. 4 times 4 is 16, plus 7 is 23. 7 times 4 is 28. 4 plus 4 is 8, plus 28 and 8. 7 minus 4 is 3. 3 times 4 is 12 times 4. 7 minus 4 is 3. 3 times 4 is 12 times 4. four plus four eight four plus four is eight twenty seven okay so there's four is twenty no no four minus seven minus four is three times four twelve times four four plus four plus four it's twelve um seven plus four is eleven plus sixteen and okay um seven times seven minus four is three and then four plus four is eight three times eight","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 7 is 21"" - participant likely got 12 from 4+4+4
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4+4=12"",
    resulting_state=(7, 12),
    comment='""12 plus 7 is 21"" - participant first computes 4+4+4',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=21"",
    resulting_state=(21,),
    result_calc_error=True,
    comment='""12 plus 7 is 21""',
)

# Going back to start state for new attempt
curr_state = graph.move_to_node(start_state)
# ""7 times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(4, 4, 28),
    comment='""7 times 4 is 28""',
)

# ""4 times 4 is 16, plus 7 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+7=23"",
    resulting_state=(4, 23),
    comment='""4 times 4 is 16, plus 7 is 23""',
)

# ""4 plus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(4, 7, 8),
    comment='""4 plus 4 is 8""',
)

# ""7 minus 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 4, 4),
    comment='""7 minus 4 is 3""',
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(4, 12),
    comment='""3 times 4 is 12""',
)

# The participant repeats some calculations, then says ""four plus four eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(4, 7, 8),
    comment='""four plus four eight""',
)

# ""seven minus four is three and then four plus four is eight three times eight""
# The participant has found the solution: (7-4)*(4+4)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4)*(4+4)=24"",
    resulting_state=(24,),
    comment='""seven minus four is three and then four plus four is eight three times eight"" - participant finds solution',
)
```"
985,"[1,3,6,9]",,180," Okay, 4 plus 6 is 10, 19. 9 minus 6 is 3, times 3 is 9, is 10. Okay, 6 times 3 is 18, plus 10. Okay, 9 minus 6 is 3, oh wait, wait, 9 minus 3 is 10. 9 minus 6 is 3. Okay, 9 minus 6 is 3, 3 times 3. What are you doing? three times oh one and three times one three times one oh huh i use the numbers no delete delete delete delete delete delete delete six times three is eighteen no okay how about nine minus nine times nine divided by parentheses parentheses nine divided by three it's three and six times three ah six times one so what i've used all the numbers why is it not telling me why is it telling me that's not working nine divided by three is three three times six oh that doesn't even compute okay nine divided by three is three six and six is eighteen four times six is twenty four four six times three is eighteen eighteen plus nine nine okay","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 6 is 10, 19"" - not clear where 4 came from, possibly meant 3+6=9
new_state = graph.explore_operation(
    curr_state,
    operation=""3+6=9"",
    resulting_state=(1, 9, 9),
    comment='""4 plus 6 is 10"" - likely meant 3+6=9',
)

# ""9 minus 6 is 3, times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-6)*3=9"",
    resulting_state=(1, 9),
    comment='""9 minus 6 is 3, times 3 is 9""',
)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 9, 18),
    comment='""6 times 3 is 18""',
)

# ""9 minus 3 is 10"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=10"",
    resulting_state=(1, 6, 10),
    comment='""9 minus 3 is 10"" - calculation error',
    result_calc_error=True,
)

# ""9 minus 6 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(1, 3, 3),
    comment='""9 minus 6 is 3""',
)

# ""three times one""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*1=3"",
    resulting_state=(3, 6, 9),
    comment='""three times one""',
)

# ""six times three is eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 9, 18),
    comment='""six times three is eighteen""',
)

# ""nine divided by three is three""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(1, 3, 6),
    comment='""nine divided by three is three""',
)

# ""six times three is eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 9, 18),
    comment='""six times three is eighteen""',
)

```"
986,"[1,8,8,12]",,180," Okay, 12 minus 8 is 4, 4 plus 8, 12 minus 1 is 11. 9 plus 8 is 17 plus 12. Too much. 13 plus 8 is 21. 16 minus 1 is 15 plus 12. 9 times. Okay. 12. Okay. 7 times 5 is 6. 8 divided by b is 1. 12 times 8 is 2. 8 minus 1 is 7. 56. Okay. 8 divided by, no. I don't know. 12 divided by 8. 29. 8 plus 12 is 29. 5. 8 times 1. Wow. Huh. 1 times 8. 12. 12 plus 16 is 28. Oh my gosh. Yeah. 8 plus 8 is 16. 9 is 1. 15 plus. No idea. Why is it telling me I'm not using all the numbers? I don't know. Not getting it right. 3 times 9. Okay. It's 64. 12. Oh, yeah.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 8),
    comment='""12 minus 8 is 4""',
)

# ""4 plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(1, 12),
    comment='""4 plus 8""',
)

# ""12 minus 1 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(8, 8, 11),
    comment='""12 minus 1 is 11""',
)

# ""8 minus 1 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(7, 8, 12),
    comment='""8 minus 1 is 7""',
)

# ""8 plus 12 is 29"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=29"",
    resulting_state=(1, 8, 29),
    comment='""8 plus 12 is 29"" - calculation error',
    result_calc_error=True,
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(1, 12, 16),
    comment='""8 plus 8 is 16""',
)

# ""12 plus 16 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+16=28"",
    resulting_state=(1, 28),
    comment='""12 plus 16 is 28""',
)
```"
989,"[2,3,13,13]",3x13-(13+2),107," Okay, 2, 3, 13, 13, 2, 3, 13, and 13. So, okay, we've got 2 is 13 times 2 is 26. 13 times 2 is 26. 13 times 3 is 36. Wait, 26, 36, 39. 3 times 2 is 6 plus 13, 19. 13 plus 2 is 15. 13 times 3. Oh. Okay, so 3 times 13 is 36. It's 39 and 39 minus 15. So, 39 minus 15. Minus 15. 13 minus 2. So, we got 39 minus, wait, 2 plus, plus 15. Okay. So, 39 minus, 13 plus 2, 15.","```python
start_state = (2, 3, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(3, 13, 26),
    comment='""13 times 2 is 26""',
)

# ""13 times 3 is 36"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=36"",
    resulting_state=(2, 13, 36),
    comment='""13 times 3 is 36"" - calculation error',
    result_calc_error=True,
)

# ""3 times 2 is 6 plus 13, 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3*2)+13=19"",
    resulting_state=(13, 19),
    comment='""3 times 2 is 6 plus 13, 19""',
)

# ""13 plus 2 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(3, 13, 15),
    comment='""13 plus 2 is 15""',
)

# ""3 times 13 is 36. It's 39"" - participant corrects their earlier calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(2, 13, 39),
    comment='""3 times 13 is 39"" - participant corrects earlier calculation',
)

# ""39 minus 15"" - participant uses the 15 they computed earlier (13+2)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39-(13+2)=24"",
    resulting_state=(24,),
    comment='""39 minus 15"" - participant subtracts 13+2 from 39',
)

```"
991,"[7,9,11,11]",11+11+9-7,31," Oh, yikes, those are ugly numbers. 7, 9, 11, 11. 20 and 18, 22, 31, ah, 7. Okay, so let's do 11 plus 11 is 22, add 9 is 31, then minus the 7 gives us 22. All right, so let's do 11 plus 11 is 24.","```python
start_state = (7, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(7, 9, 22),
    comment='""11 plus 11 is 22""',
)

# ""add 9 is 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+9=31"",
    resulting_state=(7, 31),
    comment='""add 9 is 31""',
)

# ""then minus the 7 gives us 22"" - this is a calculation error, 31-7=24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""31-7=22"",
    resulting_state=(22,),
    comment='""then minus the 7 gives us 22"" - this is a calculation error',
    result_calc_error=True,
)

# ""All right, so let's do 11 plus 11 is 24"" - another calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=24"",
    resulting_state=(7, 9, 24),
    comment='""All right, so let\'s do 11 plus 11 is 24"" - calculation error',
    result_calc_error=True,
)
```"
992,"[2,3,7,9]",,180," Okay, 2, 3, 7, 9. So 7 and 9 plus would be 16. Add 3 would be 19, 21, that's not going to work. So what do we got here? I'm going to take the 9 away. I'm going to have to make 15. I don't really have that either. This is an ugly one. 14, 26, no, that won't do it. 27, 34, no, 27, no. Hmm. You guys might have stumped me on the first one. I'm kind of up at 33. I can do 27. 23. Yeah, I'm trying here, buddy. This is a hard problem and I'm not sure how to solve it. 18, 25, no. 18, 25, no. 18, 25, no. 18, 25, no. One, two, one more thing. It's been 3 minutes yet because we're not It's been 3 minutes yet because really I'm not going to solve this one. I have no idea how to solve this problem. Which really sucks because it shouldn't be that hard of a problem to do. But here we are. and you get to listen to me sit here and blah blah blah blah blah because I have no idea how to solve this thing and you guys want me to talk so this is me talking and I'm running out of words to say blah blah blah blah blah blah blah blah blah blah blah blah I have no idea people","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and 9 plus would be 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(2, 3, 16),
    comment='""7 and 9 plus would be 16""',
)

# ""Add 3 would be 19, 21"" - participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+3+2=21"",
    resulting_state=(21,),
    comment='""Add 3 would be 19, 21""',
)

# ""I'm going to take the 9 away. I'm going to have to make 15"" suggests participant is setting a subgoal
curr_state = graph.move_to_node(start_state)
graph.set_subgoal(
    (15,),
    state_after_subgoal=(24,),
    comment='""I\'m going to have to make 15""',
)

# ""14"" - participant may be computing 7*2
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 9, 14),
    comment='""14""',
)

# ""27"" - participant may be computing 9*3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(2, 7, 27),
    comment='""27""',
)

# ""34"" - participant may be computing 27+7
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27+7=34"",
    resulting_state=(2, 34),
    comment='""34""',
)

# ""18, 25"" - participant may be computing 9*2=18 and then 18+7=25
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(3, 7, 18),
    comment='""18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(3, 25),
    comment='""25""',
)

# The rest of the transcript is the participant expressing frustration and filling time
```"
994,"[3,9,13,13]",,180," Hey look! More unsolvable problems! Yay team! These are always fun when you can't solve problems. What a freaking waste. 3, 9, 13, and 13. You tell me how those make 24. Seriously, how does 3 and 9 and 13 and 13, with some mathematical things, make the number 24? I don't see it. Do you see it? This is just absolutely asinine at this point. I mean, if I can make it 2, I could see 26 minus 2. But no, 9 divided by 3. 9 divided by 3 is 3. And nothing goes into 13, so there's no division. Other than 13 itself gives me a 1. 1 doesn't do me a lot of darn bit of good now, does it? Because the numbers would be 3 and 9. And that would be 27 multiplied. And addition, obviously, is not an answer here. It's 26. 13 and 13 is 26. Addition... 35... Or 26 plus 9. 30 would be 29. But you have minus 9, which is 20. So again, here we are with me just talking to myself. Seriously, I wish I had a book nearby. I could just read to you. Read to you for the next few minutes. Actually, I've decided I'm going to grab the Bible on my phone. And we're going to do religious study here. Because, really... It's better for us to learn a little bit about the Bible than it is me trying to solve this problem at this point. Here we go. Oh... Apparently I haven't been in my Bible app lately. This is not good. But that's okay. Because, you know, sometimes in life, we just can't solve problems. And that's where we're at right now. And I'm really sorry I don't have answers here. But hey, look. Here's the Bible verse for the day. Matthew 18, 20. For where two or three have gathered together in my name, I am there in their midst. There you go. You've got a Bible verse for the day. And actually, since there's a few more problems here, we're going to probably read through some more here. Hey, look. Matthew 6. Beware of practicing your righteousness before men to be noticed by them. Otherwise, you have no reward with your Father who is in heaven. So when you...","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 13, 13),
    comment='""9 divided by 3 is 3""',
)

# ""13 itself gives me a 1"" - participant seems to be dividing 13 by 13
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 3, 9),
    comment='""13 itself gives me a 1""',
)

# ""that would be 27 multiplied"" - participant seems to be multiplying 3 and 9
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(13, 13, 27),
    comment='""that would be 27 multiplied""',
)

# ""13 and 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13 and 13 is 26""',
)

# ""26 plus 9. 30 would be 29"" - participant seems to be adding 26+9 but miscalculates
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+9=29"",
    resulting_state=(3, 29),
    comment='""26 plus 9. 30 would be 29""',
    result_calc_error=True,
)

# The rest of the transcript contains the participant reading Bible verses and not attempting to solve the problem
```"
1002,"[3,7,7,9]",,180, Nine divided by three is three. Seven times nine is what? Seven times nine is five. Nine divided by three is fifty-four. Sixty-three. Sixty-three. And sixty-three divided by two. Divided by seven. No. Divided by three. Sixty-three divided by three is twenty-three. No. Twenty-one plus three. Nine times seven is sixty-three. Divided by three gives us twenty-one. No. That doesn't do it. Seven times seven is forty-nine. Divided by nine doesn't give us an answer. Seven plus three is ten. Plus sixteen is twenty-six. What about seven minus three is four. Times nine is thirty-six. Nine minus seven is two. Times seven is fourteen. No. Nine times three is twenty-seven. Nine minus seven is two. Times three is six. Times seven is twenty-seven. No. Seven plus seven is fourteen. Fourteen divided by three. Can't do that. Nine plus seven is sixteen. Sixteen. Times sixteen divided by three. Can't be done evenly.,"```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Nine divided by three is three""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 7, 7),
    comment='""Nine divided by three is three""',
)

# ""Seven times nine is what? Seven times nine is five"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=5"",
    resulting_state=(3, 5, 7),
    comment='""Seven times nine is five"" - calculation error',
    result_calc_error=True,
)

# ""Nine divided by three is fifty-four"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=54"",
    resulting_state=(7, 7, 54),
    comment='""Nine divided by three is fifty-four"" - calculation error',
    result_calc_error=True,
)

# ""Nine times seven is sixty-three""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 7, 63),
    comment='""Nine times seven is sixty-three""',
)

# ""Divided by three gives us twenty-one""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63/3=21"",
    resulting_state=(7, 21),
    comment='""Divided by three gives us twenty-one""',
)

# ""Seven times seven is forty-nine""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""Seven times seven is forty-nine""',
)

# ""Divided by nine doesn't give us an answer""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/9=5.44"",
    resulting_state=(3, 5.44),
    comment='""Divided by nine doesn\'t give us an answer""',
)

# ""Seven plus three is ten""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(7, 9, 10),
    comment='""Seven plus three is ten""',
)

# ""Seven minus three is four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 7, 9),
    comment='""Seven minus three is four""',
)

# ""Times nine is thirty-six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(7, 36),
    comment='""Times nine is thirty-six""',
)

# ""Nine minus seven is two""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""Nine minus seven is two""',
)

# ""Times seven is fourteen""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 14),
    comment='""Times seven is fourteen""',
)

# ""Nine times three is twenty-seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""Nine times three is twenty-seven""',
)

# ""Nine minus seven is two""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""Nine minus seven is two""',
)

# ""Times three is six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 7),
    comment='""Times three is six""',
)

# ""Times seven is twenty-seven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(42,),
    comment='""Times seven is twenty-seven"" - calculation error',
    result_calc_error=True,
)

# ""Seven plus seven is fourteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(3, 9, 14),
    comment='""Seven plus seven is fourteen""',
)

# ""Fourteen divided by three"" participant considers but rejects this operation

# ""Nine plus seven is sixteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(3, 7, 16),
    comment='""Nine plus seven is sixteen""',
)

# ""Times sixteen divided by three"" participant considers but rejects this operation
```"
1007,"[3,5,10,10]",,180," 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10 minus 3 is 7. 10 minus 5 is 5. 7 times 5 is 35. 5 minus 3 is 2. Plus 20, 24. Um, no. no. 10 divided by 5 is 2, times 10 plus 3 is 23, one off. 10 plus 10 plus 5 minus 3 is 22. 10 divided by 5 is 2, times 10 plus 3 is 15, times 10 plus 3 is 18, one off. 10 times 10 is 50, 50 divided by 3, doesn't work out either. Uh oh. Three times 10 is 30 divided by 5 is 6. Damn. 10 divided by 10 is 1, no. 10 divided by 5 is 2, times 10 is 20, no. Huh, this is not working out. Hmm. 10 minus 5 is 5. Times 3 plus 10, no. 10 minus 5 is 5, minus 3, so this is an 8 combined. 10 minus 8 is 2, times 10.","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 10),
    comment='""10 minus 3 is 7""',
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 10),
    comment='""10 minus 5 is 5""',
)

# ""7 times 5 is 35""
curr_state = graph.move_to_node((5, 7, 10))
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(10, 35),
    comment='""7 times 5 is 35""',
)

# ""5 minus 3 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 10, 10),
    comment='""5 minus 3 is 2""',
)

# ""Plus 20, 24"" is unclear what numbers are being added

# ""10 divided by 5 is 2, times 10 plus 3 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*10+3=23"",
    resulting_state=(23,),
    comment='""10 divided by 5 is 2, times 10 plus 3 is 23""',
)

# ""10 plus 10 plus 5 minus 3 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+5-3=22"",
    resulting_state=(22,),
    comment='""10 plus 10 plus 5 minus 3 is 22""',
)

# ""10 divided by 5 is 2, times 10 plus 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*10+3=15"",
    resulting_state=(15,),
    comment='""10 divided by 5 is 2, times 10 plus 3 is 15""',
    result_calc_error=True,
)

# ""10 times 10 is 50, 50 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*10)/3=33.33"",
    resulting_state=(5, 33.33),
    comment='""10 times 10 is 50, 50 divided by 3""',
)

# ""Three times 10 is 30 divided by 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3*10)/5=6"",
    resulting_state=(6, 10),
    comment='""Three times 10 is 30 divided by 5 is 6""',
)

# ""10 divided by 10 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 3, 5),
    comment='""10 divided by 10 is 1""',
)

# ""10 divided by 5 is 2, times 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*10=20"",
    resulting_state=(3, 20),
    comment='""10 divided by 5 is 2, times 10 is 20""',
)

# ""10 minus 5 is 5. Times 3 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-5)*3+10=25"",
    resulting_state=(25,),
    comment='""10 minus 5 is 5. Times 3 plus 10""',
)

# ""10 minus 5 is 5, minus 3, so this is an 8 combined""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5-3=2"",
    resulting_state=(2, 10),
    comment='""10 minus 5 is 5, minus 3, so this is an 8 combined""',
)

# ""10 minus 8 is 2, times 10""
curr_state = graph.move_to_node((2, 10))
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(20,),
    comment='""10 minus 8 is 2, times 10""',
)
```"
1015,"[11,13,13,13]",(11+13)/13/13,180," Alright, eleven, thirteen, thirteen, thirteen. Oh boy. Thirteen. Thirteen times thirteen. Let me know what that is. Thirteen times thirteen... This one's sixty-nine. Sixty-nine. Yikes. I don't know this one. This one's hard. Talking to the computer. Eleven plus... Thirteen. Eleven. Twenty-three. That's twenty-four. So, one plus thirteen. And then I can do thirteen divided by thirteen. That would be... alright. Eleven plus thirteen. One plus thirteen. Eleven plus thirteen. Eleven. Okay. Eleven plus thirteen. Thirteen. Thirteen. I'm too tired for this. Um... One plus thirteen times thirteen. Divide that by thirteen. Thirteen. Times half thirteen. Thirteen. Yep. One plus thirteen. Thirteen. Thirteen. Thirteen.","```python
start_state = (11, 13, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Thirteen times thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(11, 13, 169),
    comment='""Thirteen times thirteen""',
)

# ""Eleven plus... Thirteen"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(13, 13, 24),
    comment='""Eleven plus... Thirteen""',
)

# ""one plus thirteen"" - this seems to be a transcription error since there is no 1 in the start state
# They likely meant ""eleven plus thirteen"" again since they repeat this later

# ""thirteen divided by thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 11, 13),
    comment='""thirteen divided by thirteen""',
)

# ""Eleven plus thirteen"" is repeated several times
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(13, 13, 24),
    comment='""Eleven plus thirteen"" repeated',
)

# ""One plus thirteen times thirteen. Divide that by thirteen""
# This seems to be another transcription error where ""one"" should be ""eleven""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11+13)/13/13=0.14"",
    resulting_state=(0.14,),
    comment='""(eleven) plus thirteen times thirteen. Divide that by thirteen""',
)
```"
1017,"[3,5,6,11]",(6x3)-5+11,156," Okay, 3, 5, 6, 11. If 3 plus 5 is 8, 6, how much would this be? 6 plus 5 is 11, plus 11 would be 22, plus 3 would be 25. So I need to do, I don't know, 11 minus 6 would be 5. 5 times 3. Oh, but I can only use them one time. Oh my gosh. 5 times 3 is 15. Plus 11 is 36. That's too much. I don't know. This is hard. 11 plus 5. 5 is 16. Mmm, I don't know. I don't know. This is so hard. Let's see. 6 times 3 is 18. If we do 6 times 3 is 18. Minus 5 is 13. Plus 11 is 24?","```python
start_state = (3, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 plus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(6, 8, 11),
    comment='""3 plus 5 is 8""',
)

# ""6 plus 5 is 11, plus 11 would be 22, plus 3 would be 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5+11+3=25"",
    resulting_state=(25,),
    comment='""6 plus 5 is 11, plus 11 would be 22, plus 3 would be 25""',
)

# ""11 minus 6 would be 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(3, 5, 5),
    comment='""11 minus 6 would be 5""',
)

# ""5 times 3 is 15. Plus 11 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3+11=36"",
    resulting_state=(6, 36),
    result_calc_error=True,
    comment='""5 times 3 is 15. Plus 11 is 36""',
)

# ""11 plus 5. 5 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(3, 6, 16),
    comment='""11 plus 5. 5 is 16""',
)

# ""6 times 3 is 18. Minus 5 is 13. Plus 11 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3-5+11=24"",
    resulting_state=(24,),
    comment='""6 times 3 is 18. Minus 5 is 13. Plus 11 is 24""',
)
```"
1023,"[5,5,10,10]",,182," 5 plus 5 is 10, plus 10 plus 10 is 30. So 10 minus 5 is 5. So that's not going to work. Oh no. What about 5 plus 10 is 15? 5 times 5 is... Oh, I could divide it. 5... 10 divided by 5 is 2. What if I did 10 times 10? 10... 5 plus 5... 5 minus 5 is 0. 10 divided by 5 is 2. Times... 10 is 20. I don't know how to do this one. 5 plus 10 is 15. 15... minus 5... is 10... plus 10. Ten times five is twenty-five. Twenty-five. Twenty-five minus five is twenty. Okay. Ten times ten is a hundred. Five times five is twenty-five. Oh, no. Ten times five is fifty. Ten times five is fifty. Fifty minus fifty is twenty-five. So that doesn't make sense. Ten times five is fifty. Divided by ten is five. Okay. I don't think there's any way to do it because it's only multiples of five and ten. I'm going to say it, but...","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 5 is 10, plus 10 plus 10 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+10+10=30"",
    resulting_state=(30,),
    comment='""5 plus 5 is 10, plus 10 plus 10 is 30""',
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 10),
    comment='""10 minus 5 is 5""',
)

# ""5 plus 10 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+10=15"",
    resulting_state=(5, 10, 15),
    comment='""5 plus 10 is 15""',
)

# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 10),
    comment='""10 divided by 5 is 2""',
)

# ""10 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 5, 100),
    comment='""10 times 10""',
)

# ""5 minus 5 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-5=0"",
    resulting_state=(0, 10, 10),
    comment='""5 minus 5 is 0""',
)

# ""10 divided by 5 is 2. Times... 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*10=20"",
    resulting_state=(5, 20),
    comment='""10 divided by 5 is 2. Times... 10 is 20""',
)

# ""5 plus 10 is 15. 15... minus 5... is 10... plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+10-5+10=20"",
    resulting_state=(20,),
    comment='""5 plus 10 is 15. 15... minus 5... is 10... plus 10""',
)

# ""Ten times five is twenty-five"" (calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=25"",
    resulting_state=(5, 10, 25),
    comment='""Ten times five is twenty-five""',
    result_calc_error=True,
)

# ""Twenty-five minus five is twenty""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-5=20"",
    resulting_state=(10, 20),
    comment='""Twenty-five minus five is twenty""',
)

# ""Ten times ten is a hundred""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 5, 100),
    comment='""Ten times ten is a hundred""',
)

# ""Five times five is twenty-five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(10, 10, 25),
    comment='""Five times five is twenty-five""',
)

# ""Ten times five is fifty""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(5, 10, 50),
    comment='""Ten times five is fifty""',
)

# ""Ten times five is fifty. Divided by ten is five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*5)/10=5"",
    resulting_state=(5, 5),
    comment='""Ten times five is fifty. Divided by ten is five""',
)

# The participant then concludes that the problem might be impossible
```"
1027,"[1,4,4,4]",(4+4)x(4-1),30," Okay, let's see, 4, we have 4, 4, 4, and 1, so 8 times 3 equals 24, so we can make an 8 out of 4 plus 4, 4 minus 1 is 3, so we can do bracket 4 plus 4 gives us 8 times bracket 4 minus 1 is 3.","```python
start_state = (1, 4, 4, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 equals 24"" - participant sets subgoal of getting 8 and 3
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3 equals 24"" - participant sets subgoal of getting 8 and 3',
)

# ""we can make an 8 out of 4 plus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(1, 4, 8),
    comment='""we can make an 8 out of 4 plus 4""',
)

# ""4 minus 1 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 8),
    comment='""4 minus 1 is 3""',
)

# Then the participant multiplies 8 and 3 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""bracket 4 plus 4 gives us 8 times bracket 4 minus 1 is 3""',
)
```"
1029,"[2,4,7,12]",,180," Okay, so it looks like we have 2, 4, 7, 12. Let's think about this for a second. So we have 7 times 12 will give us what? Um, ba-ba-ba-ba-ba-ba, 40, um, 80, 84. And then 84 divided by 4 would be, what, 21 plus 2, 23? Not quite. Let's see if we add these numbers up. So we have 19, 23, 21. 21, that's not quite. Um, let's see if we can, we have a 7 here. So maybe that's interesting. 7 minus 4, we can get a 3 out of that. 3 times 12 is 36. 18, not quite. Let's maybe do 4 times, uh, we can get a 6. So let's just try playing around with 6 a little bit. So 6, 12 divided by 2 is 6. 12 divided by, uh, 4 is 3. Mmm, let's see, 3 times 7 is 21. We get 23. Um, 4 divided by 2 is 2. Uh, we can get 6 and 7. That doesn't get us to 24. Um, let's see. So we have, we can get 19 pretty easily this way. We needed 5. Is there any way to get 5 out of this? I don't, I don't see that. Um, we can get 3. We can get a 2. That makes 24. So let's focus on this. 24, not quite. So what do we do with the 7? Um, 7 times... Uh, 7 times 12. Let's do this again. That's 84. 84 divided by 4. No, that's not quite right. Um, let's look at this. 12 and 2. So we can get 10. So, 10... Okay, let's think about this number. So, 48. So 2 times this is 48. Can we get 48 out of these numbers?","```python
start_state = (2, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 12 will give us what? Um, ba-ba-ba-ba-ba-ba, 40, um, 80, 84""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(2, 4, 84),
    comment='""7 times 12 will give us what? Um, ba-ba-ba-ba-ba-ba, 40, um, 80, 84""',
)

# ""And then 84 divided by 4 would be, what, 21 plus 2, 23?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""84/4+2=23"",
    resulting_state=(23,),
    comment='""And then 84 divided by 4 would be, what, 21 plus 2, 23?""',
)

# ""Let's see if we add these numbers up. So we have 19, 23, 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4+7+12=25"",
    resulting_state=(25,),
    comment='""Let\'s see if we add these numbers up""',
)

# ""7 minus 4, we can get a 3 out of that""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(2, 3, 12),
    comment='""7 minus 4, we can get a 3 out of that""',
)

# ""3 times 12 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(2, 36),
    comment='""3 times 12 is 36""',
)

# ""12 divided by 2 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(4, 6, 7),
    comment='""12 divided by 2 is 6""',
)

# ""12 divided by, uh, 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(2, 3, 7),
    comment='""12 divided by, uh, 4 is 3""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 21),
    comment='""3 times 7 is 21""',
)

# ""4 divided by 2 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/2=2"",
    resulting_state=(2, 7, 12),
    comment='""4 divided by 2 is 2""',
)

# ""12 and 2. So we can get 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-2=10"",
    resulting_state=(4, 7, 10),
    comment='""12 and 2. So we can get 10""',
)

# The participant seems to be setting a subgoal of getting to 24 and then multiplying by 2
graph.set_subgoal(
    subgoal_state=(24,),
    comment='""So, 48. So 2 times this is 48"" - participant seems to be setting a subgoal of getting 24'
)

```"
1031,"[1,1,4,6]",(6x4)/1/1,21," Okay, 24 again. Okay, so we have factors of 6, 4, 6 and 4. 6 times 4 is 24, so I can do 6 times 4, close bracket. We're left with 1, so I can divide it by 1, divide it by 1.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 1, 24),
    comment='""6 times 4 is 24""',
)

# ""so I can divide it by 1, divide it by 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24/1/1=24"",
    resulting_state=(24,),
    comment='""so I can divide it by 1, divide it by 1""',
)
```"
1032,"[5,5,8,13]",(13-5-5)x8,24," Okay, again, let's see, we have 25, 8, so 8 is a factor of 24, so if we can get 3 out of that, so I can do, actually, so I see 13 minus 5 minus 5 gives us 3, and then 3 times 8 equals 24.","```python
start_state = (5, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 is a factor of 24, so if we can get 3 out of that"" - participant is setting a subgoal to get 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 is a factor of 24, so if we can get 3 out of that""',
)

# ""13 minus 5 minus 5 gives us 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5-5=3"",
    resulting_state=(3, 8),
    comment='""13 minus 5 minus 5 gives us 3""',
)

# ""and then 3 times 8 equals 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""and then 3 times 8 equals 24""',
)
```"
1033,"[3,3,6,12]",3+3+6+12,148," Okay, um, let's see. We have 12, so if we can get a 2 out of this, that would give us 24. Let's keep looking. We have 18, um, so we can get a 6 out of this. So 6 times 4 equals 24. So can we get a 6 out of these guys? Um, I'm sorry, a 4 out of these guys. So we can get a 4 out of this, but that leaves us with a 3 left over. Okay, um, let's see. We can add 3 to this to get 9. That's not a factor. We can add 3 to this to get 15. That's not a factor. So let's focus on the 6 and try to get a 4 out of these. So if we do, I'm thinking maybe, well, I guess we could divide 6 by 3, get a 2, times 12 is 24, but then we're left with a 3. Uh, we can get 36, maybe. Is there any way we can get, um, let's see, or we can get 12 divided by 3. It's 4, no. Uh, 6 divided by 3 is 2. No, uh, 3 divided by 3 is 1. 3 divided by 3 minus 3 is 0. That doesn't help us. 6 minus 3 is 3. Does that help us? So we just have 3, 3, 12. Uh, I don't think that helps us. I don't think that helps us either, because we would have 36, and then a 3 left over would be 12, if we divide it by 3. Um, 6 minus, 12 minus 6 is 6. Uh, 6 is a factor of 24. I don't think that helps. Um, if we add all these together. Oh, yeah. If we just add all these together, like this is 24, right? 3 plus 3 plus 12, or 6, 3 plus 3 plus 6 plus 12 equals 24. Oh.","```python
start_state = (3, 3, 6, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We have 12, so if we can get a 2 out of this, that would give us 24"" 
# This suggests the participant is setting a subgoal to get 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""We have 12, so if we can get a 2 out of this, that would give us 24""',
)

# ""We have 18"" - participant seems to be adding some numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12=18"",
    resulting_state=(3, 3, 18),
    comment='""We have 18""',
)

# ""6 times 4 equals 24"" - participant sets another subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 times 4 equals 24""',
)

# ""we can add 3 to this to get 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(3, 9, 12),
    comment='""we can add 3 to this to get 9""',
)

# ""We can add 3 to this to get 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+3=15"",
    resulting_state=(3, 6, 15),
    comment='""We can add 3 to this to get 15""',
)

# ""divide 6 by 3, get a 2, times 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6/3)*12=24"",
    resulting_state=(3, 24),
    comment='""divide 6 by 3, get a 2, times 12 is 24""',
)

# ""we can get 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(3, 6, 36),
    comment='""we can get 36""',
)

# ""12 divided by 3. It's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(3, 4, 6),
    comment='""12 divided by 3. It\'s 4""',
)

# ""6 divided by 3 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 3, 12),
    comment='""6 divided by 3 is 2""',
)

# ""3 divided by 3 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 6, 12),
    comment='""3 divided by 3 is 1""',
)

# ""6 minus 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3, 12),
    comment='""6 minus 3 is 3""',
)

# ""12 minus 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 3, 6),
    comment='""12 minus 6 is 6""',
)

# Finally ""If we just add all these together"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3+6+12=24"",
    resulting_state=(24,),
    comment='""If we just add all these together""',
)
```"
1034,"[4,7,12,12]",(7-(12/12))x4,80," Okay, so we have 12, 12, 7, 4, and a 4 is a factor of 24. We gotta get rid of these numbers, so maybe we can do, oh, I see, 12 divided by 12 would be 1, plus 7 is 8, and times 4 would be 24, so we'll do 12, um, divided by 12 is 1, plus 7 is 8, and times 4 is 24. Close bracket, and then I'll just put a bracket in the front, oh, so you have to go back over and do this again. So, double bracket, 12 divided by 12 is 1, plus 7, close bracket, times 4, oh wait, no, that's not right, that would be 8 times 4, that would be 32. So we have 8, oh, we can get 6 times 4, okay, 6 times 4, because we can do 7 minus, close bracket, open bracket, 12, 12 is a 6 times 4.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 is a factor of 24"" suggests participant is thinking about using 4 to get to 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 is a factor of 24"" suggests participant is thinking about using 4 to get to 24',
)

# ""12 divided by 12 would be 1, plus 7 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12+7=8"",
    resulting_state=(4, 8),
    comment='""12 divided by 12 would be 1, plus 7 is 8""',
)

# ""and times 4 would be 24"" - participant multiplies by 4 from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(12, 32),
    comment='""and times 4 would be 24"" but participant realizes this gives 32',
)

# ""oh wait, no, that's not right, that would be 8 times 4, that would be 32""
# Participant realizes this won't work and tries a new approach

# ""7 minus, close bracket, open bracket, 12, 12 is a"" suggests they're trying 7-(12/12)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-(12/12)=6"",
    resulting_state=(4, 6),
    comment='""7 minus, close bracket, open bracket, 12, 12 is a""',
)

# ""6 times 4"" - participant multiplies result by 4
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""6 times 4""',
)
```"
1035,"[4,7,7,8]",(4-(7/7))x8,25," Okay, we know that 8 and is a factor of 24, so we need to get 3 out of this. It looks like we can do 4 minus 7 divided by 7 is 1. So bracket minus 7 divided by 7. That whole thing expression is going to be 3 times 8 is 24.","```python
start_state = (4, 7, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 is a factor of 24, so we need to get 3"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 is a factor of 24, so we need to get 3""',
)

# ""4 minus 7 divided by 7 is 1"" - participant actually means this will give 3 (4-(7/7)=3)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-(7/7)=3"",
    resulting_state=(3, 8),
    comment='""4 minus 7 divided by 7""',
)

# ""That whole thing expression is going to be 3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""That whole thing expression is going to be 3 times 8 is 24""',
)
```"
1036,"[2,3,5,13]",(13-5-2)x3,180," The target number is 24. How about we try parentheses, 5, minus, 2, so that's 3. I'm going to try something different. How about 5. How about 5 plus 2. This is impossible to do. So that's 10. 10 plus 3. 5 plus 2 is 10 plus 3 is 13. How about 5 plus 3. How about 5 times 3 equals 15. Okay, 15 minus 2 equals 13. 5 times 3 is 15. Minus, I don't know how to do this. 5 plus 13. That's 18. 18 minus 2 is 16. 16. Nope. I'm going back to the drawing board. How about 13 minus 5. So that's 13 minus 5 which equals 1, 2, 3 equals 8. 13 minus 5 minus 2. That's 6 times 3. Okay, so 13 minus 5 is 8. 8.","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""parentheses, 5, minus, 2, so that's 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 3, 13),
    comment='""parentheses, 5, minus, 2, so that\'s 3""',
)

# ""How about 5 plus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+2=7"",
    resulting_state=(3, 7, 13),
    comment='""How about 5 plus 2""',
)

# ""5 plus 2 is 10 plus 3 is 13"" - participant made calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+2+3=13"",
    resulting_state=(13, 13),
    comment='""5 plus 2 is 10 plus 3 is 13"" - participant made calculation error',
    result_calc_error=True,
)

# ""How about 5 times 3 equals 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(2, 13, 15),
    comment='""How about 5 times 3 equals 15""',
)

# ""15 minus 2 equals 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-2=13"",
    resulting_state=(13, 13),
    comment='""15 minus 2 equals 13""',
)

# ""5 plus 13. That's 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+13=18"",
    resulting_state=(2, 3, 18),
    comment='""5 plus 13. That\'s 18""',
)

# ""18 minus 2 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-2=16"",
    resulting_state=(3, 16),
    comment='""18 minus 2 is 16""',
)

# ""13 minus 5. So that's 13 minus 5 which equals 1, 2, 3 equals 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(2, 3, 8),
    comment='""13 minus 5. So that\'s 13 minus 5 which equals 8""',
)

# ""13 minus 5 minus 2. That's 6 times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(3, 6),
    comment='""13 minus 5 minus 2. That\'s 6""',
)

# Then ""times 3"" to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(18,),
    comment='""times 3""',
)
```"
1044,"[1,2,3,3]",(3x2)x(3+1),58," This is annoying. So the target number is 24. So 3 times 3 is 9. 9 times 3, 9, 18, 24. How about we do this one? 3 times 3, that's 9, plus, or times, 2 plus 1. So that's 9 times 3, 9, 18, 27. Oh, how about 9 times 2, 9, 18, 27. Okay, so back to the draw. How about 3 times 2 is 6. 6 times 3, 9, 18, 27. 6 times 3 plus 1.","```python
start_state = (1, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 2, 9),
    comment='""3 times 3 is 9""',
)

# ""9 times 3, 9, 18, 24"" - participant seems to be counting by 9s but makes a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3=27"",
    resulting_state=(1, 27),
    comment='""9 times 3, 9, 18, 24"" - participant seems to be counting by 9s',
)

# ""3 times 3, that's 9"" - participant starts over
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 2, 9),
    comment='""3 times 3, that\'s 9""',
)

# ""times, 2 plus 1"" - participant multiplies 9 by (2+1)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*(2+1)=27"",
    resulting_state=(27,),
    comment='""times, 2 plus 1""',
)

# ""3 times 2 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(1, 3, 6),
    comment='""3 times 2 is 6""',
)

# ""6 times 3, 9, 18, 27"" - participant multiplies by 3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 18),
    comment='""6 times 3, 9, 18, 27""',
)

# ""6 times 3 plus 1"" - participant tries multiplying by (3+1)
curr_state = graph.move_to_node((1, 3, 6))
new_state = graph.explore_operation(
    curr_state,
    operation=""6*(3+1)=24"",
    resulting_state=(24,),
    comment='""6 times 3 plus 1"" - participant tries multiplying by (3+1)',
)
```"
1046,"[4,4,4,7]",,180," Okay, target number 24. Well, 4 times 4 is 16. Plus 4 is 20. No, so that's not what we want. 4 times 7 is 28. Then minus 4. Hmm. So we have an extra 4 in here. I'm not really sure what to do with 4. Hmm. What are we going to do with you? Well, what's 4 plus 7? It's 13. Wait, no, that's not right. It's 11. Um, I really should get a calculator out. This is not as easy as the practice problems. Okay, clear that out. I see 4 times 4 times 4 is 64. That's too much. Well, what's 64 divided by 7? Okay, that's no good. Um, 7 times 4 is 28. Minus 4 is 24, but then we still have an extra 4. Well, what's 28 divided by 4? That would be 7. Duh. Hmm. This is a tough one. Um. 4 plus 4 is 8. 4 plus 4 is 8. Plus 7 is 15. That doesn't really help us. Hmm. 4 times 7 is 28. Is there something we can do here? Minus 4. It's 24, but then we have an extra. What are we going to do with that? 4 divided by 4 is 1. Oh, wait, wait, wait. Let's try this. Let's get a 3. 4?","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(4, 7, 16),
    comment='""4 times 4 is 16""',
)

# ""Plus 4 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+4=20"",
    resulting_state=(7, 20),
    comment='""Plus 4 is 20""',
)

# ""4 times 7 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(4, 4, 28),
    comment='""4 times 7 is 28""',
)

# ""Then minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-4=24"",
    resulting_state=(4, 24),
    comment='""Then minus 4""',
)

# ""4 plus 7? It's 13. Wait, no, that's not right. It's 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(4, 4, 11),
    comment='""4 plus 7? It\'s 13. Wait, no, that\'s not right. It\'s 11""',
)

# ""4 times 4 times 4 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*4=64"",
    resulting_state=(7, 64),
    comment='""4 times 4 times 4 is 64""',
)

# ""64 divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/7=9.14"",
    resulting_state=(9.14,),
    comment='""64 divided by 7""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(4, 4, 28),
    comment='""7 times 4 is 28""',
)

# ""Minus 4 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-4=24"",
    resulting_state=(4, 24),
    comment='""Minus 4 is 24""',
)

# ""28 divided by 4? That would be 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""28/4=7"",
    resulting_state=(4, 7),
    comment='""28 divided by 4? That would be 7""',
)

# ""4 plus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(4, 7, 8),
    comment='""4 plus 4 is 8""',
)

# ""Plus 7 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(4, 15),
    comment='""Plus 7 is 15""',
)

# ""4 times 7 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(4, 4, 28),
    comment='""4 times 7 is 28""',
)

# ""Minus 4. It's 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-4=24"",
    resulting_state=(4, 24),
    comment='""Minus 4. It\'s 24""',
)

# ""4 divided by 4 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 4, 7),
    comment='""4 divided by 4 is 1""',
)
```"
1048,"[3,5,7,10]",,180," 3, 5, 7, 10. Um, we could do 15. 15 plus 7 is what? That would be 23, so that's no good. 10 times 3 is 30. 30 minus 5. Well no, what's 30 minus 7? Okay, so that's too short. Yeah, those are too short. Well, 7 times, that won't be a round number. So I'm just going to do 7 times 10 divided by 3, that won't work. 7 times 10, times 10, um, divided by 5, that's 14. So times 3 is nothing. Um, what's 50 divided by 7? Well, that's not a whole number. That's not going to work. Um, 30 divided by 5 times 7? No, that's 42. That's too much. Um, this is a tricky one for me. This does not have an obvious solution in my opinion. Um, 7 plus 10 plus 5. Nope, that's 22. So that's no good for me. Um, what about 10 divided by 5? So we get a 2. Times 7 is 14, so that's no good. Um, what's 3 times 7 again? Ah! Oh wait, but then we don't have a 3. Ugh. So 3 times 7 is 21. But if only, because I can get a 2 out of those. Hmm. I, when I say I can get a 2 out of those, I can get a 2 out of the remaining numbers 5 and 10 by dividing 10 by 5. Um, goodness gracious. So we have 21. What's 5 times 7? I forget. 35. So that's no good either. And none of these we can do. Cause that'd be 25. Yeah, that's no good. Let me take a quick break, shake my head. I'm going to take a sip of water. 7 times 10 is 70. Divided by 5 is 30.","```python
start_state = (3, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""we could do 15"" - participant likely adding 10+5
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(3, 7, 15),
    comment='""we could do 15""',
)

# ""15 plus 7 is what? That would be 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+7=23"",
    resulting_state=(3, 23),
    comment='""15 plus 7 is what? That would be 23""',
    result_calc_error=True,
)

# ""10 times 3 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(5, 7, 30),
    comment='""10 times 3 is 30""',
)

# ""30 minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-7=23"",
    resulting_state=(5, 23),
    comment='""30 minus 7""',
)

# ""7 times 10 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*10)/3=23.33"",
    resulting_state=(5, 23.33),
    comment='""7 times 10 divided by 3""',
)

# ""7 times 10, times 10, um, divided by 5, that's 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10/5=14"",
    resulting_state=(3, 14),
    comment='""7 times 10, times 10, um, divided by 5, that\'s 14""',
)

# ""7 plus 10 plus 5. Nope, that's 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10+5=22"",
    resulting_state=(3, 22),
    comment='""7 plus 10 plus 5. Nope, that\'s 22""',
)

# ""10 divided by 5? So we get a 2. Times 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*7=14"",
    resulting_state=(3, 14),
    comment='""10 divided by 5? So we get a 2. Times 7 is 14""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(5, 10, 21),
    comment='""3 times 7 is 21""',
)

# ""5 times 7? I forget. 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(3, 10, 35),
    comment='""5 times 7? I forget. 35""',
)

# ""7 times 10 is 70. Divided by 5 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*10)/5=30"",
    resulting_state=(3, 30),
    comment='""7 times 10 is 70. Divided by 5 is 30""',
    result_calc_error=True,
)
```"
1049,"[3,4,8,11]",4x8-11+3,71," Okay. 3, 4, 8, and 11. What is 3 times 4? It's 12. Plus 8, 20. Okay. 11 plus 8 is 19. Plus 4 is 23, so that's no good. Good. Um, 8 times 11 divided by 4 is 22. Plus 3 is no good. That could have been cute, though. Um, 8 divided by 3. Ooh, that's not a whole number. That's not going to work. Um, 4 times 8 is 32. Minus 11 plus 3. Hey, hey, hey! 4 times, oops, 4 times, let me type it. 4 times 8 minus 11 plus 3.","```python
start_state = (3, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What is 3 times 4? It's 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 11, 12),
    comment='""What is 3 times 4? It\'s 12""',
)

# ""Plus 8, 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(11, 20),
    comment='""Plus 8, 20""',
)

# Going back to start state for ""11 plus 8 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(3, 4, 19),
    comment='""11 plus 8 is 19""',
)

# ""Plus 4 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+4=23"",
    resulting_state=(3, 23),
    comment='""Plus 4 is 23""',
)

# ""8 times 11 divided by 4 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11/4=22"",
    resulting_state=(3, 22),
    comment='""8 times 11 divided by 4 is 22""',
)

# ""Plus 3 is no good""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+3=25"",
    resulting_state=(25,),
    comment='""Plus 3 is no good""',
)

# ""8 divided by 3. Ooh, that's not a whole number""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/3=2.67"",
    resulting_state=(2.67, 4, 11),
    comment='""8 divided by 3. Ooh, that\'s not a whole number""',
)

# ""4 times 8 is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(3, 11, 32),
    comment='""4 times 8 is 32""',
)

# ""Minus 11 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-11+3=24"",
    resulting_state=(24,),
    comment='""Minus 11 plus 3""',
)

```"
1051,"[1,3,6,9]",,180," Okay, here we go. 1, 3, 6, 9. The ones really help me out. So, 6 plus 9. I did extra stuff in my calculator. I'm going to clear that out. Click, click, click. Okay, 6 plus 9 is 15. Plus 3 is 18. So, we get 19 total. So, that's not super helpful. We can do 3 times 6 equals 18. That's not going to help us. We can do 3 times 9 is 27. That's not going to help because we can get to 22. We get to 20. Yeah, we get to 22. We can divide 9 by 3 and then we have another 3. We have 3, 6, and 1. No, that's 18. 3 times 6 is 18. So, that's not good. We can divide 6 by 3 and then we have 2. Again, 18 plus 1 is 19. So, that's not anything. My goodness. I'm really struggling with these. I'm kind of surprised by that. I thought I would be able to figure these out. I thought I did. I thought I would have a tough time with them. So, 9 times 3 is 27. What's 6 times 9? Let's see what's going on with that. 54 divided by 3 is 51. Oh, wait. 54 divided by 3 is 18. Oh, no. We're at 19 again. Oh, goodness gracious. That's 9 divided by 6. 1.5 times 3. That's not good. That's 7. I'm going to run out of time any second now. That makes me anxious a little bit, knowing that I'm going to run out of time. And, like, I don't want to keep working on it. Because I hate being interrupted in the middle of trying to figure it out. 3. No, because 3 times 9 is 21. That's not good. 6 minus 1. What's 5 times 9?","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 9 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+9=15"",
    resulting_state=(1, 3, 15),
    comment='""6 plus 9 is 15""',
)

# ""Plus 3 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+3=18"",
    resulting_state=(1, 18),
    comment='""Plus 3 is 18""',
)

# ""So, we get 19 total"" - adding the 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+1=19"",
    resulting_state=(19,),
    comment='""So, we get 19 total""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""3 times 6 equals 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(1, 9, 18),
    comment='""3 times 6 equals 18""',
)

# ""3 times 9 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(1, 6, 27),
    comment='""3 times 9 is 27""',
)

# ""We can divide 9 by 3 and then we have another 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(1, 3, 6),
    comment='""We can divide 9 by 3 and then we have another 3""',
)

# ""We can divide 6 by 3 and then we have 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(1, 2, 9),
    comment='""We can divide 6 by 3 and then we have 2""',
)

# ""What's 6 times 9?""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(1, 3, 54),
    comment='""What\'s 6 times 9?""',
)

# ""54 divided by 3 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54/3=18"",
    resulting_state=(1, 18),
    comment='""54 divided by 3 is 18""',
)

# ""9 divided by 6. 1.5 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/6*3=4.5"",
    resulting_state=(1, 4.5),
    comment='""9 divided by 6. 1.5 times 3""',
)

# ""3 times 9 is 21"" - this appears to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=21"",
    resulting_state=(1, 6, 21),
    comment='""3 times 9 is 21"" - this appears to be a calculation error',
    result_calc_error=True,
)

# ""6 minus 1. What's 5 times 9?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-1)*9=45"",
    resulting_state=(3, 45),
    comment='""6 minus 1. What\'s 5 times 9?""',
)
```"
1054,"[1,7,10,13]",,180," Okay, 1, 7, 10, 13. Mmm, this may be a tricky one. Nothing is easily divisible. 8? No, that doesn't make any sense. Let's do 7 times 10, you get 70. Divided by 13? Okay, no. 7 times 13 equals 91. And it's 9.1, that's no help. 13 times 10 divided by 7 is 18, so that's no good. 8? So, 1 plus 7. So, 8 times 13 divided by 10. 10.4, that's no good. So then let's do 8 times 10. Oops, not minus. Divided by 13 equals 6.15, that's no good. So then we can also do... Oh, goodness gracious. 9 plus 7 equals 16 plus 13 equals 29. That's no good. We could do... We could get a 12, but then we still have the 7. The 7 is making me a little bonkers. Get 17. Get you to 30. This one is tough. I love even numbers. This has got two primes. Well, really, three. What? Wait, is 1 a prime number? I don't remember. I'm gonna run out of time in a second or two anyway. Um, we can keep trying. So we can get a 12. This is the 19. Nope. We need a 3. Okay. Well, that... Yeah. There's a couple ways we could get a 3. 3 times 7 is 21, so that's no good. Yeah. Yeah, I'm really... At this point, I'm not even thinking. I'm, like, just staring at the numbers. I don't know.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 10, you get 70""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(1, 13, 70),
    comment='""7 times 10, you get 70""',
)

# ""Divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70/13=5.38"",
    resulting_state=(1, 5.38),
    comment='""Divided by 13""',
)

# ""7 times 13 equals 91""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13=91"",
    resulting_state=(1, 10, 91),
    comment='""7 times 13 equals 91""',
)

# ""13 times 10 divided by 7 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*10/7=18"",
    resulting_state=(1, 18),
    comment='""13 times 10 divided by 7 is 18""',
    result_calc_error=True,
)

# ""1 plus 7"" participant trying to make 8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+7=8"",
    resulting_state=(8, 10, 13),
    comment='""1 plus 7""',
)

# ""8 times 13 divided by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*13/10=10.4"",
    resulting_state=(10.4,),
    comment='""8 times 13 divided by 10""',
)

# ""9 plus 7 equals 16 plus 13 equals 29""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(1, 10, 20),
    comment='""9 plus 7 equals 16 plus 13 equals 29"" - participant starts with 7+13',
)

# ""Get 17"" - possibly adding 10+7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(1, 13, 17),
    comment='""Get 17""',
)

# ""Get you to 30"" - adding 13+17 from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+17=30"",
    resulting_state=(1, 30),
    comment='""Get you to 30""',
)
```"
1056,"[5,6,7,8]",,180," Let's see, 5 times 6 is 30, 6 times 7 is 42, wait, 56. We can do minus. 8 minus 7 is 1. No. 8 minus 5 is 3. No. Let's see, 7, 35, 40, 42. 7, delete. Let's see, 8 times 5 is 40, minus 7, 30, no. 33 and 27, no. 48, no. How the heck? 15, 20, 6. Let's do 5 times 6 is 30. No. That's not going to work. Okay. What the fuck? This is so hard. Okay. 8 minus 6 is 3. 6 is 2. That's not helpful. Um. 8 minus 5 is 3. That's not helpful. Well, I don't know. Is it 8 minus 5? Oh my god. Is 3 times 7 is 21. Times 6 is 18. No. Okay. 6 minus, or 8 minus 6 is 2. 14. How?","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(7, 8, 30),
    comment='""5 times 6 is 30""',
)

# ""6 times 7 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(5, 8, 42),
    comment='""6 times 7 is 42""',
)

# ""8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 5, 6),
    comment='""8 minus 7 is 1""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 7),
    comment='""8 minus 5 is 3""',
)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 7, 40),
    comment='""8 times 5 is 40""',
)

# ""minus 7, 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-7=33"",
    resulting_state=(6, 33),
    comment='""minus 7, 30""',
)

# ""8 minus 6 is 3"" (participant made calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 7),
    comment='""8 minus 6 is 3"" (participant made calculation error)',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 7),
    comment='""8 minus 5 is 3""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(6, 21),
    comment='""3 times 7 is 21""',
)

# ""Times 6 is 18"" (participant made calculation error)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21*6=18"",
    resulting_state=(18,),
    comment='""Times 6 is 18"" (participant made calculation error)',
    result_calc_error=True,
)

# ""8 minus 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 7),
    comment='""8 minus 6 is 2""',
)

```"
1059,"[1,4,8,11]",(4+8+1+11),93," Let's see. Um, 8 times 3 is 24. 3 and 8. There's an 11. So, what can we do? 11 minus 5 is 6. No. What the hell is this? Okay. Okay. 4 minus 1 is 3. Plus 8. Shut up. Plus 11. Oh. How is that? Oh. Okay. 4. 4 plus 8. Minus 1. Minus 1. Okay. 4 plus 8. Minus 1. Plus 11. 11. Why was that not? Oh. It's plus 1. 13. Oh my god. I don't even need.","```python
start_state = (1, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""4 minus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 8, 11),
    comment='""4 minus 1 is 3""',
)

# ""Plus 8"" from the previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+8=11"",
    resulting_state=(11, 11),
    comment='""Plus 8""',
)

# ""4 plus 8. Minus 1. Plus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8+1+11=24"",
    resulting_state=(24,),
    comment='""4 plus 8. Minus 1. Plus 11"" - participant actually adds 1 instead of subtracting',
)
```"
1067,"[10,11,11,12]",,180," Okay, we're back to this one. Let's see. Target number is 24, so what about 10, 12 minus 2, 12 times 11. What is 12 times 11? 12 times 11 is 32. 12 times 11 is 32. Divide it by 1. No. 12 times, okay, what about 12 plus 11? 11 plus 11. Then minus 10. How about that? Let's see. 12 plus 11 plus 11. Divide it by 10. 10? No. Hmm. Divide it by, it says it has to have brackets. Let me put that in 10. How about that? 10. Let's see. 12 plus 11 plus 11. Does that mean divide it by? I think it does. Yeah, so 12 plus 11 plus 11. Let's see. 12. Okay, let's delete it. Yeah, that's what I'm saying. That's why I didn't go. Okay, so 12. I didn't know it would stop and that was it. Shh. 12 times 10. 12 times 10 minus. Okay, let's see. 12 times 10 divided by. No. Okay, 12. 10 times 11. 11. There's one 10. 10. 12 minus.","```python
start_state = (10, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 11"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=32"",
    resulting_state=(10, 11, 32),
    comment='""12 times 11 is 32"" - participant makes calculation error',
    result_calc_error=True,
)

# ""12 plus 11 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11+11=34"",
    resulting_state=(10, 34),
    comment='""12 plus 11 plus 11""',
)

# ""Divide it by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""34/10=3.4"",
    resulting_state=(3.4,),
    comment='""Divide it by 10""',
)

# ""12 times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*10=120"",
    resulting_state=(11, 11, 120),
    comment='""12 times 10""',
)

# ""10 times 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*11=110"",
    resulting_state=(11, 12, 110),
    comment='""10 times 11""',
)

```"
1070,"[2,4,5,9]",,180," Okay, 5 times 9 is 45 minus 8. That's not it. Okay, so let's do 4 times 5 is 20 plus 9 times 2. That's too easy. 2 times 4 is 8 times 5 is 40 divided by 9. That's not 24. 9 times 5 times 4. 9 times 5 is 45 times 4. 45 times 4 is 180. Divided by 2 is not 24. Oh my goodness, I stink at this. 9 minus 5 is 4. Let's see. 9 minus 4 is 5. No, 9 minus 5 is 4. 9 minus 5 is 4. And 4 times 8 is 32. 4 times 2 is only 8. Oh, okay, 5 minus 4. 5 minus 2 is 8. 2 is 3. 5 minus 2 is 3. And then 36 minus 3 is not 24. Okay, so 5 minus 2. Okay, 9 minus 2 is 7. 9 minus 2 is 7. 9 minus 2 is 7. Times. 5 minus 4, no, no, times 4 times 5 is 20, no. Okay, 9 times 5 is 45, minus, 45 minus 8, that's 924. Okay, 4 minus 2 equals 2. 2, 4 minus 2 is 2, plus 9 minus 5 is 4, that's still not 24. Okay, 4 times 5, okay, what about 9 times 2 times 4, what about that? So 9 times 2. It's 16, 9 times 2 is, no, it's 18, 9 times 2 is 18.","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 5 is 20 plus 9 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5+9*2=38"",
    resulting_state=(38,),
    comment='""4 times 5 is 20 plus 9 times 2""',
)

# ""2 times 4 is 8 times 5 is 40 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*4*5)/9=4.44"",
    resulting_state=(4.44,),
    comment='""2 times 4 is 8 times 5 is 40 divided by 9""',
)

# ""9 times 5 times 4. 9 times 5 is 45 times 4. 45 times 4 is 180. Divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5*4/2=90"",
    resulting_state=(90,),
    comment='""9 times 5 times 4...Divided by 2""',
)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(2, 4, 4),
    comment='""9 minus 5 is 4""',
)

# ""9 minus 4 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-4=5"",
    resulting_state=(2, 5, 5),
    comment='""9 minus 4 is 5""',
)

# ""4 times 8 is 32"" - participant likely meant 4*2=8
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(5, 8, 9),
    comment='""4 times 8 is 32"" - participant likely meant 4*2=8',
)

# ""5 minus 2 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 4, 9),
    comment='""5 minus 2 is 3""',
)

# ""9 minus 2 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(4, 5, 7),
    comment='""9 minus 2 is 7""',
)

# ""times 4 times 5 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(7, 20),
    comment='""times 4 times 5 is 20""',
)

# Move back to start state for remaining operations
curr_state = graph.move_to_node(start_state)

# ""4 minus 2 equals 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-2=2"",
    resulting_state=(2, 5, 9),
    comment='""4 minus 2 equals 2""',
)

curr_state = graph.move_to_node(new_state)
# ""plus 9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(2, 4),
    comment='""plus 9 minus 5 is 4""',
)

# Move back to start state for remaining operations
curr_state = graph.move_to_node(start_state)

# ""9 times 2 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2*4=72"",
    resulting_state=(5, 72),
    comment='""9 times 2 times 4""',
)

# ""9 times 2 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(4, 5, 18),
    comment='""9 times 2 is 18""',
)
```"
1073,"[9,10,10,13]",,180," So 100, let's see, 100 minus, let's see, 100 minus 13, no, no, no, no, no. 100 minus 13 times 9, that's only, no, no, no, no. Okay. So 10 times 9 is 90. That's not right. 10 times 10 is 100 plus 9 is 109. Divided by 13, no, no, no, no, no. Okay. 13, let's see, 13 times 9, that's 13 times 9. 13 times 9. 107 times 9, no, 13 times 9 is 117. So 117 minus 10 times 10 is 100. That's not 24. Okay. 13 times 10, 13 times 10 is 130. Plus 10 equals 140 divided by 9. No, that's not it. Okay. 13 times 10, 10 times 10 is 100. Minus 13 equals 87 divided by 9. No, that's not 24. Let's see. 13 times 9. I want to say it was 117. 13 minus 9. So 117. 117 minus 10. This is 107 divided by 10. Is that not 24? Okay. 13 times. Okay. 10 plus 10 is 20. So 10 plus 10 is 20 plus 13 equals 33 minus 9.","```python
start_state = (9, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 9 is 90""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*9=90"",
    resulting_state=(10, 13, 90),
    comment='""10 times 9 is 90""',
)

# ""10 times 10 is 100 plus 9 is 109""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10+9=109"",
    resulting_state=(13, 109),
    comment='""10 times 10 is 100 plus 9 is 109""',
)

# ""13 times 9 is 117""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9=117"",
    resulting_state=(10, 10, 117),
    comment='""13 times 9 is 117""',
)

# ""117 minus 10 times 10 is 100""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""117-10*10=17"",
    resulting_state=(17,),
    comment='""117 minus 10 times 10 is 100"" - participant seems to be calculating',
)

# ""13 times 10 is 130. Plus 10 equals 140 divided by 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*10+10)/9=15.56"",
    resulting_state=(15.56,),
    comment='""13 times 10 is 130. Plus 10 equals 140 divided by 9""',
)

# ""13 times 10, 10 times 10 is 100. Minus 13 equals 87 divided by 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*10-13)/9=9.67"",
    resulting_state=(9.67,),
    comment='""10 times 10 is 100. Minus 13 equals 87 divided by 9""',
)

# ""13 times 9. I want to say it was 117""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9=117"",
    resulting_state=(10, 10, 117),
    comment='""13 times 9. I want to say it was 117""',
)

# ""117 minus 10. This is 107 divided by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(117-10)/10=10.7"",
    resulting_state=(10.7,),
    comment='""117 minus 10. This is 107 divided by 10""',
)

# ""10 plus 10 is 20. So 10 plus 10 is 20 plus 13 equals 33 minus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+13-9=24"",
    resulting_state=(24,),
    comment='""10 plus 10 is 20. So 10 plus 10 is 20 plus 13 equals 33 minus 9""',
)
```"
1085,"[2,2,5,11]",(5x11,180," The real task. Here we go. I thought I was doing good. Um, 11 plus 5 is 16. Oh man. 2 times 2 is 4. Times 5 is 20. And then there's an 11 somewhere. Um. What's 11 times 2? Is 22. Plus 5 is 27. Minus 2 is 25. It's not 24. Um. Let's... try. Let's just try it. 11 times 2 is 22. 22 plus No, no, no, no. Um. 2 and 5. 2 times 5 is 10. Plus 11 is 21. Plus 2 is 23. Not going good. Um. 2 times 11 is 22. Times 2 is 44 divided by 5 is not 24. I don't even know what it is, but it's not 24. Um. 5 times 11 is 55. Divided by 2 would be... There's going to be a point 20 something. 25 and some change. Minus 2. I can try that. It's probably not right. 5 times 11 is something. Divided by 2 is 1. Plus 2. Plus 2. Incorrect. Um.","```python
start_state = (2, 2, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 5 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(2, 2, 16),
    comment='""11 plus 5 is 16""',
)

# ""2 times 2 is 4. Times 5 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2*5=20"",
    resulting_state=(11, 20),
    comment='""2 times 2 is 4. Times 5 is 20""',
)

# ""What's 11 times 2? Is 22. Plus 5 is 27. Minus 2 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2+5-2=25"",
    resulting_state=(25,),
    comment='""11 times 2? Is 22. Plus 5 is 27. Minus 2 is 25""',
)

# ""2 times 5 is 10. Plus 11 is 21. Plus 2 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5+11+2=23"",
    resulting_state=(23,),
    comment='""2 times 5 is 10. Plus 11 is 21. Plus 2 is 23""',
)

# ""2 times 11 is 22. Times 2 is 44 divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11*2/5=8.8"",
    resulting_state=(8.8,),
    comment='""2 times 11 is 22. Times 2 is 44 divided by 5""',
)

# ""5 times 11 is 55. Divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*11/2=27.5"",
    resulting_state=(2, 27.5),
    comment='""5 times 11 is 55. Divided by 2""',
)

# ""Minus 2"" - continuing from previous calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27.5-2=25.5"",
    resulting_state=(25.5,),
    comment='""Minus 2""',
)

# ""5 times 11 is something. Divided by 2 is 1. Plus 2. Plus 2.""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*11/2+2+2=31.5"",
    resulting_state=(31.5,),
    comment='""5 times 11 is something. Divided by 2 is 1. Plus 2. Plus 2.""',
)

```"
1088,"[2,3,3,7]",,180," Okay, um, hmm, 3 times 7 is 21, plus 3 is 24, but then I have to do something with this 2, 2 times 3 is 6, times 7 is 42, is that right? 7, 14, 21, 28, and 20, oh, 35, yeah, and then 42, where 2 divided by 3 is not 24. Um, just taking you back to 4th grade times tables. Um, obviously very calculator dependent. Um, 2 times 7 is 14, 14 times 3 is 42, divided by 3 is 14, that's not helpful. Um, 3 times 3 is 9. Okay. 7 times 2 is 18, plus 7 is 25, is that right? Yes. Um, 7 times 2 is 14, 14. Minus 3 is 11, times 3 is 33, 2 times 3 is 6, times 3 is 18, times 7, no, adding 7 is 25, we did that one already. 7. 7. 7. Plus 3 is 10. Times 2 is 20, plus 3 is 23. 7 plus 3 is 10. Plus, no, 7 plus 3 is 10. Times 3 is 30, divided by 2 is 15. 7 times 3 is 10. 9 plus 3 is 15. 3 times 3 is shafting, 7 plus 1 is 15. 3 times 3 is 4, 5 is more 7. 7 plus 3 is 10, times 7 is 10. 7 times 3 is 13, times 3 as 10. 7 plus 3 is 10, times 9 is 10.","```python
start_state = (2, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 7 is 21, plus 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7+3=24"",
    resulting_state=(2, 24),
    comment='""3 times 7 is 21, plus 3 is 24""',
)

# ""2 times 3 is 6, times 7 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3*7=42"",
    resulting_state=(3, 42),
    comment='""2 times 3 is 6, times 7 is 42""',
)

# ""2 times 7 is 14, 14 times 3 is 42, divided by 3 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*7*3)/3=14"",
    resulting_state=(14,),
    comment='""2 times 7 is 14, 14 times 3 is 42, divided by 3 is 14""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(2, 7, 9),
    comment='""3 times 3 is 9""',
)

# ""7 times 2 is 18, plus 7 is 25"" - calculation error, 7*2=14
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+7=25"",
    resulting_state=(3, 3, 25),
    comment='""7 times 2 is 18, plus 7 is 25"" - calculation error, 7*2=14',
    result_calc_error=True,
)

# ""7 times 2 is 14, 14. Minus 3 is 11, times 3 is 33""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*2-3)*3=33"",
    resulting_state=(33,),
    comment='""7 times 2 is 14, 14. Minus 3 is 11, times 3 is 33""',
)

# ""2 times 3 is 6, times 3 is 18, times 7, no, adding 7 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3*3+7=25"",
    resulting_state=(25,),
    comment='""2 times 3 is 6, times 3 is 18, times 7, no, adding 7 is 25""',
)

# ""7. Plus 3 is 10. Times 2 is 20, plus 3 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+3)*2+3=23"",
    resulting_state=(23,),
    comment='""7. Plus 3 is 10. Times 2 is 20, plus 3 is 23""',
)

# ""7 plus 3 is 10. Times 3 is 30, divided by 2 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+3)*3/2=15"",
    resulting_state=(15,),
    comment='""7 plus 3 is 10. Times 3 is 30, divided by 2 is 15""',
)

# The rest of the transcript contains several calculation errors and unclear operations
# For example ""7 times 3 is 10"" and ""3 times 3 is 4"" are clearly incorrect calculations
# ""7 plus 3 is 10, times 9 is 10"" also contains errors
# These statements don't represent valid mathematical operations so we'll stop here
```"
1091,"[4,7,8,11]",(11x8)/7x4,180," Okay. Four. I think when the numbers get over, like, five, I get intimidated. My math skills get worse. What if I just get to add all these together? Eleven. I want to be with this eleven. Eleven. Eleven minus four. That's it. Eleven minus eight, nine, ten, eleven is thirty. Times four is twelve. Plus seven is not twenty-four. Eight minus four is four. Eleven minus four. Eleven, ten, nine, eight, seven is seven. Seven plus seven is fourteen. Plus eight is twenty-two. Seven times four. I feel like I need to do something first with this eleven because it's big. Eight plus eleven is nineteen. Plus seven is twenty-six. Minus four is twenty-two. Minus four is twenty-two. Four plus eight is twelve. Plus eleven is twenty-three. And then I have a seven. Four plus seven plus eight. That's what I just did. Eleven. Eleven minus... Eleven times eight is eighty-eight. What if I do eleven times seven is seventy-seven. Divided by four. Wouldn't be as nice. Eleven times eight is eighty-eight. Divided by seven. What would that be? Plus four? I don't know. Eleven times eight. Divided by seven. Plus four. Nope.","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Eleven minus four""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(7, 7, 8),
    comment='""Eleven minus four""',
)

# ""Eleven minus eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 7),
    comment='""Eleven minus eight""',
)

# ""eight minus four is four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 11),
    comment='""eight minus four is four""',
)

# ""Eleven minus four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(7, 7, 8),
    comment='""Eleven minus four""',
)

# ""Seven plus seven is fourteen. Plus eight is twenty-two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+8=22"",
    resulting_state=(22,),
    comment='""Seven plus seven is fourteen. Plus eight is twenty-two""',
)

# ""seven times four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 11, 28),
    comment='""seven times four""',
)

# ""eight plus eleven is nineteen. Plus seven is twenty-six. Minus four is twenty-two""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11+7-4=22"",
    resulting_state=(22,),
    comment='""eight plus eleven is nineteen. Plus seven is twenty-six. Minus four is twenty-two""',
)

# ""Four plus eight is twelve. Plus eleven is twenty-three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8+11=23"",
    resulting_state=(7, 23),
    comment='""Four plus eight is twelve. Plus eleven is twenty-three""',
)

# ""Eleven times eight is eighty-eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(4, 7, 88),
    comment='""Eleven times eight is eighty-eight""',
)

# ""eleven times seven is seventy-seven. Divided by four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7/4=19.25"",
    resulting_state=(8, 19.25),
    comment='""eleven times seven is seventy-seven. Divided by four""',
)

# ""Eleven times eight is eighty-eight. Divided by seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8/7=12.57"",
    resulting_state=(4, 12.57),
    comment='""Eleven times eight is eighty-eight. Divided by seven""',
)

# ""Eleven times eight. Divided by seven. Plus four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8/7+4=16.57"",
    resulting_state=(16.57,),
    comment='""Eleven times eight. Divided by seven. Plus four""',
)
```"
1092,"[8,9,11,11]",,180," Let's just do addition. Alright, 11 plus 11 is 22, plus 9 is 31, minus 8, is not 24. 8 plus 9 is 17, plus 11, minus 11, no. 8 times 9 is 72, divided by 11 is too much, plus 11. I don't know. I hate this. 9 times 11 is 81, divided by 11 is 9, plus 8 is 17. 8 plus 9 is 17. 9 plus 11 plus 11 is 22. What did I say? Is thirty-three minus eight is not twenty-four. Eight plus eleven plus eleven, so twenty-two. Twenty-thirty? Nineteen? Twenty-one? Um, I really don't know. Um, eleven times eleven. What was that? One-twenty-one divided by nine plus eight. Eleven times eleven. What was that? Divided by nine plus eight. This is like middle school math, and I am not doing good. Um.","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 11 is 22, plus 9 is 31, minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11+9-8=23"",
    resulting_state=(23,),
    comment='""11 plus 11 is 22, plus 9 is 31, minus 8""',
)

# ""8 plus 9 is 17, plus 11, minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9+11-11=17"",
    resulting_state=(17,),
    comment='""8 plus 9 is 17, plus 11, minus 11""',
)

# ""8 times 9 is 72, divided by 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*9)/11=6.55"",
    resulting_state=(6.55, 11),
    comment='""8 times 9 is 72, divided by 11""',
)

# ""9 times 11 is 81, divided by 11 is 9, plus 8 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*11)/11+8=17"",
    resulting_state=(17,),
    comment='""9 times 11 is 81, divided by 11 is 9, plus 8 is 17""',
)

# ""8 plus 9 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(11, 11, 17),
    comment='""8 plus 9 is 17""',
)

# ""9 plus 11 plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11+11=31"",
    resulting_state=(8, 31),
    comment='""9 plus 11 plus 11 is 22"" - participant miscalculates',
    result_calc_error=True,
)

# ""Eight plus eleven plus eleven, so twenty-two""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11+11=30"",
    resulting_state=(9, 30),
    comment='""Eight plus eleven plus eleven, so twenty-two"" - participant miscalculates',
    result_calc_error=True,
)

# ""eleven times eleven. What was that? One-twenty-one divided by nine plus eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11/9+8=21.44"",
    resulting_state=(21.44,),
    comment='""eleven times eleven. What was that? One-twenty-one divided by nine plus eight""',
)
```"
1093,"[3,3,12,12]",(12+12)x(3/3),38," Verbalize more of my thoughts. I don't have any thoughts. My thoughts are, I don't know how to do this. I'm getting frustrated. 12 times 12. Here we go. 12 plus 12 is 24. Plus 3 divided by 3. Or no, I don't want to do plus 3 divided by 3. Times 3 divided by 3 is 1.","```python
start_state = (3, 3, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(3, 3, 144),
    comment='""12 times 12""',
)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 3, 24),
    comment='""12 plus 12 is 24""',
)

# ""Plus 3 divided by 3"" participant considers this but rejects it
new_state = graph.explore_operation(
    curr_state,
    operation=""24+(3/3)=25"",
    resulting_state=(3, 25),
    comment='""Plus 3 divided by 3"" participant considers this but rejects it',
)

# ""Times 3 divided by 3 is 1"" - participant realizes they can multiply by 1 to keep 24
curr_state = graph.move_to_node((3, 3, 24))
new_state = graph.explore_operation(
    curr_state,
    operation=""24*(3/3)=24"",
    resulting_state=(24,),
    comment='""Times 3 divided by 3 is 1"" - participant realizes they can multiply by 1 to keep 24',
)
```"
1094,"[6,6,7,10]",(10-7)x6,180," Alright, I'm almost done. Hopefully. Hopefully there's only a couple more. See, it's these big numbers that really give me pause. Six plus six is twelve. Plus seven is nineteen. And then there's a ten. Six times six is thirty-six. Six minus ten is twenty-six, and then there's a seven. Six times ten is sixty, divided by seven. That doesn't work. Doesn't work. Seven, fourteen, twenty-one, twenty-eight, thirty-five, thirty-six. Forty-two, forty-nine, fifty-six, and sixty-three. Nope. Six times seven. I just did that. Thirty-five. Forty-two. Forty-two minus ten. Ooh, okay. Six. Nope. Six times seven is forty-two. Minus ten minus six. Okay. Did I...what did I not do right there? Six, seven, fourteen, twenty-one, twenty-eight, thirty-five, forty-two. Six times seven is forty-two. Minus ten. Oh, hold on. Six times seven is forty-two. Minus ten is thirty-two. Minus six is twenty-six, not twenty-four. How about four? Let's see. Seven minus ten. No. Ten minus seven is thirty. Six times three is eighteen. Plus six is twenty-four. Okay. Ten minus seven is three. Times... No. Times...","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Six plus six is twelve. Plus seven is nineteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6+7=19"",
    resulting_state=(10, 19),
    comment='""Six plus six is twelve. Plus seven is nineteen""',
)

# ""Six times six is thirty-six""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(7, 10, 36),
    comment='""Six times six is thirty-six""',
)

# ""Six times ten is sixty, divided by seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10/7=8.57"",
    resulting_state=(6, 8.57),
    comment='""Six times ten is sixty, divided by seven""',
)

# The participant then counts multiples of 7: ""Seven, fourteen, twenty-one, twenty-eight, thirty-five, thirty-six. Forty-two, forty-nine, fifty-six, and sixty-three""

# ""Six times seven"" participant tries multiplying 6 and 7
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(6, 10, 42),
    comment='""Six times seven""',
)

# ""Forty-two minus ten minus six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-10-6=26"",
    resulting_state=(26,),
    comment='""Forty-two minus ten minus six""',
)

# The participant verifies their calculation of 6*7 by counting up by 7s again
# ""six, seven, fourteen, twenty-one, twenty-eight, thirty-five, forty-two""

# ""Six times seven is forty-two. Minus ten is thirty-two. Minus six is twenty-six""
new_state = graph.explore_operation(
    curr_state,
    operation=""42-10-6=26"",
    resulting_state=(26,),
    comment='""Six times seven is forty-two. Minus ten is thirty-two. Minus six is twenty-six""',
)

# ""Ten minus seven is three"" participant tries a new approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 6, 6),
    comment='""Ten minus seven is three""',
)

# ""Six times three is eighteen. Plus six is twenty-four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(6, 18),
    comment='""Six times three is eighteen""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(24,),
    comment='""Plus six is twenty-four""',
)

# The participant then repeats ""Ten minus seven is three. Times..."" which suggests they found the solution: (10-7)*6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-7)*6=18"",
    resulting_state=(6, 18),
    comment='""Ten minus seven is three. Times..."" suggests they found the solution (10-7)*6',
)

```"
1096,"[1,2,11,13]",,180," 11 minus 2 is 11. I mean, 13 minus 2 is 11. So, if we do 13 minus 1. 13 minus 2 is 11. Plus 11 is 22 plus 1. We can try that. Plus 11. So, 11 and 11. That's 22 plus 1. It should be 24. 11 plus 11. Oh, it's only 23. Damn. 13 minus 1 is 12. Plus 11. It's 23. This one's harder for me. So, let's say 13 times 2 is 26. And then we can... We can... I think we're going to have to say 11 times 11. So, that will give us 121, right? And then divide that by 13. Now, this one's hard. All right.","```python
start_state = (1, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(1, 11, 11),
    comment='""13 minus 2 is 11""',
)

# ""Plus 11 is 22 plus 1"" - participant seems to be adding the other 11 and then 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11+1=23"",
    resulting_state=(23,),
    comment='""Plus 11 is 22 plus 1""',
)

# ""13 minus 1 is 12. Plus 11. It's 23"" - participant tries a different path
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(2, 11, 12),
    comment='""13 minus 1 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(2, 23),
    comment='""Plus 11. It\'s 23""',
)

# ""13 times 2 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(1, 11, 26),
    comment='""13 times 2 is 26""',
)

# ""11 times 11. So, that will give us 121""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=121"",
    resulting_state=(1, 2, 13, 121),
    comment='""11 times 11. So, that will give us 121""',
)

# ""divide that by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""121/13=9.31"",
    resulting_state=(1, 2, 9.31),
    comment='""divide that by 13""',
)
```"
1100,"[6,8,8,10]",,180," Alright, target is 24. We have 6, 8, 8, and 10. 6 plus 8 is 8, 9, 10, 11, 12, 13, 14. 8 plus 10 is 18. 18 plus 14 is 8, 9, 10, 11, 12, 32. Okay, 8 plus 8 is 16. 16 plus 16 is like 32. 10 minus 8 is 2, 8. Oh, I got it. 10 minus 8 is 2. I mean, yeah, 10 minus 8 is 2. And then 8 plus 6, 8, 9, 10, 11. 11, 12, 13, 14. So, how do we turn that into 24, though? I don't know. A 2 and a 14. We would actually need a 10 and a 14. So, to do that, we would have to eliminate one of these 8s. 8 minus 8 is 0. I'll leave this with 16. 8 plus 6 is 14. Plus 10 is 24. How do we get rid of this 8? Because we don't want 28. 18 and 14. 18., 9, 10, 11, 12, 13. We would need a 10 and a 14. So, 14 times 10 divided by 8? I don't know. I don't think that works. This is another one where I'm kind of stumped. I don't know how to do this. 16 and 16 don't really give us much...","```python
start_state = (6, 8, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 8 is ... 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(8, 10, 14),
    comment='""6 plus 8 is ... 14""',
)

# ""8 plus 10 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(6, 8, 18),
    comment='""8 plus 10 is 18""',
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(6, 10, 16),
    comment='""8 plus 8 is 16""',
)

# ""10 minus 8 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 6, 8),
    comment='""10 minus 8 is 2""',
)

# ""8 plus 6 ... 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(8, 10, 14),
    comment='""And then 8 plus 6 ... 14""',
)

# ""8 minus 8 is 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=0"",
    resulting_state=(0, 6, 10),
    comment='""8 minus 8 is 0""',
)

# ""8 plus 6 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(8, 10, 14),
    comment='""8 plus 6 is 14""',
)

# ""Plus 10 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(8, 24),
    comment='""Plus 10 is 24""',
)

# The participant seems to set a subgoal of getting 10 and 14
graph.set_subgoal(
    (10, 14),
    state_after_subgoal=(24,),
    comment='""We would need a 10 and a 14""',
)

```"
1103,"[6,7,9,9]",,180," So you have 6, 7, 9, and 9. 9 and 9 we know equal 18. 7 and 6 equal 13. 9 minus 7 equals 2. 9 plus 6 is 15. 9 times 9 is 81. 7 times 6 is 49. Okay, that's not going to be it. 6 and 9 make 15. 7 and 9 makes 16. 5, 11. 7 plus 9 equals 16. And then you have a 9 and a 6 over here. Let's try to add and subtract. 9 plus 16, or really, 16 plus 6 equals 22. 16 plus 9. 9 plus 9 equals 22. 9 plus 9 equals 22. Equal... 9 times nine times 12. 9 times 9 equals 22. 25. Then you have a 6. Okay. 6 plus 7 is 13. Plus 9 is... 9 times nine times 12. 22. You have another 9, you know what to do with that. This one's hard also. so. So we can have 15 and 16. We can have 7 plus 6 is 13. Minus 9 is, what, 4? Plus 9. No. I don't know this one. We can try 18 plus 6. That would equal 18, 19, 20, 21, 22, 23, 24.","```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 and 9 we know equal 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 7, 18),
    comment='""9 and 9 we know equal 18""',
)

# ""7 and 6 equal 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(9, 9, 13),
    comment='""7 and 6 equal 13""',
)

# ""9 minus 7 equals 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 6, 9),
    comment='""9 minus 7 equals 2""',
)

# ""9 plus 6 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(7, 9, 15),
    comment='""9 plus 6 is 15""',
)

# ""9 times 9 is 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 7, 81),
    comment='""9 times 9 is 81""',
)

# ""7 times 6 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(9, 9, 42),
    comment='""7 times 6 is 49"" - calculation error',
    result_calc_error=True,
)

# ""6 and 9 make 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+9=15"",
    resulting_state=(7, 9, 15),
    comment='""6 and 9 make 15""',
)

# ""7 and 9 makes 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(6, 9, 16),
    comment='""7 and 9 makes 16""',
)

# ""16 plus 6 equals 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(9, 22),
    comment='""16 plus 6 equals 22""',
)

# ""9 plus 9 equals 22"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=22"",
    resulting_state=(6, 7, 22),
    comment='""9 plus 9 equals 22"" - calculation error',
    result_calc_error=True,
)

# ""6 plus 7 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(9, 9, 13),
    comment='""6 plus 7 is 13""',
)

# ""13 Minus 9 is, what, 4?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 9),
    comment='""13 Minus 9 is, what, 4?""',
)

```"
1105,"[3,4,8,10]",(3x4)x(10-8),50," Target number 24. 3, 4, 8, and 10. Let's see. So can I come up with 14 and 10? No. Okay, so 3 times 4 gives me 12. So bracket that. 3 times 4 times and then bracket 10 minus 8. Okay, so I've got 3 times 4 which is 12 times 10 minus 8 which is 2. 12 times 2 is 24.","```python
start_state = (3, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""can I come up with 14 and 10?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (14, 10),
    state_after_subgoal=(24,),
    comment='""can I come up with 14 and 10?""'
)

# ""3 times 4 gives me 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 10, 12),
    comment='""3 times 4 gives me 12""',
)

# ""10 minus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 12),
    comment='""10 minus 8""',
)

# ""12 times 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""12 times 2 is 24""',
)
```"
1106,"[4,8,8,11]",((11x8)+8)/4,141," To the next one, target number 24. 4, 8, 8, and 11. So can I get 13, 15, 16? Okay, so I can do 4 times 8 is 32, minus 8 gives me 24. 11, 8 minus 4 is 4, 88, divided by 4, 44, minus 8 is 36, minus 8 is 28, 88, divided by 88, minus 8 is 80. Oh, okay. So 11 times 8 gives me 88, plus 8 gives me 96. Oh, shoot. Let's see. Okay, so I need double brackets. 11 times 8 is bracketed, plus 8 bracketed, divided by 4. So 11 times 8 is 88, plus 8 is 96, divided by 4 is 24.","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""can I get 13, 15, 16?"" seems to be setting subgoals
graph.set_subgoal((13,), state_after_subgoal=(24,), comment='""can I get 13, 15, 16?""')
graph.set_subgoal((15,), state_after_subgoal=(24,), comment='""can I get 13, 15, 16?""')
graph.set_subgoal((16,), state_after_subgoal=(24,), comment='""can I get 13, 15, 16?""')

# ""4 times 8 is 32, minus 8 gives me 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8-8=24"",
    resulting_state=(11, 24),
    comment='""4 times 8 is 32, minus 8 gives me 24""',
)

# ""11, 8 minus 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 8, 11),
    comment='""8 minus 4 is 4""',
)

# ""11 times 8 gives me 88, plus 8 gives me 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(4, 8, 88),
    comment='""11 times 8 gives me 88""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88+8=96"",
    resulting_state=(4, 96),
    comment='""plus 8 gives me 96""',
)

# Finally, the participant finds the solution:
# ""11 times 8 is 88, plus 8 is 96, divided by 4 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11*8+8)/4=24"",
    resulting_state=(24,),
    comment='""11 times 8 is 88, plus 8 is 96, divided by 4 is 24""',
)
```"
1109,"[7,8,8,11]",((11-7)x8)-8,106," And we'll continue. 7, 8, 8, 11. Seems like I just had this one. 56... 16, 23, 27... 64... Okay, 11 minus 8... times 8... is 24. Um, 11 minus 8... is 3, times 8 is 24. But I still have the 7 to use. So, 11... 11 minus 7 is 4, times 8... 32 minus... Okay, so double bracket... 11... minus 7... bracket... times 8... bracket... minus 8. So, it's double bracket 11 minus 7 is 4, times 8... 32 minus 8 is 24.","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""56... 16, 23, 27... 64..."" seems like the participant is trying some mental math but doesn't state the operations

# ""11 minus 8... times 8... is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8)*8=24"",
    resulting_state=(7, 8, 24),
    comment='""11 minus 8... times 8... is 24""',
)

# ""11 minus 8... is 3, times 8 is 24"" - this is the same calculation as above
# ""But I still have the 7 to use"" - participant realizes they need to use all numbers

# ""11 minus 7 is 4, times 8... 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-7)*8=32"",
    resulting_state=(8, 32),
    comment='""11 minus 7 is 4, times 8... 32""',
)

# ""32 minus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-8=24"",
    resulting_state=(24,),
    comment='""32 minus 8 is 24""',
)

```"
1116,"[4,8,8,11]",8x11,180," Alright, number 24. 4, 8, 8, and 11. That's very large numbers. 4, 8 minus 8 is 0. 4 times, no. 8 plus 11 is 19. Nope. 8 times 8 is 64. 64 divided by 4 is 16. No. Plus 11. No. Is it 64? Yeah. No. Times 8 is 64. Yeah, 16, right? 16 plus 11 would be way too much. 88 divided by 4 would be 22. That's not really helpful. 11, 8 minus 8 would be 3. Right? 3 times 4 is 12. Plus 8 is 20. That's not really helpful. 4 times 8 is 32. 4 times 8 is 34. 2, yeah. 32 minus 8 is 24. But then we have the 11. Ah, great. 11 times 4 is 44 divided by 8. I don't even know. We're getting like fractions or something there. 44 divided by 16 would be way too small. I guess random now. I guess random now. I guess random now. maybe I'll just guess 8 times 8 16 times 4 divided by 11 nope wild guess is the time almost up cuz I'm gonna fail on this one 8 times 8 8 times 11 8 times 11 is 88 divided by 4 would just be 22 and I got 8 which is not helpful at all 88 times","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 8 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=0"",
    resulting_state=(0, 4, 11),
    comment='""8 minus 8 is 0""',
)

# ""8 plus 11 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(4, 8, 19),
    comment='""8 plus 11 is 19""',
)

# ""8 times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(4, 11, 64),
    comment='""8 times 8 is 64""',
)

# ""64 divided by 4 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/4=16"",
    resulting_state=(11, 16),
    comment='""64 divided by 4 is 16""',
)

# ""16 plus 11 would be way too much""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+11=27"",
    resulting_state=(27,),
    comment='""16 plus 11 would be way too much""',
)

# ""8 minus 8 would be 3"" (participant made an error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=3"",
    resulting_state=(3, 4, 11),
    comment='""8 minus 8 would be 3"" (participant made an error)',
    result_calc_error=True,
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(11, 12),
    comment='""3 times 4 is 12""',
)

# ""4 times 8 is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(8, 11, 32),
    comment='""4 times 8 is 32""',
)

# ""32 minus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-8=24"",
    resulting_state=(11, 24),
    comment='""32 minus 8 is 24""',
)

# ""11 times 4 is 44""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=44"",
    resulting_state=(8, 8, 44),
    comment='""11 times 4 is 44""',
)

# ""44 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44/8=5.5"",
    resulting_state=(8, 5.5),
    comment='""44 divided by 8""',
)

# ""8 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(4, 8, 88),
    comment='""8 times 11""',
)

# ""88 divided by 4 would just be 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88/4=22"",
    resulting_state=(8, 22),
    comment='""88 divided by 4 would just be 22""',
)
```"
1117,"[4,4,5,10]",10/4x5+4,180," This is hard. 24, 4, 4, 5, and 10. Oh yeah, 10 times 5 times 5 is 50 divided by 4, no. 10 times, oh yeah, 10 times 4 is 40 divided by 5 is 20 plus 4, no. 10 times 4 is 4. 40 divided by 5 is, yeah, 40 divided by 5 is, yeah, that's not right. 10 times 5 is 50 divided by 4, I don't know, that's a fraction or something. 4 times 4 is 16, 10, 15. 10 plus 5 is 15 plus 9. That wouldn't be quite high enough. 2 times 4, no. 4 plus 5 is 9. 4 plus 5 is 9. Yeah, 15, 19, 23. I'm going short. So I have to multiply something 4 times 4 is 16 times 5 is 80 divided by 10 would be 8. That's not helpful. 10 times 5 is 50 plus 5 is, no, 24 times 5 is, 5 would be 100 and something. 24 times 4, 4, 80, 96. . . . Nope. 4 times 4 is 16. 5 is 21. 4 times 5 is 20. Plus 4 is 24. Then I got 10. Worthless 10. 5, 4 times 5. 4 times 4, 5 times 10. 4 times 4, 5 times 10. 4 times 4, 5 times 10. I don't get any combinations that are working. Jeez! 10 times 5 is 50. Maybe 10 divided by 4. It's just weird number, right? 10 divided by 4 is, what, 2 in some odd amount? Times 5 plus 4. That's just sort of a random number. I can't recall the number. Psalm, Psalm., di some odd amount times 5 plus 4. Let's just start our random thing. This will help us guess.","```python
start_state = (4, 4, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 5 times 5 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(4, 4, 50),
    comment='""10 times 5 times 5 is 50""',
)

# ""10 times 4 is 40 divided by 5 is 20 plus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*4)/5+4=24"",
    resulting_state=(24,),
    result_calc_error=True,
    comment='""10 times 4 is 40 divided by 5 is 20 plus 4""',
)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 10, 16),
    comment='""4 times 4 is 16""',
)

# ""10 plus 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(4, 4, 15),
    comment='""10 plus 5 is 15""',
)

# ""4 plus 5 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(4, 9, 10),
    comment='""4 plus 5 is 9""',
)

# ""4 times 4 is 16 times 5 is 80 divided by 10 would be 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*5/10=8"",
    resulting_state=(8,),
    comment='""4 times 4 is 16 times 5 is 80 divided by 10 would be 8""',
)

# ""10 times 5 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(4, 4, 50),
    comment='""10 times 5 is 50""',
)

# ""4 times 5 is 20. Plus 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5+4=24"",
    resulting_state=(10, 24),
    comment='""4 times 5 is 20. Plus 4 is 24""',
)

# ""10 divided by 4... Times 5 plus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/4*5+4=16.5"",
    resulting_state=(16.5,),
    comment='""10 divided by 4... Times 5 plus 4""',
)
```"
1119,"[2,4,6,9]",,180," Target number 24, 2, 4, 6, 9. It's not like a cheer. 2, 4, 6, 8 is the cheer. 2, 4, 6, 9. 4, 9 times 4 is 36. Minus 6 would be 30. 6 times 4, 2 times, 2 times 9 is 18. Times 4, 9 times 2, times 4 divided by 6, nope. 18 times 6 divided by 4, what is 18 times 6? It's like 9 times 4 times 2 divided by 6. Can I try that already? 9 times 6 times 2 divided by 4. This is a hard one, I think. 10 plus 9, I'm overthinking. This is easy, 15, 19, 21. No, it has to multiply. 2 times 6 is 12. Nope. 2 times 4 is 8 and 14. No, that's going to be an odd number. 6 times 9 is 54. 6 times 9 is 54. Divided by 2 is 28. Minus 4, no. 6 times 9 is 54. Divided by 2, 54 divided by 2 is 27. Eh, that don't work. I'm going to lose this one again. 9 times 6 plus 2 divided by 4. I don't know, I'm just guessing at this point. 54 divided by 2 is 27. That's an odd number and I have 4 left. 9 times 6. 54 divided by 4. 9 times 6 divided by 4 times 2. Maybe? No. Check and guess and check.","```python
start_state = (2, 4, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 4 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 6, 36),
    comment='""9 times 4 is 36""',
)

# ""Minus 6 would be 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-6=30"",
    resulting_state=(2, 30),
    comment='""Minus 6 would be 30""',
)

# ""2 times 9 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(4, 6, 18),
    comment='""2 times 9 is 18""',
)

# ""18 times 6 divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18*6/4=27"",
    resulting_state=(27,),
    comment='""18 times 6 divided by 4""',
)

# ""9 times 4 times 2 divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4*2/6=12"",
    resulting_state=(12,),
    comment='""9 times 4 times 2 divided by 6""',
)

# ""9 times 6 times 2 divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6*2/4=27"",
    resulting_state=(27,),
    comment='""9 times 6 times 2 divided by 4""',
)

# ""10 plus 9, I'm overthinking. This is easy, 15, 19, 21""
# It's not clear where the 10 comes from, so we'll skip this calculation

# ""2 times 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(4, 9, 12),
    comment='""2 times 6 is 12""',
)

# ""2 times 4 is 8 and 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(6, 8, 9),
    comment='""2 times 4 is 8""',
)

# ""6 times 9 is 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(2, 4, 54),
    comment='""6 times 9 is 54""',
)

# ""Divided by 2 is 28"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54/2=28"",
    resulting_state=(4, 28),
    comment='""Divided by 2 is 28"" - calculation error',
    result_calc_error=True,
)

# ""54 divided by 2 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""54/2=27"",
    resulting_state=(4, 27),
    comment='""54 divided by 2 is 27""',
)

# ""9 times 6 plus 2 divided by 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*6+2)/4=14"",
    resulting_state=(14,),
    comment='""9 times 6 plus 2 divided by 4""',
)

# ""54 divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*6)/4=13.5"",
    resulting_state=(2, 13.5),
    comment='""54 divided by 4""',
)

# ""9 times 6 divided by 4 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6/4*2=27"",
    resulting_state=(27,),
    comment='""9 times 6 divided by 4 times 2""',
)
```"
1121,"[7,8,8,11]",,180," 24, 7, 8, 8, 11. These are big numbers. 64 divided by 11 is a weird number. 88 divided by 8 is 11, times 7, no, 8 times 7, oh what is that, 40, 56, I don't know, 56, yeah, 56. 56, but then if you just divide it by 8, it goes back to 8 or 7 or something. It doesn't help. 64 times 7 divided by 11, maybe. Guessing. I wish we could use a calculator. 8 times 8 is 64, plus 7 is, 64 plus 7 would be 70-something weird. 11 times 8 is 64. Times 7, divided by 8, nope. 11 plus 8 is 18, plus, well, nope. 15 plus 8 is 23, it's close, but no. 7 plus, no, addition and subtraction aren't getting me there, huh? Because I have an odd number, or two odd numbers. Well, eh. Uh, 8, 3, 3 times 8, no, 3 times 7, even though I've got an 8 left. I do not like these. This is hard. 8 times 11, 8 times 8, times 7. 8 times, nope. I can't think of anything, I can't, I wish there was a skip because I just can't think of a single one, can't think of a single answer that would work with this, why have they got big numbers, 11, 8, 7, what divided by 11 is 24, what divided by 8 is 24?","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""64 divided by 11 is a weird number"" - participant likely got 64 from 8*8
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 11, 64),
    comment='""64 divided by 11 is a weird number"" - participant likely got 64 from 8*8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/11=5.82"",
    resulting_state=(7, 5.82),
    comment='""64 divided by 11 is a weird number""',
)

# ""88 divided by 8"" - participant likely multiplied 8*11 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(7, 8, 88),
    comment='""88 divided by 8""',
)

# ""8 times 7, oh what is that, 40, 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(8, 11, 56),
    comment='""8 times 7, oh what is that, 40, 56""',
)

# ""56, but then if you just divide it by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/8=7"",
    resulting_state=(7, 11),
    comment='""56, but then if you just divide it by 8""',
)

# ""64 times 7 divided by 11"" - going back to using 8*8=64
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8*7/11=40.73"",
    resulting_state=(40.73,),
    comment='""64 times 7 divided by 11""',
    result_calc_error=True,
)

# ""8 times 8 is 64, plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8+7=71"",
    resulting_state=(11, 71),
    comment='""8 times 8 is 64, plus 7""',
)

# ""11 times 8 is 64"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=64"",
    resulting_state=(7, 8, 64),
    comment='""11 times 8 is 64"" - calculation error',
    result_calc_error=True,
)

# ""11 plus 8 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(7, 8, 19),
    comment='""11 plus 8 is 18"" - slight calculation error',
    result_calc_error=True,
)

# The participant then notes that addition and subtraction aren't working

# ""8 times 11, 8 times 8, times 7"" - trying various multiplications
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11*7=616"",
    resulting_state=(8, 616),
    comment='""8 times 11, 8 times 8, times 7""',
)

# The participant then wonders what divided by 11 or 8 would give 24, but doesn't try any specific calculations
```"
1123,"[1,8,9,12]",,180," Thank you for that easy one, that was nice. 1, 8, 9, 12, 1, 8, 9, 12, big numbers, okay. 9 times 12 is 108, divided by 8, not going to be good. 10 times 12 divided by 8, still not enough. What about 8 plus 9, 12 plus 8 is 20, 29. 8 times 8, or 8 times 12, divided by 8. I mean, 8 times 24 is... just some big-ass number, it's like 100, 200 almost or something. 9 times 12... is not a big enough number. 9, 9, 8 plus 12, 8, no. 9 times 8 is 72. No. 8, 12. 8 times 12 is 94, divided by 9 is... I don't even know. Not a big enough number. 13 maybe, 13 times 9, I don't know. Oops. 13 times 9 divided by 8, no. Times 8 divided by 9, no. 11 times 9 divided by 8, no. Times 8, I'm just guessing at this point. No. I don't understand, 11 times 8, 9 times 8, no. Yeah, I don't know. 17, that's... none of these work. Frustrating, frustrating, frustrating. 9, 12 and 9, no.","```python
start_state = (1, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 12 is 108, divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(1, 8, 108),
    comment='""9 times 12 is 108""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108/8=13.5"",
    resulting_state=(1, 13.5),
    comment='""divided by 8""',
)

# ""8 plus 9, 12 plus 8 is 20, 29""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9+12=29"",
    resulting_state=(1, 29),
    comment='""8 plus 9, 12 plus 8 is 20, 29""',
)

# ""8 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(1, 9, 96),
    comment='""8 times 12""',
)

# ""9 times 8 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(1, 12, 72),
    comment='""9 times 8 is 72""',
)

# ""8 times 12 is 94"" (participant made calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=94"",
    resulting_state=(1, 9, 94),
    comment='""8 times 12 is 94"" (participant made calculation error)',
    result_calc_error=True,
)

curr_state = graph.move_to_node(new_state)
# ""divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""94/9=10.44"",
    resulting_state=(1, 10.44),
    comment='""divided by 9""',
)

# The rest appears to be the participant expressing frustration and trying random combinations without clear operations
```"
1128,"[1,3,9,10]",(1+9,180," 24. So what you want to do is that you want to do 9 minus 3 equals 6. 604. You can't get any 4's here, so... 12. 12 plus 11. That'll be 23 still, so it does still add up. 3 times 9. That'll be like 18. What? 3 times 9? That's 28. Oh yeah, I'm tripping. 28. So I think it's going to be a lot easier. So 10 minus 3 equals 7. Yeah, that's some bullshit. I was about to do some bullshit. 13. 10 plus 3 equals 6. Equals 14. 14. Then minus and then plus... 13 and then plus a 10. Yeah, that's 10. Yeah, that's not 10. So that'll be 23. Holy fuck. That's not even close. Plus 9. 11. 11. I know you're doing the same thing all over again. 11 plus 12. Yeah. Oh yeah. Seriously, what do I do? I'm going to try this. We're just going to see how it looks. 9. 9 minus 3. 6. And then 6 times 10 is... That'll be 1. So... 10 is important. 10 is important. 1 plus 3. 4. 10. 10. 5.","```python
start_state = (1, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 3 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(1, 6, 10),
    comment='""9 minus 3 equals 6""',
)

# ""3 times 9. That'll be like 18. What? 3 times 9? That's 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=28"",
    resulting_state=(1, 10, 28),
    comment='""3 times 9. That\'ll be like 18. What? 3 times 9? That\'s 28"" - calculation error',
    result_calc_error=True,
)

# ""10 minus 3 equals 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(1, 7, 9),
    comment='""10 minus 3 equals 7""',
)

# ""10 plus 3 equals... 14"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=14"",
    resulting_state=(1, 9, 14),
    comment='""10 plus 3 equals... 14"" - calculation error',
    result_calc_error=True,
)

# ""9 minus 3. 6.""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(1, 6, 10),
    comment='""9 minus 3. 6.""',
)

# ""And then 6 times 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(1, 60),
    comment='""And then 6 times 10""',
)

# ""1 plus 3. 4.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+3=4"",
    resulting_state=(4, 9, 10),
    comment='""1 plus 3. 4.""',
)
```"
1130,"[5,6,8,8]",(8x6)-(5x,180," 16 plus 11 is 9. Minus 6, so that's 2. All I need is 12. If I can make 12, what would it be like? 4 times 4 plus 8? 64. 5 times 6 is 30. 64 minus 30 is 0. Damn, bullshit. I just wanted to be real at a certain point. Crap. So here's what we're going to do. We're going to do this. Minus 3. Boom. Boom. 3. And then we do this. 6. 6 plus 8 would be 14. 5 times 8. 5 times 8 would be 40. 46 times 8 would be. Let me try that shit actually. I don't think so. I don't think so. Boom. 8 times 6 would be. 8 times 6 would be. 8 times 6 would be.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""16 plus 11 is 9"" seems to be a calculation error, and it's not clear where these numbers came from
# ""Minus 6, so that's 2"" is also unclear where these numbers came from

# ""If I can make 12, what would it be like?"" suggests setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""If I can make 12, what would it be like?""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(8, 8, 30),
    comment='""5 times 6 is 30""',
)

# ""6 plus 8 would be 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(5, 8, 14),
    comment='""6 plus 8 would be 14""',
)

# ""5 times 8 would be 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(6, 8, 40),
    comment='""5 times 8 would be 40""',
)

# ""8 times 6 would be"" repeated three times suggests this is their final attempt
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 8, 48),
    comment='""8 times 6 would be""',
)

# Based on their response ""(8x6)-(5x"", it seems they were trying to subtract 5 times something from 48
```"
1135,"[3,7,7,9]",7,186," Okay, so I can see, let's see, 9 minus 7 would equal 2. 2 times 7 is 14. Or if we do 3 times 7 is 21. And add those together. I think that would work. 7 times 3 is 21. 21, oh, 21 times these added together should work. 9 minus 7 is 2. 2, oh, 2 plus 21. Oh no, that's not it. I thought the number was wrong. Um, so we do 7 and 9 minus 7 is 2. Or 7 minus 3 equals 4. 4 and then 7, and that doesn't work. So, 9 minus 3, 9 minus 3 is 6. 9 minus 3, 9 minus 3 is 6. 6 times, 6 times 7 is 42. That gets too high. If we did 6, and then 7 plus 7 is 14, plus 6 equals 20. That's not enough. So if we did 7 minus 3, and that equals 4. And then, um, 4 plus 7 and plus 9 equals 20. That's not enough. Um, 7 times 7 equals 49. 49 divided by 9, we can't really do. 49 divided by 3 doesn't work either. Um, or 9 divided by 3. 9 divided by 3 is 3. So if we did, no, that didn't work either. Or 9 minus 3 equals 6. If we did 49 divided by 6, that wouldn't work either. Um, so if we did 7 times 3, that equals 21. 21 plus 7 minus 9. That doesn't work either. Um, 9 minus 3. 9 plus 3 equals 6. 6 plus 7 is not going to get us enough. 7 plus 7 would equal 20. That's not enough. So if we do 7 times 9.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 7 would equal 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""9 minus 7 would equal 2""',
)

# ""2 times 7 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 14),
    comment='""2 times 7 is 14""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 9, 21),
    comment='""3 times 7 is 21""',
)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""9 minus 7 is 2""',
)

# ""7 minus 3 equals 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 7, 9),
    comment='""7 minus 3 equals 4""',
)

# ""9 minus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 7, 7),
    comment='""9 minus 3 is 6""',
)

# ""6 times 7 is 42""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(7, 42),
    comment='""6 times 7 is 42""',
)

# ""7 plus 7 is 14, plus 6 equals 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+6=20"",
    resulting_state=(20,),
    comment='""7 plus 7 is 14, plus 6 equals 20""',
)

# ""7 minus 3, and that equals 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 7, 9),
    comment='""7 minus 3, and that equals 4""',
)

# ""4 plus 7 and plus 9 equals 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7+9=20"",
    resulting_state=(20,),
    comment='""4 plus 7 and plus 9 equals 20""',
)

# ""7 times 7 equals 49""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7 equals 49""',
)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 7, 7),
    comment='""9 divided by 3 is 3""',
)

# ""9 minus 3 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 7, 7),
    comment='""9 minus 3 equals 6""',
)

# ""7 times 3, that equals 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(7, 9, 21),
    comment='""7 times 3, that equals 21""',
)

# ""21 plus 7 minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+7-9=19"",
    resulting_state=(19,),
    comment='""21 plus 7 minus 9""',
)

# ""9 plus 3 equals 6"" (participant probably meant 9 minus 3)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 7, 7),
    comment='""9 plus 3 equals 6"" (participant probably meant 9 minus 3)',
)

# ""7 plus 7 would equal 20"" (participant probably meant 7+7+6=20)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+6=20"",
    resulting_state=(20,),
    comment='""7 plus 7 would equal 20"" (participant probably meant 7+7+6=20)',
)

# ""7 times 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(3, 7, 63),
    comment='""7 times 9""',
)
```"
1138,"[1,6,6,11]",11+6+6+1,66," So, let's see here. 6 times 6 is 36. Divided by 11, and that would only work. So if we do 11 minus 6, it would be 5. 5 times 6 would get us too much. Let's see. 11 minus 6 equals 5. 11 minus 6 equals 5. 5, and then if you did 6 minus 1, that would also equal 5, which would be 25, so that would be 1 too much. So if we did 5 plus 6 plus 11, that would be 22. 6, 7. 7 plus 6 plus 11. So, if I just add them all together.","```python
start_state = (1, 6, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(1, 11, 36),
    comment='""6 times 6 is 36""',
)

# ""Divided by 11"" participant considers dividing 36 by 11
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/11=3.27"",
    resulting_state=(1, 3.27),
    comment='""Divided by 11""',
)

# ""11 minus 6, it would be 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(1, 5, 6),
    comment='""11 minus 6, it would be 5""',
)

# ""5 times 6 would get us too much""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 30),
    comment='""5 times 6 would get us too much""',
)

# ""6 minus 1, that would also equal 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(5, 6, 11),
    comment='""6 minus 1, that would also equal 5""',
)

# ""5 plus 6 plus 11, that would be 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6+11=22"",
    resulting_state=(22,),
    comment='""5 plus 6 plus 11, that would be 22""',
)

# ""6, 7. 7 plus 6 plus 11"" participant seems to be trying different combinations

# ""if I just add them all together"" participant decides to add all numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6+6+1=24"",
    resulting_state=(24,),
    comment='""if I just add them all together""',
)
```"
1139,"[3,5,10,10]",(5x,183," Okay, 10 plus 10 is 20. 18 all together if I added them all. So if I do 10 minus 5, that equals 5. Um, 5 plus 3 equals 8. 10 makes 18. So if I do 10 times 3 equals 30. 30 minus 5, that'd be 25. Um, still have the other 10. So if I do 10 and 10, it's 20. If I do 20, um, plus 5 minus 3, that would still be too low. So if I do, let's see, 10 plus 5 is 15. 15 plus 13 would not be too much. So if I do 10 divided by 5, that equals 2. If I do 2 times 10, that would be 20 plus 23. So that's still not enough. Um, so if I do 10 plus 10 equals 20. Minus 3 equals 17. 17 plus 5 is too low. Um, so 5 and 15, let's think, um, 8. 5 minus 3 is 2. Or 10 minus 3 is 7. 10 minus 5 is 2. Um, 10 minus 5. Or 10 plus 5 is 15. 15 minus 3 is 18. Uh, 10 plus 10. 10 plus 15. Plus 10 is 20. Minus 5 plus 3. Or if we do 5 plus 3 equals 8. Or if we do 10 plus 3 is 13. 10 minus 3 is 7. And 7 times 5 is 35. Um, 5 plus 3 equals 7. Or 10 minus 3. 10 minus 3 equals 7. 10 minus 5 equals 5. Um, 10 minus 10. 10 plus 10 is 20. 10 plus 3 is 13. 13, 14, 15, 16, 17. So if we do 5 times 5 times 3 equals 15 plus 10 equals 25. It's not going to be enough. So we got to do .","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(3, 5, 20),
    comment='""10 plus 10 is 20""',
)

# ""10 minus 5, that equals 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 10),
    comment='""10 minus 5, that equals 5""',
)

# ""5 plus 3 equals 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(8, 10),
    comment='""5 plus 3 equals 8""',
)

# ""10 times 3 equals 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(5, 10, 30),
    comment='""10 times 3 equals 30""',
)

# ""30 minus 5, that'd be 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-5=25"",
    resulting_state=(10, 25),
    comment='""30 minus 5, that\'d be 25""',
)

# ""10 and 10, it's 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(3, 5, 20),
    comment='""10 and 10, it\'s 20""',
)

# ""20, um, plus 5 minus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+5-3=22"",
    resulting_state=(22,),
    comment='""20, um, plus 5 minus 3""',
)

# ""10 plus 5 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(3, 10, 15),
    comment='""10 plus 5 is 15""',
)

# ""10 divided by 5, that equals 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 10),
    comment='""10 divided by 5, that equals 2""',
)

# ""2 times 10, that would be 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(3, 20),
    comment='""2 times 10, that would be 20""',
)

# ""10 plus 10 equals 20. Minus 3 equals 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10-3=17"",
    resulting_state=(5, 17),
    comment='""10 plus 10 equals 20. Minus 3 equals 17""',
)

# ""17 plus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+5=22"",
    resulting_state=(22,),
    comment='""17 plus 5""',
)

# ""5 minus 3 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 10, 10),
    comment='""5 minus 3 is 2""',
)

# ""10 minus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 10),
    comment='""10 minus 3 is 7""',
)

# ""10 minus 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 10),
    comment='""10 minus 5 is 2"" - participant meant 5',
)

# ""10 plus 5 is 15. 15 minus 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5-3=12"",
    resulting_state=(10, 12),
    comment='""10 plus 5 is 15. 15 minus 3 is 18"" - participant made calculation error',
)

# ""10 plus 3 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(5, 10, 13),
    comment='""10 plus 3 is 13""',
)

# ""10 minus 3 is 7. And 7 times 5 is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3)*5=35"",
    resulting_state=(10, 35),
    comment='""10 minus 3 is 7. And 7 times 5 is 35""',
)

# ""5 plus 3 equals 7"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=7"",
    resulting_state=(7, 10, 10),
    comment='""5 plus 3 equals 7"" - calculation error',
    result_calc_error=True,
)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(3, 5, 20),
    comment='""10 plus 10 is 20""',
)

# ""5 times 5 times 3 equals 15 plus 10 equals 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3+10=25"",
    resulting_state=(10, 25),
    comment='""5 times 5 times 3 equals 15 plus 10 equals 25"" - participant made calculation error',
    result_calc_error=True,
)
```"
1142,"[5,8,8,9]",,180," that's the 8 times 8 would be 64 minus 45 that's not going to work 72 minus 40 that's not going to work let's see 9 plus 8 is 17 which would leave me needing 7 which I can't get with a 5 and an 8 8 and 8 is 16 8 plus 8 is 16 which I'm not going to be able to get with a 9 still thinking here okay trying to think of a totally different way to do this okay so if we did like 9 times 8 72 times 8 576 divided by 5 would be a fraction so that's nice that's not going to work if we did 8 times 8 which would be 64 times 5 which would be 320 divided by 9 which would also be a fraction let's see 5 plus 8 which would give me 13 times 9 which would be 170... which is also going to divide into a fraction 9 times 5 is 45 and 45 will be 16... Plus 8 is 53, which wouldn't work. 45 times 8 would be...","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 would be 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 9, 64),
    comment='""8 times 8 would be 64""',
)

# ""9 plus 8 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(5, 8, 17),
    comment='""9 plus 8 is 17""',
)

# ""8 and 8 is 16"" / ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(5, 9, 16),
    comment='""8 and 8 is 16"" / ""8 plus 8 is 16""',
)

# ""9 times 8 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(5, 8, 72),
    comment='""9 times 8 72""',
)

# ""times 8 576""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72*8=576"",
    resulting_state=(5, 576),
    comment='""times 8 576""',
)

# ""divided by 5 would be a fraction""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""576/5=115.2"",
    resulting_state=(115.2,),
    comment='""divided by 5 would be a fraction""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""8 times 8 which would be 64 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8*5=320"",
    resulting_state=(9, 320),
    comment='""8 times 8 which would be 64 times 5""',
)

# ""divided by 9 which would also be a fraction""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""320/9=35.56"",
    resulting_state=(35.56,),
    comment='""divided by 9 which would also be a fraction""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""5 plus 8 which would give me 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(8, 9, 13),
    comment='""5 plus 8 which would give me 13""',
)

# ""times 9 which would be 170""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9=117"",
    resulting_state=(8, 117),
    comment='""times 9 which would be 170"" - participant made calculation error',
    result_calc_error=True,
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""9 times 5 is 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(8, 8, 45),
    comment='""9 times 5 is 45""',
)

# ""Plus 8 is 53""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45+8=53"",
    resulting_state=(8, 53),
    comment='""Plus 8 is 53""',
)

```"
1143,"[5,6,8,8]",,180," Okay, my first thought is I'm really stinkin' this for some reason. So, just sayin'. Okay. So, let's see if we do 8 plus 8, we have 16, which means we would need another 8, which we really can't get with a 5 and a 6. So, 6 times 8 would be 48, times 5 would be 240, divided by 8 would be 30, which doesn't help us. 8 times 8 is 64 again. Plus 6 is going to give us 70, divided by 5, which would give us 14, which is not helpful. Let's see, think about multiples of 24, which would be 24, 48, 72... Well, that's not going to help me too much if I don't have the full numbers. Anyway, it's going to have to be... Okay, so let's see, what's 24, we'll say times 5 would be 120. Trying to think if I can get that with an 8 times 8 times 6. Or an 8 and an 8 and a 6, I didn't really say that right. That's going to be too big of a number. Ummm... Or 6 plus 8 times 8... 14, 112, not quite. Ummm... How about 6 plus 8 would be... Oh, I just did that one. How about 8 times 8? 8 plus 8 times 6... 8 plus 8 times 6... That's a 96, which would also still not give me 120. Ummm... Okay, I think we're going the wrong route with that one then. Ummm... 8 times 8... We divided them, we could get a 1, but that doesn't really help me with the 5 and the 6. I don't think, unless I'm thinking... Oh, yes it is, okay, never mind. One moment, okay, 8 divided by 8... Which equals 1... 1... Plus... Oh no, I'm missing a 2 then still. Never mind. I almost had an idea. I'm just going to get 12 instead. Ummm...","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8, we have 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(5, 6, 16),
    comment='""8 plus 8, we have 16""',
)

# ""6 times 8 would be 48, times 5 would be 240, divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8*5/8=30"",
    resulting_state=(30,),
    comment='""6 times 8 would be 48, times 5 would be 240, divided by 8 would be 30""',
)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""8 times 8 is 64""',
)

# ""Plus 6 is going to give us 70, divided by 5, which would give us 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(64+6)/5=14"",
    resulting_state=(14,),
    comment='""Plus 6 is going to give us 70, divided by 5, which would give us 14""',
)

# The participant then thinks about multiples of 24 but doesn't try any operations

# ""6 plus 8 times 8... 14, 112""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+8)*8=112"",
    resulting_state=(8, 112),
    comment='""6 plus 8 times 8... 14, 112""',
)

# ""8 plus 8 times 6... That's a 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+8)*6=96"",
    resulting_state=(8, 96),
    comment='""8 plus 8 times 6... That\'s a 96""',
)

# ""8 divided by 8... Which equals 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 5, 6, 8),
    comment='""8 divided by 8... Which equals 1""',
)

# The participant then says they'll get 12 but doesn't actually try any operations to get there

```"
1144,"[1,3,9,10]",(9-(1/3)x10,180," Okay, I'm starting to get disheartened by this. Just saying. Okay. 9 times 3 is 27. Let's see. 1 and 3 is 4. 9 divided by 4. Okay. Okay. Let's try to completely think of this different. So we have a 1 and a 3 and a 9 and a 10. And we want it to equal 24. So let's think about this. 9 times 3 is 27. 19, 20, 23. And let's see. 12. 9 and 3 is 12, which would be times 2, which we can't get. And, oh. 9 times 3. Wait, that might actually work. So 9 times 3 is 27. 19, 20, 23. Minus 1. Thinking of order of operations here. 27, which would give me 26. Oh, but it would be 1 plus 10. Okay, order of operations. I think this, no, this still probably doesn't work, but. Nope. Nine times. Okay, what about, wait. 9 times, 9. Okay, 9 minus 1 divided by 3. This is getting ridiculous. Okay, we're just going to try it. Nope. 9, oh. 1 divided by 3 plus 10. There we go. Nope. I think, oh, I got my. 9 minus 1 divided by 3 plus 10. Okay, this is working in my head, but I can't get it to work for some reason. Oh, times 10. I'm putting the wrong thing in.","```python
start_state = (1, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(1, 10, 27),
    comment='""9 times 3 is 27""',
)

# ""1 and 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+3=4"",
    resulting_state=(4, 9, 10),
    comment='""1 and 3 is 4""',
)

# ""9 divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/4=2.25"",
    resulting_state=(2.25, 10),
    comment='""9 divided by 4""',
)

# ""9 and 3 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(1, 10, 12),
    comment='""9 and 3 is 12""',
)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(1, 10, 27),
    comment='""9 times 3 is 27""',
)

# ""Minus 1"" participant tries subtracting 1 from 27
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-1=26"",
    resulting_state=(10, 26),
    comment='""Minus 1""',
)

# ""9 minus 1 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-1)/3=2.67"",
    resulting_state=(2.67, 10),
    comment='""9 minus 1 divided by 3""',
)

# ""1 divided by 3 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""1/3+10=10.33"",
    resulting_state=(9, 10.33),
    comment='""1 divided by 3 plus 10""',
)

# ""9 minus 1 divided by 3 times 10"" - this appears to be their final attempt
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-(1/3))*10=86.67"",
    resulting_state=(86.67,),
    comment='""9 minus 1 divided by 3 times 10""',
)

```"
1146,"[2,4,5,9]",(9-5+2)x4,104," Okay, let's think about this. We need to find 24. And we have a 2 and a 4 and a 5 and a 9. Okay, 9 times 5, 45. 9 times 4, 36. 2 times 9 is 18. 9 minus 2. Okay, 9 minus 2. I'm just going to type them out because it's easier to think of it that way. 9 minus 2 would be 7. Let's see. 7 times 4, 14, 28. That wouldn't work. Maybe it would wait. 9 minus 2. 1. Well, that would take a 4. No, that's not going to work. Okay, I probably need to sit and think about it more. Let's see. 9 times 8. 3 times 8 is 24. So I could get that if I did 2 and 5. But then how could I get an 8 out of that? 9 minus 5 would be 4 plus 2 would be 6. Wait, 9 minus 5 plus 2. No. Okay, 9 minus 4, 6. Oh, times 4 is what I meant. Did I finally get one?","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 5, 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(2, 4, 45),
    comment='""9 times 5, 45""',
)

# ""9 times 4, 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 5, 36),
    comment='""9 times 4, 36""',
)

# ""2 times 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(4, 5, 18),
    comment='""2 times 9 is 18""',
)

# ""9 minus 2... would be 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(4, 5, 7),
    comment='""9 minus 2... would be 7""',
)

# ""7 times 4, 14, 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(5, 28),
    comment='""7 times 4, 14, 28"" - participant makes calculation error',
    result_calc_error=True,
)

# ""3 times 8 is 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""3 times 8 is 24"" - participant seems to be setting a subgoal',
)

# ""So I could get that if I did 2 and 5"" - participant is trying to make 3 from 2 and 5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 4, 9),
    comment='""So I could get that if I did 2 and 5"" - participant is trying to make 3',
)

# ""9 minus 5 would be 4 plus 2 would be 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5+2=6"",
    resulting_state=(4, 6),
    comment='""9 minus 5 would be 4 plus 2 would be 6""',
)

# Finally the participant realizes they can multiply this by 4 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""times 4 is what I meant""',
)
```"
1147,"[9,10,10,13]",13+10+10-9,134," Okay, so now we have 9, and we have 10, and 10. Those are some big numbers. Okay, on a 13, 10 times 10 is 100, 10 times 9 is 90. Let's see. No, that would give me a 3, 9 times 3. What if I did, okay, what if I did 10 times 9 is 90? 10 divided by 10 should give me 1. I forgot what I was doing now. Oh, I hate when that happens. I thought I just had it. Okay, 13 minus 10, what was I thinking? Oh, okay, 13, I just had it, minus 10, which would give me 3. Okay, so now we have 3, and then 9 times 3, okay, times 9. No, I totally messed that one up already. Okay, let's say if we do 9 times 3, okay, 9 times 3, which would be 72. I don't know why this is so hard. I thought I had it, too. No, I can't see it. Okay, 9 and 9 and 9 and 9 and 9. It should be 14 plus 9. 13 plus 10. 13 plus 10. 23, 33, minus 9.","```python
start_state = (9, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(9, 13, 100),
    comment='""10 times 10 is 100""',
)

# ""10 times 9 is 90""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*9=90"",
    resulting_state=(10, 13, 90),
    comment='""10 times 9 is 90""',
)

# ""10 divided by 10 should give me 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 9, 13),
    comment='""10 divided by 10 should give me 1""',
)

# ""13 minus 10, which would give me 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 9, 10),
    comment='""13 minus 10, which would give me 3""',
)

# ""9 times 3, which would be 72"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=72"",
    resulting_state=(10, 72),
    comment='""9 times 3, which would be 72""',
    result_calc_error=True,
)

# ""13 plus 10. 23, 33, minus 9"" - participant finds the solution
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10+10-9=24"",
    resulting_state=(24,),
    comment='""13 plus 10. 23, 33, minus 9""',
)
```"
1148,"[1,1,2,6]",(1+1)x6x2,32," Okay, let's see, we have a 1, and a 1, and a 2, and a 6. So that could be, I mean, wait, that might not be so bad when you think about this. So we have like, let's say 1, because we just need 1, 1 plus 1, which is 2, times 6, which is 12, times 2, which is 20.","```python
start_state = (1, 1, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 plus 1, which is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 2, 6),
    comment='""1 plus 1, which is 2""',
)

# ""times 6, which is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(2, 12),
    comment='""times 6, which is 12""',
)

# ""times 2, which is 20"" - participant makes a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=20"",
    resulting_state=(20,),
    comment='""times 2, which is 20"" - participant makes a calculation error',
    result_calc_error=True,
)

# Although the participant made a calculation error in speaking, they submitted the correct answer (1+1)x6x2
```"
1150,"[10,11,11,12]",(11+11-10)+12,70," Okay, now we have, let's see, a 10, and an 11, and 11, and a 12. Let's see, is there any way to get it 2 so we can do a 2 times 12 because I like those the best. Oh, I don't know how to, 10 times 11 divided by, which should give you 1. Um, let's see, 2 plus 11, let's see, how about, oh, no, I only have one 10, crapola. Okay, it's going to set. Okay, that would give me the right one. Okay, 11 plus 11 minus 10, what about that? 11 plus 11 minus 10, there we go, plus 12. Did I get that right?","```python
start_state = (10, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""is there any way to get it 2 so we can do a 2 times 12"" - participant is setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""is there any way to get it 2 so we can do a 2 times 12""',
)

# ""10 times 11 divided by"" - participant starts but doesn't complete this calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""10*11=110"",
    resulting_state=(11, 12, 110),
    comment='""10 times 11""',
)

# ""2 plus 11"" - participant seems to be trying to get to their subgoal of 2
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(10, 12, 22),
    comment='""2 plus 11, let\'s see""',
)

# ""11 plus 11 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11-10=12"",
    resulting_state=(12, 12),
    comment='""11 plus 11 minus 10""',
)

# ""plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(24,),
    comment='""plus 12""',
)

```"
1153,"[1,5,6,11]",(11-6)x(5)-,180," Okay. Oh, this is going to be a simpler one because I can't math. Okay. So 11 plus 1 would be 12. So I could do 6 plus 5 to get 11. Plus, oh man, this is really going to be a shame. Okay. 6 plus 1 to get 7. Nope. Man. This is embarrassing. Okay. We're going to need to multiply somewhere here. I just feel it in my bones. Okay. So the best way to get 6 times 4. So 11 minus 5 would be 6. Minus 1 is not going to get me to 4. Okay. So 5 minus 1 would be 4 times 6 would be really nice, but that's not in the cards. We need to use that 11. Oh, LMAO. Sorry. So 11 times or 11. Oh, no, I lost my train of thought. 11 plus 6 would be 17 plus 5. 17 and then 23. Oh, my God. Embarrassing. Incorrect. Oh, this is even worse. Oh, my God. Okay. Delete it all. So we're going to do. Oh, man. I lost my train of thought on what I thought. Oh, yes. So it's going to be 11 minus 6. Yes. 11 minus 6. We get 5. And then we're going to do times. Times 5. And then subtract.","```python
start_state = (1, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 1 would be 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(5, 6, 12),
    comment='""11 plus 1 would be 12""',
)

# ""6 plus 5 to get 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(1, 11, 11),
    comment='""6 plus 5 to get 11""',
)

# ""6 plus 1 to get 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(5, 7, 11),
    comment='""6 plus 1 to get 7""',
)

# ""11 minus 5 would be 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(1, 6, 6),
    comment='""11 minus 5 would be 6""',
)

# ""5 minus 1 would be 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 6, 11),
    comment='""5 minus 1 would be 4""',
)

# ""11 plus 6 would be 17 plus 5. 17 and then 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6+5=23"",
    resulting_state=(1, 23),
    comment='""11 plus 6 would be 17 plus 5. 17 and then 23""',
    result_calc_error=True,
)

# ""11 minus 6. We get 5. And then we're going to do times. Times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-6)*5=25"",
    resulting_state=(1, 25),
    comment='""11 minus 6. We get 5. And then we\'re going to do times. Times 5""',
)

```"
1157,"[5,10,10,11]",,180," So I'm thinking...so 10 times something...times 50...okay, times 5 would be 50 minus...doesn't get me where I need to get...okay...um... So 11 minus 5 would be 6, but that doesn't deal with the 10s. Okay, so I'm thinking I need to multiply somewhere...okay, so actually, if I did... Okay, so 10 divided by 10 would get me 1. If I did...okay. Hmm. So I'm thinking maybe, like, get down to 1 somewhere with the 10s, dividing, and then multiply it by something. Maybe getting to a 6 and a 4 somehow. Um, okay. So 11 minus 5 would be 6. That would take out those two. Um... Okay, so 11 minus 10 would be 1. Hmm. Okay, so 11 minus 10 would be 1. Okay, so 11 minus 10 would be 1. This is real embarrassing as a woman in stuh. No M. Okay. This is real embarrassing as a woman in stuh. No M. Okay. 10 minus 5 would be 5. Something along the lines of multiplying to get up to 6 somewhere. I'm going to run out of time on this one. Because 100 minus 55 is not going to get me to 24. And 100 minus 16 will also not get me there. 50 minus 21 will also not get me there. Okay.","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times something...times 50...okay, times 5 would be 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(10, 11, 50),
    comment='""10 times something...times 50...okay, times 5 would be 50""',
)

# ""11 minus 5 would be 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 10, 10),
    comment='""11 minus 5 would be 6""',
)

# ""10 divided by 10 would get me 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 5, 11),
    comment='""10 divided by 10 would get me 1""',
)

# ""11 minus 10 would be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-10=1"",
    resulting_state=(1, 5, 10),
    comment='""11 minus 10 would be 1""',
)

# ""10 minus 5 would be 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 10, 11),
    comment='""10 minus 5 would be 5""',
)

# The participant seems to be setting a subgoal of getting to 6 somewhere
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""Something along the lines of multiplying to get up to 6 somewhere""',
)

# ""100 minus 55"" seems to be multiplying 10*10=100 and 11*5=55
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10-11*5=45"",
    resulting_state=(45,),
    comment='""100 minus 55""',
)

# ""100 minus 16"" might be 10*10-11-5
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10-11-5=84"",
    resulting_state=(84,),
    comment='""100 minus 16""',
)

# ""50 minus 21"" might be 10*5-11-10
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5-11-10=29"",
    resulting_state=(29,),
    comment='""50 minus 21""',
)
```"
1163,"[3,4,7,9]",(9x3)+4-7,168," 3, 4, 7, 9, 3 x 4, 3 x 4, 12 x 7, 84, 9 x 9 is 9, 4 minus 3, 1 x 7, 7 x 9 is 16, 9, 9 x 4 plus 7 is 11, plus 9 is 20, plus 3 is 23, 7 plus 9 is 16, times 4 is 54, divided by 3, 7 times 9 times 3. Divide by 4, 7 times 9, divide by 4, no, 4 times 9, 36 times 3, divide by 7, 24, 24 times 9, 16, divide by 7, no, 24. 24 minus 9 is 15. You get 15 from 7 and 7. 24 divided by 4, 6. 24 divided by 4 is 6, so I can get 9 minus 3 is 6. Then I'd have the set of 4. No more. 24 divided by 3 is 8, 8, 13 plus 7, 16 minus 4, 13, 16 minus 7, no, 24, or 6, 10 and 9, 12, 7. 7, 24, 24 plus 7, 31, 27, oh, 27, 9 times 3, 27, plus 4, minus 7.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 x 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(7, 9, 12),
    comment='""3 x 4""',
)

# ""12 x 7, 84""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(9, 84),
    comment='""12 x 7, 84""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""4 minus 3, 1 x 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4-3)*7=7"",
    resulting_state=(7, 9),
    comment='""4 minus 3, 1 x 7""',
)

# ""7 x 9 is 16"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=16"",
    resulting_state=(3, 4, 16),
    comment='""7 x 9 is 16"" - calculation error',
    result_calc_error=True,
)

# ""7 plus 9 is 16, times 4 is 54, divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+9)*4/3=54/3"",
    resulting_state=(18,),
    comment='""7 plus 9 is 16, times 4 is 54, divided by 3""',
    result_calc_error=True,
)

# ""7 times 9 times 3. Divide by 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9*3/4=47.25"",
    resulting_state=(47.25,),
    comment='""7 times 9 times 3. Divide by 4""',
)

# ""4 times 9, 36 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9*3=108"",
    resulting_state=(7, 108),
    comment='""4 times 9, 36 times 3""',
)

# ""9 minus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(4, 6, 7),
    comment='""9 minus 3 is 6""',
)

# Finally, the participant finds the solution: ""9 times 3, 27, plus 4, minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3+4-7=24"",
    resulting_state=(24,),
    comment='""9 times 3, 27, plus 4, minus 7"" - participant finds the solution',
)
```"
1164,"[1,2,2,13]",(2x13)-2+,180," 24 plus 2 is 5 plus 13 is 18. 24 plus 13 is 37. No. Let's do 24 minus 13 is 11. 24 minus 13 is 11. 11 times 2 is 13. 11 times 13 is 13. Minus 2. 13 minus 2. We give 11 times 2. Times 2 would give you 22, but you would be missing a 2. 13. 2 times 2. 2 times 2 is 4. 4 plus 13 is 17. How about 13 minus 2? 11. No. 13 plus 2 is 15. 15 times minus 15. Minus 2 times 1. No. 13 times 1. Minus 2 times 2. No. 2. 13 minus 1 is 12. 13 minus 1. 13 minus 1. We give you 12. And then minus the 12. 13 minus 12 times 2 would be 24, but you still need 2 divided by 2. 2 divided by 2 is 1. 1 plus 1 is 2. And 13 is 26. 2 times 13. 2 times 13 is 26. 1 is 2. Plus 1. 2 times 13. 2 times 1 is 26. 2 times 13, 2 times 13.","```python
start_state = (1, 2, 2, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 plus 2 is 5 plus 13 is 18"" seems to be a calculation error or transcription error
# The participant seems to be working backward from 24, setting it as a subgoal
graph.set_subgoal((24,), comment=""Participant seems to be working backward from 24"")

# ""2 times 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(1, 4, 13),
    comment='""2 times 2 is 4""',
)

# ""4 plus 13 is 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+13=17"",
    resulting_state=(1, 17),
    comment='""4 plus 13 is 17""',
)

# ""13 minus 2? 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(1, 2, 11),
    comment='""13 minus 2? 11""',
)

# ""13 plus 2 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(1, 2, 15),
    comment='""13 plus 2 is 15""',
)

# ""13 minus 1 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(2, 2, 12),
    comment='""13 minus 1 is 12""',
)

# ""2 times 13 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=26"",
    resulting_state=(1, 2, 26),
    comment='""2 times 13 is 26""',
)
```"
1165,"[4,6,13,13]",(13+13)-6+4,55," Let's see, 4 times 6 is 13, 13 plus 13 is 26, 13 plus 13 is 26, then 13 plus 13 is 26, 26 plus 26, 13 plus 13 is 26, times 6, no, 13 plus 3 is 26, minus 4, 26 minus 4 is 6, 26 minus 6 plus 4.","```python
start_state = (4, 6, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6 is 13"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=13"",
    resulting_state=(13, 13, 13),
    comment='""4 times 6 is 13"" - calculation error',
    result_calc_error=True,
)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(4, 6, 26),
    comment='""13 plus 13 is 26""',
)

# ""26 plus 26"" participant seems to be exploring but doesn't complete the calculation

# ""13 plus 13 is 26, times 6"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26*6=156"",
    resulting_state=(4, 156),
    comment='""26 times 6""',
)

# ""26 minus 4 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""26-4=6"",
    resulting_state=(6, 6),
    comment='""26 minus 4 is 6"" - calculation error',
    result_calc_error=True,
)

# ""26 minus 6 plus 4"" - this matches their final answer
new_state = graph.explore_operation(
    curr_state,
    operation=""26-6+4=24"",
    resulting_state=(24,),
    comment='""26 minus 6 plus 4""',
)
```"
1167,"[3,3,3,4]",(4+3)x3+3,56," I will try to get to 3. 3...3...3...4...3... Let's try to get to 6. 4...3... 4...3... Plus 3. 6... 3... Plus 3... 1... 3... 1 times 4. 4 times 4. 16... 4, 4 plus 3, 7 times 7, 4 times 3 will give you 12 times 4, no, 4 plus 3 will give you 7 times 3 would give you 21, plus 3 gives you 4.","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let's try to get to 6"" - participant sets a subgoal
graph.set_subgoal(
    (3, 3, 6),
    state_after_subgoal=(24,),
    comment='""Let\'s try to get to 6""',
)

# ""4...3... Plus 3"" participant seems to be trying 4+3
new_state = graph.explore_operation(
    curr_state,
    operation=""4+3=7"",
    resulting_state=(3, 3, 7),
    comment='""4...3... Plus 3""',
)

# ""4 times 3 will give you 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(3, 3, 12),
    comment='""4 times 3 will give you 12""',
)

# ""4 plus 3 will give you 7 times 3 would give you 21, plus 3 gives you 4""
# First, they do 4+3=7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+3=7"",
    resulting_state=(3, 3, 7),
    comment='""4 plus 3 will give you 7""',
)

# Then multiply by 3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 21),
    comment='""times 3 would give you 21""',
)

# Finally add 3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+3=24"",
    resulting_state=(24,),
    comment='""plus 3 gives you 24""',
)
```"
1169,"[8,8,8,11]",,180," 8, 8, 8, and 11, 8 divided by 8, 1, plus 11, be 12, plus 8 is 20, 11 minus 8, 3, times 8, 24, times 8 is 3. 8 times 8 minus 8 divided by 8, 1, times 11, is 11, plus 8, 90, 8 times 11, 88, 11 minus 8, divided by 8, 10, 10, 8 plus 11, 19, 19, minus, plus 8, plus 8, 27 minus 8, no, 8, divided by 8, we give 1, plus 8 is 9, plus 11 is 20, 11, 8, 24, 24, divided by 8 is 3, 11, 8 divided by 8 is 1. Times 11 minus 3, 11 minus 8 is 3, but then I'd still have a left over 8, um, 11 minus 8 is 3, times 8 is 24, 8 plus 8, 16 plus 8 is also, 16 plus 8 is 8. 11 minus 8 is 24, 16, 16 plus 8, 11 minus 8, um, plus 8, times 3, 11 minus 8, 3, plus 8, 11 times 8, 11 plus 8, 11 plus 8, 19. Plus, plus 8, 27 minus 8, 8.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 8, 1, plus 11, be 12, plus 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 8, 8, 11),
    comment='""8 divided by 8, 1""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(8, 8, 12),
    comment='""plus 11, be 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(8, 20),
    comment='""plus 8 is 20""',
)

# ""11 minus 8, 3, times 8, 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8, 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(8, 24),
    comment='""times 8, 24""',
)

# ""8 times 11, 88""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(8, 8, 88),
    comment='""8 times 11, 88""',
)

# ""11 minus 8, divided by 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8)/8=0.375"",
    resulting_state=(0.38, 8),
    comment='""11 minus 8, divided by 8""',
)

# ""8 plus 11, 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(8, 8, 19),
    comment='""8 plus 11, 19""',
)

curr_state = graph.move_to_node(new_state)
# ""plus 8, plus 8, 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""19+8=27"",
    resulting_state=(8, 27),
    comment='""plus 8, 27""',
)

# ""8, divided by 8, we give 1, plus 8 is 9, plus 11 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 8, 8, 11),
    comment='""8, divided by 8, we give 1""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+8=9"",
    resulting_state=(8, 9, 11),
    comment='""plus 8 is 9""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(8, 20),
    comment='""plus 11 is 20""',
)

# ""11 minus 8 is 3, times 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8 is 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(8, 24),
    comment='""times 8 is 24""',
)

# ""8 plus 8, 16 plus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(8, 11, 16),
    comment='""8 plus 8, 16""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8=24"",
    resulting_state=(11, 24),
    comment='""plus 8""',
)

# ""11 plus 8, 19. Plus, plus 8, 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(8, 8, 19),
    comment='""11 plus 8, 19""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+8=27"",
    resulting_state=(8, 27),
    comment='""Plus, plus 8, 27""',
)
```"
1170,"[1,1,5,5]",(5-1)x(5+1),18," All right, 24. So 6, 4, and then 6. That's all we need. So 5 minus 1 times 5 plus 1 is going to be 24.","```python
start_state = (1, 1, 5, 5)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So 6, 4, and then 6"" suggests the participant is setting subgoals
# They seem to want to get 4 and 6 to multiply together to get 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""So 6, 4, and then 6"" suggests participant wants to get 4 and 6 to multiply',
)

# ""5 minus 1 times 5 plus 1""
# This creates 4 (from 5-1) and 6 (from 5+1) which they then multiply
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-1)*(5+1)=24"",
    resulting_state=(24,),
    comment='""5 minus 1 times 5 plus 1 is going to be 24""',
)
```"
1182,"[6,9,9,11]",,180," Okay, 9 plus 11 is 20. How about 6 times 9, which I think is 54 minus 11 minus 9 is not it. 54 divided by 9 is 6. 6 plus 11 doesn't get me there. How about 11? Minus 9 is 2 times is 3. It only gets me to 6. That's not what I want. Wait, 2 plus 9 is 11. 17 doesn't get me there. I hope I'm not doing a bad job. I hope other people struggled. 11 minus 6 is 5. Times 9 is 45. Doesn't get me there. There has to be like a algebra way to do this that I don't remember. Oh, so 9 plus 9 is 18. Plus 6 is 24. But you'll tell me I can't. I have to use the 11. How do I negate the 11? I don't know how to negate the 11. 9 divided by 9 is 1. No. 11 plus 6 is obviously 17. 17 plus 9 is 26. Doesn't get me there. Wish I wasn't timing out on these. This is going to annoy me tonight. Oh, how about 6 divided by 9 is 2 thirds. 2 thirds times 11. That's going to get me. Decimal. 2 thirds. No, that's still going to. 2 thirds of 9. No.","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 11 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(6, 9, 20),
    comment='""9 plus 11 is 20""',
)

# ""How about 6 times 9, which I think is 54 minus 11 minus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9-11-9=34"",
    resulting_state=(34,),
    comment='""6 times 9, which I think is 54 minus 11 minus 9""',
)

# ""11 Minus 9 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 6, 9),
    comment='""11 Minus 9 is 2""',
)

# ""9 plus 9 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 11, 18),
    comment='""9 plus 9 is 18""',
)

# ""Plus 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(11, 24),
    comment='""Plus 6 is 24""',
)

# ""9 divided by 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 6, 11),
    comment='""9 divided by 9 is 1""',
)

# ""11 plus 6 is obviously 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(9, 9, 17),
    comment='""11 plus 6 is obviously 17""',
)

# ""17 plus 9 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+9=26"",
    resulting_state=(9, 26),
    comment='""17 plus 9 is 26""',
)

# ""6 divided by 9 is 2 thirds""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/9=0.67"",
    resulting_state=(0.67, 9, 11),
    comment='""6 divided by 9 is 2 thirds""',
)
```"
1187,"[2,2,10,11]",,180," Okay, um, 2 times 11 is 22. No, yeah, it's 22 times 10. Oh, how about 10? 10 divided by 2 is 5. 5 times 2 is back to 10 plus 11. That doesn't do it. 2 plus 2 plus 2, or 2 times 2, sorry, same thing, but 2 times 2 is 4 plus 2. Oh, that doesn't do it. 11 plus 10, 21, 23, 25, that doesn't do it. Oh, how about 11 minus 10? No. 11 minus 2? 11 minus 2? is nine nine two two two two two two two two okay so I'm sorry for me don't judge 10 minus 2 is 8 8 times 2 is 26 8 times 11 that's a lot sorry whatever you're seeing my clicks I can so easily get to 25 2 oh what if I went negative 2 minus 10 negative 8 no it doesn't help me I might not be able to get this one 10 minus 2 is obviously 8 8 8 times 2 is 16 I can get back to 25 you don't want 25 8 I could get to 40 minus 11 that doesn't do me right","```python
start_state = (2, 2, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 10, 22),
    comment='""2 times 11 is 22""',
)

# ""10 divided by 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 11),
    comment='""10 divided by 2 is 5""',
)

# ""5 times 2 is back to 10 plus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2+11=21"",
    resulting_state=(21,),
    comment='""5 times 2 is back to 10 plus 11""',
)

# ""2 times 2 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 10, 11),
    comment='""2 times 2 is 4""',
)

# ""11 plus 10, 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+10=21"",
    resulting_state=(2, 2, 21),
    comment='""11 plus 10, 21""',
)

# ""11 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-10=1"",
    resulting_state=(1, 2, 2),
    comment='""11 minus 10""',
)

# ""11 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 9, 10),
    comment='""11 minus 2""',
)

# ""10 minus 2 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(2, 8, 11),
    comment='""10 minus 2 is 8""',
)

# ""8 times 2 is 26"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=26"",
    resulting_state=(11, 26),
    comment='""8 times 2 is 26"" - calculation error',
    result_calc_error=True,
)

# ""2 minus 10 negative 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2-10=-8"",
    resulting_state=(-8, 2, 11),
    comment='""2 minus 10 negative 8""',
)

# ""10 minus 2 is obviously 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(2, 8, 11),
    comment='""10 minus 2 is obviously 8""',
)

# ""8 times 2 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(11, 16),
    comment='""8 times 2 is 16""',
)

```"
1188,"[7,10,10,12]",(10+12)+(10/7),180," I need an easy one, to be honest. What divides easily? How about 12 minus 10 is 2. 2 plus 9, I'd get to 19. That doesn't do it. 10 plus 7 is 17. 17 plus 12 is 29. Doesn't do it. What is 12 times 7 minus 12 times 7? 84. 7, 84. Divided by 10 by 10 is 16. That doesn't do it. What about 12 times 10 is 120 minus 70. Doesn't do it. Blast you for making these hard. Oh, what about 12 minus 7 is 5. That doesn't do it. What about 12 divided by 10 is what? 1.2. 1.2 times 17, does that equal 24? No. It's actually, I suck at math. I'm not great at math. 17, I can get 17. 17 plus 10, 17 plus 12, no. These better all have right answers. It says in the end that some of these didn't have answers. I would feel vindicated, though I don't think I will be. 10 plus 12 is 22. Will you accept, I'm going to try this. 10 divided by 7, because doesn't this equal.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 10 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(2, 7, 10),
    comment='""12 minus 10 is 2""',
)

# ""2 plus 9"" - not clear where 9 comes from, might be a transcription error
# Moving back to start state

curr_state = graph.move_to_node(start_state)
# ""10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(10, 12, 17),
    comment='""10 plus 7 is 17""',
)

# ""17 plus 12 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+12=29"",
    resulting_state=(10, 29),
    comment='""17 plus 12 is 29""',
)

# ""12 times 7"" going back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(10, 10, 84),
    comment='""12 times 7""',
)

# ""Divided by 10 by 10 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""84/10=8.4"",
    resulting_state=(8.4, 10),
    comment='""Divided by 10 by 10 is 16"" - calculation error',
)

# ""12 minus 7 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 10, 10),
    comment='""12 minus 7 is 5""',
)

# ""12 divided by 10 is what? 1.2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/10=1.2"",
    resulting_state=(1.2, 7, 10),
    comment='""12 divided by 10 is what? 1.2""',
)

# ""10 plus 12 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(7, 10, 22),
    comment='""10 plus 12 is 22""',
)

# ""10 divided by 7"" - participant tries this operation at the end
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/7=1.43"",
    resulting_state=(1.43, 10, 12),
    comment='""10 divided by 7""',
)
```"
1195,"[3,8,12,12]",(3x8)+(12-12),135," All right, and then target numbers are 3, 8, 12, and 12, so 3. Let's see how I can do this. Let's see. I want to say, let's say 12 minus 3, and 12 minus 3 would be 9, and then 12 minus 12 minus, no, and then 12 minus 8 would be 4. No, that's not right. Let's see. 9 divided by, let's see, 24 divided by 9. Oh yeah, that's not right. That's not right. So, hmm. Let's see. So, let's see. Oh, okay. I see what I can do. Okay. So, oops. Parentheses 3 times 8 parentheses plus parentheses 12 minus 12 parentheses.","```python
start_state = (3, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 3 would be 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(8, 9, 12),
    comment='""12 minus 3 would be 9""',
)

# ""and then 12 minus 8 would be 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 9),
    comment='""and then 12 minus 8 would be 4""',
)

# ""No, that's not right"" participant backtracks

# ""24 divided by 9"" participant seems to be working backwards from goal
graph.set_subgoal(
    (9, 24),
    state_after_subgoal=(24,),
    comment='""24 divided by 9""',
)

# Finally the participant finds the solution: ""Parentheses 3 times 8 parentheses plus parentheses 12 minus 12 parentheses""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3*8)+(12-12)=24"",
    resulting_state=(24,),
    comment='""Parentheses 3 times 8 parentheses plus parentheses 12 minus 12 parentheses""',
)
```"
1204,"[3,6,8,13]",,180," 13 times 3 plus 8 divided by 6. Shut up. 13 divided by 3 plus 8 plus 6. 8 times 6 plus 13. 8 times 6 plus 13. 13 divided by 3. 8 divided by 6 times 13 divided by 3. 8 divided by 6 times 13 plus 8. 8 divided by 3. 8 divided by 3. 13 times 8 plus 6 divided by 3. 13 times 8 plus 6 divided by 3. 13 times 8 plus 6 divided by 3. 8 times 3, plus 13 divided by 6. 6 times 8, plus 13 minus 3. 13 times 3, plus 8, minus 6.","```python
start_state = (3, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 3 plus 8 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3+8/6=40.33"",
    resulting_state=(40.33,),
    comment='""13 times 3 plus 8 divided by 6""',
)

curr_state = graph.move_to_node(start_state)
# ""13 divided by 3 plus 8 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/3+8+6=18.33"",
    resulting_state=(18.33,),
    comment='""13 divided by 3 plus 8 plus 6""',
)

curr_state = graph.move_to_node(start_state)
# ""8 times 6 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6+13=61"",
    resulting_state=(3, 61),
    comment='""8 times 6 plus 13""',
)

curr_state = graph.move_to_node(start_state)
# ""13 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/3=4.33"",
    resulting_state=(4.33, 6, 8),
    comment='""13 divided by 3""',
)

curr_state = graph.move_to_node(start_state)
# ""8 divided by 6 times 13 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/6*13/3=5.78"",
    resulting_state=(5.78,),
    comment='""8 divided by 6 times 13 divided by 3""',
)

curr_state = graph.move_to_node(start_state)
# ""8 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/3=2.67"",
    resulting_state=(2.67, 6, 13),
    comment='""8 divided by 3""',
)

curr_state = graph.move_to_node(start_state)
# ""13 times 8 plus 6 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*8+6/3=106"",
    resulting_state=(106,),
    comment='""13 times 8 plus 6 divided by 3""',
)

curr_state = graph.move_to_node(start_state)
# ""8 times 3, plus 13 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3+13/6=26.17"",
    resulting_state=(26.17,),
    comment='""8 times 3, plus 13 divided by 6""',
)

curr_state = graph.move_to_node(start_state)
# ""6 times 8, plus 13 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8+13-3=58"",
    resulting_state=(58,),
    comment='""6 times 8, plus 13 minus 3""',
)

curr_state = graph.move_to_node(start_state)
# ""13 times 3, plus 8, minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3+8-6=41"",
    resulting_state=(41,),
    comment='""13 times 3, plus 8, minus 6""',
)
```"
1207,"[6,6,8,9]",9x8,180," 6 plus 6 plus 8 divided by 9. 9 times 8 plus 6 divided by 6. Shut up! 6 plus 8 divided by 9. 9 times 8. 6 divided by 6. 6. . Number 7 won correctly, for 2 seconds. Number 8 won correctly, for 2 seconds. Number 8� 6 times 6, minus 8, minus 9. 6 times 9, minus 8, minus 6. That's fucking annoying. I mean, 8 plus 6 plus 9 minus 6. 9 plus 8 minus 6 plus 6. 6 plus 6 minus 8 plus 9. 9 minus 8 plus 6 plus 6. 8 times 6 minus 9 plus 6. 9 times 8.","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 6 plus 8 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+6+8)/9=2.22"",
    resulting_state=(2.22,),
    comment='""6 plus 6 plus 8 divided by 9""',
)

# ""9 times 8 plus 6 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*8+6)/6=13"",
    resulting_state=(13,),
    comment='""9 times 8 plus 6 divided by 6""',
)

# ""6 plus 8 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+8)/9=1.56"",
    resulting_state=(6, 1.56),
    comment='""6 plus 8 divided by 9""',
)

# ""9 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(6, 6, 72),
    comment='""9 times 8""',
)

# There appears to be some irrelevant text about numbers winning

# ""6 times 6, minus 8, minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6-8-9=19"",
    resulting_state=(19,),
    comment='""6 times 6, minus 8, minus 9""',
)

# ""6 times 9, minus 8, minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9-8-6=40"",
    resulting_state=(40,),
    comment='""6 times 9, minus 8, minus 6""',
)

# ""8 plus 6 plus 9 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6+9-6=17"",
    resulting_state=(17,),
    comment='""8 plus 6 plus 9 minus 6""',
)

# ""9 plus 8 minus 6 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8-6+6=17"",
    resulting_state=(17,),
    comment='""9 plus 8 minus 6 plus 6""',
)

# ""6 plus 6 minus 8 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6-8+9=13"",
    resulting_state=(13,),
    comment='""6 plus 6 minus 8 plus 9""',
)

# ""9 minus 8 plus 6 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8+6+6=13"",
    resulting_state=(13,),
    comment='""9 minus 8 plus 6 plus 6""',
)

# ""8 times 6 minus 9 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6-9+6=45"",
    resulting_state=(45,),
    comment='""8 times 6 minus 9 plus 6""',
)

# ""9 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(6, 6, 72),
    comment='""9 times 8""',
)
```"
1210,"[6,7,9,9]",(6x7)-9-9,151," Target number 24. Okay, well, this one's more complicated than the others. Let's multiply. Let's multiply. 6, 7, 9, 9. 9 will give us 81. And if I divided it by 7, or maybe better by 6. 6 gives a 13. Divided by 7. Yeah, it's by 6. Still don't reach the answer. Okay, that's not gonna do it. 6 multiplied by 7. That's 42. Let's put it in. And then... Minus 9. Another minus 9. right Okay, so it looks like I am on the right track with this Oh","```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 will give us 81"" - participant is multiplying the two 9s
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 7, 81),
    comment='""9 will give us 81""',
)

# ""And if I divided it by... 6 gives a 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""81/6=13"",
    resulting_state=(7, 13),
    comment='""And if I divided it by... 6 gives a 13""',
    result_calc_error=True,
)

# ""6 multiplied by 7. That's 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(9, 9, 42),
    comment='""6 multiplied by 7. That\'s 42""',
)

# ""And then... Minus 9. Another minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-9-9=24"",
    resulting_state=(24,),
    comment='""And then... Minus 9. Another minus 9""',
)

```"
1215,"[12,12,13,13]",(,180," Oh, this is a really easy one, I'll just have to use all the numbers, which I assume so. Yup, not all numbers used. Can't just throw in random numbers. Let's just do these random numbers. Hmm, guess I won't be able to do this. I am saying my thoughts out loud. What are you talking about? This thing is starting to piss me off. I am telling him to say my thoughts out loud. Ugh. let's see i'm not saying the stupid thoughts out i'm saying the smart ones out whatever you guys want to hear everything don't you well here we go there 12 plus 12 that's i mean 12 multiply by total that's 144 then 13 multiply by 13. that's 169 269 minus 144 oh so close well wouldn't have been so easy you know it's gonna be easy why would it be easy what if we do 169 no 13 multiply by 13 169 169 divided by 12 it's 14 oh not if i'm going to 69 i'm multiplying by how much they'll give us quite a quite a hundred and here's a number that's for sure but if we divide that number we're in the thousands 12 that would still be in the hundreds whatever well i guess i'm not getting the brown s huh ah","```python
start_state = (12, 12, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# A lot of the transcript is the participant commenting on having to speak their thoughts out loud

# ""12 plus 12"" then corrects to ""12 multiply by total that's 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(13, 13, 144),
    comment='""12 multiply by total that\'s 144""',
)

# ""then 13 multiply by 13. that's 169""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(12, 12, 169),
    comment='""13 multiply by 13. that\'s 169""',
)

# ""169 divided by 12 it's 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169/12=14"",
    resulting_state=(12, 14),
    comment='""169 divided by 12 it\'s 14""',
    result_calc_error=True,
)
```"
1216,"[4,5,5,8]",(5x8),180," Target number 24… hmm, hmm, hmm, hmm… let's see… if I multiply 5 and 5, that's 25… and then… let's see… hmmm, hmmm, hmmm, hmmm, hmmm, hmmm… subtract 4 from it, and it's 21… … hmmm, hmmm, hmmm, hmmm… okay, let's see… 4 multiplied by 8, that's 32… umm… hmmm… right there… 5 multiplied by 8, that's 32… 27… oh… no… let's come up with a code up here now… dig that 32… make minus 5… that's 27… let's see 5 multiplied by 8 that's 40 then 40 40 divided by 5","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I multiply 5 and 5, that's 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 8, 25),
    comment='""if I multiply 5 and 5, that\'s 25""',
)

# ""subtract 4 from it, and it's 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-4=21"",
    resulting_state=(8, 21),
    comment='""subtract 4 from it, and it\'s 21""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""4 multiplied by 8, that's 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(5, 5, 32),
    comment='""4 multiplied by 8, that\'s 32""',
)

# ""5 multiplied by 8, that's 32"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=32"",
    resulting_state=(4, 5, 32),
    comment='""5 multiplied by 8, that\'s 32"" - participant makes calculation error',
    result_calc_error=True,
)

# ""make minus 5... that's 27"" - continuing from 32
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-5=27"",
    resulting_state=(4, 27),
    comment='""make minus 5... that\'s 27""',
)

# ""5 multiplied by 8 that's 40"" - participant corrects earlier calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(4, 5, 40),
    comment='""5 multiplied by 8 that\'s 40""',
)

# ""40 divided by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40/5=8"",
    resulting_state=(4, 8),
    comment='""40 divided by 5""',
)

```"
1217,"[1,2,11,13]",,180," Oh, no, it's one of those. Oh, no. 11, 13, 24. No. 2 multiplied by 11, 22. No. No. 2 multiplied, I mean 13 multiplied by 226. Minus 11, that's 15, no. Mmm. Mmm-hmm. 2 multiplied by... Oh. No. 11 multiplied by 13. No. Huh. How much would that be? In the thousands, probably. Mmm-hmm. No. Oh, God. Hmm. I am saying my thoughts aloud. What if I do 1 plus 12? Multiplied by 2, that is 24. 24. And... Oh. Tch. Wait, 1 multiplied by 13. 13, 13. Why can't I figure out a solution? 1 plus 2, 3. Minus 3. Minus 11, that's 8. Plus 13, that's 21. No. Wait. Oh. 2 minus 11, 9. What?","```python
start_state = (1, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 multiplied by 11, 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(1, 13, 22),
    comment='""2 multiplied by 11, 22""',
)

# ""13 multiplied by 2 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(1, 11, 26),
    comment='""13 multiplied by 2 26""',
)

# ""Minus 11, that's 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-11=15"",
    resulting_state=(1, 15),
    comment='""Minus 11, that\'s 15""',
)

# ""11 multiplied by 13"" participant considers but doesn't actually compute

# ""What if I do 1 plus 12?"" seems to be a transcription error since there is no 12 in the start state
# They likely meant ""1 plus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(2, 12, 13),
    comment='""What if I do 1 plus 12?"" seems to be a transcription error, likely meant 1+11',
)

# ""Multiplied by 2, that is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(13, 24),
    comment='""Multiplied by 2, that is 24""',
)

# ""1 multiplied by 13. 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*13=13"",
    resulting_state=(2, 11, 13),
    comment='""1 multiplied by 13. 13""',
)

# ""1 plus 2, 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+2=3"",
    resulting_state=(3, 11, 13),
    comment='""1 plus 2, 3""',
)

# ""Minus 11, that's 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 3),
    comment='""Minus 11, that\'s 8"" - participant seems to have made a calculation error',
    result_calc_error=True,
)

# ""Plus 13, that's 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+13=21"",
    resulting_state=(1, 11, 21),
    comment='""Plus 13, that\'s 21"" - participant seems to have made a calculation error',
    result_calc_error=True,
)

# ""2 minus 11, 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(1, 9, 13),
    comment='""2 minus 11, 9""',
)
```"
1224,"[5,5,10,10]",,180," Now let's do the next one. It's 5, 5, 10, and 10. So we have a total of 10, 20, 25, 30. Okay, so we need 24. So 5 times 5 is 25 plus 10. Nope. 5 times 10 is 50 minus 10 is 40. Nope. 10 plus 10 is 20. No. 5 times 10 is 50. No. 5 times 5 is 25. Nope. 5 plus 5 is 15. How can you get 24 out of two odd numbers? It's beyond me. 5 plus 5 is – how are you going to get to 10? 5 times 5 is 25 times 10. Nope. 10 times 5 is 50. Nope. 10 times 10 is 100. No. So it has to be 5 plus 5. No. 10 plus 5 is 15 plus 5 is 20. No. That's weird. 5 – okay, I've got to come up with 34. So 5 times 10 is 15. No. 10 times 10 is 100. No. 10 times 10 is 100. No. 10 times 10 is 15. I mean, 5 plus 10 is 15. 10 plus 10 or 10 times 10 is 100 minus – thank you Box. I love you. Okay. So 10 times 5 is 50 minus. No. I've got to come up with some other 10 plus 5 no that's not going to work oh thank you box i love you now i don't even know what i was thinking again oh you're so awesome you're just you're doing that so i can't get the problem corrected that's exactly what you're doing so 5 plus 5 is 25. nope that's not gonna work i don't understand okay 5 times 10 is 50. this 5 and the 5 has got me confused because the 24 is an even number so why this odd numbers and if you add it it's 10. five 5 plus 5 is 10. 5 times 5 is 10.","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(10, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""5 times 10 is 50 minus 10 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10-10=40"",
    resulting_state=(5, 40),
    comment='""5 times 10 is 50 minus 10 is 40""',
)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 5, 20),
    comment='""10 plus 10 is 20""',
)

# ""5 times 10 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(5, 10, 50),
    comment='""5 times 10 is 50""',
)

# ""5 plus 5 is 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=15"",
    resulting_state=(10, 10, 15),
    comment='""5 plus 5 is 15"" - calculation error',
    result_calc_error=True,
)

# ""5 times 5 is 25 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5*10=250"",
    resulting_state=(10, 250),
    comment='""5 times 5 is 25 times 10""',
)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 5, 100),
    comment='""10 times 10 is 100""',
)

# ""10 plus 5 is 15 plus 5 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5+5=20"",
    resulting_state=(10, 20),
    comment='""10 plus 5 is 15 plus 5 is 20""',
)

# ""5 times 10 is 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=15"",
    resulting_state=(5, 10, 15),
    comment='""5 times 10 is 15"" - calculation error',
    result_calc_error=True,
)

# ""5 plus 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(10, 10, 10),
    comment='""5 plus 5 is 10""',
)

# ""5 times 5 is 10"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=10"",
    resulting_state=(10, 10, 10),
    comment='""5 times 5 is 10"" - calculation error',
    result_calc_error=True,
)

```"
1226,"[3,5,12,12]",,180," All right, so our numbers are 3, 5, 12, and 12. So we have 12 and 12 is 24 and then the 5 is 29, 32. So we'd need it. Okay, so 12 plus 12. Okay, so let's do in the parentheses 12 plus 12 outside the parentheses plus 3 plus 12. Plus 5. And so that'd be 12 plus 12 in the parentheses. That'd be 24 plus 3 is 27. Wait a minute, 24. Oh boy, I've got that wrong. All right, 12 plus 12 is 24. Well, 3 times 5 is 15 plus 12. 3 times 5, darn box, stupid. 3 times 5 is 15 plus 12 is 15. 27. That wouldn't work. So 24. Well, I had it figured out. I thought I did, but it's just stupid. I'll keep watching through this box. Okay, so 12 and 12 is 24. 25, 26, 27. Be 32. So we're 8 away. 8 numbers, too many. So we'll have, say, 5. 3 plus 5 is 8. And then 24. No. Oh, 5 minus 3 is 2. That wouldn't work either. 3 into 12 is 4. So 12 divided by 3 is 4. Plus 5 is 9. Plus 12 is 21. So it's not working. Okay, 3. 12 divided by 3 is 4. Plus 12 is 16. Plus 5 is 21. No. All right, 12 minus 5 is 7. So 7 plus 12. Thank you, box. 7 plus 12 is 19. And then 21. No. All right, 12 minus 3. That would be 9.","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12 is 24 and then the 5 is 29, 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 5, 24),
    comment='""12 and 12 is 24""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+5=29"",
    resulting_state=(3, 29),
    comment='""and then the 5 is 29""',
)

# ""3 times 5 is 15 plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(12, 12, 15),
    comment='""3 times 5 is 15""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+12=27"",
    resulting_state=(12, 27),
    comment='""plus 12 is 27""',
)

# ""12 and 12 is 24. 25, 26, 27. Be 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 5, 24),
    comment='""12 and 12 is 24""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+3+5=32"",
    resulting_state=(32,),
    comment='""24. 25, 26, 27. Be 32""',
)

# ""3 plus 5 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(8, 12, 12),
    comment='""3 plus 5 is 8""',
)

# ""5 minus 3 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 12, 12),
    comment='""5 minus 3 is 2""',
)

# ""3 into 12 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 5, 12),
    comment='""3 into 12 is 4""',
)

# ""Plus 5 is 9. Plus 12 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5+12=21"",
    resulting_state=(21,),
    comment='""Plus 5 is 9. Plus 12 is 21""',
)

# ""12 divided by 3 is 4. Plus 12 is 16. Plus 5 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 5, 12),
    comment='""12 divided by 3 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+12=16"",
    resulting_state=(5, 16),
    comment='""Plus 12 is 16""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+5=21"",
    resulting_state=(21,),
    comment='""Plus 5 is 21""',
)

# ""12 minus 5 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-5=7"",
    resulting_state=(3, 7, 12),
    comment='""12 minus 5 is 7""',
)

# ""7 plus 12 is 19. And then 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(3, 19),
    comment='""7 plus 12 is 19""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+3=21"",
    resulting_state=(21,),
    result_calc_error=True,
    comment='""And then 21""',
)

# ""12 minus 3. That would be 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(5, 9, 12),
    comment='""12 minus 3. That would be 9""',
)
```"
1228,"[3,5,7,11]",,180," Now this is trickier, we've got to get some smaller numbers, um, well, 11 times 2 will give 24, uh, yeah, but the 7 doesn't do us any good, um, let's see here, uh, Uh, boop boop boop boop boop boop boop boop boop boop boop boop boop boop boop boop. Okay, we've gotta use the smaller numbers to reduce the bigger numbers, uh, but they're all odd. So we add the odd numbers to get some evens, um, 5 plus 7 gives us 12. Uh, that's okay, uh, but uh, 12 and 23, hmm? Uh. Uh, 3 plus 11 is 14, divide by 7, it gives us a 2, but then we just have the 5, uh, okay, oh, okay, wait, wait, so, um, okay, I just haven't had a fashion, oh, yeah, 5 times 7 is 35, we minused the 11, I guess it's 24, but now we gotta ditch the 3, oh, man, this is gonna take 3 minutes, uh, 15, 3 times 5 is 15, plus the 11, uh, it's 26, 26, oh, I don't know, man. I don't know about this one, where are you, where are you, we need you, um, okay, let's see if we go with the really big, bigger, uh, numbers, and then minus them against each other, let's see, um, 21, 55, 21, oh, oh, 21 and 55, 21, okay, let's make sure, 5 times 11 is 55. Oh, this is like, this fucking thing is taped right now, okay, wait, 55 minus 21, that's like 34, ah, um, for the nerves, gotta do some, like, factoring stuff, I think that's how Rachel Riley does it, uh, ba-dee-dee-dee-dee-dee-dee, um, okay, how can we get rid of the 3, uh, okay, well, 3 plus 5 is 8, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh,","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 2 will give 24"" - participant sets a subgoal of getting 2
graph.set_subgoal(
    (2, 11),
    state_after_subgoal=(24,),
    comment='""11 times 2 will give 24"" - participant sets a subgoal of getting 2',
)

# ""5 plus 7 gives us 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(3, 11, 12),
    comment='""5 plus 7 gives us 12""',
)

# ""3 plus 11 is 14, divide by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+11)/7=2"",
    resulting_state=(2, 5),
    comment='""3 plus 11 is 14, divide by 7""',
)

# ""5 times 7 is 35, we minused the 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7-11=24"",
    resulting_state=(3, 24),
    comment='""5 times 7 is 35, we minused the 11""',
)

# ""3 times 5 is 15, plus the 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5+11=26"",
    resulting_state=(7, 26),
    comment='""3 times 5 is 15, plus the 11""',
)

# ""5 times 11 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*11=55"",
    resulting_state=(3, 7, 55),
    comment='""5 times 11 is 55""',
)

# ""3 plus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(7, 8, 11),
    comment='""3 plus 5 is 8""',
)

```"
1232,"[5,5,8,10]",,181," Okay, let's see here. Here we've got the two 5s. We can generate a 3 with the 8 minus 5, but we kind of want it to keep the 8. Oh, boy. Let's see. Okay. 40. 5 times 8 times 5 is 40. Take off the 10. That's 30. Take off the 5. That's 25. The 5s can cancel each other out and give us a 1. That's not really that helpful. So, 5 times 5 is 25. And the 8, and then we get a 2. It's like 25 with a 2. That's no good. Okay, if we go big, we can go like 80. We can go 50. 1,500 is 400. Just rattling around numbers in my head here. 25 minus 2. 18 plus 6. I'm just saying numbers bounce around subconsciously. Just trying to intuitively come up with a combo here. I see 25 times 8 is 200 divided by 10. 250 divided by 8. That's not good either. Yeah, I don't know. I'll have to guess. I'm going to say this one's impossible. Impossible. Yeah, probably going to time out. Yeah, I've kind of given up. Boom, boom, boom.Em Velvet Thank you for watching.","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We can generate a 3 with the 8 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 10),
    comment='""We can generate a 3 with the 8 minus 5""',
)

# ""5 times 8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8*5=40"",
    resulting_state=(10, 40),
    result_calc_error=True,
    comment='""5 times 8 times 5 is 40"" - calculation error, should be 200',
)

# ""Take off the 10. That's 30. Take off the 5. That's 25."" 
# This seems to be subtracting numbers from 40, but using numbers not in the current state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-10=30"",
    resulting_state=(30,),
    comment='""Take off the 10. That\'s 30.""',
)

# ""5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""25 times 8 is 200 divided by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25*8/10=20"",
    resulting_state=(20,),
    comment='""25 times 8 is 200 divided by 10""',
)

# ""250 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""25*10/8=31.25"",
    resulting_state=(31.25,),
    comment='""250 divided by 8""',
)

# The rest appears to be the participant giving up and making general comments
```"
1237,"[1,2,11,13]",,180," 13 plus 11 is 24. But then I got that 2 and 1 to deal with. All right. 13 plus 11 equals 24. So I can do times 1. That's nice and easy. But the 2, where do you come in? Okay. 2 times 13 is 27. Okay. So you have to get added, I think. Where does 13 come in? 13 plus 11. Or it could be times 2. Minus 2. 13. Plus 11. Plus 2. Wait, 13 plus 11 is 24. Jeez. So I got a 13. I got like 2 times something. 2 times 1. 13 plus 13 is 26. This one sucks. I suck at this. 1 plus 11 equals 12. That's great. Times 2. Equals 24. Where is it? 13. 13 plus 1 is 12. 12. Yeah. Yeah.","```python
start_state = (1, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 11 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 2, 24),
    comment='""13 plus 11 is 24""',
)

# ""So I can do times 1"" participant tries multiplying by 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1=24"",
    resulting_state=(2, 24),
    comment='""So I can do times 1""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""2 times 13 is 27"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=27"",
    resulting_state=(1, 11, 27),
    comment='""2 times 13 is 27""',
    result_calc_error=True,
)

# ""13 plus 11"" participant tries this combination again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 2, 24),
    comment='""13 plus 11""',
)

# ""1 plus 11 equals 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(2, 12, 13),
    comment='""1 plus 11 equals 12""',
)

# ""Times 2. Equals 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(13, 24),
    comment='""Times 2. Equals 24""',
)

# ""13 plus 1 is 12"" (calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=12"",
    resulting_state=(2, 11, 12),
    comment='""13 plus 1 is 12"" (calculation error)',
    result_calc_error=True,
)
```"
1244,"[4,4,5,6]",(5-4)x6x4,170," Oh, fuck. Okay. 6 times 4 is 24, isn't it? Well, yeah, it's 24, but I got all these other numbers. Damn it. And 5 times 4 is 20. Oh, I don't need those. How am I supposed to do this with the extra numbers? Um, 4 times 4 is 16. So, the internet is 2021, 22. Fuck. 5 times 4 is 20. Play it. Fuck. But damn, Play's dad is bad. What's 5 times 6? 5 times 6 is, uh, 30? Hmm. What if I do, like, 5 times 6 plus, er, times 4 divided by 4? No, that would just put me back at the same number. When I can't do, like, 5 times 4 times 4 divided by 6? No, I don't think that would work either. Um, uh, uh, that would only be 19. All of these numbers only add up to 19, so I can't add them. But, let's say 9. And then 9 times 6. 9 times 6 is 54. That doesn't help me at all. God damn it. 8 times 5 is 40. That's probably not gonna help. I don't, I don't, I don't know. I don't know. I don't, how are you supposed to do this? Oh, oh, 5 minus 4, and then, uh, uh, times 6 times 4. Boom.","```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(4, 5, 24),
    comment='""6 times 4 is 24""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(4, 6, 20),
    comment='""5 times 4 is 20""',
)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 6, 16),
    comment='""4 times 4 is 16""',
)

# ""5 times 6 is, uh, 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(4, 4, 30),
    comment='""5 times 6 is, uh, 30""',
)

# ""5 times 4 times 4 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4*4/6=13.33"",
    resulting_state=(13.33,),
    comment='""5 times 4 times 4 divided by 6""',
)

# ""All of these numbers only add up to 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4+5+6=19"",
    resulting_state=(19,),
    comment='""All of these numbers only add up to 19""',
)

# ""9 times 6 is 54"" - participant may have gotten 9 from 5+4
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+4)*6=54"",
    resulting_state=(4, 54),
    comment='""9 times 6 is 54"" - participant may have gotten 9 from 5+4',
)

# ""8 times 5 is 40"" - participant may have gotten 8 from 4+4
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+4)*5=40"",
    resulting_state=(6, 40),
    comment='""8 times 5 is 40"" - participant may have gotten 8 from 4+4',
)

# Finally ""5 minus 4, and then, uh, uh, times 6 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-4)*6*4=24"",
    resulting_state=(24,),
    comment='""5 minus 4, and then, uh, uh, times 6 times 4""',
)
```"
1252,"[6,10,10,13]",,180," 60-23 60-23 60-23 equals... no. So... Let me see. 13 times 6 equals 78. Okay. 100-78 equals... oh, no. Wait, what? 100... 10 times 13 equals minus 60. No, that's not gonna happen. So, I think 6 minus... eh, 6 times 13 equals... equal equal equal 78. Oh, okay. 10 plus... okay, 1 plus 1... 6 plus 13 equals 19. 4. Oh, how bad. Okay. 10 plus 13 equals... oh. And 10 plus 13, 10 plus 13, 23. Okay. Okay. Numbers half by 10, 16 plus 13 equal... okay, no... 161616. Okay.ierenремme 10 minus 6 equals seven. Now, let's see. plus 10 plus 10 no okay 13, 17, 17, 16, 17, 17","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""60-23"" repeated three times, but it's not clear where these numbers came from

# ""13 times 6 equals 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(10, 10, 78),
    comment='""13 times 6 equals 78""',
)

# ""10 times 13 equals minus 60"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=60"",
    resulting_state=(6, 10, 60),
    comment='""10 times 13 equals minus 60"" seems to be a calculation error',
    result_calc_error=True,
)

# ""6 times 13 equals... equal equal equal 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*13=78"",
    resulting_state=(10, 10, 78),
    comment='""6 times 13 equals... equal equal equal 78""',
)

# ""6 plus 13 equals 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(10, 10, 19),
    comment='""6 plus 13 equals 19""',
)

# ""10 plus 13, 10 plus 13, 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(6, 10, 23),
    comment='""10 plus 13, 10 plus 13, 23""',
)

# ""10 minus 6 equals seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=7"",
    resulting_state=(7, 10, 13),
    comment='""10 minus 6 equals seven""',
    result_calc_error=True,
)

# The rest of the transcript appears to be numbers being listed without clear operations
```"
1254,"[4,5,5,8]",,180," 8 x 4 is equal to minus 10. Minus 10 and it is not. So, 20. 8 x 4 is equal to minus 20. Nope. 12 plus 10 is equal to 22. 20 is added. How about 9? 4 plus 5 plus 5 plus 8. Oh, okay. So, in that case, 10, nope. 10, 10, 10, 10, 10. Minus 32. 3, 10. Okay. Minus 1. Okay. 1 plus 5 plus 8. Nope. No. 1 plus 4.5 32. No. I cannot do that. 9. 9 minus 4. No. 32 minus 9. 92 minus 9. Oh, no. Oh, okay. Oh. Yes, I know. Uh. Okay, wait, wait. 8 x 4 is equal to 2. Okay. Minus minus 5. Do this. Nope. 8 x 5 8 x 5 8 x 5 minus minus 5 minus minus minus minus minus minus minus minus minus minus minus minus Sepuluh.","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 x 4 is equal to minus 10"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=10"",
    resulting_state=(5, 5, 10),
    comment='""8 x 4 is equal to minus 10"" - participant makes calculation error',
    result_calc_error=True,
)

# ""8 x 4 is equal to minus 20"" - participant makes another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=20"",
    resulting_state=(5, 5, 20),
    comment='""8 x 4 is equal to minus 20"" - participant makes calculation error',
    result_calc_error=True,
)

# ""4 plus 5 plus 5 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5+5+8=22"",
    resulting_state=(22,),
    comment='""4 plus 5 plus 5 plus 8""',
)

# ""32"" appears several times - participant may be computing 8*4 correctly now
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(5, 5, 32),
    comment='""32"" appears several times - participant may be computing 8*4',
)

# ""8 x 5"" repeated three times at the end
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(4, 5, 40),
    comment='""8 x 5"" repeated three times',
)

# The rest of the transcript contains repeated words ""minus"" and numbers without clear operations being performed
```"
1263,"[5,6,8,13]",(13-,180," I'm debating if I should do 5 times 6, which is 30. Let's see, 8 and 13. 8 and 13. So 5 times 6 is 30. 30 times... No, no, no. None of that works. 8 minus... Maybe 8 minus 2. Let's look into this one. 8 minus... Sorry. 8 minus 6 is gonna equal 2. Now we got 2, we got 13, and then we got 5. I don't think any of that helps. Yeah, unless we do 2 times... Even if we did 2 times 5, we'd only get 10. And even if we had added... 13. That wouldn't give us enough. So let me delete this. Let's do... Actually, hold up. Let's do 6... Sorry. 8 minus 5, which is gonna be 3. And... Yeah, 3. Hold up. Yeah. We can't do that. I was thinking 3 times 6. And... And that would be 18. But no, that wouldn't work out. I don't know about this one. 8 minus... Let's work with 13 in parentheses. 13 minus 8 equals 5, right? No, I don't wanna do that actually. 13 minus... Let's see. What's 13 minus... 6 equals 7, right? 7... Dang. 7 plus 8 would equal 15. Nope. Or minus 6. 7 minus 8 equals 5.","```python
start_state = (5, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 6, which is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(8, 13, 30),
    comment='""5 times 6, which is 30""',
)

# ""8 minus 6 is gonna equal 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 13),
    comment='""8 minus 6 is gonna equal 2""',
)

# ""2 times 5, we'd only get 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(10, 13),
    comment='""2 times 5, we\'d only get 10""',
)

# ""8 minus 5, which is gonna be 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 13),
    comment='""8 minus 5, which is gonna be 3""',
)

# ""3 times 6. And... And that would be 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(13, 18),
    comment='""3 times 6. And... And that would be 18""',
)

# ""13 minus 8 equals 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(5, 5, 6),
    comment='""13 minus 8 equals 5""',
)

# ""13 minus... Let's see. What's 13 minus... 6 equals 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(5, 7, 8),
    comment='""13 minus... 6 equals 7""',
)

# ""7 plus 8 would equal 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(5, 15),
    comment='""7 plus 8 would equal 15""',
)

# ""7 minus 8 equals 5"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7-8=5"",
    resulting_state=(5, 5),
    comment='""7 minus 8 equals 5"" seems to be a calculation error',
    result_calc_error=True,
)
```"
1265,"[1,6,8,9]",9+8+6+1,28," Okay, this one looks more difficult. Let's think of adding them first. Let's do 9 plus 8. That's going to equal 17. And then 17 plus 6 equals 20. Okay, so if we just add everything, I think we get the answer. So let's do 9 plus 8 plus 6 plus 1. Let's see, we get 17, we get 23, and then we get 24.","```python
start_state = (1, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 8. That's going to equal 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(1, 6, 17),
    comment='""9 plus 8. That\'s going to equal 17""',
)

# ""And then 17 plus 6 equals 20"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+6=20"",
    resulting_state=(1, 20),
    comment='""And then 17 plus 6 equals 20"" - calculation error',
    result_calc_error=True,
)

# ""So let's do 9 plus 8 plus 6 plus 1"" - participant tries adding all numbers at once
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8+6+1=24"",
    resulting_state=(24,),
    comment='""So let\'s do 9 plus 8 plus 6 plus 1. Let\'s see, we get 17, we get 23, and then we get 24""',
)
```"
1275,"[2,2,7,7]",,180," 7 plus 7 is 14. 15, 16, 17, 18. What if we do 7 times 2 is 14. 15, 16, 17, 18, 19, 20, 21, 22. 7 times 2 is 14, plus… 2 times 2 is 8. 14 plus 8. No, that's not right. It's also not 8, it's 4. Oh my god. 7 minus 2 is 5. 7 minus 2 is 5. two times two is four and that does eighteen seven plus two is nine nine plus nine eighteen seven plus two is four seven times seven is forty-two forty-two divided by two ooh yeah seven times ah delete delete delete seven times seven divide that by two and then plus it by two yes great seven times seven oh it's forty-nine oh my god two times two twenty-seven times four no it's twenty-eight seven plus seven times","```python
start_state = (2, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(2, 2, 14),
    comment='""7 plus 7 is 14""',
)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 7, 14),
    comment='""7 times 2 is 14""',
)

# ""2 times 2 is 8"" but then corrects to 4
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 7, 7),
    comment='""2 times 2 is 8. No, that\'s not right. It\'s also not 8, it\'s 4""',
)

# ""7 minus 2 is 5"" twice
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(2, 5, 7),
    comment='""7 minus 2 is 5""',
)

# ""seven plus two is nine nine plus nine eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+2)+(7+2)=18"",
    resulting_state=(18,),
    comment='""seven plus two is nine nine plus nine eighteen""',
)

# ""seven times seven is forty-two"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=42"",
    resulting_state=(2, 2, 42),
    comment='""seven times seven is forty-two""',
    result_calc_error=True,
)

# ""forty-two divided by two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42/2=21"",
    resulting_state=(2, 21),
    comment='""forty-two divided by two""',
)

# Then participant realizes 7*7=49, not 42
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(2, 2, 49),
    comment='""oh it\'s forty-nine""',
)

# ""seven times four"" - they probably meant 7*4 where 4 comes from 2*2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 7, 7),
    comment='""seven times four"" - first computing 2*2=4',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(7, 28),
    comment='""seven times four no it\'s twenty-eight""',
)

```"
1276,"[4,7,7,8]",,180," Okay, we got 8, 4, 7, 7. Jesus. 14, 56, 57, 89,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,45,47,48,49,52,53,56,47,49,52,53,56,47,49,52,53,56,47,48,49,52,53,56,47,48,49,52,53,56,47,48,49,52,53,56,47,49,52,53,56,47,48,49,52,53,56,47,49,52,53,56,47,49,52,53,56,47 24 16 minus guards. 8 divided by 4. 7 minus 4. 8 minus 4, 8 plus 4, four, twelve, plus seven, no, it's twenty-one, what about, eight, plus seven, plus, eight plus seven is fifteen, what about eight minus seven, one, and seven times four is twenty-eight, twenty-eight, that's not going to be right, um, you get a two, we get a one, no, we could get a zero, seven plus four is eleven, oh my god, oh my god, eight, eight times seven, eight minus seven, one, uh, why is this so complicated, it really doesn't feel like it should be, eight minus, no, it's not gonna be right, seven plus four, four times eight,","```python
start_state = (4, 7, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# After listing many numbers, the participant starts trying operations:

# ""8 divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 7, 7),
    comment='""8 divided by 4""',
)

# ""7 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 7, 8),
    comment='""7 minus 4""',
)

# ""8 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 7),
    comment='""8 minus 4""',
)

# ""8 plus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(7, 7, 12),
    comment='""8 plus 4""',
)

# ""plus seven, no, it's twenty-one""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=21"",
    resulting_state=(7, 21),
    comment='""plus seven, no, it\'s twenty-one""',
    result_calc_error=True,
)

# ""eight plus seven is fifteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(4, 7, 15),
    comment='""eight plus seven is fifteen""',
)

# ""eight minus seven, one""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 4, 7),
    comment='""eight minus seven, one""',
)

# ""seven times four is twenty-eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(7, 8, 28),
    comment='""seven times four is twenty-eight""',
)

# ""seven plus four is eleven""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(7, 8, 11),
    comment='""seven plus four is eleven""',
)

# ""eight times seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(4, 7, 56),
    comment='""eight times seven""',
)

# ""four times eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(7, 7, 32),
    comment='""four times eight""',
)
```"
1296,"[1,3,3,10]",(10-3+1)x3,145," This will be if I learn 3 times 3 is 9. 3 times, ok, 3 times, 1 times, open the brackets, 10 minus 3 plus the brackets is 6, 6 times 3 is 18, so I need, I got it, it's 3 plus 1 times, open the brackets, oh, that is 7, that is 7, 3 times 1 would be 4. Okay, or it will be, open the brackets, 10 minus 3 times 3 is 7, plus 3 plus 1, close the brackets, that is 6, 10 minus 3, that's the 3 plus 1, 6, 6 times, times 3.","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""10 minus 3 plus the brackets is 6, 6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3)*3=18"",
    resulting_state=(1, 18),
    comment='""10 minus 3...6 times 3 is 18""',
    result_calc_error=True,
)

# ""3 plus 1 times"" and ""that is 7, that is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(3, 4, 10),
    comment='""3 plus 1 times""',
)

# ""3 times 1 would be 4"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*1=4"",
    resulting_state=(3, 4, 10),
    comment='""3 times 1 would be 4""',
    result_calc_error=True,
)

# ""10 minus 3 times 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(1, 3, 7),
    comment='""10 minus 3...is 7""',
)

# ""10 minus 3, that's the 3 plus 1, 6, 6 times, times 3""
# This seems to be the final solution path: (10-3+1)*3
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3+1=8"",
    resulting_state=(3, 8),
    comment='""10 minus 3...3 plus 1""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""times 3""',
)
```"
1300,"[1,11,11,12]",12+11x(11-,180," 12 plus 11 is 24. Okay, sorry, 12 plus 11 is 24 minus 11 minus 1. No, no, no, no, no, that doesn't make sense. Eleven, eleven times one. It's 11 plus 11, 22. Then 12 plus 11. 12 plus 11 is 24 minus 11. Minus 11, that will be... 12 minus 11 will be... 12 minus 11 will be... What is the answer? 12 minus 11. One, two. All right, it's 12 plus 11. I think I need to put brackets. Plus 11 times...","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 11 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(1, 11, 23),
    comment='""12 plus 11 is 24"" - participant makes calculation error, as 12+11=23',
    result_calc_error=True,
)

# ""minus 11 minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23-11-1=11"",
    resulting_state=(11,),
    comment='""minus 11 minus 1""',
)

# ""Eleven, eleven times one""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*1=11"",
    resulting_state=(11, 11, 12),
    comment='""Eleven, eleven times one""',
)

# ""11 plus 11, 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(1, 12, 22),
    comment='""11 plus 11, 22""',
)

# ""12 plus 11 is 24"" - participant tries this again with same calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 11 is 24"" - participant makes same calculation error',
    result_calc_error=True,
)

# ""12 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 11),
    comment='""12 minus 11""',
)

# Based on their response ""12+11x(11-"", it seems they were trying to multiply 11 by something but ran out of time
```"
1301,"[7,12,12,13]",13-12,180," 12 plus 12 is 24, times 13, okay, okay, open the brackets. No, that is wrong. 13 minus 12 is 1. 13 minus 7 is 6. I don't think that's all, good boy. Okay. Okay, 13 minus 12 plus 7, that would be 9. Oh my, it's already past 24. Okay. 10 plus 24. I don't think that's all, good boy. Yeah. 13 minus 2. Oh my God. Oh my God. I literally don't know the answer. Seems a little bit more complicated. Um, what is the answer? I don't know. I'm unable to solve. . Solved that. . .","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(7, 13, 24),
    comment='""12 plus 12 is 24""',
)

# ""times 13"" participant seems to consider multiplying by 13 but realizes that's wrong
# ""No, that is wrong""

# ""13 minus 12 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 7, 12),
    comment='""13 minus 12 is 1""',
)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 12, 12),
    comment='""13 minus 7 is 6""',
)

# ""13 minus 12 plus 7, that would be 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12+7=9"",
    resulting_state=(9, 12),
    comment='""13 minus 12 plus 7, that would be 9""',
    result_calc_error=True,
)

# ""13 minus 2"" - participant may have meant 13-12 again
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 7, 12),
    comment='""13 minus 2"" - participant may have meant 13-12 again',
)

```"
1302,"[3,3,6,10]",(10-6)x(3+3),149, 6 plus 3 is 18. 18. 6 plus 3 is 9. 8 plus 3 is 13. 6 times 3 is 18. 18 plus 7 is 24. 6. 6 times 18. And bracket 6 times 3. Close the bracket. Plus. Open the bracket 10. Minus 3. Close the bracket. Close the bracket. Yes. 10 minutes 3. Okay. 10 minutes 6 is 4. okay um 10-6 is for oh yeah I got it okay ten minus six close the brackets minus six plus the brackets times in the brackets three plus three close the brackets you,"```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(3, 9, 10),
    comment='""6 plus 3 is 9""',
)

# ""8 plus 3 is 13"" - participant may have meant 10+3
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(3, 6, 13),
    comment='""8 plus 3 is 13"" - participant may have meant 10+3',
)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 10, 18),
    comment='""6 times 3 is 18""',
)

# ""18 plus 7 is 24"" - not clear where 7 comes from, might be a transcription error
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(3, 24),
    comment='""18 plus 7 is 24"" - not clear where 7 comes from, might be a transcription error',
)

# ""10 minus 6 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(3, 3, 4),
    comment='""10 minus 6 is 4""',
)

# ""three plus three"" from the current state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(4, 6),
    comment='""three plus three""',
)

# Finally multiply 4 and 6 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment=""Multiply 4 and 6 to get 24"",
)
```"
1303,"[2,2,10,11]",,180," 10 plus 11 is 21. That doesn't get it. 2 times 10, no. 10 minus 2 is 8. Plus 11, 19, no. 10 plus 2 is 12, no. 11 minus 2 is 9. Plus 10, no. 11 9 times 10, 110. Divided by 2, no. 2 times 2, 4. Times 11, 44, no. 10 times 2, 4. Times 11, 44, no. 10 10 times 11 10 11 over 10 no 11 for 2 fuck 11 times 10 no 2 times 2 times 10 20 40 no times 11 22 44 no no what's 4 plus 11 no 11 times 2 no","```python
start_state = (2, 2, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 11 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(2, 2, 21),
    comment='""10 plus 11 is 21""',
)

# ""10 minus 2 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(2, 8, 11),
    comment='""10 minus 2 is 8""',
)

# ""Plus 11, 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(2, 19),
    comment='""Plus 11, 19""',
)

# ""10 plus 2 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2=12"",
    resulting_state=(2, 11, 12),
    comment='""10 plus 2 is 12""',
)

# ""11 minus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 9, 10),
    comment='""11 minus 2 is 9""',
)

# ""Plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(2, 19),
    comment='""Plus 10""',
)

# ""9 times 10, 110""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*10=110"",
    resulting_state=(2, 110),
    comment='""9 times 10, 110""',
    result_calc_error=True,
)

# ""Divided by 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""110/2=55"",
    resulting_state=(55,),
    comment='""Divided by 2""',
)

# ""2 times 2, 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 10, 11),
    comment='""2 times 2, 4""',
)

# ""Times 11, 44""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(10, 44),
    comment='""Times 11, 44""',
)

# ""10 times 2, 4"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=4"",
    resulting_state=(2, 4, 11),
    comment='""10 times 2, 4"" seems to be a calculation error',
    result_calc_error=True,
)

# ""Times 11, 44""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(2, 44),
    comment='""Times 11, 44""',
)

# ""2 times 2 times 10 20 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2*10=40"",
    resulting_state=(11, 40),
    comment='""2 times 2 times 10 20 40""',
)

# ""times 11 22 44""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40*11=440"",
    resulting_state=(440,),
    comment='""times 11 22 44""',
    result_calc_error=True,
)

# ""11 times 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 10, 22),
    comment='""11 times 2""',
)
```"
1304,"[7,9,9,13]",,180," 7 times 9, 63. 63 times 13, what 9? No. 13 times 9. 9 minus 63, no. 13 times 7, minus, divided by 9, plus 9. 13 times 7 over 9. 9 times 13, over 9, that's just 13 again, 81 minus 7, over 13, no, 81 minus 7, 81 minus 13, over 7. No. 13 times 9, divided by 7, plus 9, it's kind of close, 13 times 7, over 9, that's just 9. 13 times 9 times 9, over 7. 13 plus 7, that's 20 plus 9. Hmm. 13. 9 plus 9 plus 13 plus 13","```python
start_state = (7, 9, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 9, 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(9, 13, 63),
    comment='""7 times 9, 63""',
)

# ""63 times 13"" participant seems to consider this but abandons it

# ""13 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9=117"",
    resulting_state=(7, 9, 117),
    comment='""13 times 9""',
)

# ""13 times 7, minus, divided by 9, plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7/9+9=19.11"",
    resulting_state=(19.11,),
    comment='""13 times 7, minus, divided by 9, plus 9""',
)

# ""9 times 13, over 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*13/9=13"",
    resulting_state=(7, 13),
    comment='""9 times 13, over 9, that\'s just 13 again""',
)

# ""81 minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9-7=74"",
    resulting_state=(13, 74),
    comment='""81 minus 7""',
)

# ""81 minus 13, over 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*9-13)/7=9.71"",
    resulting_state=(9.71,),
    comment='""81 minus 13, over 7""',
)

# ""13 times 9, divided by 7, plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9/7+9=25.71"",
    resulting_state=(25.71,),
    comment='""13 times 9, divided by 7, plus 9""',
)

# ""13 times 7, over 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7/9=10.11"",
    resulting_state=(9, 10.11),
    comment='""13 times 7, over 9""',
)

# ""13 times 9 times 9, over 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9*9/7=150.43"",
    resulting_state=(150.43,),
    comment='""13 times 9 times 9, over 7""',
)

# ""13 plus 7, that's 20 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+9=29"",
    resulting_state=(9, 29),
    comment='""13 plus 7, that\'s 20 plus 9""',
)

# ""9 plus 9 plus 13"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+13=31"",
    resulting_state=(7, 31),
    comment='""9 plus 9 plus 13""',
)
```"
1306,"[11,13,13,13]",((13x13)/13)+11,40, 13 times 13 divided by 13 plus 11. Here we go. 13 times 13 divided by 13 plus 11. Let me rewrite the 2 parentheses. 13 times 13 parentheses over 13. Divide that by 11. Nope. Add 11. That's it.,"```python
start_state = (11, 13, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 13 divided by 13 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*13)/13+11=24"",
    resulting_state=(24,),
    comment='""13 times 13 divided by 13 plus 11""',
)

# The participant briefly considers dividing by 11 instead of adding it
# ""Divide that by 11. Nope. Add 11.""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*13)/13/11=1.18"",
    resulting_state=(1.18,),
    comment='""Divide that by 11"" - participant briefly considers this but rejects it',
)

# Then they go back to their original correct solution of adding 11
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*13)/13+11=24"",
    resulting_state=(24,),
    comment='""Add 11. That\'s it.""',
)
```"
1307,"[7,10,10,12]",,180," Hmm. 10 x 10 is 120. No, 100. That's too much. 17. 12 x 10. That's 120. No. 70. 17 x 10. Over 12. Uh-uh. 12 x 7. 12 x 7 is 5. Plus 10 x 10 is 25. That doesn't equal it. Hmm. 10 x 7 is 3. 3 x 12. 3 x 10. 30. Hmm. 3 x 12. Minus 10. 5 x 10. 20 x 12. Over 7. 20 x 7. Over 12. No. 20. Plus 12. Minus 7. It's close, but no. 70 minus 22, no. 22 plus 10 minus 7, no. 12 times 10. No, 5 plus 10 plus 10, 120, 70, 120, 70, no, 100, 84, 7 times 12, that's 84 minus 100, that's 16. That's 16.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 x 10 is 120. No, 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(7, 12, 100),
    comment='""10 x 10 is 100"" participant corrects their initial error',
)

# ""12 x 10. That's 120""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*10=120"",
    resulting_state=(7, 10, 120),
    comment='""12 x 10. That\'s 120""',
)

# ""12 x 7 is 5"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=5"",
    resulting_state=(10, 10, 5),
    comment='""12 x 7 is 5"" seems to be a calculation error',
    result_calc_error=True,
)

# ""Plus 10 x 10 is 25"" seems to be another calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=25"",
    resulting_state=(5, 25),
    comment='""Plus 10 x 10 is 25"" seems to be a calculation error',
    result_calc_error=True,
)

# ""10 x 7 is 3"" is another calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7=3"",
    resulting_state=(3, 10, 12),
    comment='""10 x 7 is 3"" is another calculation error',
    result_calc_error=True,
)

# ""3 x 10. 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(12, 30),
    comment='""3 x 10. 30""',
)

# ""12 times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*10=120"",
    resulting_state=(7, 10, 120),
    comment='""12 times 10""',
)

# ""7 times 12, that's 84""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(10, 10, 84),
    comment='""7 times 12, that\'s 84""',
)

```"
1314,"[2,7,7,10]",,180," 7 times 7 is 70, minus 2 plus 7 is 9, and 7... fuck. 10 minus 7 is 3. Oh fucking Christ. 10 minus 7 is 3. 10 minus 7 is 3. 10 plus 2 is 12. I can't do this anymore. 7 minus 2 is 5. 10 minus 2 is 8. Plus 7 is 15. Nope. 10 minus 7 is 3. 10 minus 7 is 3.","```python
start_state = (2, 7, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is 70"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=70"",
    resulting_state=(2, 10, 70),
    comment='""7 times 7 is 70"" - calculation error',
    result_calc_error=True,
)

# ""minus 2 plus 7 is 9"" seems to be continuing from 70
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70-2=68"",
    resulting_state=(10, 68),
    comment='""minus 2 plus 7 is 9"" seems to be continuing from 70',
)

# ""10 minus 7 is 3"" - participant starts over from start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 7),
    comment='""10 minus 7 is 3""',
)

# ""10 plus 2 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2=12"",
    resulting_state=(7, 7, 12),
    comment='""10 plus 2 is 12""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(5, 7, 10),
    comment='""7 minus 2 is 5""',
)

# ""10 minus 2 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(7, 7, 8),
    comment='""10 minus 2 is 8""',
)

# ""Plus 7 is 15"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(7, 15),
    comment='""Plus 7 is 15""',
)

# ""10 minus 7 is 3"" - participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 7),
    comment='""10 minus 7 is 3"" - participant tries this operation again',
)
```"
1317,"[3,6,12,12]",,180," 6 times 4 is 24, but how do I get to that? 12 minus 3 is 9, plus 6 is 15. Nope, that won't work. 12 minus 6 is 6. 12 times 6 is 72. 72 minus 12 times 3 is 36. 72 minus 36 is 36. I'm stupid. Oh my god. 12... 3... 3 times 12 is 36. 3 times... 12 times 3 is 36. Minus 12 is 24. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. Minus 12 is 36. 6 is 18. 12 minus... 9... 12... 6 minus... Nope! 6 minus 3... 6 minus 3... is 3... I can't. I'm too stupid for this.","```python
start_state = (3, 6, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24, but how do I get to that?""',
)

# ""12 minus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(6, 9, 12),
    comment='""12 minus 3 is 9""',
)

# ""plus 6 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(12, 15),
    comment='""plus 6 is 15""',
)

# ""12 minus 6 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 6, 12),
    comment='""12 minus 6 is 6""',
)

# ""12 times 6 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(3, 12, 72),
    comment='""12 times 6 is 72""',
)

# ""72 minus 12 times 3 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72-(12*3)=36"",
    resulting_state=(36,),
    comment='""72 minus 12 times 3 is 36""',
)

# ""3 times 12 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(6, 12, 36),
    comment='""3 times 12 is 36""',
)

# ""Minus 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(6, 24),
    comment='""Minus 12 is 24""',
)

# The participant then repeats ""Minus 12 is 36"" many times, which seems to be a transcription error or perseveration

# ""6 minus 3 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 12, 12),
    comment='""6 minus 3 is 3""',
)

```"
1326,"[8,9,9,12]",,180," Okay, we're going for 12, 9, 9, 8. What do we want to get to? 24. So 12 and 8 is 20. And then 9 and 9 is 18. So those don't ring a bell. 12 minus 9 is 3. 3 plus 9 and 8 is 17. No, that wouldn't work. All right, let's go with 12. 9 minus 8 is 1. Okay, 1 plus 9 is 10. No, that's 22. That wouldn't work. All right. Ah, 12 divided by 8. No, we're not doing that. This has been simple numbers so far. Let's keep doing that. Um, ah, 12 divided by 8. No, I just said that. God, I'm not thinking here. All right, what's, uh, 9 times 8 is 72 minus 12. What's, I don't know. I'm not doing too good here. Ah, this is terrible. All right, let's go with 9 times 9 is 81 plus, no, come on, Cheryl, you can figure this out. Um, 9 and 9. I don't like 9s. Um, okay, 20. 8 and 12 is 20. 29. 9 minus 9 ain't going to do it either. Oh, this is terrible. Why can't I just think? All right, let's do this. Let's go with, uh, 9 divided by 12 is 3 quarters. Okay, that ain't going to work either, I don't think. I don't know. What's 3 quarters of 72? 89 times 8 is 72. 3 quarters of that. I don't think that's it either. Ah, you're going to run out of time because you're not thinking clearly. Ah, let's see. 17. I don't like anything. Let's do any of these. 12 plus, oh, this is silly. All right, go with 8 times 9 is 72 divided by 9 is 8. And that gives you 8 and 12. That ain't going to cut it. Ah, just delete, delete, delete, delete. All right, come on. 8 minus 9 is a negative 1 plus 9 is 8 and 12. That won't work either. Golly. Ah, 12 minus 8 is 4. 4 plus 18 is only 22. That ain't going to work either. Ah, I don't know. I don't know. I'm out of time. I don't think this is that hard, but I'm making it hard. 9 divided by 9 is 1. 1 plus 8, 9. 9 and 12 is 21. Ain't going to work either. Shoot. Oh, shoot, shoot, shoot, shoot, shoot. 12. Okay, don't start with 12. Just start with the, ah, what can you do? You go 9 plus 9 is 18.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(9, 9, 20),
    comment='""12 and 8 is 20""',
)

# ""9 and 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(8, 12, 18),
    comment='""9 and 9 is 18""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""12 minus 9 is 3""',
)

# ""3 plus 9 and 8 is 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+9+8=17"",
    resulting_state=(17,),
    comment='""3 plus 9 and 8 is 17""',
    result_calc_error=True,
)

# ""9 minus 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 9, 12),
    comment='""9 minus 8 is 1""',
)

# ""1 plus 9 is 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+9=10"",
    resulting_state=(10, 12),
    comment='""1 plus 9 is 10""',
)

# ""9 times 8 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(9, 12, 72),
    comment='""9 times 8 is 72""',
)

# ""9 times 9 is 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(8, 12, 81),
    comment='""9 times 9 is 81""',
)

# ""8 and 12 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(9, 9, 20),
    comment='""8 and 12 is 20""',
)

# ""9 divided by 12 is 3 quarters""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/12=0.75"",
    resulting_state=(0.75, 8, 9),
    comment='""9 divided by 12 is 3 quarters""',
)

# ""89 times 8 is 72"" seems to be a transcription error for ""9 times 8 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(9, 12, 72),
    comment='""89 times 8 is 72"" seems to be a transcription error for ""9 times 8 is 72""',
)

# ""8 times 9 is 72 divided by 9 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9/9=8"",
    resulting_state=(8, 12),
    comment='""8 times 9 is 72 divided by 9 is 8""',
)

# ""8 minus 9 is a negative 1 plus 9 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-9+9=8"",
    resulting_state=(8, 12),
    comment='""8 minus 9 is a negative 1 plus 9 is 8""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 9, 9),
    comment='""12 minus 8 is 4""',
)

# ""4 plus 18 is only 22"" - participant first computes 9+9=18
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(4, 18),
    comment='""4 plus 18 is only 22"" - first computing 9+9=18',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+18=22"",
    resulting_state=(22,),
    comment='""4 plus 18 is only 22""',
)

# ""9 divided by 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 8, 12),
    comment='""9 divided by 9 is 1""',
)

# ""1 plus 8, 9. 9 and 12 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+8+12=21"",
    resulting_state=(21,),
    comment='""1 plus 8, 9. 9 and 12 is 21""',
)

# ""9 plus 9 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(8, 12, 18),
    comment='""9 plus 9 is 18""',
)
```"
1328,"[2,6,6,7]",(7-2)x6-6,143," All right, 2667. Let's try it with these numbers and see if I can figure it out. All right, 7 minus 6 is 1. That ain't going to cut it. Okay, 6 times 2 is 12. 12. Oh, this is going to be driving me nuts all day. I'm never going to be able to get this figured out. Let's see. We can go, what is 14? 2 times 7 is 14 plus 12. 12. This is 26. That ain't going to cut it. All right, let's go with 7 times 6 is 42 plus 2 is 44 divided by 6. That ain't going to be 24. Jesus Christ. Okay, let's go with, let's see, 2 plus 6 is 8. 8. This ain't going to cut it either. There's nothing you can do, Cheryl. I'll just give up here. I won't give up again. Oh, this is so frustrating. 13 and 6 is, all right, 12 and 7 is 19 plus 2 is 21. Okay, well, that ain't going to cut it either. I'm just giving up because I'm so stupid all of a sudden. 6 times 7 is 42. 42 divided by 6. Oh, that ain't going to cut it. Okay, let's go with 12. 2 times 6 is 12. 12 times, we can go 12 divided by 6 is 2. This ain't going to cut it. Nothing you do is going to work, so just give up. 13 times 2 is 26. Nope. I feel like an idiot. I don't know. I don't know why. Is it because of the time? Maybe. All right, let's go with 6 times 2 is 12. 12 times 6 is, I don't know. I'm giving up. Let's go with 7 minus 2. It's 5. Okay, what does that get you? 5. And then you have two 6s. 5 times 6 is 30 minus 6. God, you're stupid to figure this out so late. And then minus 6.","```python
start_state = (2, 6, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 minus 6 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 2, 6),
    comment='""7 minus 6 is 1""',
)

# ""6 times 2 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(6, 7, 12),
    comment='""6 times 2 is 12""',
)

# ""2 times 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(6, 6, 14),
    comment='""2 times 7 is 14""',
)

# ""7 times 6 is 42 plus 2 is 44 divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*6+2)/6=7.33"",
    resulting_state=(7.33,),
    comment='""7 times 6 is 42 plus 2 is 44 divided by 6""',
)

# ""2 plus 6 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+6=8"",
    resulting_state=(6, 7, 8),
    comment='""2 plus 6 is 8""',
)

# ""6 times 7 is 42. 42 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*7)/6=7"",
    resulting_state=(2, 7),
    comment='""6 times 7 is 42. 42 divided by 6""',
)

# ""2 times 6 is 12. 12 divided by 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*6)/6=2"",
    resulting_state=(2, 7),
    comment='""2 times 6 is 12. 12 divided by 6 is 2""',
)

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+6)*2=26"",
    resulting_state=(6, 26),
    comment='""13 times 2 is 26""',
)

# ""6 times 2 is 12. 12 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*2)*6=72"",
    resulting_state=(7, 72),
    comment='""6 times 2 is 12. 12 times 6""',
)

# Finally, the participant finds the solution:
# ""7 minus 2. It's 5... 5 times 6 is 30 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-2)*6-6=24"",
    resulting_state=(24,),
    comment='""7 minus 2. It\'s 5... 5 times 6 is 30 minus 6""',
)
```"
1331,"[3,4,7,9]",3x(7+4)-9,79," Target number 24. We have 3, 4, 7, and 9. What do I need? 3, 4, 7, or 9? 3, 4, 7. 3 plus 4 is 12. 7 plus 9 is plus 9. 9 plus 7 is 16. 4 minus 3 is 2. No, it won't work. Let's see. 4 plus 7 is 4. 7 plus 8 is 9. 10 plus 11 is 11. Let's see. Let's try 11. 11 times 3 is 33. Minus 9. All right. I think I got it figured out. Let's do 3 times using PEMDAS. 7 plus 4. And then subtract 9.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 plus 4 is 12"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4=12"",
    resulting_state=(7, 9, 12),
    comment='""3 plus 4 is 12"" - calculation error',
    result_calc_error=True,
)

# ""9 plus 7 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(3, 4, 16),
    comment='""9 plus 7 is 16""',
)

# ""4 minus 3 is 2"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4-3=2"",
    resulting_state=(2, 7, 9),
    comment='""4 minus 3 is 2"" - calculation error',
    result_calc_error=True,
)

# ""4 plus 7 is 4"" seems to be a transcription error
# ""7 plus 8 is 9"" seems to be a transcription error
# ""10 plus 11 is 11"" seems to be a transcription error

# ""11 times 3 is 33"" - participant likely got 11 from 7+4
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+4)*3=33"",
    resulting_state=(9, 33),
    comment='""11 times 3 is 33"" - participant likely got 11 from 7+4',
)

# ""Minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-9=24"",
    resulting_state=(24,),
    comment='""Minus 9""',
)

```"
1335,"[3,3,3,9]",(9-3/3)x3,102," Target number 24, and we have three 3's. 3, 3, 3, and 9. 3, 3, 3, and 9. 3, 3, 3, and 9. Let's see. We multiply. 9 three times is 27. Let's see. I don't know if we can work, but if we can work the 9 into an 8, and then multiply by 3, we could get 2. 24. So, let's see. How do we work that one out? So, we'll work within the parentheses, and then we'll do 9 times 3 divided by 3, which equals 1. Right? Right, right, right. Maybe divide it by 3. Or no. 9 minus... 9 minus... Oops. Delete, delete, delete, delete. All right. So, 9 minus 3 divided by 3. This is 8. Then we'll multiply that by 3. We'll get 24.","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 three times is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 3, 27),
    comment='""9 three times is 27""',
)

# ""if we can work the 9 into an 8, and then multiply by 3"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""if we can work the 9 into an 8, and then multiply by 3""',
)

# ""9 times 3 divided by 3, which equals 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3/3=9"",
    resulting_state=(3, 9),
    comment='""9 times 3 divided by 3, which equals 1"" - participant made calculation error',
    result_calc_error=True
)

# ""9 minus 3 divided by 3. This is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3/3=8"",
    resulting_state=(3, 8),
    comment='""9 minus 3 divided by 3. This is 8""',
)

# ""Then we'll multiply that by 3. We'll get 24.""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""Then we\'ll multiply that by 3. We\'ll get 24.""',
)
```"
1340,"[1,11,12,12]",(12-11+1)x12,97," Really? 1, 11, 12, and 12. 12 plus 12 is 24. Let's see. 11 plus 1 is 12. 12 plus 1 is 12. 12 plus 1 is 12. No. Maybe we can do it. No. Can't do it 12 times 12. 12 plus 12 is 11. How would we do that? I don't want. Maybe. not have the 1 do anything okay let me think okay so 12 times 2 would be 24 how do we get to 2 how do we get to do 12 minus 11 is 1 then we got a 1 okay so it's 2 and then 12 times 2 is 24 how to play that out I'll do parentheses 12 minus 11 that's 1 and another 1 that's 2 multiply 2 by 12 bingo","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12 is 24""',
)

# ""11 plus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 12),
    comment='""11 plus 1 is 12""',
)

# ""12 times 12"" participant tries multiplying the 12s
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 times 12""',
)

# ""12 plus 12 is 11"" seems to be a transcription error or misspeaking

# ""12 times 2 would be 24"" participant realizes they need to multiply 12 by 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 would be 24"" participant realizes they need to multiply 12 by 2',
)

# ""12 minus 11 is 1 then we got a 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 12),
    comment='""12 minus 11 is 1 then we got a 1""',
)

# ""parentheses 12 minus 11 that's 1 and another 1 that's 2 multiply 2 by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-11+1)*12=24"",
    resulting_state=(24,),
    comment='""parentheses 12 minus 11 that\'s 1 and another 1 that\'s 2 multiply 2 by 12""',
)
```"
1341,"[4,8,8,12]",(12/(8-4),180," All righty, we are trying to get 24. 12 times 2 is 24, and I've got a 12 here. I really want to try to get to 2 with these other numbers. 8 divided by 4 is 2, but then I've still got another 8. I don't know. 12 divided by 4 is 3. 3 times 8 is 24, and then I've still got another 8. 8 divided by 8 is 1. 12 divided by 4 is 3. We already did that. 8 plus 8 is 16, divided by 4 is 4. I can get 2s, and I can get 8s, and I can get 3s. 12 divided by 4 is 3. Again, we have done this before. 12 minus 8 is 4. Let me have something there. So 12 minus 8 is 4. Or plus 8... Hold on. 12 minus 8 is 4. 8 minus 8 is 4. No, that's not how numbers work. 8 minus 4 is 4. Ah, there we go. Got it. 8 minus 4 is 4. 8 minus 4 is 4. I need that 12 in here. I need that 12 in here. 12 divided by 8 minus 4. 12 divided by 8 minus 4. 12 divided by 8 minus 4. Uh... Uh... I think I need to put some more parentheses in here. I think I need to put some more parentheses in here. 12 divided by 8 minus 4. 12 divided by 8 minus 4. 12 divided by 8 minus 4. 12 divided by 8 minus 4. times... times...","```python
start_state = (4, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 is 24"" - participant sets a subgoal of getting 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 is 24, and I\'ve got a 12 here. I really want to try to get to 2""',
)

# ""8 divided by 4 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 8, 12),
    comment='""8 divided by 4 is 2""',
)

# ""12 divided by 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 8, 8),
    comment='""12 divided by 4 is 3""',
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(8, 24),
    comment='""3 times 8 is 24""',
)

# ""8 divided by 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 4, 12),
    comment='""8 divided by 8 is 1""',
)

# ""8 plus 8 is 16, divided by 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+8)/4=4"",
    resulting_state=(4, 12),
    comment='""8 plus 8 is 16, divided by 4 is 4""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 4, 8),
    comment='""12 minus 8 is 4""',
)

# ""8 minus 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 8, 12),
    comment='""8 minus 4 is 4""',
)

# The participant then seems to be trying to work with ""12 divided by 8 minus 4"" but doesn't complete the calculation
# Based on their submitted response ""(12/(8-4)"", they were trying to divide 12 by the result of (8-4)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/(8-4)=3"",
    resulting_state=(3, 8),
    comment='""12 divided by 8 minus 4"" - based on submitted response, they meant 12/(8-4)',
)
```"
1347,"[6,7,8,10]",(8-6),180," Alrighty, what have we got? Oh no, these are numbers I can't do in my head. Um, 8 minus 7 is 1. 1 plus 6 is 17. Um, 6 plus 7 is 12, 13, 23. 8 plus 6 is 12, 14. I got 24, but then I got an extra 7. Which is kind of a silly number. Um, we could do 10 minus 7 to make 3. Um, but then we've got that 6 left over. We can do 10 times 8 is 80. I wonder what 80 divided by 6 is. Seems like a good number. 13.5 Alright. That's not how e're going to do this. Um, how about 60divided by 8. No. 60divided by 7. Nope. 70 divided by 6. 70 divided by 8. None of it. None-ya. Alrighty. Well we had to try it. Um, six times eight is 48. 48 minus seven is 41. Minus 10 is 31. Um, I'm going to have my math mom. I'm going to be really honest. Uh, 10 minus six is four. Seven times four is more than I want it to be. And eight times four is more than I want it to be. No, seven times four is right, but then I've still got that pesky eight. Um, let's see. Eight minus seven is one. But 10 and 16 really don't, they're not friends. Um, eight minus six is two. I can get 27. Um, I can get, oh, okay, great. Um, so eight minus six is two, right?","```python
start_state = (6, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 6, 10),
    comment='""8 minus 7 is 1""',
)

# ""1 plus 6 is 17"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=17"",
    resulting_state=(10, 17),
    comment='""1 plus 6 is 17"" - calculation error',
    result_calc_error=True,
)

# ""6 plus 7 is 12, 13, 23"" - going back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(8, 10, 13),
    comment='""6 plus 7 is 12, 13""',
)

# ""8 plus 6 is 12, 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(7, 10, 14),
    comment='""8 plus 6 is 12, 14""',
)

# ""10 minus 7 to make 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 6, 8),
    comment='""10 minus 7 to make 3""',
)

# ""10 times 8 is 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(6, 7, 80),
    comment='""10 times 8 is 80""',
)

# ""80 divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80/6=13.5"",
    resulting_state=(7, 13.5),
    result_calc_error=True,
    comment='""80 divided by 6 is 13.5""',
)

# ""six times eight is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(7, 10, 48),
    comment='""six times eight is 48""',
)

# ""48 minus seven is 41""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-7=41"",
    resulting_state=(10, 41),
    comment='""48 minus seven is 41""',
)

# ""Minus 10 is 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""41-10=31"",
    resulting_state=(31,),
    comment='""Minus 10 is 31""',
)

# ""10 minus six is four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 7, 8),
    comment='""10 minus six is four""',
)

# ""eight minus seven is one""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 6, 10),
    comment='""eight minus seven is one""',
)

# ""eight minus six is two""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 7, 10),
    comment='""eight minus six is two""',
)
```"
1354,"[5,5,12,12]",5x5-12/12,175," Okay. Tricky questions out here. Okay, 5, 5, 12, and 12. Well, like, obviously 12 plus 12 right there, but how do we, what would we do with this 5? Um, what if we did, okay, what is 12 times 5? Isn't that like, I don't know, isn't that like a, oh my god, I'm so bad at math. Um, that's 0, okay, that's, 0, and 1, ugh, that's like 70? I don't know. Um, um, my god, this is a brain teaser for sure. Uh, 12 times 12, that's 144. I don't think that has, that's too, that's too friggin' high. Okay, then 10 plus 12, maybe? Isn't that 20? Or what if we did the 12 plus 12? That would be friggin', that's 24, obviously. Ugh. Uh. Uh. I don't know. Maybe, okay, maybe 5 times, okay, and that's 25. Uh. Then I made the, ugh. Um. Wait, because then that would be 25. Uh. Oh, okay, okay, okay, okay, okay, I see, okay. Okay, okay. So if you do the 5 times 5, that's the 25, then you minus the 12, and then that's friggin', uh, the 2, right? And then you do 2 times 12, right? Like, essentially from there? I don't know. I don't know anymore. Um. Or wait, it's, okay, 25, then minus, because then that would be 3. And then. Oh, wait, wait, wait, okay, okay, okay, okay, then 3 times 12. Okay, okay, okay. Yeah? Is that, hold on. Wait, wait, wait, wait, wait. Um. I'm gonna try that. Okay, no, it's not right. Uh. Am I using the wrong sign or something? Let me try that one. Okay.","```python
start_state = (5, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 right there""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(5, 5, 24),
    comment='""12 plus 12 right there""',
)

# ""what is 12 times 5? Isn't that like... that's like 70?""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=70"",
    resulting_state=(5, 12, 70),
    comment='""what is 12 times 5? ... that\'s like 70?""',
    result_calc_error=True,
)

# ""12 times 12, that's 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(5, 5, 144),
    comment='""12 times 12, that\'s 144""',
)

# ""10 plus 12, maybe? Isn't that 20?"" seems to be a calculation error or transcription error since there is no 10
# ""12 plus 12? That would be friggin', that's 24, obviously""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(5, 5, 24),
    comment='""12 plus 12? That would be... that\'s 24, obviously""',
)

# ""5 times... that's 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(12, 12, 25),
    comment='""5 times... that\'s 25""',
)

# ""then you minus the 12, and then that's friggin', uh, the 2, right?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-12=13"",
    resulting_state=(12, 13),
    comment='""then you minus the 12""',
)

# ""and then you do 2 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*12=156"",
    resulting_state=(156,),
    comment='""and then you do 2 times 12""',
)

# ""25, then minus, because then that would be 3. And then... 3 times 12""
curr_state = graph.move_to_node((12, 12, 25))  # going back to after 5*5=25
new_state = graph.explore_operation(
    curr_state,
    operation=""25-12=13"",
    resulting_state=(12, 13),
    comment='""25, then minus... that would be 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*12=156"",
    resulting_state=(156,),
    comment='""3 times 12""',
)

# Based on their final response of ""5x5-12/12"", they eventually figured out to divide one 12 by the other to get 1
curr_state = graph.move_to_node((12, 12, 25))  # going back to after 5*5=25
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(25, 1),
    comment=""Based on final response, participant divided 12 by 12"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-1=24"",
    resulting_state=(24,),
    comment=""Based on final response, participant subtracted 1 from 25"",
)
```"
1362,"[4,5,5,8]",,180," 5 times 5 is 25. 8 times 4 is 32. 32 minus 5 is 27 minus 5 is 22. That's not right. So 5 times 4 is 20. 8 times 5 is 35. Right. 8 times 5 is 30. 8 times 5 is 30. 5 times 5 is 25. 32 is 25. 5 plus 4 is 9. 8 plus 5 is 13. Yeah, I'm not going to get this one. So... I'm just going to wait until time's up. It's pretty nice outside. It's snowing outside. It's nice. Yeah, I'm saying my thoughts out loud. I don't know how to complete this at all. So I don't really have anything to say. I'm just saying the same things over and over again. 5 plus 5 is 10. Plus 4 is 14. 14 plus 8 is 22. 8 times 5 is 30. 40. 40 divided by 4 is 10. Plus 5 is 15. That's not 24. So... Yeah. 4 plus 8 is 12. 12 times 5 is 60. Yeah. I am not good at math at all. So... I'm surprised I got one done. Anyway. So...","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 8, 25),
    comment='""5 times 5 is 25""',
)

# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(5, 5, 32),
    comment='""8 times 4 is 32""',
)

# ""32 minus 5 is 27 minus 5 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-5-5=22"",
    resulting_state=(22,),
    comment='""32 minus 5 is 27 minus 5 is 22""',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(5, 8, 20),
    comment='""5 times 4 is 20""',
)

# ""8 times 5 is 35"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=35"",
    resulting_state=(4, 5, 35),
    comment='""8 times 5 is 35"" - calculation error',
    result_calc_error=True,
)

# ""8 times 5 is 30"" - participant corrects previous error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(4, 5, 40),
    comment='""8 times 5 is 40"" - participant corrects previous error',
)

# ""5 plus 4 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+4=9"",
    resulting_state=(5, 8, 9),
    comment='""5 plus 4 is 9""',
)

# ""8 plus 5 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(4, 5, 13),
    comment='""8 plus 5 is 13""',
)

# ""5 plus 5 is 10. Plus 4 is 14. 14 plus 8 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+4+8=22"",
    resulting_state=(22,),
    comment='""5 plus 5 is 10. Plus 4 is 14. 14 plus 8 is 22""',
)

# ""8 times 5 is 30. 40"" - participant corrects themselves
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(4, 5, 40),
    comment='""8 times 5 is 30. 40""',
)

# ""40 divided by 4 is 10. Plus 5 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40/4+5=15"",
    resulting_state=(15,),
    comment='""40 divided by 4 is 10. Plus 5 is 15""',
)

# ""4 plus 8 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(5, 5, 12),
    comment='""4 plus 8 is 12""',
)

# ""12 times 5 is 60""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(5, 60),
    comment='""12 times 5 is 60""',
)
```"
1363,"[12,12,13,13]",(12+12)+(13-13),112," Oh, great. Let's see. 13 times 13. 169 divided by 12. Oh my god. 12 times 12 is 144. 144. Fuck. I don't know. Okay. This is hard. That'd be like 25. 25 is 50. 12 times 13. 156 divided by 12 is 13. Duh. 13 times 13. 169. 12 times 12. 44. Nope. Yeah, I have no idea. Oh, what about 12? 12 plus 12. Plus, please excuse my dear aunt Sally. So, addition. Subjection. So, um. Let me do that. I don't know.","```python
start_state = (12, 12, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 13. 169""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(12, 12, 169),
    comment='""13 times 13. 169""',
)

# ""divided by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169/12=14.08"",
    resulting_state=(12, 14.08),
    comment='""169 divided by 12""',
)

# ""12 times 12 is 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(13, 13, 144),
    comment='""12 times 12 is 144""',
)

# ""That'd be like 25"" - participant may be adding 12+13
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(12, 13, 25),
    comment='""That\'d be like 25""',
)

# ""25 is 50"" - not clear what operation this refers to

# ""12 times 13. 156""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13=156"",
    resulting_state=(12, 13, 156),
    comment='""12 times 13. 156""',
)

# ""divided by 12 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""156/12=13"",
    resulting_state=(13, 13),
    comment='""divided by 12 is 13""',
)

# ""13 times 13. 169"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(12, 12, 169),
    comment='""13 times 13. 169""',
)

# ""12 times 12. 44"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=44"",
    resulting_state=(13, 13, 44),
    comment='""12 times 12. 44""',
    result_calc_error=True,
)

# ""12 plus 12"" - participant tries addition
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(13, 13, 24),
    comment='""12 plus 12""',
)

# Based on their response, they must have realized they could add 12+12 and then add 13-13 (which equals 0) to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+(13-13)=24"",
    resulting_state=(24,),
    comment=""Based on their response, they must have realized they could add 13-13 (which equals 0) to get 24"",
)
```"
1364,"[6,8,10,12]",(12+8)+(10-6),132," All right. 24. 6 plus 8 is 14. And then we just need 10 more, but you have the 12 there, so... 10 plus 8 plus 6 is 24. But you have to get the 12 somehow out. 10 times 12 divided by 8 is 15 plus 6 is 21. What about 80 divided by 12? Nope. 80 divided by 6? Nope. It does not work. 6 times 8 is 48. 8 times 8 is 48. 10 plus 12 is what? 22. That's 26, so no. 10 plus 12 is what? 22. Umm... That's 26, so no. 9. I'm not sure. Well, 12 plus 8 is 20. And then 6 minus 10 is 4. Okay, so 12 plus 8. And then... Shit, did I do that wrong? No. 10 minus 6 is 5. 10 plus 6 is 4.","```python
start_state = (6, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 8 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(10, 12, 14),
    comment='""6 plus 8 is 14""',
)

# ""10 plus 8 plus 6 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8+6=24"",
    resulting_state=(12, 24),
    comment='""10 plus 8 plus 6 is 24""',
)

# ""10 times 12 divided by 8 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12/8=15"",
    resulting_state=(6, 15),
    comment='""10 times 12 divided by 8 is 15""',
)

# ""plus 6 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+6=21"",
    resulting_state=(21,),
    comment='""plus 6 is 21""',
)

# ""What about 80 divided by 12?"" - participant must have gotten 80 from 10*8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*8)/12=6.67"",
    resulting_state=(6, 6.67),
    comment='""What about 80 divided by 12?""',
)

# ""80 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*8)/6=13.33"",
    resulting_state=(12, 13.33),
    comment='""80 divided by 6""',
)

# ""6 times 8 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(10, 12, 48),
    comment='""6 times 8 is 48""',
)

# ""8 times 8 is 48"" seems to be a mistake since 8 isn't used twice in the start state

# ""10 plus 12 is what? 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(6, 8, 22),
    comment='""10 plus 12 is what? 22""',
)

# ""That's 26"" probably refers to adding the remaining numbers to 22

# ""12 plus 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(6, 10, 20),
    comment='""12 plus 8 is 20""',
)

# ""And then 6 minus 10 is 4"" - participant made a mistake here
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 8, 12),
    comment='""And then 6 minus 10 is 4"" - participant corrects this to ""10 minus 6 is 4""',
)

# The participant found their solution: (12+8)+(10-6)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+8)+(10-6)=24"",
    resulting_state=(24,),
    comment=""The participant found their solution"",
)
```"
1368,"[6,7,9,9]",((6x7)-9)-9,119," Why is it so hard, Renan? It's so hard. It's so hard. Yeah. Oh, the muscle. I'm still doing this. I'm still in the middle of this. No. 9 times 7 is 63. 7 times 6 is 42. 9 times 7 is 81. Right? 81 minus 42. Nope. 9 times 7 is 63 minus 54. Nope. 9 plus 9 is 18 plus 6. 18 plus 6. Is that 24? It is. It is. Child, what are you doing? What is sugar? You have a tortilla. You don't need sugar. What's the sugar? You're not getting sugar. Not sugar. I want myself. I want myself. I'm in the middle of something right now, so. Too bad. I want myself. I want myself. I want myself. Please. Please. Aha! 6 times 7 is 42 minus 9. 33 minus 9 is 24. Okay. 6 times 7. ABC. ABC. AB. AB. 6 times 7. 6 times 7. 6 times 7.","```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 7 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(6, 9, 63),
    comment='""9 times 7 is 63""',
)

# ""7 times 6 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(9, 9, 42),
    comment='""7 times 6 is 42""',
)

# ""9 times 7 is 81"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=81"",
    resulting_state=(6, 9, 81),
    comment='""9 times 7 is 81"" - calculation error',
    result_calc_error=True,
)

# ""9 plus 9 is 18 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+6=24"",
    resulting_state=(7, 24),
    comment='""9 plus 9 is 18 plus 6""',
)

# There's a long interruption where the participant seems to be talking to someone else about sugar

# ""6 times 7 is 42 minus 9. 33 minus 9 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*7)-9-9=24"",
    resulting_state=(24,),
    comment='""6 times 7 is 42 minus 9. 33 minus 9 is 24""',
)

```"
1370,"[1,8,8,12]",((8/8)+1)x12,114," Target number 24, 8 plus 8 is, oh lordy. 60 plus, 60 plus 12 is 28. Divided by 8, no, 12 plus 8. Minus 1, 2 minus 8, plus 1, plus 8, no, 12 plus 8. Divided by 8, plus 1. 12 plus 1, minus 4, minus 8, plus 8. 8 divided by 8, 1. 8 divided by 8. 8 divided by 8. It will have to be 8 divided by 8, plus 1, times 12.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 is"" followed by ""60 plus 12 is 28"" suggests the participant may have multiplied 8*8=64
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(1, 12, 64),
    comment='""8 plus 8 is"" followed by mention of 60, suggesting multiplication',
)

# ""60 plus 12 is 28"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64+12=28"",
    resulting_state=(1, 28),
    comment='""60 plus 12 is 28"" - calculation error',
    result_calc_error=True,
)

# The participant then tries several operations that they don't complete
# ""12 plus 8"" is mentioned multiple times
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(1, 8, 20),
    comment='""12 plus 8""',
)

# ""8 divided by 8, 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 1, 12),
    comment='""8 divided by 8, 1""',
)

# Finally, they put it all together: ""8 divided by 8, plus 1, times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8/8+1)*12=24"",
    resulting_state=(24,),
    comment='""8 divided by 8, plus 1, times 12""',
)
```"
1377,"[1,8,10,12]",((10-8)x12)/1,83," 1, 8, 10, 12. 8 plus 10. That's not right. 10 times 12 divided by 8 plus 1. 10 times 8 divided by 12 plus 1. 12 times 8 divided by 10 plus 1. Plus 8, plus 9, plus 12. 8 minus 1 plus 10 plus 12. Sorry, no. 8 minus 1 plus 10 plus 12. 8 minus 10. Sorry, 10. 10 minus 8 plus 12. 12 divided by 1. Times 12. 10 minus 8 times 12 divided by 1.","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(1, 12, 18),
    comment='""8 plus 10""',
)

# ""That's not right"" suggests backtracking
curr_state = graph.move_to_node(start_state)

# ""10 times 12 divided by 8 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12/8+1=16"",
    resulting_state=(16,),
    comment='""10 times 12 divided by 8 plus 1""',
)

# ""10 times 8 divided by 12 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8/12+1=7.67"",
    resulting_state=(7.67,),
    comment='""10 times 8 divided by 12 plus 1""',
)

# ""12 times 8 divided by 10 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8/10+1=10.6"",
    resulting_state=(10.6,),
    comment='""12 times 8 divided by 10 plus 1""',
)

# ""8 minus 1 plus 10 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1+10+12=29"",
    resulting_state=(29,),
    comment='""8 minus 1 plus 10 plus 12""',
)

# ""10 minus 8 times 12 divided by 1"" - this is what they submitted as their answer
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-8)*12/1=24"",
    resulting_state=(24,),
    comment='""10 minus 8 times 12 divided by 1"" - this is what they submitted as their answer',
)
```"
1378,"[4,4,4,7]",,180, 4 x 4 is 7. No. 4 x 4 is 4. Plus 7. 4 x 4 is 7. 4 x 4 is 7. Minus 7. 4 x 7. Minus 4. Four plus four times seven divided by four. I love you. Four plus four times four. Four times four plus four times four minus seven. Four plus four. Four plus eight plus seven. Eight plus seven. Plus four. Four times four times seven divided by four. Four plus seven times four divided by four. Four times seven minus eight. Eight. Four times seven minus four. Divided by four. Can't work. Four plus four times seven minus four. Four plus seven. Plus four. Plus four. Plus four. Two times four times four. Divided by four. Seven. Seven times four. Times four. Divided by four. Sigh. Seven plus four. Plus four times four. Seven minus four. Times four. Times four. Seven minus four is one. Plus four. Times seven.,"```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 x 4 is 7"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=7"",
    resulting_state=(4, 7, 7),
    comment='""4 x 4 is 7"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""4 x 4 is 4"" - another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=4"",
    resulting_state=(4, 4, 7),
    comment='""4 x 4 is 4"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""Plus 7"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(4, 11),
    comment='""Plus 7""',
)

# ""4 x 7"" going back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(4, 4, 28),
    comment='""4 x 7""',
)

# ""Minus 4"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-4=24"",
    resulting_state=(4, 24),
    comment='""Minus 4""',
)

# ""Four plus four times seven divided by four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+4)*7/4=14"",
    resulting_state=(14,),
    comment='""Four plus four times seven divided by four""',
)

# ""Four plus four times four""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4*4=20"",
    resulting_state=(7, 20),
    comment='""Four plus four times four""',
)

# ""Four plus four""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(4, 7, 8),
    comment='""Four plus four""',
)

# ""Four plus eight plus seven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(4, 15),
    comment='""Four plus eight plus seven""',
)

# ""Plus four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+4=19"",
    resulting_state=(19,),
    comment='""Plus four""',
)

# ""Four times four times seven divided by four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*7/4=28"",
    resulting_state=(28,),
    comment='""Four times four times seven divided by four""',
)

# ""Four plus seven times four divided by four""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+7)*4/4=11"",
    resulting_state=(11,),
    comment='""Four plus seven times four divided by four""',
)

# ""Four times seven minus four""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7-4=24"",
    resulting_state=(4, 24),
    comment='""Four times seven minus four""',
)

# ""Divided by four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24/4=6"",
    resulting_state=(6,),
    comment='""Divided by four""',
)

# ""Seven plus four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(4, 4, 11),
    comment='""Seven plus four""',
)

# ""Plus four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4=15"",
    resulting_state=(4, 15),
    comment='""Plus four""',
)

# ""Seven times four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(4, 4, 28),
    comment='""Seven times four""',
)

# ""Times four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28*4=112"",
    resulting_state=(4, 112),
    comment='""Times four""',
)

# ""Divided by four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""112/4=28"",
    resulting_state=(28,),
    comment='""Divided by four""',
)

# ""Seven minus four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 4, 4),
    comment='""Seven minus four""',
)

# ""Times four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(4, 12),
    comment='""Times four""',
)

# ""Seven minus four is one""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=1"",
    resulting_state=(1, 4, 4),
    comment='""Seven minus four is one"" - calculation error',
    result_calc_error=True,
)

# ""Plus four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+4=5"",
    resulting_state=(4, 5),
    comment='""Plus four""',
)
```"
1387,"[4,7,7,8]",4-(7/7)x8,181, 14 plus 8 is 18 1820 okay so we have 8 times 7 minus 7 7 times 4 8 times 7 minus 28 8 times 7 26 7 times 4 28 times two seven times seven forty nine eight times seven minus forty nine seven three one seven four three times three 8 separate three eight 24 times eight foreign ok ok ok ok ok ok so far ok ok ok ok ok ok.. times into brackets seven divided by seven brackets clues times eight for my knees into a good seven divided by seven but let's close times it submit answer e three seven three eight three times,"```python
start_state = (4, 7, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""14 plus 8 is 18"" - participant likely added 7+7=14 first
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(4, 8, 14),
    comment='""14 plus 8 is 18"" - participant likely added 7+7 first',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+8=18"",
    resulting_state=(4, 18),
    comment='""14 plus 8 is 18""',
    result_calc_error=True,
)

# ""8 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(4, 7, 56),
    comment='""8 times 7""',
)

# ""7 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(7, 8, 28),
    comment='""7 times 4""',
)

# ""7 times 7 forty nine""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(4, 8, 49),
    comment='""7 times 7 forty nine""',
)

# The participant seems to be trying various multiplications without a clear strategy
# Then they arrive at their final answer which uses 7/7=1 and multiplies by 8, then subtracts from 4

new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 4, 8),
    comment='""seven divided by seven""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*8=8"",
    resulting_state=(4, 8),
    comment='""times eight""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-8=-4"",
    resulting_state=(-4,),
    comment=""Based on submitted answer 4-(7/7)*8"",
)
```"
1393,"[3,5,9,9]",((5x9)-9,180," Um, that one might be harder. Um, 9 minus, that would be 4, uh, 4, 9 minus 4 would be 5, it's only 15. Um, 9 times 5 is 35, 9 times 3 is 21, that's not right, that's 14, I think, yeah. Um, uh, 3, 3 times 5 would be 2, no, 3 minus, 5 minus 3 would be 2, 7, uh, 9, 9, it's gotta be a minus sign or something. Oh, it could be divided by. Shoot, I'm bad at divided by. Okay, uh, 9 times 3 would be 21, uh, 9 times 9 would be 81 divided by 3. Uh, that's a good one. 81 divided by 3. Uh, 9 times 3 would be something. 27? I think that's only between 2, though, if I minus by 5. Uh, yeah, right? I think. It'd have to be 87, and it's not. Um, 3 times, no, 5 times 9 is 44. Uh, minus 9 would be 36. That's not a lot. Uh, 9 times 5, 45, divided by 3 would be, uh, 15 plus 9. That's it. So, it's. So, I've only been through 5 times 9. That was one parenthesis. Uh, then, what was it? Minus 3? 45. And minus 9 was just 45. Minus. What was it? 45. 9.","```python
start_state = (3, 5, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus, that would be 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(3, 4, 9),
    comment='""9 minus, that would be 4""',
)

# ""9 times 5 is 35"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=35"",
    resulting_state=(3, 9, 35),
    comment='""9 times 5 is 35""',
    result_calc_error=True
)

# ""9 times 3 is 21"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=21"",
    resulting_state=(5, 9, 21),
    comment='""9 times 3 is 21""',
    result_calc_error=True
)

# ""3 times 5 would be 2, no, 5 minus 3 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 9, 9),
    comment='""5 minus 3 would be 2""',
)

# ""9 times 9 would be 81 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9/3=27"",
    resulting_state=(5, 27),
    comment='""9 times 9 would be 81 divided by 3""',
)

# ""5 times 9 is 44""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=44"",
    resulting_state=(3, 9, 44),
    comment='""5 times 9 is 44""',
    result_calc_error=True,
)

# ""minus 9 would be 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44-9=36"",
    resulting_state=(3, 36),
    comment='""minus 9 would be 36""',
    result_calc_error=True,
)

# ""9 times 5, 45, divided by 3 would be, uh, 15 plus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5/3+9=24"",
    resulting_state=(24,),
    comment='""9 times 5, 45, divided by 3 would be, uh, 15 plus 9""',
)

# The participant then seems to be reviewing what they've done
# ""5 times 9"" and ""minus 9"" matches their submitted response ((5x9)-9)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=45"",
    resulting_state=(3, 9, 45),
    comment='""5 times 9""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-9=36"",
    resulting_state=(3, 36),
    comment='""minus 9""',
)
```"
1395,"[1,6,11,13]",,180," Um, 6, hmm, maybe 2, 11, 15 minus 11 is 2, that's not going to be enough, 2 times 6, the 1's not helping me. 1 plus 13, 1 plus 13 is 14, uh, 1 plus 13 is 14, minus 11 is 13, that's not enough. Uh, 13 minus 6, 7, 7 plus 4, 11, 18, that's not enough. Um, 13 minus 6 would be... 7, uh, 11's too much. Um, 1 plus 6, 7, 7 minus, 7 minus, 14 is 6, uh, the 11's too big. There's everything left. Uh, 11 times 13, and then divide by 6. Uh, 11 times 13 is, uh, 11 times 3 is 33, so that's 33 plus 110, which is 143, divided by 6, uh, would be 20-something. Um, 136 minus 12 would be... not 136, 133, which means it's not going to, it's not going to be divisible clearly, which means I have to subtract it by something, possibly the 1 to make it 2, which would be 133.","```python
start_state = (1, 6, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""15 minus 11 is 2"" - participant likely meant 13 minus 11
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 6),
    comment='""15 minus 11 is 2"" - participant likely meant 13 minus 11',
)

# ""1 plus 13 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+13=14"",
    resulting_state=(6, 11, 14),
    comment='""1 plus 13 is 14""',
)

# ""minus 11 is 13"" - continuing from 14
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-11=3"",
    resulting_state=(3, 6),
    comment='""minus 11 is 13"" though they calculate 14-11',
)

# ""13 minus 6, 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 7, 11),
    comment='""13 minus 6, 7""',
)

# ""7 plus 4, 11, 18"" - not clear where 4 comes from, might be a transcription error

# ""1 plus 6, 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(7, 11, 13),
    comment='""1 plus 6, 7""',
)

# ""11 times 13, and then divide by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13/6=23.83"",
    resulting_state=(1, 23.83),
    comment='""11 times 13, and then divide by 6""',
)

# The participant then works out that 11*13=143 explicitly
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13=143"",
    resulting_state=(1, 6, 143),
    comment='The participant calculates ""11 times 13 is, uh, 11 times 3 is 33, so that\'s 33 plus 110, which is 143""',
)

# ""divided by 6, uh, would be 20-something""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""143/6=23.83"",
    resulting_state=(1, 23.83),
    comment='""divided by 6, uh, would be 20-something""',
)
```"
1400,"[2,4,5,9]",,180," Oh, 2, 4, 5, 9. So, if you add up all the numbers together, that's 20. So, you can't add them all together. 5 times 9. 5 times 9 is 45. So, that's... What about 5 times 4? It's 20. I think I got it. 5 times 4 is 20 minus... No. 20 minus 9 is 11. 5 plus... What if 4 times 2 is 8? No. 4 times 9 is 36. 36 minus 10 is not 24. 9 times 2 is 18. 9 plus 5 is 23. 9 plus 4 is 22. 9 times 4 is 32. 9 times 4 is 26. 9 times 4 is 36. 9 times 4 is 26. Nine times four is 36. Nine times two is 18. I am so confused. Nine times two is 18. What if I did like 40? Wait, okay. Nine times five is 45. No, it's 41 because it was like 40.","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if you add up all the numbers together, that's 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4+5+9=20"",
    resulting_state=(20,),
    comment='""if you add up all the numbers together, that\'s 20""',
)

# ""5 times 9 is 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=45"",
    resulting_state=(2, 4, 45),
    comment='""5 times 9 is 45""',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(2, 9, 20),
    comment='""5 times 4 is 20""',
)

# ""20 minus 9 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20-9=11"",
    resulting_state=(2, 11),
    comment='""20 minus 9 is 11""',
)

# ""4 times 2 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(5, 8, 9),
    comment='""4 times 2 is 8""',
)

# ""4 times 9 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(2, 5, 36),
    comment='""4 times 9 is 36""',
)

# ""36 minus 10"" - not clear where 10 comes from, skipping this operation

# ""9 times 2 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(4, 5, 18),
    comment='""9 times 2 is 18""',
)

# ""9 plus 5 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(2, 4, 14),
    comment='""9 plus 5 is 23"" - participant made calculation error',
    result_calc_error=True,
)

# ""9 plus 4 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+4=13"",
    resulting_state=(2, 5, 13),
    comment='""9 plus 4 is 22"" - participant made calculation error',
    result_calc_error=True,
)

# ""9 times 4 is 32...9 times 4 is 26...9 times 4 is 36"" participant seems confused about multiplication
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 5, 36),
    comment='""9 times 4 is 32...9 times 4 is 26...9 times 4 is 36"" participant seems confused about multiplication',
)

# ""Nine times two is 18"" - repeating earlier calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(4, 5, 18),
    comment='""Nine times two is 18"" - repeating earlier calculation',
)

# ""Nine times five is 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(2, 4, 45),
    comment='""Nine times five is 45""',
)

# ""No, it's 41"" - participant seems confused about the multiplication
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=41"",
    resulting_state=(2, 4, 41),
    comment='""No, it\'s 41"" - participant seems confused about the multiplication',
    result_calc_error=True,
)
```"
1401,"[3,5,7,11]",,180," 3, 5, 7, 11. So, if you add them up, 11, 7 is 18, then 3 is 21, then 5 is 26. So, 11, 5, 7. Wait, what if I did 33? 11 times 33. 11 times 33. What about 5 times 3? Times, no. 5 times 3 is 15, plus 11 is 26. 5 times 7 is 35. Minus 11 is 24. I just feel like... I feel like I'm going to end up subtracting the 11. So, this would have to equal 13, which is not possible. So, wait, no. This would have to make... I'm doing it backwards. So, it would have to be 35. 7 times 5 is 35. 7 times 3. I haven't tried that one. 7 times 3 is 21. That's not going to do anything. 3, 5, 7, 11. 7. 7. 3, 11 times 3 is 33. 3, 11 times 3 is 33. 11 times 33 minus 7 would be 26, but you can't subtract the 5. 55. 55. Can I do 55? Can I do 55? 55 times 3. 11 times 5. No. No. Divided by 3. That doesn't... That doesn't go correctly. 7 times 5 is 35. 35 minus 11 is literally 24.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11, 7 is 18, then 3 is 21, then 5 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7+3+5=26"",
    resulting_state=(26,),
    comment='""11, 7 is 18, then 3 is 21, then 5 is 26""',
)

# ""11 times 33"" - participant seems to be trying to multiply 11 by 3
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(5, 7, 33),
    comment='""11 times 33"" - participant seems to be trying to multiply 11 by 3',
)

# ""5 times 3 is 15, plus 11 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3+11=26"",
    resulting_state=(7, 26),
    comment='""5 times 3 is 15, plus 11 is 26""',
)

# ""5 times 7 is 35. Minus 11 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7-11=24"",
    resulting_state=(3, 24),
    comment='""5 times 7 is 35. Minus 11 is 24""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(5, 11, 21),
    comment='""7 times 3 is 21""',
)

# ""11 times 3 is 33""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(5, 7, 33),
    comment='""11 times 3 is 33""',
)

# ""11 times 33 minus 7 would be 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-7=26"",
    resulting_state=(5, 26),
    comment='""11 times 33 minus 7 would be 26""',
)

# ""11 times 5"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(3, 7, 55),
    comment='""11 times 5""',
)

# ""Divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""55/3=18.33"",
    resulting_state=(7, 18.33),
    comment='""Divided by 3""',
)

# ""7 times 5 is 35. 35 minus 11 is literally 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5-11=24"",
    resulting_state=(3, 24),
    comment='""7 times 5 is 35. 35 minus 11 is literally 24""',
)
```"
1402,"[9,10,10,13]",10+10+13-9,140," Oh, 9, 10, 10, 13. Okay, so 10, I wouldn't even do. 20, 13, 9 is 22. Is there something like, divides into 24? So, 24 times 9, 4 times 9 is 6, 3, that's 216. How would I even begin? What if I did, no, because 10 times 13 is 130, 10 times 9 is 90, so that'd be 40. 10 times 9 is 90. I really have no clue. I don't even know where to go with this. I don't even know. Okay. Okay. 10 plus 10 is 20. 20 plus 13 is 33, and then minus 9, there you go.","```python
start_state = (9, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""20, 13, 9 is 22"" - participant seems to be adding 20 (from 10+10) and 13, then subtracting 9, but makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(9, 13, 20),
    comment='""20, 13, 9 is 22"" - first adding the tens',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+13-9=22"",
    resulting_state=(22,),
    comment='""20, 13, 9 is 22"" - adding 13 and subtracting 9, with calculation error',
    result_calc_error=True,
)

# Return to start state for new operations
curr_state = graph.move_to_node(start_state)

# ""10 times 13 is 130""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(9, 10, 130),
    comment='""10 times 13 is 130""',
)

# Return to start state
curr_state = graph.move_to_node(start_state)

# ""10 times 9 is 90""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*9=90"",
    resulting_state=(10, 13, 90),
    comment='""10 times 9 is 90""',
)

# Return to start state
curr_state = graph.move_to_node(start_state)

# Finally, the participant finds the solution: ""10 plus 10 is 20. 20 plus 13 is 33, and then minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(9, 13, 20),
    comment='""10 plus 10 is 20""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+13-9=24"",
    resulting_state=(24,),
    comment='""20 plus 13 is 33, and then minus 9""',
)
```"
1403,"[1,3,9,10]",,180," Ah, more numbers. 9 times 3 is 36. Minus 10. Oh, that is just so... 10 times 3... times 3 is 27. 10 times... 34, that's just not going to happen. Minus 9, if you... that is... 15. Which, if you did 10 plus 3 plus 1, that is 14. Minus 3, 21. Um... What if I did... No, because 9 times 10, 90, divided by 3 is 30, so... that wouldn't work. Um... I really have no clue... 10, 90, 9, 10, 3, 1, 27, 10 plus 9, no, 9 plus 3, we'll do 12, no, I keep getting 23, 8 minus 3, 9 minus 1 is 8, times 3, of course, 9 minus 3 is 6, 9 minus 3 is 6, 10 minus 3 is 7,","```python
start_state = (1, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=36"",
    resulting_state=(1, 10, 36),
    comment='""9 times 3 is 36""',
    result_calc_error=True,  # 9*3 is actually 27
)

# ""Minus 10"" continuing from previous calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-10=26"",
    resulting_state=(1, 26),
    comment='""Minus 10""',
)

# ""10 times 3... times 3 is 27"" - participant likely meant ""9 times 3 is 27"" correcting earlier error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(1, 10, 27),
    comment='""times 3 is 27"" - participant likely meant ""9 times 3 is 27""',
)

# ""10 times... 34"" is unclear what operation was attempted

# ""10 plus 3 plus 1, that is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3+1=14"",
    resulting_state=(9, 14),
    comment='""10 plus 3 plus 1, that is 14""',
)

# ""Minus 3, 21"" is unclear what the base number was

# ""9 times 10, 90, divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*10/3=30"",
    resulting_state=(1, 30),
    comment='""9 times 10, 90, divided by 3""',
)

# ""9 plus 3, we'll do 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(1, 10, 12),
    comment='""9 plus 3, we\'ll do 12""',
)

# ""9 minus 1 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(3, 8, 10),
    comment='""9 minus 1 is 8""',
)

# ""times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(10, 24),
    comment='""times 3""',
)

# ""9 minus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(1, 6, 10),
    comment='""9 minus 3 is 6""',
)

# ""10 minus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(1, 7, 9),
    comment='""10 minus 3 is 7""',
)
```"
1408,"[5,10,13,13]",10x5-(13+13),114," So, 13 plus 13 is 26. 5 plus 13 divided by 13 is 1. 5 divided by 10 is 2. 13 plus 13 is 23. 23 plus 13 is minus 26. 20 plus 20 is plus 5. 21 minus 10 is 21. 10. 13, 23. Okay, so. 50 minus 26 is 24. Okay, so. 10. Times 5. Minus. Into brackets. 13. 13. Plus. 13. 18. Close brackets. So.","```python
start_state = (5, 10, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(5, 10, 26),
    comment='""13 plus 13 is 26""',
)

# ""5 plus 13 divided by 13 is 1"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+13)/13=1"",
    resulting_state=(1, 10),
    comment='""5 plus 13 divided by 13 is 1""',
    result_calc_error=True,
)

# ""5 divided by 10 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5/10=2"",
    resulting_state=(2, 13, 13),
    comment='""5 divided by 10 is 2""',
    result_calc_error=True,
)

# ""13 plus 13 is 23"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=23"",
    resulting_state=(5, 10, 23),
    comment='""13 plus 13 is 23"" - calculation error',
    result_calc_error=True,
)

# First compute 10*5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(13, 13, 50),
    comment='""50 minus 26 is 24"" - participant first computes 10*5=50',
)

# Then subtract 13+13
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""50-(13+13)=24"",
    resulting_state=(24,),
    comment='""50 minus 26 is 24"" - participant subtracts 13+13 from 50',
)
```"
1409,"[11,13,13,13]",,186," So, 13 times 11 is 133. Which is, just wait, wait, wait, 133, 133, times 13, minus 13, times 13, 13, 13, times 11, 13 times 11, 143. Sorry. Minus 13, minus 13, times 13, 26, which is 1. Okay, so, 26, 26. 24. Okay, so 13 plus 11, 13 plus 11 is plus 13 divided by 13. Times, okay. So, um. um 11 plus 13 which is 24 into brackets into brackets which one two brackets divided divided divided by 13 close buckets","```python
start_state = (11, 13, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 11 is 133"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=133"",
    resulting_state=(13, 13, 133),
    comment='""13 times 11 is 133"" - calculation error',
    result_calc_error=True,
)

# ""13 times 11, 143"" - participant corrects calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=143"",
    resulting_state=(13, 13, 143),
    comment='""13 times 11, 143"" - participant corrects calculation',
)

# ""Minus 13, minus 13"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""143-13-13=117"",
    resulting_state=(117,),
    comment='""Minus 13, minus 13""',
)

# Return to start state for new operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(13, 13, 24),
    comment='""13 plus 11""',
)

# The final part about ""divided by 13"" seems to be the participant trying to work with the 24 they just computed
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24/13=1.85"",
    resulting_state=(1.85, 13),
    comment='""divided by 13""',
)
```"
1410,"[6,9,9,11]",,180," 9 times 9, 9 times 9, 9 times 11, 9 times 11, minus 9 times 11, minus 6 times 9. 45, so 9 plus 9 is 18, plus 11 times 66. 66 minus... Oh, okay, so... I've got this one. Um... 9, 6 times 9... 9, okay... 11 plus 9 is... 20. Plus 9 minus 6. Plus 9, okay. Um, 29 minus 6. 23. 11 plus 6 is 18. 17 plus 9... 5. 5. 3, 2, 2, 5. 18 plus 11. 18 plus 11 minus 6. 23. 23. Um... 2, 5. 2, 5. 18 plus 11 minus 6. 24. Oh, shit. 9 plus 6. Okay, 9 plus 6. 9 plus 6. What the fuck? 9 plus 6. 9 plus 6. plus 9","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 11, 81),
    comment='""9 times 9""',
)

# ""9 times 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*11=99"",
    resulting_state=(6, 9, 99),
    comment='""9 times 11""',
)

# ""6 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(9, 11, 54),
    comment='""6 times 9""',
)

# ""9 plus 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 11, 18),
    comment='""9 plus 9 is 18""',
)

# ""11 plus 9 is... 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(6, 9, 20),
    comment='""11 plus 9 is... 20""',
)

# ""Plus 9 minus 6"" continuing from 20
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+9-6=23"",
    resulting_state=(23,),
    comment='""Plus 9 minus 6"" continuing from 20',
)

# ""11 plus 6 is 18"" (though this is incorrect)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=18"",
    resulting_state=(9, 9, 18),
    comment='""11 plus 6 is 18"" (though this is incorrect)',
    result_calc_error=True,
)

# ""9 plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(9, 11, 15),
    comment='""9 plus 6""',
)

# ""plus 9"" continuing from previous calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+9=24"",
    resulting_state=(11, 24),
    comment='""plus 9"" continuing from previous calculation',
)
```"
1416,"[1,1,4,6]",6x4x1x1,13, 6 times 4 is 24. I'm going to do 6 times 4 times 1 times 1.,"```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 1, 24),
    comment='""6 times 4 is 24""',
)

# ""I'm going to do 6 times 4 times 1 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4*1*1=24"",
    resulting_state=(24,),
    comment='""I\'m going to do 6 times 4 times 1 times 1""',
)
```"
1417,"[4,7,12,12]",,180," All right. So, can I make the 7 and 4 as 0? No. 12 plus 4 is 16, plus 7 is 23. Can I divide 12? 12 divided by 4 is 3, plus 7 is 10. It gives me nothing. 12 minus 7 gives me a 5. 17. 19. 20. 21. 12 plus 4 is 16. 12 divided by 4. I've got 3. 19. 20. I've got 12. I've got 15. It only gives me 22. 12 plus 7 is 19. 12 minus 7 is 16. 20. 21. 26. 30. 34. 35. 36. 37. 38. 40. 42. 44. 44. 45. 46. 46. 52. 53. 54. 56. 57. 58. 59. 60.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 4 is 16, plus 7 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4+7=23"",
    resulting_state=(12, 23),
    comment='""12 plus 4 is 16, plus 7 is 23""',
)

# ""12 divided by 4 is 3, plus 7 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4+7=10"",
    resulting_state=(10, 12),
    comment='""12 divided by 4 is 3, plus 7 is 10""',
)

# ""12 minus 7 gives me a 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 12),
    comment='""12 minus 7 gives me a 5""',
)

# The numbers 17, 19, 20, 21 seem to be the participant counting up, not operations

# ""12 plus 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4=16"",
    resulting_state=(7, 12, 16),
    comment='""12 plus 4 is 16""',
)

# ""12 divided by 4. I've got 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 7, 12),
    comment='""12 divided by 4. I\'ve got 3""',
)

# ""12 plus 7 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(4, 12, 19),
    comment='""12 plus 7 is 19""',
)

# ""12 minus 7 is 16"" (this is a calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=16"",
    resulting_state=(4, 12, 16),
    comment='""12 minus 7 is 16"" (calculation error)',
    result_calc_error=True,
)

# The rest appears to be the participant counting up through numbers, not performing operations with the starting numbers

```"
1421,"[2,2,7,7]",,180," 14 plus 2 is 9. 11, 14 minus 18, if I just add them all together. 2 times 2 is 4. Times 7. 2 times, oh, wrong. 2 times 2 is 4. Times 7. 28 minus 7, that's not enough. 2 times 2 is 4. 7 times 2 is 14. And if I did multiply 7 times 7 and divide it by 2, still not there. 2 times 2 times 7. 16. Not enough. 9. Oh, yes. 7 plus 2 is 9 times 2 is 18. Ah, one too many for 7. Ah. 9. 18. 1, 2, 3, 4, 5. 2 is 4. 1, 2, 3, 4. And, I did 7 divided by 7. I got a 1. And, I can't look anywhere with that. Now, I get 12. I added 7, 9 into 11. Which. Wtf. Double. Multiplies 7 times 2 is 4. Fourteen plus seven is twenty-one plus two is twenty-three.","```python
start_state = (2, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""14 plus 2 is 9"" seems to be a calculation error, possibly meant 7+2=9
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(2, 7, 9),
    comment='""14 plus 2 is 9"" seems to be a calculation error, possibly meant 7+2=9',
)

# ""2 times 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 7, 7),
    comment='""2 times 2 is 4""',
)

# ""Times 7"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(7, 28),
    comment='""Times 7""',
)

# ""28 minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-7=21"",
    resulting_state=(21,),
    comment='""28 minus 7""',
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 7, 14),
    comment='""7 times 2 is 14""',
)

# ""multiply 7 times 7 and divide it by 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7/2=24.5"",
    resulting_state=(2, 24.5),
    comment='""multiply 7 times 7 and divide it by 2""',
)

# ""2 times 2 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2*7=28"",
    resulting_state=(7, 28),
    comment='""2 times 2 times 7""',
)

# ""7 plus 2 is 9 times 2 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+2)*2=18"",
    resulting_state=(7, 18),
    comment='""7 plus 2 is 9 times 2 is 18""',
)

# ""7 divided by 7. I got a 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 2, 2),
    comment='""7 divided by 7. I got a 1""',
)

# ""I added 7, 9 into 11"" - not clear what operation this refers to

# ""Multiplies 7 times 2 is 4"" - seems to be an error, as 7*2=14
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=4"",
    resulting_state=(2, 4, 7),
    comment='""Multiplies 7 times 2 is 4"" - calculation error',
    result_calc_error=True,
)

# ""Fourteen plus seven is twenty-one plus two is twenty-three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+7+2=23"",
    resulting_state=(23,),
    comment='""Fourteen plus seven is twenty-one plus two is twenty-three""',
)
```"
1432,"[3,5,9,9]",,180," Target number is 24 and we have to use those, 18, okay. 45 minus 27, 37, that's 18, okay. Let's say, 5 times 9 is 45 minus 27, that's 18. Okay, alright, 9, 10, 11, 12, 13, 14, no, that's 26, 9 plus 9, okay, 45 minus 12. 33, a lot harder than I thought. Alright, 18 times 5, this is 54, uh-uh, 18 times 3, minus, no, okay, so, 15 plus 9, okay, 27 plus, okay, I'm struggling here, 45, hmm. 45 minus 9 is 36, it's 33, hmm, 81 minus 15, that's way too big, 45, 12, that's 33. Alright, 45. 45 minus 27, 37, that's 18, okay, 245 minus 12, 33, I don't know, okay.","```python
start_state = (3, 5, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 9 is 45 minus 27, that's 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=45"",
    resulting_state=(3, 9, 45),
    comment='""5 times 9 is 45""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-(9*3)=18"",
    resulting_state=(18,),
    comment='""45 minus 27, that\'s 18"" - participant likely got 27 from 9*3',
)

# ""9 plus 9"" going back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(3, 5, 18),
    comment='""9 plus 9""',
)

# ""45 minus 12"" - participant likely got 45 from 5*9 and 12 from 3*4
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=45"",
    resulting_state=(3, 9, 45),
    comment='""45 minus 12"" - first getting 45',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-(3*4)=33"",
    resulting_state=(33,),
    comment='""45 minus 12. 33"" - participant likely got 12 from 3*4',
)

# ""15 plus 9"" - participant likely got 15 from 3*5
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(9, 9, 15),
    comment='""15 plus 9"" - participant likely got 15 from 3*5',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+9=24"",
    resulting_state=(9, 24),
    comment='""15 plus 9""',
)

# ""45 minus 9 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9-9=36"",
    resulting_state=(3, 36),
    comment='""45 minus 9 is 36""',
)

# ""81 minus 15"" - participant likely got 81 from 9*9 and 15 from 3*5
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(3, 5, 81),
    comment='""81 minus 15"" - participant likely got 81 from 9*9',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""81-(3*5)=66"",
    resulting_state=(66,),
    comment='""81 minus 15"" - participant likely got 15 from 3*5',
)

# The rest of the transcript appears to be the participant repeating previous calculations
```"
1434,"[1,4,5,8]",(8-4)x(1+5),127," 24 again... alright, 24 again... plus 7, okay... 8... 8 times 5 is 40, minus 4 is 32... 8 times 4 is 32... minus... okay, what about... 9... 9... 7 is too big... okay... 9 and 9... 18... 40 minus... okay... 5 minus 1 is 4... times 3, that's 12... no, that won't work... okay, gotta double it. 3 times 4 is... okay... 4 times 4 is 16... 6... 4 times 6... okay, how'd I get that? I think I did 8... minus 4... okay, 4... times... no... 3 times 4... okay, let me do that again... 8 minus 5... that's 3... times... no... 4 times 5 is 20... ah, still messed up... or 6... 666... okay, so let's go back... to 4... times 1 plus 5 because 1 plus 5 is 6. Alright, 4 times 6. There we go. We got it.","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 5 is 40, minus 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5-4=32"",
    resulting_state=(1, 32),
    result_calc_error=True,
    comment='""8 times 5 is 40, minus 4 is 32""',
)

# ""8 times 4 is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(1, 5, 32),
    comment='""8 times 4 is 32""',
)

# ""5 minus 1 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 4, 8),
    comment='""5 minus 1 is 4""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 16),
    comment='""4 times 4 is 16""',
)

# ""8 minus 4... okay, 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(1, 4, 5),
    comment='""8 minus 4... okay, 4""',
)

# ""8 minus 5... that's 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(1, 3, 4),
    comment='""8 minus 5... that\'s 3""',
)

# ""4 times 5 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(1, 8, 20),
    comment='""4 times 5 is 20""',
)

# ""let's go back... to 4... times 1 plus 5 because 1 plus 5 is 6""
# First compute 1+5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(4, 6, 8),
    comment='""1 plus 5 is 6""',
)

# Then the participant says ""4 times 6"" but based on their submitted answer (8-4)x(1+5),
# they actually used 8-4=4 as their first step
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(1, 4, 5),
    comment='Based on submitted answer ""(8-4)x(1+5)"", participant computed 8-4 first',
)

# Then they multiply by 1+5=6 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*(1+5)=24"",
    resulting_state=(24,),
    comment='Based on submitted answer ""(8-4)x(1+5)"", participant multiplied by 1+5',
)
```"
1436,"[6,6,8,12]",(8-6)x,180," Okay, 8 minus 6 is 2. Okay, 2 times 6 minus 6, 2 times 6, no. Alright, 12 minus 6 is 6. Okay, 12 minus 6 is 6. That's right. 12 minus 6 is 6 times, no. No, no, no. How do I do this in my head and then I forget it before I get it down there? 12 minus 8 is 4. 12, 3, 4, that's 16. 36 minus 4, no. Huh. 6 times 2, that won't work. 6 times 6 is 36 minus 4. Alright, so what if I say, what if I say 12 minus 6? That's 6. 48 minus 6, that won't get it. 4, 8 minus 2 is 2. Okay, 8 minus 6 is 2, so let's try that. 8 minus, oh goodness. 8 minus 6 is 2. 12 minus 6 is 6. 6 times 2. That's only 12. Alright, 4. 12 minus 8 is 4. 12 minus 6 is 4. 4. 12 minus 8 is 5. 1. 1. 1.","```python
start_state = (6, 6, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 12),
    comment='""8 minus 6 is 2""',
)

# ""2 times 6"" from the new state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(12, 12),
    comment='""2 times 6""',
)

# ""12 minus 6 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 6, 8),
    comment='""12 minus 6 is 6""',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 6),
    comment='""12 minus 8 is 4""',
)

# ""12, 3, 4, that's 16"" - not clear what operation this represents

# ""6 times 6 is 36 minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6-4=32"",
    resulting_state=(32,),
    comment='""6 times 6 is 36 minus 4""',
)

# ""12 minus 6? That's 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 6, 8),
    comment='""12 minus 6? That\'s 6""',
)

# ""8 minus 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 12),
    comment='""8 minus 6 is 2""',
)

# ""12 minus 6 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 6, 8),
    comment='""12 minus 6 is 6""',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 6),
    comment='""12 minus 8 is 4""',
)

# ""12 minus 6 is 4"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=4"",
    resulting_state=(4, 6, 8),
    comment='""12 minus 6 is 4"" - calculation error',
    result_calc_error=True,
)

# ""12 minus 8 is 5"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=5"",
    resulting_state=(5, 6, 6),
    comment='""12 minus 8 is 5"" - calculation error',
    result_calc_error=True,
)
```"
1439,"[6,7,9,12]",,180," 24 again. Okay. 42 minus 3. Oh, nope. Alright, 12 times, no. What am I going to do with the 7? 12, 13, 14, 15, 16, 17, 18, 19, 20, 21. Okay, 2. 12 minus 6 is 6. 2, no. Okay. 12, 3 times 42. 1 times, nonetheless, there's 2. Okay, 12 minus 6, no. 12 minus 7 is 5. 9 minus 6 is 3. That's 15. No. 2 times 6, that's 12. What is 9 times 6? It's 56. Minus 87. 56, 56, 56, 56, 56, 56, 56, 56. 80. Oh, that's too much. Okay. Okay. 12 minus 6 is 5. 9 minus 6 is 3. That's 15. Okay. 12 minus 6 is 6. Times... 6 times 2 is 12. No. 13 times 3. That won't work. 2 times 19. No. Okay, 12. 12. I need to get that down to 2. 12 minus 9 is 3. Times 1, no. 3 times... It's not going to work. 4. 9 minus 7 is 2. Times 9, 12, 6. Okay. 9 minus 6 is 3. Times 5, no. 12 minus 6 is 6. Times 2. Oh. What is this? Okay. 12 minus 9 is 15. 1. 12. All right. 19, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,","```python
start_state = (6, 7, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 7, 9),
    comment='""12 minus 6 is 6""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 6, 9),
    comment='""12 minus 7 is 5""',
)

# ""9 minus 6 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 7, 12),
    comment='""9 minus 6 is 3""',
)

# ""What is 9 times 6? It's 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=56"",
    resulting_state=(7, 12, 56),
    result_calc_error=True,
    comment='""What is 9 times 6? It\'s 56""',
)

# ""12 minus 6 is 5"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=5"",
    resulting_state=(5, 7, 9),
    result_calc_error=True,
    comment='""12 minus 6 is 5"" (calculation error)',
)

# ""9 minus 6 is 3. That's 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 7, 12),
    comment='""9 minus 6 is 3""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 6, 7),
    comment='""12 minus 9 is 3""',
)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 6, 12),
    comment='""9 minus 7 is 2""',
)

# ""9 minus 6 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 7, 12),
    comment='""9 minus 6 is 3""',
)

# ""12 minus 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 7, 9),
    comment='""12 minus 6 is 6""',
)

# ""12 minus 9 is 15"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=15"",
    resulting_state=(6, 7, 15),
    result_calc_error=True,
    comment='""12 minus 9 is 15"" (calculation error)',
)

# The rest appears to be counting up numbers without performing operations
```"
1443,"[3,9,10,12]",,180," Alright, we'll be at 3, 9, 10, and 12. 3 and 9, 3, 12, alright, 10, 30, minus, no, hold on, 9, 12 is, I can't get rid of 10 though. Yeah, that would work if I did 9 plus 12 plus 3, but then I couldn't get rid of 10, I'd have to get rid of 10 somehow, because I'd have to use all the numbers. Let's see, 3 times 9 is 27, no. 12 divided by 3 is 4, nope. 3, no, 10 minus 3 is 7, nope. Oh, no, I don't think so. 12 minus, no. 9 minus 3, no, 10 minus 3 is... 7. Multiply that by 12 is 70, no, 70. 70 plus 14... 84, nope, that's not going to help. 3, 9, 10, 12. 12 divided by 12 minus 9 is... 9 is 3. 12 minus 3 is 9. No. Hmm. 10 times 12 is 120. 3 times 9 is 27. That's not helpful. 10, 9 plus 10 is 19. Hmm. I don't have a lot of time, so... Hmm. Hmm. Hmm. Hmm. Hmm.","```python
start_state = (3, 9, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 12 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12+3=24"",
    resulting_state=(10, 24),
    comment='""9 plus 12 plus 3""',
)

# ""3 times 9 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(10, 12, 27),
    comment='""3 times 9 is 27""',
)

# ""12 divided by 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 9, 10),
    comment='""12 divided by 3 is 4""',
)

# ""10 minus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(7, 9, 12),
    comment='""10 minus 3 is 7""',
)

# ""Multiply that by 12 is 70"" - participant makes calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=70"",
    resulting_state=(9, 70),
    comment='""Multiply that by 12 is 70"" - participant makes calculation error',
    result_calc_error=True,
)

# ""70 plus 14... 84"" - not clear where 14 comes from, might be 9+5 but that's not using available numbers

# Move back to start state for remaining operations
curr_state = graph.move_to_node(start_state)

# ""12 divided by 12 minus 9 is... 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 9, 10),
    comment='""12 divided by 12 minus 9 is... 9 is 3""',
    result_calc_error=True,
)

# ""12 minus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(9, 9, 10),
    comment='""12 minus 3 is 9""',
)

# ""10 times 12 is 120""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(3, 9, 120),
    comment='""10 times 12 is 120""',
)

# ""3 times 9 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(10, 12, 27),
    comment='""3 times 9 is 27""',
)

# ""9 plus 10 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(3, 12, 19),
    comment='""9 plus 10 is 19""',
)
```"
1453,"[3,4,8,11]",,185," Okay, 3, 4, 8, 11. 11 minus 8 is 3, times 4 is 12. Um, 3 and 11 is 33. 33 minus 8, 32, 31, 39, 28, 27, 26, 24, 25, 26, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 35. Silly story. Um, let's go. 4 and 11 is 44. 44 minus 8 is 36. That won't work. Um, 11 minus 4 is 7. Boom! 7 times. Let's do... Can't divide 11 by anything. Let's try, um... Uh, did I already do 11 minus 8? 11 minus 3 is 8 times 4 is 24. 11 minus 3 is 8. 8 plus 8 is... That won't work either. 3 and 4 is 12. 12 and 11. 3 and 4 is 12. 12 and 11 gets you 23. Can't do that either. Man, this is tough. Um, I might time out on this one. I don't know. Let's see here. 8 and 4 is 12. 12 and 11 is... That won't actually work, though. Um... 8 times 3 is 24. Plus 11. That won't work. Yeah, I don't know. I don't know this one. Can you do negative numbers? I mean, I guess so. Yeah. But I don't think that'd help. I don't think getting to a negative number would help. Um, let's try... Or do you do 4 and 8? Or did I do 4 and 8 yet?","```python
start_state = (3, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 8 is 3, times 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8)*4=12"",
    resulting_state=(3, 4, 12),
    comment='""11 minus 8 is 3, times 4 is 12""',
)

# ""3 and 11 is 33""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11=33"",
    resulting_state=(4, 8, 33),
    comment='""3 and 11 is 33""',
)

# ""33 minus 8"" participant seems to be counting down from 33, but doesn't complete an operation

# ""4 and 11 is 44""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(3, 8, 44),
    comment='""4 and 11 is 44""',
)

# ""44 minus 8 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44-8=36"",
    resulting_state=(3, 36),
    comment='""44 minus 8 is 36""',
)

# ""11 minus 4 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(3, 7, 8),
    comment='""11 minus 4 is 7""',
)

# ""11 minus 3 is 8 times 4 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-3)*4=32"",
    resulting_state=(8, 32),
    comment='""11 minus 3 is 8 times 4 is 24"" - participant made calculation error',
    result_calc_error=True,
)

# ""3 and 4 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 11, 12),
    comment='""3 and 4 is 12""',
)

# ""12 and 11 gets you 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(8, 23),
    comment='""12 and 11 gets you 23""',
)

# ""8 and 4 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(3, 11, 12),
    comment='""8 and 4 is 12""',
)

# ""12 and 11 is..."" participant starts to add these but abandons it

# ""8 times 3 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(4, 11, 24),
    comment='""8 times 3 is 24""',
)

# The rest of the transcript shows the participant wondering about strategies but not actually trying any operations
```"
1458,"[1,3,6,9]",(9+1)x3-6,82," 9 and 3 is 18, plus 6 is 24, times 1. Okay, 9, oops, parenthesis, 9 plus 3, plus 6, times 1. 9 plus 3 is 18, 18 plus 6 is 24, 24 times 1, am I missing something? Oh, 9 times 3. 9 times 3 plus 6, now times 1. Okay, 9 times 3 is, 9 times 3 is not 18. 6 times 3, would that work? 6 times 3 is 18, 18 plus 9, I don't think it's 24. Okay, let's try 9 plus 1, 10, 10 times 3, oh, there we go. 9 plus, yeah, 9 plus 1, times 3. 9 plus 3 minus 6.","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 and 3 is 18"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=18"",
    resulting_state=(1, 6, 18),
    comment='""9 and 3 is 18"" - participant makes calculation error',
    result_calc_error=True,
)

# ""plus 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(1, 24),
    comment='""plus 6 is 24""',
)

# ""9 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(1, 6, 27),
    comment='""9 times 3""',
)

# ""plus 6, now times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27+6=33"",
    resulting_state=(1, 33),
    comment='""plus 6""',
)

# ""6 times 3 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 9, 18),
    comment='""6 times 3 is 18""',
)

# ""18 plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+9=27"",
    resulting_state=(1, 27),
    comment='""18 plus 9""',
)

# ""9 plus 1, 10, 10 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9+1)*3=30"",
    resulting_state=(6, 30),
    comment='""9 plus 1, 10, 10 times 3""',
)

# Based on their final answer (9+1)x3-6, they must have then subtracted 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-6=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they subtracted 6"",
)
```"
1459,"[2,3,7,9]",,180," Okay, so, um, 24 would be 12, 12, I'm saying it out loud, can you not hear me? Okay, so, I'm thinking, um, plus, that would be 10, 19, 20, 21, okay, um, 16, okay, so, let's see, um, 21, 42, minus 9, um, hmm, this is hard, okay, it's 9 and 9 is 18, 16, 16, hmm, wow, um, 14, and 9 would be 23, um, 12, what could you do with that 7? Okay, 9 plus 3 is 12, that's 2, that would be 6, and 15, and 27, 27, 27, 18, 20, minus 2, ah, this is hard, okay, that's 11, would be 33, minus 7, that's 2, that's 3, that's 4, that's 5, that's 6, that's 7, that's 8, that's 9, that's 9, that's","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 would be 12, 12"" suggests participant is setting a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""24 would be 12, 12""',
)

# ""that would be 10, 19, 20, 21"" seems to be adding numbers: 9+3=12 (mentioned later), then adding 7
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3+7=19"",
    resulting_state=(2, 19),
    comment='""that would be 10, 19, 20, 21""',
)

# ""21, 42"" suggests multiplying by 2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19*2=38"",
    resulting_state=(38,),
    comment='""21, 42""',
)

# Back to start state for new operations
curr_state = graph.move_to_node(start_state)

# ""9 plus 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(2, 7, 12),
    comment='""9 plus 3 is 12""',
)

# ""that would be 6"" might be 2*3=6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 7, 9),
    comment='""that would be 6""',
)

# ""and 15"" might be adding 9+6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(7, 15),
    comment='""and 15""',
)

# Back to start state for new operations
curr_state = graph.move_to_node(start_state)

# ""and 27"" might be multiplying numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(2, 7, 27),
    comment='""and 27""',
)

# Back to start state for new operations
curr_state = graph.move_to_node(start_state)

# ""that's 11"" might be adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""2+9=11"",
    resulting_state=(3, 7, 11),
    comment='""that\'s 11""',
)

# ""would be 33"" might be multiplying 11*3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(7, 33),
    comment='""would be 33""',
)

# ""minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-7=26"",
    resulting_state=(26,),
    comment='""minus 7""',
)

```"
1460,"[3,9,13,13]",,183," Okay, um, 13 and 13 is 26, 39 would be 30, um, 27, um, hmm, this is hard. Okay, 9 plus 13 would be 22, divide it by 13, this is, this is hard. 10 and 3 from 13 would give you 10, 23 plus 9, that's not going to do it, 27, 13, 27. Plus 13 would be 40, ugh, ugh, ugh, ugh, ugh, it's hard, mmm. I don't know that this can, I don't know that you can get there with this. That's 12. 36, 38, 39, 13 plus 3 would be 16, plus 3 would be 16. 16 minus 25, that's not going to work. That is, um, 13 times 13. 169 divided by 9. Okay, that's what we'll do. Okay.","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 and 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13 and 13 is 26""',
)

# ""39 would be 30"" is unclear what operation they're trying

# ""9 plus 13 would be 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(3, 13, 22),
    comment='""9 plus 13 would be 22""',
)

# ""divide it by 13"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22/13=1.69"",
    resulting_state=(3, 1.69),
    comment='""divide it by 13""',
)

# ""10 and 3 from 13"" seems to be splitting 13
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(9, 10, 13),
    comment='""10 and 3 from 13""',
)

# ""23 plus 9"" not clear where 23 came from
# ""27, 13, 27"" not clear what operations are being tried
# ""Plus 13 would be 40"" not clear what's being added to 13

# ""13 plus 3 would be 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(9, 13, 16),
    comment='""13 plus 3 would be 16""',
)

# ""16 minus 25"" not clear where 25 came from

# ""13 times 13. 169""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(3, 9, 169),
    comment='""13 times 13. 169""',
)

# ""divided by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169/9=18.78"",
    resulting_state=(3, 18.78),
    comment='""divided by 9""',
)
```"
1462,"[7,9,11,11]",11+9+11-7,114," Okay, 99, 77, 121, divided by 9, there's 121 divided by 9. Okay, we've got 11 times 11, 121 divided by 9 equals 13 plus 7, that's not going to do it. Ummm... Okay, so 9 times 11 is 99, divided by 7 is 14, plus 11 is 25, that's 20. 20... 31... 38... 31... That's 20... 31... Okay, so... You've got 11 plus 9 is 20... Plus 11 is 31... minus 7. 3...","```python
start_state = (7, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 11, 121""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=121"",
    resulting_state=(7, 9, 121),
    comment='""11 times 11, 121""',
)

# ""121 divided by 9 equals 13 plus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""121/9+7=20"",
    resulting_state=(20.44,),
    comment='""121 divided by 9 equals 13 plus 7""',
)

# ""9 times 11 is 99, divided by 7 is 14, plus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*11/7)+11=25"",
    resulting_state=(25.14,),
    comment='""9 times 11 is 99, divided by 7 is 14, plus 11""',
)

# ""11 plus 9 is 20... Plus 11 is 31... minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9+11-7=24"",
    resulting_state=(24,),
    comment='""11 plus 9 is 20... Plus 11 is 31... minus 7""',
)
```"
1465,"[5,5,6,11]",(5x6)-11+(5),111," 10, 16, 27, 26, 25, 31, 55, So, 11 times 5, 55 divided by 6 is 9. Plus 5, that's not it. Okay, 17, 22, 5 times 5 is 25. Minus 30. That's 30. 5 times 6 is 30. 30, okay. 5 times 6 is 30. Minus 11 will give you 19. 5 plus 5, that will do it. Thank you.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant starts listing some numbers, possibly intermediate calculations
# ""11 times 5, 55 divided by 6 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5/6=9"",
    resulting_state=(5, 9),
    comment='""11 times 5, 55 divided by 6 is 9""',
    result_calc_error=True,
)

# ""Plus 5, that's not it""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(14,),
    comment='""Plus 5, that\'s not it""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(6, 11, 25),
    comment='""5 times 5 is 25""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(5, 11, 30),
    comment='""5 times 6 is 30""',
)

# ""Minus 11 will give you 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-11=19"",
    resulting_state=(5, 19),
    comment='""Minus 11 will give you 19""',
)

# ""5 plus 5, that will do it"" - adding the remaining 5 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+5=24"",
    resulting_state=(24,),
    comment='""5 plus 5, that will do it""',
)

```"
1467,"[5,5,7,7]",(7x7)-(5x5),54, 7 times 7 is 29. Minus 25. 7 times 7 is 49. Minus 25. That's it. parenthesis parenthesis 7 times 7 parenthesis minus parenthesis 5 times 5 parenthesis,"```python
start_state = (5, 5, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is 29"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=29"",
    resulting_state=(5, 5, 29),
    comment='""7 times 7 is 29"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""Minus 25"" - participant computes 5*5=25 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(7, 7, 25),
    comment='""Minus 25"" - participant computes 5*5=25',
)

# ""7 times 7 is 49"" - participant corrects their earlier calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(5, 5, 49),
    comment='""7 times 7 is 49"" - participant corrects their earlier calculation error',
)

# ""Minus 25"" - participant computes 5*5=25 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(7, 7, 25),
    comment='""Minus 25"" - participant computes 5*5=25',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*7)-(5*5)=24"",
    resulting_state=(24,),
    comment='""parenthesis parenthesis 7 times 7 parenthesis minus parenthesis 5 times 5 parenthesis""',
)
```"
1468,"[2,8,10,13]",,180," Okay, um, 13. 16. This is going to be pretty hard to do something with a 13. Well, it's 26. Let's see. Let's see. 10 times 8 is 80. Minus 26. Nope, that's 54. Um, 130. 130 divided by 8 equals 16. Nope. I'm saying it out loud. I don't know why you can't hear it. Okay, um, 2 plus 13. 13 is 15. Okay, um, 2 times 10 is 20. Um, um, 13, um, 20, um, 13, 13, 13 times 8. 104. 13 times 8. 13 times 8 divided by 10. Plus 2. That's not it. 13. Um, mm. Okay, what about 2 times,","```python
start_state = (2, 8, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13. 16."" - not clear what operation this refers to

# ""Well, it's 26"" - participant might be multiplying 13*2
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(8, 10, 26),
    comment='""Well, it\'s 26"" - participant might be multiplying 13*2',
)

# ""10 times 8 is 80""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(2, 13, 80),
    comment='""10 times 8 is 80""',
)

# ""130. 130 divided by 8 equals 16"" - participant might be multiplying 13*10 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*10/8=16"",
    resulting_state=(2, 16),
    comment='""130. 130 divided by 8 equals 16"" - participant might be multiplying 13*10 first',
    result_calc_error=True,
)

# ""2 plus 13 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+13=15"",
    resulting_state=(8, 10, 15),
    comment='""2 plus 13 is 15""',
)

# ""2 times 10 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(8, 13, 20),
    comment='""2 times 10 is 20""',
)

# ""13 times 8. 104""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*8=104"",
    resulting_state=(2, 10, 104),
    comment='""13 times 8. 104""',
)

# ""13 times 8 divided by 10. Plus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""104/10+2=12.4"",
    resulting_state=(12.4,),
    comment='""13 times 8 divided by 10. Plus 2""',
)

# The transcript ends with ""what about 2 times"" which is incomplete
```"
1470,"[1,1,2,6]",(1+1+2)x6,15," The target number is 24, 6, 12, 24, so add the first 3 numbers and multiply it by the last number, 1, plus 1, plus 2, multiply it by 6.","```python
start_state = (1, 1, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6, 12, 24"" suggests the participant is working backward from 24, realizing they need to multiply by 6 to get 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6, 12, 24"" suggests working backward from 24, realizing they need to multiply by 6',
)

# ""add the first 3 numbers and multiply it by the last number, 1, plus 1, plus 2, multiply it by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+1+2)*6=24"",
    resulting_state=(24,),
    comment='""add the first 3 numbers and multiply it by the last number, 1, plus 1, plus 2, multiply it by 6""',
)
```"
1472,"[5,5,8,10]",((10+5)/5)x8,116," The target number is 24. Okay, 15, 10, 13, 5, 28, plus 5, plus 10, plus, if you add them all together it's 28. If you, um, 5 divided by 5 equals 1, but then you add the rest of that and that's 19. 8 minus 5 equals 3, and you add the rest and that's 18. 5 minus, no, it's the 10 minus 5 equals 5. 5 plus 8 equals 13, and if you multiply them, they're 40. So 10 minus 8 equals 2. But if you multiply and then multiply again, you just get 20. So 8 minus 5 minus, 8 minus 5 equals 3. 3 times 5 is 15, plus 10 is 25. Okay, um, 8, is there a way to work backwards? It's not divisible by 5, it's not divisible by 10. It is divisible by, oh, oh, oh, I have it. Okay, um, 10 plus 5 divided by 5 times 13. Okay, so, 10 plus 5 divided by 5, uh, times 8 equals","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if you add them all together it's 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+8+10=28"",
    resulting_state=(28,),
    comment='""if you add them all together it\'s 28""',
)

# ""5 divided by 5 equals 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5/5=1"",
    resulting_state=(1, 5, 8, 10),
    comment='""5 divided by 5 equals 1""',
)

# ""but then you add the rest of that and that's 19"" - adding remaining numbers to 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+8+10=19"",
    resulting_state=(5, 19),
    comment='""but then you add the rest of that and that\'s 19""',
)

# ""8 minus 5 equals 3, and you add the rest and that's 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 10),
    comment='""8 minus 5 equals 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5+10=18"",
    resulting_state=(18,),
    comment='""and you add the rest and that\'s 18""',
)

# ""10 minus 5 equals 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 8),
    comment='""10 minus 5 equals 5""',
)

# ""5 plus 8 equals 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(5, 13),
    comment='""5 plus 8 equals 13""',
)

# ""and if you multiply them, they're 40"" - likely multiplying 5 and 8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(5, 10, 40),
    comment='""and if you multiply them, they\'re 40""',
)

# ""10 minus 8 equals 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 5, 5),
    comment='""10 minus 8 equals 2""',
)

# ""8 minus 5 equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 10),
    comment='""8 minus 5 equals 3""',
)

# ""3 times 5 is 15, plus 10 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5+10=25"",
    resulting_state=(25,),
    comment='""3 times 5 is 15, plus 10 is 25""',
)

# Finally, the participant finds the solution: ""10 plus 5 divided by 5 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+5)/5*8=24"",
    resulting_state=(24,),
    comment='""10 plus 5 divided by 5 times 8""',
)
```"
1478,"[9,10,10,13]",13+10+10-9,23," Next, okay, the target number is 24, 9, 10, 10, 13. Okay, 10 divided by 10 equals 1, um, 10 minus 9 equals 1. And you add the rest and that's 24. So it's actually 13 plus 10 plus 10 minus 9.","```python
start_state = (9, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 divided by 10 equals 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 9, 10, 13),
    comment='""10 divided by 10 equals 1""',
)

# ""10 minus 9 equals 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 10, 13),
    comment='""10 minus 9 equals 1""',
)

# ""13 plus 10 plus 10 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10+10-9=24"",
    resulting_state=(24,),
    comment='""13 plus 10 plus 10 minus 9""',
)
```"
1488,"[1,6,8,9]",1+6+8+9,92," 9 minus 1 times 8 divided by 6. 9 plus 6. No, okay. 9 plus 6. 6 plus 1 is 7. 1 plus 6 plus 8 plus 9. Okay. Of course. Something like that.","```python
start_state = (1, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 1 times 8 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-1)*8/6=10.67"",
    resulting_state=(10.67,),
    comment='""9 minus 1 times 8 divided by 6""',
)

# ""9 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(1, 8, 15),
    comment='""9 plus 6""',
)

# ""6 plus 1 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(7, 8, 9),
    comment='""6 plus 1 is 7""',
)

# ""1 plus 6 plus 8 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6+8+9=24"",
    resulting_state=(24,),
    comment='""1 plus 6 plus 8 plus 9""',
)

```"
1494,"[1,1,5,6]",6x(1+1)-5,180," So, 6 times 5, so let's do 5 times, 6 times 1, you still can't do this, using 1, 1, 5, you can't do this, this isn't, 5 times 4 is not 24. Let's see if we can do this, okay, so, let's see if we can do this, okay, so, 5 times 6, quit saying that, I'm saying them out loud, and I'm getting real fucking pissed that you're telling me I'm not, that is impossible, I have no idea that you guys are, you cheated on this, there's no doubt in my mind that you guys are just doing this to see how frustrated we can get, let's, wait a minute, if we take, 6, wait, if we take 6, 6 times, times, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,","```python
start_state = (1, 1, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 1, 30),
    comment='""6 times 5""',
)

# ""6 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1=6"",
    resulting_state=(1, 5, 6),
    comment='""6 times 1""',
)

# ""5 times 4 is not 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    subgoal_state=(4,),
    comment='""5 times 4 is not 24"" - participant seems to be trying to make 4 from the two 1s',
)

# ""5 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 1, 30),
    comment='""5 times 6""',
)

# Then there's some frustration expressed and counting up from 11

# Based on their submitted answer of 6x(1+1)-5, they must have eventually tried:
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 5, 6),
    comment=""Based on submitted answer, participant must have added the 1s"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(5, 12),
    comment=""Based on submitted answer, participant multiplied 6 and 2"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-5=7"",
    resulting_state=(7,),
    comment=""Based on submitted answer, participant subtracted 5"",
)
```"
1506,"[2,2,7,10]",,180," If I do 2, what's 17? 18, 19, 20, 21. Okay, if I did 10 over 5, so that's 5 times 5 times. Hmm. 5? What's 5 plus? Oh! No. That wouldn't work. I was gonna say. What if I did 10 over 5 times 2? But I still have the 7. So 10 over... I don't know. 10 divided by... 2 is 5. So that's 5. Okay, if I did 10 minus 7, that's 3. 3 times... Okay, 7 minus 2 is 5. 5 times 2 is... 5 times 2 is 5. And 5 times 2 is... No. Okay. Okay, 7 minus 2 plus... 2 plus 1. Oh, frick, no. Yeah, no. I don't know what to do with this. Five? Bro, this is minutes are about to go away because of what? Ten minus two. That's five. Five times two is ten. Seventeen. Eight, nine. Five times nine is not it. Bro. Three minutes have had to go by. Okay, ten minus two is... Ten minus two is eight. And then eight times two is sixteen. Seventeen.","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 over 5"" participant seems to be trying 10/2=5
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 7),
    comment='""10 over 5"" participant seems to be trying 10/2=5',
)

# ""10 minus 7, that's 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 2, 3),
    comment='""10 minus 7, that\'s 3""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(2, 5, 10),
    comment='""7 minus 2 is 5""',
)

# ""5 times 2 is... 5"" participant makes calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=5"",
    resulting_state=(5, 10),
    comment='""5 times 2 is... 5"" participant makes calculation error',
    result_calc_error=True,
)

# ""Ten minus two. That's five"" participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=5"",
    resulting_state=(2, 5, 7),
    comment='""Ten minus two. That\'s five"" participant makes calculation error',
    result_calc_error=True,
)

# ""ten minus two is eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(2, 7, 8),
    comment='""ten minus two is eight""',
)

# ""eight times two is sixteen""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(7, 16),
    comment='""eight times two is sixteen""',
)
```"
1507,"[4,4,5,6]",5(4/4+6),180, 6 times 5 is 30. 5 times 4 is 20. 4 times 4 is 16. 16 plus 4 equals 24. 16 plus 4 plus 8 is 8. 6 times 4 is 24. 6 times 4 is 24. 5 times 4 is 21. 5 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. 6 times 4 is 21. okay five times six is thirty so that's automatically out unless i did thirty minus four which is thirty minus four is twenty six so bro what six times okay six times four is twenty four and then okay four times four is sixteen so sixteen and i need eight bro it's wasn't so hard actually hey is that it's six times okay so that's six times that's six times six or just only six so that's not really oh that scared me gosh five times four over four plus six so that's five times seven,"```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(4, 4, 30),
    comment='""6 times 5 is 30""',
)

curr_state = graph.move_to_node(start_state)
# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(4, 6, 20),
    comment='""5 times 4 is 20""',
)

curr_state = graph.move_to_node(start_state)
# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 6, 16),
    comment='""4 times 4 is 16""',
)

curr_state = graph.move_to_node(start_state)
# Multiple repetitions of ""6 times 4 is 21"" which appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=21"",
    resulting_state=(4, 5, 21),
    comment='""6 times 4 is 21"" appears to be a calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""five times six is thirty""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(4, 4, 30),
    comment='""five times six is thirty""',
)

# ""thirty minus four is twenty six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-4=26"",
    resulting_state=(4, 26),
    comment='""thirty minus four is twenty six""',
)

curr_state = graph.move_to_node(start_state)
# Finally, ""five times four over four plus six so that's five times seven""
# This matches their submitted answer of 5(4/4+6)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*(4/4+6)=35"",
    resulting_state=(35,),
    comment='""five times four over four plus six so that\'s five times seven""',
)
```"
1515,"[4,8,8,12]",(12-4)+8+8,64," Okay, 12 and 12, that's not going to be any better. What? What would that be? Would it be 2? No. Would it be 8? Okay. 12 minus 4. Times. No. Plus 8. Plus 8.","```python
start_state = (4, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12"" suggests participant is thinking about multiplying 12 by something to get 24
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""12 and 12"" suggests participant is thinking about multiplying 12 by something to get 24',
)

# ""12 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(8, 8, 8),
    comment='""12 minus 4""',
)

# ""Times. No."" suggests they considered multiplication but rejected it

# ""Plus 8. Plus 8."" - participant adds both 8s to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+8=24"",
    resulting_state=(24,),
    comment='""Plus 8. Plus 8."" - participant adds both remaining 8s',
)
```"
1517,"[8,9,12,13]",,180," 9 is 17 plus 12 minus 13. Nope. 8 times 12, 1 is 6. What is 9 times 12? 108. That's not like 4. Plus 12 times 13. Divide it by 8. Divide it by 9. Plus 8. Subtract 1 to 108. Plus 9. Subtract 8. Subtract 9. Subtract 8. Subtract 11. Subtract 10. Subtract 11. Subtract 10. Subtract 10. Subtract 10. Subtract 11. Subtract 11. Subtract 10. Subtract 11. Subtract 11. Subtract 11. Subtract 11. Subtract 11. Subtract 11. Subtract 11. Subtract 11. It's also 18, so 8 times 13, plus 12, divided by 9, 8 times 13 plus 12 divided by 9, 9 times 13, 9 times 13 plus 12 divided by 8, 12 times 13 plus 12 divided by 8, 9 times 13 plus 12 divided by 8, 9 times 13 plus 12 divided by","```python
start_state = (8, 9, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 is 17 plus 12 minus 13"" - participant may have meant ""8+9 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(12, 13, 17),
    comment='""9 is 17"" suggests participant computed 8+9=17',
)

# Then they try to use the 17 they computed
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+12-13=16"",
    resulting_state=(16,),
    comment='""plus 12 minus 13""',
)

# ""8 times 12"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(9, 13, 96),
    comment='""8 times 12""',
)

# ""What is 9 times 12? 108""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(8, 13, 108),
    comment='""What is 9 times 12? 108""',
)

# ""12 times 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13=156"",
    resulting_state=(8, 9, 156),
    comment='""12 times 13""',
)

# The participant then seems to try various operations with 108
curr_state = graph.move_to_node((8, 13, 108))

# ""Divide it by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""108/8=13.5"",
    resulting_state=(13, 13.5),
    comment='""Divide it by 8""',
)

# Then they try some new combinations:
# ""8 times 13, plus 12, divided by 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*13+12)/9=12.89"",
    resulting_state=(12.89,),
    comment='""8 times 13, plus 12, divided by 9""',
)

# ""9 times 13 plus 12 divided by 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*13+12)/8=16.12"",
    resulting_state=(16.12,),
    comment='""9 times 13 plus 12 divided by 8""',
)

```"
1522,"[2,8,9,12]",(9-8)x2x12,29," Okay, oh, we've got more harder numbers this time. Okay, well, 12 times 2 by itself is, alright, so I'm gonna do 9, that's not right, 9 minus 8, so I can get 1, and then I want to do that times 2, to get 2 times 12 is 24.","```python
start_state = (2, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 by itself is"" - participant seems to be setting a subgoal of getting to 24 via 12*2
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""12 times 2 by itself is"" - participant seems to be setting a subgoal of getting to 24 via 12*2',
)

# ""9 minus 8, so I can get 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 2, 12),
    comment='""9 minus 8, so I can get 1""',
)

# ""and then I want to do that times 2, to get 2 times 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*2*12=24"",
    resulting_state=(24,),
    comment='""and then I want to do that times 2, to get 2 times 12 is 24""',
)
```"
1523,"[1,4,5,8]",,180," Okay, let's see. I have to get to 24. I do 8 times 4. That's 32 minus 5 minus 1. No, that's not. 8 times 4 is 32. 32 minus 5 is... 32 minus 5 is 27. Oh, yeah, that would be right. Okay, 32, 32, that's not okay. Not doing this right. I need to get to 24. 4 plus 5 is 9. Plus 8 is 17. Still not the answer. Uh, 8 times 1 is 8. Still not right. Uh, 8 divided by 4 is 2. 2 times 5 is 10. Uh, it's not right. It's not it either. Ah! 5 plus 4 is 9. Ah, it's not it either. 5 divided by... It's 10. That'd be way too high. 8 plus 4 is 12. I need to get double that. 8 minus 4 is 4. 8 minus 5 is 3. 4 times 4 is 16. That's not what it is. Ah! 8 minus 1 is 7. 7 times 4 is 28. Nope, that would not be right either. Um... 4... I don't even know. 8 times 4 is 32. Oh, yeah, that was off by 2. Um, 5 minus 4 is 1. 1 plus 1 is 2. 8 times 2 is 16. I am really good at getting this. 16, not 24. 4... Plus 1 is 5. 5 times 5 is 25. That doesn't work either. Uh... 8 minus 1 is 7. 7 times 5 is 35. Nope, that's not right either.","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 4. That's 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(1, 5, 32),
    comment='""8 times 4. That\'s 32""',
)

# ""32 minus 5 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-5=27"",
    resulting_state=(1, 27),
    comment='""32 minus 5 is 27""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""4 plus 5 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(1, 8, 9),
    comment='""4 plus 5 is 9""',
)

# ""Plus 8 is 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(1, 17),
    comment='""Plus 8 is 17""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""8 times 1 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*1=8"",
    resulting_state=(4, 5, 8),
    comment='""8 times 1 is 8""',
)

# ""8 divided by 4 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(1, 2, 5),
    comment='""8 divided by 4 is 2""',
)

# ""2 times 5 is 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(1, 10),
    comment='""2 times 5 is 10""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""5 plus 4 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+4=9"",
    resulting_state=(1, 8, 9),
    comment='""5 plus 4 is 9""',
)

# ""8 plus 4 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(1, 5, 12),
    comment='""8 plus 4 is 12""',
)

# ""8 minus 4 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(1, 4, 5),
    comment='""8 minus 4 is 4""',
)

# ""8 minus 5 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(1, 3, 4),
    comment='""8 minus 5 is 3""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(1, 5, 8, 16),
    comment='""4 times 4 is 16""',
)

# ""8 minus 1 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(4, 5, 7),
    comment='""8 minus 1 is 7""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(5, 28),
    comment='""7 times 4 is 28""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(1, 5, 32),
    comment='""8 times 4 is 32""',
)

# ""5 minus 4 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 1, 8),
    comment='""5 minus 4 is 1""',
)

# ""1 plus 1 is 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 8),
    comment='""1 plus 1 is 2""',
)

# ""8 times 2 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(16,),
    comment='""8 times 2 is 16""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""4... Plus 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+1=5"",
    resulting_state=(5, 5, 8),
    comment='""4... Plus 1 is 5""',
)

# ""5 times 5 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 25),
    comment='""5 times 5 is 25""',
)

# ""8 minus 1 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(4, 5, 7),
    comment='""8 minus 1 is 7""',
)

# ""7 times 5 is 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(4, 35),
    comment='""7 times 5 is 35""',
)
```"
1526,"[2,2,3,12]",(3-2)x2x12,18," Okay, let's see. So, I already have 12, which means that if I just do 12 times 2, that's 24. So I'm going to do 3 minus 2, so I can get 1. I'm going to times that by 2 and times it by 12, so I can get 24.","```python
start_state = (2, 2, 3, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I just do 12 times 2, that's 24"" - participant sets a subgoal of getting 2 to multiply by 12
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""if I just do 12 times 2, that\'s 24""',
)

# ""3 minus 2, so I can get 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-2=1"",
    resulting_state=(1, 2, 12),
    comment='""3 minus 2, so I can get 1""',
)

# ""times that by 2 and times it by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*2*12=24"",
    resulting_state=(24,),
    comment='""times that by 2 and times it by 12""',
)
```"
1528,"[3,5,9,9]",(9/3)x5+9,99," Okay, I need to use these to get this 24. 9 plus 9 is 18. So adding them all up doesn't work. 9 times 3 is 27. 27 minus 5, that's not right either. 9 times 5 is 45. 45 minus 9, 44. That's not right either. 5 plus 3 is 8. 8 plus 9 is 17. That's not going to help me. If I do 9 divided by 3, that's 3. 3 times 9 is 27, so that won't work. 9 divided by 3 is 3. 3 times 5 is 15. 9 divided by 3 equals 3. 3 plus 9. Plus 9. No, what the hell was I thinking? 3 plus 5 is 8. That's 117. What was I thinking? Timesing. 3 times 5 plus 9.","```python
start_state = (3, 5, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(3, 5, 18),
    comment='""9 plus 9 is 18""',
)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(5, 9, 27),
    comment='""9 times 3 is 27""',
)

# ""27 minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-5=22"",
    resulting_state=(9, 22),
    comment='""27 minus 5""',
)

# Going back to start state for ""9 times 5 is 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(3, 9, 45),
    comment='""9 times 5 is 45""',
)

# ""45 minus 9, 44""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-9=44"",
    resulting_state=(3, 44),
    comment='""45 minus 9, 44"" - calculation error',
    result_calc_error=True,
)

# Back to start state for ""5 plus 3 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(8, 9, 9),
    comment='""5 plus 3 is 8""',
)

# ""8 plus 9 is 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(9, 17),
    comment='""8 plus 9 is 17""',
)

# Back to start for ""9 divided by 3, that's 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 5, 9),
    comment='""9 divided by 3, that\'s 3""',
)

# ""3 times 9 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(5, 27),
    comment='""3 times 9 is 27""',
)

# Back to start for another attempt at ""9 divided by 3 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 5, 9),
    comment='""9 divided by 3 is 3""',
)

# ""3 times 5 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(9, 15),
    comment='""3 times 5 is 15""',
)

# Then participant says ""plus 9"" which would get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+9=24"",
    resulting_state=(24,),
    comment='""plus 9"" which completes the solution',
)

```"
1541,"[1,3,6,13]",(13-1)x6/3,111," Target 24. 13 times 24. That 13 is going to be a problem. 6 and 3 is 18. What do I need? I need 11 to add to that. What about subtracting something? What's 24 times 3? Oh, that would be 72, right? 6 times 3, well that's 18. No, 78. 78 divided by 3 would not work. What's 5? 15. That's 65. Nope. This one may take me a minute. 39. 24 does not work. What's 13 minus 7? 6. 13 minus 6? 7. 7 times 3 is 21. Plus 1 is 22. I got it. So 13 minus 1, close parenthesis, is 12. Times 6 divided by 3.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 and 3 is 18"" - participant likely means 6*3=18
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 13, 18),
    comment='""6 and 3 is 18""',
)

# ""What's 24 times 3? Oh, that would be 72, right?""
# This seems like working backward from the goal, setting a subgoal
graph.set_subgoal(
    (3, 72),
    state_after_subgoal=(24,),
    comment='""What\'s 24 times 3? Oh, that would be 72""',
)

# ""6 times 3, well that's 18"" - participant already tried this
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 13, 18),
    comment='""6 times 3, well that\'s 18""',
)

# ""13 minus 6? 7. 7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 6? 7""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 21),
    comment='""7 times 3 is 21""',
)

# ""Plus 1 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+1=22"",
    resulting_state=(22,),
    comment='""Plus 1 is 22""',
)

# ""13 minus 1, close parenthesis, is 12. Times 6 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-1)*6/3=24"",
    resulting_state=(24,),
    comment='""13 minus 1, close parenthesis, is 12. Times 6 divided by 3""',
)
```"
1542,"[3,6,12,12]",,180, I have to use all numbers. Have to use all numbers. So 24. I could get 8. 8 times 3. How do I get 8? 8. 72 divided by 12. 24. 8. 144 we see. That's 15. 15. Minus 12 is 3. I can get it. I need an 8 or a 4. This is frustrating. 18. Ugh. What's 18 divided by 12? 12. One and a half? Mm-mm. I would need a 2. That could be a 9. Oh. What's 72? 72 divided by 3 is 24. 36. 6. 36 divided by 6. What is 72? Nope. 36. 12 times 3 is 36. 36. 12 times 3 is 36. 3 times 8 is 18. This one's taking me. 18. 18. What if that's 1 and a half? 1 and a half. What are my other options? I can subtract. I just need a 2. I can get a 3. 12 minus 6. Is 6. 18.,"```python
start_state = (3, 6, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3"" participant seems to be setting a subgoal of getting 8 to multiply by 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3. How do I get 8?""',
)

# ""144"" participant likely multiplied 12*12
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(3, 6, 144),
    comment='""144"" participant likely multiplied 12*12',
)

# ""18"" participant likely multiplied 3*6
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(12, 12, 18),
    comment='""18"" participant likely multiplied 3*6',
)

# ""What's 18 divided by 12?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18/12=1.5"",
    resulting_state=(12, 1.5),
    comment='""What\'s 18 divided by 12?""',
)

# ""72 divided by 3 is 24"" participant likely multiplied 12*6 to get 72 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(3, 12, 72),
    comment='""72 divided by 3 is 24"" participant first multiplies 12*6',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/3=24"",
    resulting_state=(12, 24),
    comment='""72 divided by 3 is 24""',
)

# ""12 times 3 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(6, 12, 36),
    comment='""12 times 3 is 36""',
)

# ""12 minus 6. Is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 6, 12),
    comment='""12 minus 6. Is 6""',
)
```"
1543,"[1,7,8,10]",(10-7)x1x8,121," So, 8 and 8, 64, let's see, 9 and 7, 63, 90, ooh, was 90 divided by 7? No, of course not. 70 divided by 8? Nope. 64 divided by 10, 80 divided by 8, 90 divided by 7, 49, 2.4, 9 divided by 7, that would not work. Just add subtract, multiply, and divide. 70, what, okay, hang on, let's look at the 20, let me work back from 24. That would be 34. 34 plus 8. This is just not... Can I get 3? Okay. I got this. 10 minus 7 times 1 times 8.","```python
start_state = (1, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""let me work back from 24"" suggests setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""let me work back from 24"" suggests working backward',
)

# ""Can I get 3?"" participant seems to be trying to get 3
# ""10 minus 7"" gets them the 3 they want
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(1, 3, 8),
    comment='""10 minus 7""',
)

# Finally ""times 1 times 8"" to complete the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*1*8=24"",
    resulting_state=(24,),
    comment='""times 1 times 8""',
)
```"
1544,"[4,7,8,12]",,180," As you perform the task, try to say aloud everything 15 15 and 8 16 minus 7 32 As you perform the task, try to say aloud everything that comes to mind 31. 4. I need a 6. Can I get a 6 here somehow? How can I get a 6? 19 minus 8 is 11. 15 minus 12 is 3. That's 11. That's 15. That's 12. 7. What is... I've been avoiding multiplying these bigger numbers. 96. 24 goes into 96 four times. 20, 40. 20. 24 into 96. Yeah, that looks...","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""15 15 and 8"" - participant may be adding 7+8=15
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(4, 12, 15),
    comment='""15 15 and 8"" - participant may be adding 7+8=15',
)

# ""I need a 6. Can I get a 6 here somehow?"" - participant is setting a subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""I need a 6. Can I get a 6 here somehow?""',
)

# ""96"" - participant likely multiplied 12*8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(4, 7, 96),
    comment='""96"" - participant likely multiplied 12*8',
)

```"
1545,"[2,2,5,12]",,180," I need another 12. 5, 6, 7, 8, 9. So, 4. 48. 20. Let's do 24. Well, that's 24. But I still have 10. 7. 17. 18, 19. 60. Divided by 2 is 30. 60. Divided by 4 is 15. 18. What's 3? 36. 20. 10. Nope. 60. 5. Let's say it from 60 to 24. That doesn't make sense. 48. I don't see how dividing is getting me there. 7 plus 4 is 28. 14. 7 times 2. 28 minus 2. 7 times 2 is 84. So, 12 divided by 4 is 3 times 5. 10 divided by 2 is 5. Yes, this doesn't work.","```python
start_state = (2, 2, 5, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need another 12"" suggests participant is setting a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""I need another 12""',
)

# ""48"" participant likely multiplied 12*(2*2)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 5, 12),
    comment='""48"" participant first multiplies 2*2=4',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(5, 48),
    comment='""48"" participant then multiplies 12*4',
)

# ""60"" participant likely multiplied 12*5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(2, 2, 60),
    comment='""60"" participant likely multiplied 12*5',
)

# ""Divided by 2 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60/2=30"",
    resulting_state=(2, 30),
    comment='""Divided by 2 is 30""',
)

# ""12 divided by 4 is 3 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 5, 12),
    comment='""12 divided by 4"" participant first makes 4',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 5),
    comment='""12 divided by 4 is 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(15,),
    comment='""times 5""',
)

```"
1546,"[2,7,9,13]",13x2-(9-7),81," Okay, 13 and 9, 7, 2, all of those prime numbers. So, let's put them together. That's 21, that's 9 to add, that's 5, 4. How do I get 24? I would need a 12. Can I get a 12 out of 7, 9, and 3? Can I get a 48 by 7, 9? It's 13. That's 20. That's 180. Let's see, that's 20. Can I get 4 from 7 and 2? 18. That's 9 and 7. 9 and 7 is 16. That's 8. That's 21. I can do 13, 26. Oh, okay. So, 13 times 2 plus, because that's 26. Nope, instead of plus, it's minus parentheses, 9 minus 7, close parentheses.","```python
start_state = (2, 7, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""That's 21"" seems to be adding numbers, likely 13+7+2-1 (with a calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(2, 9, 20),
    comment='""That\'s 21"" seems to be adding numbers, starting with 13+7',
)

# ""that's 9 to add"" participant seems to be continuing addition
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+9=29"",
    resulting_state=(2, 29),
    comment='""that\'s 9 to add""',
)

# ""Can I get a 12 out of 7, 9, and 3?"" participant seems to be setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""Can I get a 12 out of 7, 9, and 3?""',
)

# ""Can I get a 48 by 7, 9?"" participant tries multiplying
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(2, 13, 63),
    comment='""Can I get a 48 by 7, 9?""',
)

# ""That's 20"" participant likely computing 13+7 again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(2, 9, 20),
    comment='""That\'s 20"" participant likely computing 13+7 again',
)

# ""Can I get 4 from 7 and 2?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(5, 9, 13),
    comment='""Can I get 4 from 7 and 2?""',
)

# ""9 and 7 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(2, 13, 16),
    comment='""9 and 7 is 16""',
)

# ""I can do 13, 26"" participant multiplies 13 by 2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(7, 9, 26),
    comment='""I can do 13, 26"" participant multiplies 13 by 2',
)

# Finally the participant finds the solution: ""13 times 2... minus parentheses, 9 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2-(9-7)=24"",
    resulting_state=(24,),
    comment='""13 times 2... minus parentheses, 9 minus 7""',
)
```"
1547,"[3,9,10,13]",,180," I don't need a rest. Why do you keep asking me to rest my voice? It's my brain that needs a rest. Umm... I need 24, so I need an 11. So I can do... Or, I need an 11 plus 13. Or, I need a 14. Or, I need a 21. 19. Wait. 19. I can't get an 11. Umm... What is... 22. 22 minus 3 is 19. Mmm. I, uh... What do I do? What can I add to 9? So, 24 minus 9... is 15. So I need a 15 here. How can I get 15? I do not know. 30. Ooh, I can multiply and get 30. I need a negative 6. I can get a 4 that way. Yeah, I can... I can do some negative numbers here. I could do... I need 11. So, how do I get 11? Negative... I can't figure out how to get... I'd have to get a 1 plus that. I'd have to get a 2. There. I'd have to get a 8. There. What's 90 divided by 3 is 30. I need a 6. What's... 130... divided by 12. What's 130 divided by 12? No. That's a 12. 120... Uh-uh. Thirteen. 13 that's a 4. for","```python
start_state = (3, 9, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need 24, so I need an 11"" - participant seems to be setting a subgoal of getting 11 to add to 13
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""I need 24, so I need an 11"" - participant seems to want to add 11 and 13',
)

# ""24 minus 9... is 15"" - participant seems to be working backward from 24
graph.set_subgoal(
    (9, 15),
    state_after_subgoal=(24,),
    comment='""24 minus 9... is 15"" - participant seems to be working backward',
)

# ""I can multiply and get 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(9, 13, 30),
    comment='""I can multiply and get 30""',
)

# ""13 that's a 4"" - participant might be trying 13/3≈4
new_state = graph.explore_operation(
    curr_state,
    operation=""13/3=4.33"",
    resulting_state=(4.33, 9, 10),
    comment='""13 that\'s a 4"" - participant might be trying 13/3≈4',
)
```"
1549,"[2,7,7,10]",,180," What is 70 divided by 2 is 30. And I get 35 again. What is 49? 49 times 2. Okay, hang on. I would need 14. I cannot get 14 out of these numbers with just as subtract and multiply and divide. So, with a 7, I would need 17. How do I get 17? I could do 20. I wonder if I can... 14 minus 2 is 12. 17 times... What's 7 times 7? 49. Nope. 17 times 2 would be 34. Nope. I need 10 more. 49. 49. 39. I'm saying everything. Everything out loud is the problem. 14 plus 7 would be 21. That does not work. 14, 24. But then, ah, that's 7. 14 minus 2 is 12. I would be... I need to get a 12. I cannot get a 12 out of... 7, 7 and 10. 3. Because 7 will not go in 24, so I have to use the 2. If I subtracted, that won't work. The 7s are inverses. So, I have to subtract, multiply, divide like that.","```python
start_state = (2, 7, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What is 49? 49 times 2"" - participant multiplies the 7s first
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(2, 10, 49),
    comment='""What is 49?""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49*2=98"",
    resulting_state=(10, 98),
    comment='""49 times 2""',
)

# ""I would need 14"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (14,),
    state_after_subgoal=(24,),
    comment='""I would need 14""',
)

# The participant then makes some observations about properties of the numbers but doesn't try any new operations
```"
1550,"[1,1,4,6]",(6x1)x(4x1),22," Alright, 1, 1, 4, 6 to get 24. 4 times 6 is 24, so I just have to drop out those ones. So I can just do parenthesis, 6 times 1, close parenthesis, times open parenthesis, 4 times 1, close parenthesis, and that should give me 24.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6 is 24"" - participant sets this as a goal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 times 6 is 24, so I just have to drop out those ones""',
)

# ""6 times 1, close parenthesis, times open parenthesis, 4 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*1)*(4*1)=24"",
    resulting_state=(24,),
    comment='""6 times 1, close parenthesis, times open parenthesis, 4 times 1""',
)
```"
1553,"[2,2,7,7]",,180," 2, 2, 7, 7. All right, so 2 and 7, 2 and 7 all added up would be 18, so that's not going to help. 2 times 7, 14 and 14, that's not going to do it. That's 28. 7 is 14 and 2, no. All right, 4 times 7 is 28. That's not going to help, but it leaves me with 7. 7 times 2. 7 minus 2 is 5. 5 times 2 is 10 plus 7, 17. That doesn't help. 2, 3, 3.5 times 7. Then I've got the 2 to worry about. Okay, let's see. Let's just get some things down here. 7 times 2 times parentheses 7 divided by 2. That's probably not it, but you're right, look. All right. 7 plus 2 is 9. Times 2, 18 plus 7 is 25. That doesn't help. Oh, 49 divided by 2. Plus, nope. All right. 9 times 5. No. 2. 7 minus 2 is 5. Time 7. 35. And then the 2 doesn't help at all. So, 7 minus 2, 5, divided by 2, 2.5, times 7.","```python
start_state = (2, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 and 7, 2 and 7 all added up would be 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2+7+7=18"",
    resulting_state=(18,),
    comment='""2 and 7, 2 and 7 all added up would be 18""',
)

# ""2 times 7, 14 and 14, that's not going to do it. That's 28.""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7+2*7=28"",
    resulting_state=(28,),
    comment='""2 times 7, 14 and 14, that\'s not going to do it. That\'s 28.""',
)

# ""4 times 7 is 28"" - participant likely combined the 2s first
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+2)*7=28"",
    resulting_state=(7, 28),
    comment='""4 times 7 is 28"" - participant likely combined the 2s first',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(2, 5, 7),
    comment='""7 minus 2 is 5""',
)

# ""5 times 2 is 10 plus 7, 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2+7=17"",
    resulting_state=(17,),
    comment='""5 times 2 is 10 plus 7, 17""',
)

# ""7 times 2 times parentheses 7 divided by 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2*(7/2)=49"",
    resulting_state=(2, 49),
    comment='""7 times 2 times parentheses 7 divided by 2""',
)

# ""7 plus 2 is 9. Times 2, 18 plus 7 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+2)*2+7=25"",
    resulting_state=(25,),
    comment='""7 plus 2 is 9. Times 2, 18 plus 7 is 25""',
)

# ""49 divided by 2"" - participant seems to be working with result from previous calculation
curr_state = graph.move_to_node((2, 49))
new_state = graph.explore_operation(
    curr_state,
    operation=""49/2=24.5"",
    resulting_state=(24.5,),
    comment='""49 divided by 2""',
)

# ""7 minus 2 is 5. Time 7. 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-2)*7=35"",
    resulting_state=(2, 35),
    comment='""7 minus 2 is 5. Time 7. 35""',
)

# ""7 minus 2, 5, divided by 2, 2.5, times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-2)/2*7=17.5"",
    resulting_state=(17.5,),
    comment='""7 minus 2, 5, divided by 2, 2.5, times 7""',
)
```"
1558,"[2,4,7,12]",(7-2,180," 2, 4, 7, and 12. 2 and 4 is 6. 12 is 18 and 7 is 25. So pluses all across don't work. 8. That doesn't work. Let's see. 7 minus 2 is 5. 5, 4, and 12, nope. 7 minus 4 is 3. Nope, that doesn't work. 7 minus 3, sorry, 7 minus. If I can get a 2 out of just these, does that work? Or if I can get these to be a 12. Alright, so 6 plus 7 is 13. That doesn't help. Cause now I've got to get 25 still. 7 times 2. 14 and 4 is 18. Doesn't help. 18 divided by 2 is 9. 12 doesn't help. 24. I can get that from two of the numbers. Or if I can get a 5, I can find those too. So times 12, 84, divided by 2. 84 divided by 2. 42. Okay, so, I'm going to have to do a little bit more math. doesn't tell 36 times 272 and then the 7th another 7 or something like that 6 times 12 to the 6th which is 3 not 24 7 minus 2, 60 charging","```python
start_state = (2, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 and 4 is 6. 12 is 18 and 7 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4+12+7=25"",
    resulting_state=(25,),
    comment='""2 and 4 is 6. 12 is 18 and 7 is 25"" - participant adding all numbers',
)

# ""7 minus 2 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(4, 5, 12),
    comment='""7 minus 2 is 5""',
)

# ""7 minus 4 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(2, 3, 12),
    comment='""7 minus 4 is 3""',
)

# ""6 plus 7 is 13"" (where 6 likely comes from 2+4)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+4)+7=13"",
    resulting_state=(12, 13),
    comment='""6 plus 7 is 13"" (where 6 likely comes from 2+4)',
)

# ""7 times 2. 14 and 4 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+4=18"",
    resulting_state=(12, 18),
    comment='""7 times 2. 14 and 4 is 18""',
)

# ""times 12, 84, divided by 2. 84 divided by 2. 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12/2=42"",
    resulting_state=(2, 4, 42),
    comment='""times 12, 84, divided by 2. 84 divided by 2. 42""',
)

# ""6 times 12"" (where 6 likely comes from 2*3)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(4, 7, 24),
    comment='""6 times 12""',
)

# The participant seems to run out of time, with their last attempt being ""7 minus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(4, 5, 12),
    comment='""7 minus 2""',
)
```"
1561,"[2,8,10,12]",(10x2)+12-8,156," 10 minus 8, 2 times 12, 24. 8 plus 8, 16 times 2, 32 minus 12, 2 plus 8, 18. I've got an 8, so 12 times 8 times 2, 16. 16 times 8, 12 times 2, 16. I don't know, a total of less than 8. Ich mitane nicht mehr, ich habe es die Notρίgen nicht gewusst. Ich wein nie. Ich weine nie. Ich traue nichts. Is this event possible? It turns like this, change here, change here, 10 times 2, change here, change here, ok. So, yeah, 10 times 2, plus the bracket, plus 12, minus 8, this is wrong, I don't know.","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 8, 2 times 12, 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 2, 12),
    comment='""10 minus 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(2, 24),
    comment='""2 times 12, 24""',
)

# Going back to start state for new attempt
curr_state = graph.move_to_node(start_state)
# ""8 plus 8, 16 times 2, 32 minus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(2, 10, 12, 16),
    comment='""8 plus 8, 16""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16*2=32"",
    resulting_state=(10, 12, 32),
    comment='""16 times 2, 32""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-12=20"",
    resulting_state=(10, 20),
    comment='""32 minus 12""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""2 plus 8, 18"" - seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2+8=18"",
    resulting_state=(10, 12, 18),
    comment='""2 plus 8, 18"" - calculation error',
    result_calc_error=True
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""12 times 8 times 2, 16"" - seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8*2=16"",
    resulting_state=(10, 16),
    comment='""12 times 8 times 2, 16"" - calculation error',
    result_calc_error=True
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""16 times 8, 12 times 2, 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=16"",
    resulting_state=(8, 10, 16),
    comment='""12 times 2, 16""',
    result_calc_error=True
)

# There's some text in what appears to be German that doesn't seem relevant to the problem-solving

# Going back to start state for final solution
curr_state = graph.move_to_node(start_state)
# Finally, the participant finds the solution: ""10 times 2, plus the bracket, plus 12, minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2+12-8=24"",
    resulting_state=(24,),
    comment='""10 times 2, plus the bracket, plus 12, minus 8""',
)
```"
1564,"[1,8,10,12]",(12-10+1)x8,172," 18 plus 12 is 29. Okay, so the last two, one, two, two, two, one, two, two, three, four, five, six, seven, 10 plus 2, times 1, minus, minus 8. Okay, let's try again, 12 plus 10, ah, this is easy, that's not, mm-hmm, is this possible? Are you sure you guys are not failing me? I don't think this question is even possible. Who does this, mark 24, hmm, 10 minus, okay, let's do this, 12 minus 8, 4, 4 times 10, won't work, 10 minus 8, 2, 2 times 12, okay, okay, this might actually work, 12 minus 8, that will give us 2 2 times 8 2","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""18 plus 12 is 29"" - participant might have meant 8+12=20
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(1, 10, 20),
    comment='""18 plus 12 is 29"" - participant might have meant 8+12=20',
)

# There's some counting and unclear operations

# ""10 plus 2, times 1, minus, minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+2)*1-8=4"",
    resulting_state=(1, 4),
    comment='""10 plus 2, times 1, minus, minus 8""',
)

# ""12 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10=22"",
    resulting_state=(1, 8, 22),
    comment='""12 plus 10""',
)

# ""12 minus 8, 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 10),
    comment='""12 minus 8, 4""',
)

# ""4 times 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*10=40"",
    resulting_state=(1, 40),
    comment='""4 times 10""',
)

# ""10 minus 8, 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(1, 2, 12),
    comment='""10 minus 8, 2""',
)

# ""2 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(1, 24),
    comment='""2 times 12""',
)

# ""12 minus 8, that will give us 2"" - participant seems to be trying a different approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10+1=3"",
    resulting_state=(3, 8),
    comment='Based on their final answer ""(12-10+1)x8"", they compute 12-10+1=3',
)

# Then multiply by 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they multiply by 8 to get 24"",
)
```"
1567,"[1,6,8,9]",6+1+8+9,67," Okay, so 9 times... No. Okay. So 6 times 1. So 9, 19, 17...Okay. 17 plus 6, 17, 18, 19, 20, 21, 22, 22... Okay. So I'll do 6 plus 1. Okay. So I'll do 6 plus 1. Okay. So I'll do 6 plus 1. plus seven plus eight seven plus eight okay this is just a guess right here","```python
start_state = (1, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times..."" participant starts to try multiplication but stops

# ""6 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1=6"",
    resulting_state=(6, 8, 9),
    comment='""6 times 1""',
)

# ""So 9, 19, 17..."" participant seems to be doing addition but makes calculation errors
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(1, 6, 17),
    comment='""So 9, 19, 17..."" participant seems to be doing addition',
)

# ""17 plus 6, 17, 18, 19, 20, 21, 22, 22...""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+6=22"",
    resulting_state=(1, 22),
    comment='""17 plus 6, 17, 18, 19, 20, 21, 22""',
    result_calc_error=True
)

# ""6 plus 1"" participant starts over with a new approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(7, 8, 9),
    comment='""6 plus 1""',
)

# ""plus seven plus eight"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8+9=24"",
    resulting_state=(24,),
    comment='""plus seven plus eight"" and implicitly adding 9 to get to 24',
)

```"
1568,"[3,5,12,12]",12,180," Okay, so, 12 plus 12 is 24. Alright then, so, 5, 15, 15, okay, so, 12, times, okay, this is really hard right here. 12 times 5, 6, 7, 8, 9, 10, 11, 12 times 5, 12, 18, 19, 20, 21, 22, 23, okay, 12, okay, yeah, this is really hard. So, let's see, like, I need to do more thinking. So I'm guessing, 12 times, 12 divided by 5 times 3, 12 divided, by, 5 times 3. 12 divided by 5 times 3, divided by three equals, okay, all right, all right, eight, sixteen, eight, eight, okay,","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 5, 24),
    comment='""12 plus 12 is 24""',
)

# ""5, 15, 15"" participant may be adding 5 to something
new_state = graph.explore_operation(
    curr_state,
    operation=""5+12=17"",
    resulting_state=(3, 12, 17),
    comment='""5, 15, 15"" participant may be adding 5 to something',
)

# ""12 times 5"" participant tries multiplying
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(3, 12, 60),
    comment='""12 times 5""',
)

# The counting ""6,7,8,9,10,11"" doesn't seem to lead to any operations

# ""12 divided by 5 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/5*3=7.2"",
    resulting_state=(12, 7.2),
    comment='""12 divided by 5 times 3""',
)

# ""eight, sixteen, eight, eight"" participant may be multiplying 8*2=16
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 5, 12),
    comment='""eight, sixteen, eight, eight"" participant seems to be doing division',
)

```"
1589,"[2,2,3,11]",,180," Let me see, 2 times 2, ok, 11, 13, 14, 14, 22, ok, let me see, 22, 24, ok, 5, ok, 22, no, 4, 4, 4, 23, 4, 2, 4, 3, 2, 12 plus this, hmm, 4, 3, 12, ok, 4 plus 11, no, no, no, 2 plus 11, 13, let me see, 2 plus 13. 2, 13 times 2, 26, let me see, 3 plus this, 3 plus this, 14, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 14. 14 times 2, 28, ah, minus 2, 26, so 2 plus, 2 plus. 13, 13 times 2, 26, 20, 23, . Come on, come on, come on, ah, ah, ah, ah, it is very impossible, 14 times 12, 28, two times three six two three six okay two times this 22 28 two times three is six six six eleven minus two seven is 32. okay","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(3, 4, 11),
    comment='""2 times 2""',
)

# ""11, 13, 14"" seems to be adding numbers: 11+2=13, 13+1=14
new_state = graph.explore_operation(
    curr_state,
    operation=""11+2=13"",
    resulting_state=(2, 3, 13),
    comment='""11, 13""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(3, 15),
    comment='""14""',
)

# ""22"" might be 11*2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 3, 22),
    comment='""22""',
)

# ""4"" might be going back to 2*2
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(3, 4, 11),
    comment='""4""',
)

# ""2 plus 11, 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+11=13"",
    resulting_state=(2, 3, 13),
    comment='""2 plus 11, 13""',
)

# ""13 times 2, 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(3, 26),
    comment='""13 times 2, 26""',
)

# ""3 plus this, 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+3=14"",
    resulting_state=(2, 2, 14),
    comment='""3 plus this, 14""',
)

# ""14 times 2, 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*2=28"",
    resulting_state=(2, 28),
    comment='""14 times 2, 28""',
)

# ""minus 2, 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-2=26"",
    resulting_state=(26,),
    comment='""minus 2, 26""',
)

# ""two times three six""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(2, 6, 11),
    comment='""two times three six""',
)

# ""eleven minus two seven"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=7"",
    resulting_state=(2, 3, 7),
    result_calc_error=True,
    comment='""eleven minus two seven""',
)
```"
1590,"[1,2,4,4]",(2+4)x(1x4),71," 1, 2, 3, 4. 4, 16. 16 times 2. 16 times 2. 16. Oh, 30. Come on. Okay. 8. 8, 4, 30. No. 8, 6, 4, 24. Okay. Okay. 2 times. No. 2 plus 4. Right here. 2 plus 4. Okay. Times. 1 times 4. Cool.","```python
start_state = (1, 2, 4, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4, 16"" seems to be multiplying the 4s
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(1, 2, 16),
    comment='""4, 16"" seems to be multiplying the 4s',
)

# ""16 times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16*2=32"",
    resulting_state=(1, 32),
    comment='""16 times 2""',
)

# ""Oh, 30"" seems to be a miscalculation
new_state = graph.explore_operation(
    curr_state,
    operation=""16*2=30"",
    resulting_state=(1, 30),
    comment='""Oh, 30"" seems to be a miscalculation',
    result_calc_error=True,
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""2 plus 4"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4=6"",
    resulting_state=(1, 4, 6),
    comment='""2 plus 4""',
)

# ""1 times 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*4=4"",
    resulting_state=(2, 4, 4),
    comment='""1 times 4""',
)

# Based on their final answer (2+4)x(1x4), they must have combined these operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+4)*(1*4)=24"",
    resulting_state=(24,),
    comment='Based on their final answer ""(2+4)x(1x4)"", they combined the previous operations',
)
```"
1607,"[2,2,3,3]",(2+2)x(3+3),63," Okay, wow. So, 24, 6 times 4 will give me 24. Yes, 6 times 4 will give me 24. So, my first bracket, I have 2 plus 2 to get me my 4 times, another bracket, yes, 3 plus 3 to get me my 6, yes. So, 2 plus 2 is 4, 3 plus 3 is 6. So, I'll get my 24.","```python
start_state = (2, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 will give me 24"" - participant is setting subgoals
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 will give me 24""',
)

# ""my first bracket, I have 2 plus 2 to get me my 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(3, 3, 4),
    comment='""my first bracket, I have 2 plus 2 to get me my 4""',
)

# ""3 plus 3 to get me my 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(4, 6),
    comment='""3 plus 3 to get me my 6""',
)

# Then the participant multiplies to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""So, I\'ll get my 24""',
)
```"
1608,"[2,3,7,9]",,180," Okay, 24. I'm seeing 10. 9 plus 2 is 11. I'll get my 24. Hmm. Hmm. 24. 9 times 2 is 18. Wow, this is quite difficult. Okay. 10 plus 14. I'm not getting it. Okay. Um. This is quite difficult. 24. 24. Ooh. 6. Okay. Let me see. 6 times 4. I'll get 24. So how do I get 6? So how do I get 4? Hmm. It's quite difficult. Uh. 6. 3 to 6. And 9 minus 7 is 2. Whew. This is quite difficult. Ah. 24. Hmm. Okay. Okay. Okay. Um. Wow. Let me see. 9 plus 7 is 16. 16. 16. Hmm. Hmm. 9 plus 7 is 16. 9 plus 3 is 12. 12. 9 plus 3 is 12. And 12 times 2. 2. So. Wow. This is quite difficult. Uh. How do I get 24 out of this? 24. 24. Hmm. Hmm.","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+2=11"",
    resulting_state=(3, 7, 11),
    comment='""9 plus 2 is 11""',
)

# ""9 times 2 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(3, 7, 18),
    comment='""9 times 2 is 18""',
)

# ""6 times 4. I'll get 24"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4. I\'ll get 24"" - participant sets a subgoal to get 6 and 4',
)

# ""3 to 6"" - participant may be trying to double 3
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(6, 7, 9),
    comment='""3 to 6"" - participant may be trying to double 3',
)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 2),
    comment='""9 minus 7 is 2""',
)

# ""9 plus 7 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(2, 3, 16),
    comment='""9 plus 7 is 16""',
)

# ""9 plus 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(2, 7, 12),
    comment='""9 plus 3 is 12""',
)

# ""And 12 times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(7, 24),
    comment='""And 12 times 2""',
)

```"
1609,"[3,9,13,13]",(13+3,180," 24 again. 13, 13 will give me 26. And 26, 26 minus 2 will give me 24. Still not getting it. Oof! 9 plus 3. 9 plus 3 will give me 12. 12. And 12 plus 12 must give me 24. Wow! 12 plus 12 must give me 24. Oh! 24. 9 divided by 3. Um, 9 divided by 3 gives me 3. Let me see. And 3 times 1 will be 24. 24 divided by 3 is 8. How do I get 8 out of this? Wow! 13. Okay. 13 minus 9. 13 minus 9. What will I even get? I'll get 4. 4. And 24 divided by 4 is 6. Oof! How do I get 6 out of this? Oof! 6. Okay, way too. 13 minus, wait. 13 minus 9 is 4. Right? So, I'm left with, oh, 20. No. I'm still not getting. I'm left with 20. And 13 plus 3 is 16. Oof! No. So, still not getting 13 plus 3.","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13, 13 will give me 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13, 13 will give me 26""',
)

# ""26 minus 2 will give me 24"" - participant seems to be hoping to get 2 from somewhere
graph.set_subgoal(
    subgoal_state=(2, 26),
    comment='""26 minus 2 will give me 24"" - participant sets subgoal of getting 2'
)

# ""9 plus 3 will give me 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(12, 13, 13),
    comment='""9 plus 3 will give me 12""',
)

# ""12 plus 12 must give me 24"" - participant seems to want another 12
graph.set_subgoal(
    subgoal_state=(12, 12),
    comment='""12 plus 12 must give me 24"" - participant sets subgoal of getting another 12'
)

# ""9 divided by 3 gives me 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 13, 13),
    comment='""9 divided by 3 gives me 3""',
)

# ""13 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9""',
)

# ""13 plus 3 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(9, 13, 16),
    comment='""13 plus 3 is 16""',
)
```"
1611,"[4,4,8,10]",(10-4)x(8-4),122, Another 24. Another 24. Um...24. 24. So... Um... 10. 10 plus 14. Right? I'll get 24. Okay. So 10 plus 4. I'll get the 14. But... This plus... This plus 4 will be 12. To be more. Um... 8. 8 minus 4. 8 minus 4. I'll be left with 4. I'll be left with 4. Wait. 8. Hmm. Hmm. Okay. Okay. 6. 6. 6 times 4. 6 times 4. 6 times 4. Is 24. So how do I get 6? Okay. I think I'm getting it. So 10. 10 minus 4. I'll get my 6. Times. Um... 8. Minus 4. I'll get my 4. So that'll be 6 times 4. Which is 24.,"```python
start_state = (4, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 14. Right? I'll get 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (10, 14),
    state_after_subgoal=(24,),
    comment='""10 plus 14. Right? I\'ll get 24""',
)

# ""10 plus 4. I'll get the 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+4=14"",
    resulting_state=(4, 8, 14),
    comment='""10 plus 4. I\'ll get the 14""',
)

# ""This plus 4 will be 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(12, 14),
    comment='""This plus 4 will be 12""',
)

# ""8 minus 4. I'll be left with 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 4, 10),
    comment='""8 minus 4. I\'ll be left with 4""',
)

# ""6 times 4. Is 24"" - participant seems to set a new subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 times 4. Is 24""',
)

# ""10 minus 4. I'll get my 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-4=6"",
    resulting_state=(4, 6, 8),
    comment='""10 minus 4. I\'ll get my 6""',
)

# ""8 minus 4. I'll get my 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 6),
    comment='""8 minus 4. I\'ll get my 4""',
)

# ""6 times 4. Which is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""6 times 4. Which is 24""',
)
```"
1612,"[5,5,6,11]",(6+5),180," Oh, to get 24 out of this. Um, 24. 10 plus 14. Give me 24. Um, 24 out of this. 24. Hmm. Oh, 19 plus 5. Give me 24. How do I get 19? Oh. Wait, 6 plus 5 is 11. 11 plus 11 is 22. I'm left with 2. Hmm. 11 minus 6. 11 minus 6 is, uh, 11 minus 6 is 5. Hmm. No. Harsh. Hmm. How do I go by this? To get 24. 11 plus 5 is 16. Right. 11 plus 5 is 16. And 6, 11 plus 5 is 16. And 16 plus 8 will be 24. Oh. How do I get 24 out of this? Whoo. 24. 24. Hmm. 11 plus 5? 16. 5 plus 5? 10. And 10. Hmm. Still not getting 24. Whoo. 6, wait, back at 6 plus 5, it's 11. No. No.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 14. Give me 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (10, 14),
    state_after_subgoal=(24,),
    comment='""10 plus 14. Give me 24""',
)

# ""19 plus 5. Give me 24"" - participant sets another subgoal
graph.set_subgoal(
    (19, 5),
    state_after_subgoal=(24,),
    comment='""19 plus 5. Give me 24""',
)

# ""6 plus 5 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(5, 11, 11),
    comment='""6 plus 5 is 11""',
)

# ""11 plus 11 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(5, 22),
    comment='""11 plus 11 is 22""',
)

# ""11 minus 6 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(5, 5, 5),
    comment='""11 minus 6 is 5""',
)

# ""11 plus 5 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(5, 6, 16),
    comment='""11 plus 5 is 16""',
)

# ""And 16 plus 8 will be 24"" - participant seems to be setting another subgoal since they don't have 8
graph.set_subgoal(
    (16, 8),
    state_after_subgoal=(24,),
    comment='""And 16 plus 8 will be 24""',
)

# ""5 plus 5? 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(6, 10, 11),
    comment='""5 plus 5? 10""',
)

# ""6 plus 5, it's 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(5, 11, 11),
    comment='""6 plus 5, it\'s 11""',
)

```"
1619,"[4,7,8,11]",,180," Continue. Seven times four is 28. No. Eleven. Eleven plus seven equals eighteen. Eighteen plus eight. Eleven plus seven equals eighteen plus eight. Twenty-six minus four equals twenty-two. Hmm. Seven times four. Seven times four equals. Seven times four equals twenty. Eleven plus four equals fifteen. Fifteen plus eight. Twenty-three. No. Eight plus seven plus four. Eight and seven is fifteen. Sixteen times eight is eighteen and nineteen. Delete. Delete, delete, delete. Eleven plus seven plus eight minus four. Okay. Delete. Delete. Seven times four minus eight plus eleven.","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Seven times four is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 11, 28),
    comment='""Seven times four is 28""',
)

# ""Eleven plus seven equals eighteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(4, 8, 18),
    comment='""Eleven plus seven equals eighteen""',
)

# ""Eighteen plus eight""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8=26"",
    resulting_state=(4, 26),
    comment='""Eighteen plus eight""',
)

# ""Twenty-six minus four equals twenty-two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-4=22"",
    resulting_state=(22,),
    comment='""Twenty-six minus four equals twenty-two""',
)

# ""Seven times four equals twenty"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=20"",
    resulting_state=(8, 11, 20),
    comment='""Seven times four equals twenty"" - calculation error',
    result_calc_error=True,
)

# ""Eleven plus four equals fifteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4=15"",
    resulting_state=(7, 8, 15),
    comment='""Eleven plus four equals fifteen""',
)

# ""Fifteen plus eight""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+8=23"",
    resulting_state=(7, 23),
    comment='""Fifteen plus eight. Twenty-three""',
)

# ""Eight plus seven plus four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7+4=19"",
    resulting_state=(11, 19),
    comment='""Eight plus seven plus four""',
)

# ""Eight and seven is fifteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(4, 11, 15),
    comment='""Eight and seven is fifteen""',
)

# ""Eleven plus seven plus eight minus four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7+8-4=22"",
    resulting_state=(22,),
    comment='""Eleven plus seven plus eight minus four""',
)

# ""Seven times four minus eight plus eleven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4-8+11=31"",
    resulting_state=(31,),
    comment='""Seven times four minus eight plus eleven""',
)
```"
1622,"[3,3,12,12]",(12+12)x(3/3),73," Okay, 12 plus 12 is 24. 12 plus 12 is 24 plus 3 divided by 3. 12 plus 12 plus 3 divided by 3. Submit no. Let's see. 12 plus 12 plus 3 divided by 3. 12 plus 12 is 21. 3 divided by 3 is 1. 12 plus 12. Oh, times. 12 plus 12. 12 plus 12 times. Times. 3 divided by 3.","```python
start_state = (3, 3, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 3, 24),
    comment='""12 plus 12 is 24""',
)

# ""plus 3 divided by 3"" - participant tries adding 3/3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+3/3=25"",
    resulting_state=(25,),
    comment='""plus 3 divided by 3""',
)

# ""12 plus 12 is 21"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=21"",
    resulting_state=(3, 3, 21),
    comment='""12 plus 12 is 21"" - participant makes calculation error',
    result_calc_error=True,
)

# ""3 divided by 3 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 12, 12),
    comment='""3 divided by 3 is 1""',
)

# Finally the participant figures out to multiply (12+12) by (3/3)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+12)*(3/3)=24"",
    resulting_state=(24,),
    comment='""12 plus 12. Times. 3 divided by 3""',
)
```"
1623,"[6,6,7,10]",7+6+10+,180," 10 plus 7 is 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 6 and 6 is 12, 13, 14, 15, 16, 17, 18, 19. 10 minus 7 is 3. 10 plus 7 is 17, 18, 19, 20, 1, 2, 3, 4. We need 10 plus 7 plus 7. 10 plus 7. plus six plus six plus six divided by let's see, delete ten plus seven plus six let's see, delete six plus, ten plus seven plus six ten plus seven plus six divided by six ten plus seven plus six divided by six ten plus seven plus six divided by six 6 plus 6 plus 7 plus 10. This one's got me, so let's see. 7 plus 6 is 13 plus 10 plus...","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(6, 6, 17),
    comment='""10 plus 7 is 17""',
)

# ""6 and 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(7, 10, 12),
    comment='""6 and 6 is 12""',
)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 6, 6),
    comment='""10 minus 7 is 3""',
)

# ""ten plus seven plus six divided by six""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+7+6)/6=3.83"",
    resulting_state=(3.83,),
    comment='""ten plus seven plus six divided by six""',
)

# ""6 plus 6 plus 7 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6+7+10=29"",
    resulting_state=(29,),
    comment='""6 plus 6 plus 7 plus 10""',
)

# ""7 plus 6 is 13 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6+10=23"",
    resulting_state=(6, 23),
    comment='""7 plus 6 is 13 plus 10""',
)
```"
1624,"[2,2,5,11]",5,180," 10 times 2, I mean 11 times 2 is 22 plus 2 is 4. No, okay. 5 times 2, 5 times 2 is 10 times 2, 5 times 2 is 10. Plus 11. 5 times 2 is 10 plus 11. 5 times 2 is 10 plus 11 plus 2. Nope. 5 times 2 is 10 plus 11 is 21, uh, 23. Delete. 11 times 2 is 22. 5 times 2 is 10 plus 11 is 23. Delete. 11 times 2 is 22. Delete. 11 times 2 is 22. Delete. 11 times 2 is 22. Minus 5 plus 2. Nope. Okay, let's see. 2 times 2 is 4. Times 5. 2 times 2 is 4. Times 5 is 20 plus 11, no? No. 2 times 2 is 4, times 5 is 20. Let's see here. 5 times 11 is 55. No. 5 times 2 is 20, plus 2 plus 11. I'm stumped on this one. 11 plus 5. Times 2 minus 2. 5.","```python
start_state = (2, 2, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 2 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 5, 22),
    comment='""11 times 2 is 22""',
)

# ""plus 2 is 4"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+2=4"",
    resulting_state=(5, 4),
    comment='""plus 2 is 4"" - calculation error',
    result_calc_error=True,
)

# ""5 times 2 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(2, 10, 11),
    comment='""5 times 2 is 10""',
)

# ""plus 11"" from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(2, 21),
    comment='""plus 11""',
)

# ""plus 2"" from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+2=23"",
    resulting_state=(23,),
    comment='""plus 2""',
)

# ""11 times 2 is 22. Minus 5 plus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2-5+2=19"",
    resulting_state=(19,),
    comment='""11 times 2 is 22. Minus 5 plus 2""',
)

# ""2 times 2 is 4. Times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*2)*5=20"",
    resulting_state=(11, 20),
    comment='""2 times 2 is 4. Times 5""',
)

# ""plus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+11=31"",
    resulting_state=(31,),
    comment='""plus 11""',
)

# ""5 times 11 is 55""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*11=55"",
    resulting_state=(2, 2, 55),
    comment='""5 times 11 is 55""',
)

# ""5 times 2 is 20, plus 2 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2+2+11=23"",
    resulting_state=(23,),
    comment='""5 times 2 is 20, plus 2 plus 11""',
)

# ""11 plus 5. Times 2 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11+5)*2-2=30"",
    resulting_state=(30,),
    comment='""11 plus 5. Times 2 minus 2""',
)

```"
1628,"[3,7,7,9]",(9-(7/7))x3,37," 3, 7, 7, 9. 3, 7, 7, 9. 7 divided by 7 is 1. 9 minus 1 is 8. 8 times 3 is 24. Okay. Let's do it this way. 9 minus 7 divided by 7 times 3.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 divided by 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 3, 7, 9),
    comment='""7 divided by 7 is 1""',
)

# ""9 minus 1 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(3, 7, 8),
    comment='""9 minus 1 is 8""',
)

# ""8 times 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(7, 24),
    comment='""8 times 3 is 24""',
)

# The participant then restates their solution as ""9 minus 7 divided by 7 times 3""
# This is the same sequence of operations they just performed, just stated in a different way
```"
1644,"[1,4,5,6]",6,180," Alright, so same thing, 6 times 4, and then I multiply by 1 by doing 5 times, or 5 minus 1, 5 minus, oops, delete that, times, wait, that's not right, never mind, alright, okay, so rethink that, 5 plus 4 would be 9, 5 minus 1 we could do, if we add them we get 10, don't want to add, okay, 30 minus 5 wouldn't do it, 6 times 4 times 1, how about 6 minus, okay, so 6 minus 1 would be 5, 5 times 4 would be 20, that's not going to get me there, 6 times 5. 6 times 1, 4 minus 1 is 3, can I use 3? 3 times 5 is 15, 3 times 6 is 18, that won't do it, what am I missing, 5 minus, 6 minus 5, 1, 4, and 1, no, okay, so 4 plus 5 would be 9, or 6 plus 1 is 7. 7 times 5 is 35, that's way too high, 7 times 4 is 28, minus 5, no, okay, 5 divided by, 6 times 5, 30, 24, 5 times 1, 6 divided by 1, oh my goodness, why can't I do this, 6 times 5, 5 is 30, minus 4, 6 times 1, 4 times 5 is 20, plus 6 is 24, 4 times, 20, 30, 30, oh, what, I'm going to do 2, 5, I'm going to do 3, I'm going to do 4, 4 times 4 is 16 plus 6, doesn't do it, what am I missing, 4 times 5, minus 1, no, 6 times 5, 30, 25, doesn't work, 6 minus 5, 4, 6 minus 1, 5, 6 minus 1, 5,","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 5, 24),
    comment='""6 times 4""',
)

# ""5 plus 4 would be 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+4=9"",
    resulting_state=(1, 6, 9),
    comment='""5 plus 4 would be 9""',
)

# ""if we add them we get 10"" - participant likely adding some combination
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+4=10"",
    resulting_state=(1, 5, 10),
    comment='""if we add them we get 10""',
)

# ""6 minus 1 would be 5, 5 times 4 would be 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(4, 5, 5),
    comment='""6 minus 1 would be 5""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(5, 20),
    comment='""5 times 4 would be 20""',
)

# ""6 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 4, 30),
    comment='""6 times 5""',
)

# ""4 minus 1 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 5, 6),
    comment='""4 minus 1 is 3""',
)

# ""3 times 5 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(6, 15),
    comment='""3 times 5 is 15""',
)

# ""6 minus 5, 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 1, 4),
    comment='""6 minus 5, 1""',
)

# ""4 plus 5 would be 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(1, 6, 9),
    comment='""4 plus 5 would be 9""',
)

# ""6 plus 1 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(4, 5, 7),
    comment='""6 plus 1 is 7""',
)

# ""7 times 5 is 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(4, 35),
    comment='""7 times 5 is 35""',
)

# ""6 times 5, 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 4, 30),
    comment='""6 times 5, 30""',
)

# ""4 times 5 is 20, plus 6 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(1, 6, 20),
    comment='""4 times 5 is 20""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+6=26"",
    resulting_state=(1, 26),
    comment='""plus 6 is 24"" - participant made calculation error',
    result_calc_error=True,
)

# ""6 minus 5, 4"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=4"",
    resulting_state=(1, 4, 4),
    comment='""6 minus 5, 4"" - calculation error',
    result_calc_error=True,
)

# ""6 minus 1, 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(4, 5, 5),
    comment='""6 minus 1, 5""',
)
```"
1654,"[3,9,13,13]",(13x3),180," The next one, ooh, this is a big one, big, big boy. So we have 9 times 3. That will give us 27, because 3 times 8 is 24. You add a 3, it's 27. So, let's do 13 plus 13 will give us, what, 26? Let's do 13 divided by 13, no, 13. Plus 3, that will give us 16. It's a tricky one here. Okay, let's look at these numbers. So, ooh, this is a hard one. 1, 3, maybe we can divide 13 by 13. Because 13, 13 divided by 13 is 1. Hmm. 13 divided by 13. This is a hardy one. Oh, really difficult. It's cracking my brain here. Let's see. Let's see. Okay. What is 13? 13 times 3 equals 33.","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3. That will give us 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""9 times 3. That will give us 27""',
)

# ""13 plus 13 will give us, what, 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13 plus 13 will give us, what, 26""',
)

# ""13 divided by 13"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 3, 9),
    comment='""13 divided by 13""',
)

# ""Plus 3, that will give us 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(9, 13, 16),
    comment='""Plus 3, that will give us 16""',
)

# The participant repeats ""13 divided by 13 is 1"" a few times

# ""13 times 3 equals 33"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=33"",
    resulting_state=(9, 13, 33),
    comment='""13 times 3 equals 33"" - calculation error',
    result_calc_error=True
)
```"
1670,"[6,10,10,13]",,180," 6, 10, 10, 10, 10, 13, 6 times 6, 6 times 10 is 60, minus 23, 10 plus 10, 10 plus 10 is 20, 10 plus 3, 20, 10 plus 13 is 23, 6 plus 13 is 19, 10 minus 10, 10 is 1, 6 plus 10 is 7, 16, 13 minus 10 is 3, that gives me 19, 20, 26, 23, plus 4 is 27, 60, 6, 26, 26, 26, and 13, 19, plus 1, 19 plus 1, 20, 19 plus 1 gives me 20, 10, 60 divided by 10 is 6, 10, 60 divided by 10 is 6, 60 minus 60, 60 minus 23, 60 minus 23. Let's see, 60 minus 23.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 10 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(10, 13, 60),
    comment='""6 times 10 is 60""',
)

# ""10 plus 10 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(6, 13, 20),
    comment='""10 plus 10 is 20""',
)

# ""10 plus 13 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(6, 10, 23),
    comment='""10 plus 13 is 23""',
)

# ""6 plus 13 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(10, 10, 19),
    comment='""6 plus 13 is 19""',
)

# ""10 minus 10 is 1"" - participant likely meant ""10 minus 10 is 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-10=0"",
    resulting_state=(6, 13, 0),
    comment='""10 minus 10 is 1"" - participant likely meant ""10 minus 10 is 0""',
)

# ""6 plus 10 is 7, 16"" - participant corrects themselves to say 16
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10=16"",
    resulting_state=(10, 13, 16),
    comment='""6 plus 10 is 7, 16"" - participant corrects themselves to say 16',
)

# ""13 minus 10 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 6, 10),
    comment='""13 minus 10 is 3""',
)

# ""60 divided by 10 is 6"" - need to compute 60 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(10, 13, 60),
    comment='""60 divided by 10 is 6"" - first computing 60',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60/10=6"",
    resulting_state=(6, 13),
    comment='""60 divided by 10 is 6""',
)

# ""60 minus 23"" - need to compute both numbers first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(10, 13, 60),
    comment='""60 minus 23"" - first computing 60',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(6, 10, 23),
    comment='""60 minus 23"" - computing 23',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60-23=37"",
    resulting_state=(37,),
    comment='""60 minus 23""',
)
```"
1673,"[6,8,11,12]",(12,180," Target number 24. So I got a 12, an 11, an 8, and a 6. 14. Let's see, 14 and 23. That's not good. 24. So if I take 12 and subtract 8, I would have 4. If I take 12 and subtract 6, I would have 6. 12 and subtract 11, and I would have 1. So open parentheses, and that would give me a 1. And then an 8. How do I get rid of the 11? Do you have to use all the numbers? Okay. Oh, but if I use that number, then I can't. It won't be there anymore. 8 times 6 minus 8. 6 minus 8 would be 2, and obviously 2 times 12 is 24. That's not going to work. I can only use each of the numbers one time. That's terrible. 8 and 11, that's 3. If I do 8... 11 minus 8 is 3. That's not 24. 3. 36 minus, that's not 24. 12 minus 8 is 4. Then you still have an 11 and a 6. So 4 times 6 is 24. Hmm. I think if I do... I can't multiply those two. 8 plus 6 is 14. 14 and 14 and 12. That's 26. And 14 and 11 is 25. So that's not good. 14. And 11 plus 12 is 24. That's not good. 3. So 14 and 23 is not going to help me. Hmm. 6 and 12 is 18. And 12 and that is 20. 6 and 12 is 18. And 18, that would be... use all my numbers. Great. Hmm. 12 and 6 is too big. 12 and 6 is too big. Well, this stinks. Well, this stinks. Uh, 12 minus... 12 minus...","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and subtract 8, I would have 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 11),
    comment='""12 and subtract 8, I would have 4""',
)

# ""12 and subtract 6, I would have 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 8, 11),
    comment='""12 and subtract 6, I would have 6""',
)

# ""12 and subtract 11, and I would have 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 6, 8),
    comment='""12 and subtract 11, and I would have 1""',
)

# ""8 times 6 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(11, 12, 48),
    comment='""8 times 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-8=40"",
    resulting_state=(11, 12, 40),
    comment='""minus 8""',
)

# ""6 minus 8 would be 2, and obviously 2 times 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-8)*12=-24"",
    resulting_state=(-24, 11),
    comment='""6 minus 8 would be 2, and obviously 2 times 12 is 24""',
)

# ""11 minus 8 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 6, 12),
    comment='""11 minus 8 is 3""',
)

# ""12 minus 8 is 4. Then you still have an 11 and a 6. So 4 times 6 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 11),
    comment='""12 minus 8 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(11, 24),
    comment='""4 times 6 is 24""',
)

# ""8 plus 6 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(11, 12, 14),
    comment='""8 plus 6 is 14""',
)

# ""11 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(6, 8, 23),
    comment='""11 plus 12 is 24"" - participant miscalculates',
    result_calc_error=True
)

# ""6 and 12 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12=18"",
    resulting_state=(8, 11, 18),
    comment='""6 and 12 is 18""',
)

# The participant then seems to get stuck and repeats ""12 minus..."" without completing the thought
```"
1684,"[4,4,8,11]",,180," All right, 24. Let's see. We can do... Let's see. 4 divided by 4, 4 times 4. How do we get to 13? Let's see. If we can get to 3, that would be great. Yes, we can. Okay. 11 minus, in parentheses, oh no, yes, 4 plus 4, in parentheses, times 8. What's that going to... Do it... Let's try that. Okay, let's delete that. Let's keep... I like that though, so let's figure out a way to do that better. Let's do... Let's use the parentheses more. 11... 4 plus 4... Nope, that's not true. I thought I had it. How do we get 8 times 3? Okay. Okay, how about... In parentheses, 11 minus 8. Okay, let's see. How do we do that? It would be 3, yeah, OK, times 4 times 4. What? Yes, I do. Times 4 times 4, that would be, no, oh my god. I'm not doing well on this one. Let's see. It's 12. We could do 32 down to 8 somehow. 4 times 4, 16 plus 4. Um.","```python
start_state = (4, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 8, 11),
    comment='""4 divided by 4""',
)

# ""4 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 11, 16),
    comment='""4 times 4""',
)

# ""How do we get to 13?"" suggests participant is setting a subgoal
graph.set_subgoal((13,), comment='""How do we get to 13?""')

# ""If we can get to 3, that would be great"" suggests another subgoal
graph.set_subgoal((3,), comment='""If we can get to 3, that would be great""')

# ""11 minus, in parentheses, oh no, yes, 4 plus 4, in parentheses, times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+4)*8=64"",
    resulting_state=(11, 64),
    comment='""11 minus, in parentheses, oh no, yes, 4 plus 4, in parentheses, times 8""',
)

# ""How do we get 8 times 3?"" suggests participant is setting another subgoal
graph.set_subgoal((24,), state_after_subgoal=(24,), comment='""How do we get 8 times 3?""')

# ""11 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 4),
    comment='""11 minus 8""',
)

# ""times 4 times 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4*4=48"",
    resulting_state=(48,),
    comment='""times 4 times 4""',
)

# ""4 times 4, 16 plus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(4, 8, 11, 16),
    comment='""4 times 4, 16""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+4=20"",
    resulting_state=(8, 11, 20),
    comment='""16 plus 4""',
)
```"
1685,"[1,4,5,8]",,180," Let's keep going. Yeah, we can do this. Let's do parentheses 8. No, that won't do it. Apologies. Let's see. What was I thinking? How do I get to 3? Let's see. Let's see. Let's see. Nope. Let's see. We could do 1918 now. I'm trying to find a way to make this very simple, but it's loading me. Let's see. 8 minus 4. 5 times 8 is 40. No. No. No. Let's see. What's going on here? 32. I'm really blanking here. That would not do it. Let's see. six, 24, six and 24, but then you have eight to deal with 32, oh my God. Well, how do we get to 24? It's 12 times two. It's also six times four.","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""How do I get to 3?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (3,),
    state_after_subgoal=(24,),
    comment='""How do I get to 3?""',
)

# ""8 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(1, 4, 5),
    comment='""8 minus 4""',
)

# ""5 times 8 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(1, 4, 40),
    comment='""5 times 8 is 40""',
)

# ""32"" participant may be computing 8*4
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(1, 5, 32),
    comment='""32"" participant may be computing 8*4',
)

# ""six, 24, six and 24"" participant seems to be setting subgoals
graph.set_subgoal(
    (6, 24),
    state_after_subgoal=(24,),
    comment='""six, 24, six and 24""',
)

# ""It's 12 times two. It's also six times four."" participant seems to be listing ways to make 24
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""It\'s 12 times two""',
)

graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""It\'s also six times four""',
)
```"
1687,"[6,7,9,12]",(9-7)x6+12,39," All right, back at it. How do we do this one? Let's see, we can do 13, 1, 9. We like 8 and 3s and 6s and 4s. What if we get to 48 somehow? I think we are going to do what we did last time. 9 minus 7 and parentheses times 6 plus 12.","```python
start_state = (6, 7, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We can do 13, 1, 9"" - not clear what operation this refers to

# ""We like 8 and 3s and 6s and 4s"" suggests the participant is thinking about useful intermediate numbers

# ""What if we get to 48 somehow?"" - participant sets a subgoal
graph.set_subgoal(
    (48,),
    state_after_subgoal=(24,),
    comment='""What if we get to 48 somehow?""',
)

# ""9 minus 7 and parentheses times 6 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-7)*6+12=24"",
    resulting_state=(24,),
    comment='""9 minus 7 and parentheses times 6 plus 12""',
)
```"
1692,"[4,8,8,11]",,180," 24, 8 times 4, 8, 8 minus 16, 4 minus 11, 11 minus 4 is 8, 9, 7, 7, 7, 8, 9, 10, 11 minus 4 is 7, so 8 times 8 times 7 would not get me 24, 8 plus 8 plus 7, 8 plus 8 is 16, 19, 20, 16 plus, let's see, 8, 9, 10, 11, 12, 8 and 4 is 12, 12 plus 11 would be 23. That doesn't get me there. 8 times 8 divided by 8 would give you a 1 to play around with, so that would work. 8 divided by 8 8 divided by 8 would give you a 1, 8, 16, 20, 8 times, 8 divided by 8 is 2, times thing, I have a left over 8. 8 divided by 4 would give me 2 times, that would be 22. Oh this is hard. 8 divided by 8 but give me a 1, 11, and 4 4, 8 divided by 4 will give me a 2. 8 and a 16. 16 and 11. No. No, that wouldn't work – 27 8 divided by by 4. There will be a 2. So I have a 1, I have a 2, 9 times 11. Ooh, 11 minus 8 is 3, so that would give me a 3 to work with. 8 times 3 is 24, but I have a left over 4. 8 divided by 4 is 2. How about 19? 11 plus 8 is 19. I need a 5. I don't have a 5. All right, I think I'm gonna run out of time on this one. 8 divided by 4 is 2. That would be 16. 16 and 11. It's the 11, it's like... 26. 36. 32. 32 minus 11 would be... 32. 32 minus 11 would be...","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(8, 11, 32),
    comment='""8 times 4""',
)

# ""11 minus 4 is 8, 9, 7"" - participant calculates but makes an error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(7, 8, 8),
    comment='""11 minus 4 is 7""',
)

# ""8 times 8 times 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8*7=448"",
    resulting_state=(448,),
    comment='""8 times 8 times 7""',
)

# ""8 plus 8 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+7=23"",
    resulting_state=(23,),
    comment='""8 plus 8 plus 7""',
)

# Going back to start state for ""8 and 4 is 12, 12 plus 11 would be 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(8, 11, 12),
    comment='""8 and 4 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(8, 23),
    comment='""12 plus 11 would be 23""',
)

# ""8 times 8 divided by 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8/8=8"",
    resulting_state=(4, 8, 11),
    comment='""8 times 8 divided by 8""',
)

# ""8 divided by 4 would give me 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 8, 11),
    comment='""8 divided by 4 would give me 2""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 8),
    comment='""11 minus 8 is 3""',
)

# ""8 times 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(4, 24),
    comment='""8 times 3 is 24""',
)

# ""11 plus 8 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(4, 8, 19),
    comment='""11 plus 8 is 19""',
)

# ""8 divided by 4 is 2. That would be 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 8, 11),
    comment='""8 divided by 4 is 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(11, 16),
    comment='""That would be 16""',
)

# ""16 and 11"" participant seems to add these
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+11=27"",
    resulting_state=(27,),
    comment='""16 and 11"" participant seems to add these',
)

# The participant continues to explore but doesn't find a solution before time runs out
```"
1694,"[3,3,9,9]",(9+3)+(9+3),25," All right, please make this one easier. 12 and 9, 10, 11, 12. Okay, that one I got. 9, let me see, so it's going to be 9 plus 3 plus 9 plus 3, so parentheses 9 plus 3 plus parentheses 9 plus 3, 12 and 12.","```python
start_state = (3, 3, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 9, 10, 11, 12"" suggests the participant is trying to get to 12 twice
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""12 and 9, 10, 11, 12"" suggests participant wants to get to 12 twice',
)

# ""9 plus 3 plus 9 plus 3"" 
# The participant breaks this into two parts with parentheses: (9+3)+(9+3)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9+3)+(9+3)=24"",
    resulting_state=(24,),
    comment='""9 plus 3 plus 9 plus 3, so parentheses 9 plus 3 plus parentheses 9 plus 3""',
)

```"
1695,"[6,6,11,12]",,180," Alright, try this one. 12 and 12, yes. So I could do a 12 plus 12, and then I have 11 left over, so. Okay. 6. Fuck. What the hell? No. What are you doing? Okay. Sorry, my printer just took over my computer. Um. Okay. 12, 18. 18 minus 6, I think. 6 plus 11. 6 plus 11 minus 6. Plus 12. That's it, but how do I phrase it? 6 plus 11 minus 6. 6 plus 11 minus 6 plus 12. So. I think it's 2. 6 plus 11. Minus. 6 plus 12. That would work, right? 17 minus 6 is 11. No. Wait. 17 minus 6 is 11? Yeah. That's 11. 11 plus 12. I thought I had 12. What did I do? 6 plus 6 is 12. I thought I had. Ah, crap. Sorry. I thought I had that right. 6 plus 6 is 12. 12 minus 11. No. 12 and 12. I have an 11 left over. 11 minus 6? Ooh. 11 minus 6 is 5. No. Plus 6? No. 6 is 11. Plus 12 is 20. It's not 24. It's 23. So 6 and 6. So what do I do with this left over 11? 11 minus 6 is 5. 11 and 12 is 23. So how do you get? What if you divide? 6 divided by 12 would be 2. I mean, 12 divided by 6 would be 2. 2 times 6 is 22. 22 and 6 would be 28. No. Ugh. I can only do the easiest ones.","```python
start_state = (6, 6, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12, yes. So I could do a 12 plus 12"" - participant seems to want to get to 12+12=24
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""12 and 12, yes. So I could do a 12 plus 12""',
)

# ""6 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+11=17"",
    resulting_state=(6, 12, 17),
    comment='""6 plus 11""',
)

# ""17 minus 6 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17-6=11"",
    resulting_state=(11, 12),
    comment='""17 minus 6 is 11""',
)

# ""11 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(23,),
    comment='""11 plus 12""',
)

# ""6 plus 6 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(11, 12, 12),
    comment='""6 plus 6 is 12""',
)

# ""11 minus 6 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(5, 6, 12),
    comment='""11 minus 6 is 5""',
)

# ""11 and 12 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(6, 6, 23),
    comment='""11 and 12 is 23""',
)

# ""12 divided by 6 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 6, 11),
    comment='""12 divided by 6 would be 2""',
)

# ""2 times 6 is 22"" - this seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=22"",
    resulting_state=(11, 22),
    comment='""2 times 6 is 22"" - calculation error',
    result_calc_error=True,
)

```"
1704,"[6,6,8,12]",((8-6)x6)+12,79, I don't buy 74 okay it's minus 6 is 2 2 times 6 12 12 plus okay yes I think I have an idea it's minus 6 is 2 2 times 6 yes yes close brackets okay let me try this is that 12 divided by 6 close brackets multiplied by open bracket 8 divided by 6 I can't use this I can't use this I call you this and I do yes it's minus 6 that is true it's minus 6 is 2 2 times 6 and we use the brackets instead the brackets it's minus 6 upcoming is 2 multiplied by 6 yes and all plus 2 of correct,"```python
start_state = (6, 6, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""minus 6 is 2"" seems to refer to 8-6=2
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 12),
    comment='""minus 6 is 2"" seems to refer to 8-6=2',
)

# ""2 times 6 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(12, 12),
    comment='""2 times 6 12""',
)

# ""12 divided by 6 close brackets multiplied by open bracket 8 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12/6)*(8/6)=2.67"",
    resulting_state=(6, 2.67),
    comment='""12 divided by 6 close brackets multiplied by open bracket 8 divided by 6""',
)

# ""I can't use this"" suggests participant is backtracking

# Going back to the successful path they found earlier
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 12),
    comment='Going back to ""minus 6 is 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(12, 12),
    comment='""2 times 6""',
)

# Finally adding the remaining 12 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(24,),
    comment=""Adding the remaining 12 to get to 24"",
)

```"
1705,"[3,5,9,9]",,180, 9 times 9 is 81 81 times 3 243 divided by 5 49 okay 9 times 91 81 divided by 5 it's 1 divided by 5 I think that cannot work okay let me try 9 minus 5 I minus 5 close brackets all multiplied by open brackets 9 divided by 3 9 divided by 3 I think this should work incorrect answer or not all numbers use that minus 5 is 3 3 times 3 9 this cannot work 9 minus 5 is 4 4 times 3 is 12 and not 24 4 times 3 is 12 and not 24 9 times 9 81 81 divided by 5 9 divided by 3 multiplied by 9 divided by 5 cannot work 81 divided by 3 27 27 I lost for a minus 3 should be useful okay it's 1 divided by 5 7.2 and I like this kind of it 3 times 5 15 15 times 9 what it's not a 5 by 9 it's 15 back ah what can I do 9 times 3 27 27 multiplied by 5 9 15 it's kind of work too ah oh this is 9 minus 5 should be 4 4 times 9 36 ooh still gonna work with 3 what can I do what can I do what can I do 9 times 5 is 45 45 minus 9 36 36 off I think I'll just have to pass on this one because I cannot seem to find a solution to this 3599 3 plus,"```python
start_state = (3, 5, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 9 is 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(3, 5, 81),
    comment='""9 times 9 is 81""',
)

# ""81 times 3 243""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""81*3=243"",
    resulting_state=(5, 243),
    comment='""81 times 3 243""',
)

# ""divided by 5 49""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""243/5=49"",
    resulting_state=(49,),
    comment='""divided by 5 49""',
    result_calc_error=True,
)

# ""9 minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(3, 4, 9),
    comment='""9 minus 5""',
)

# ""9 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 5, 9),
    comment='""9 divided by 3""',
)

# ""minus 5 is 3 3 times 3 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(3, 4, 9),
    comment='""minus 5 is 3""',
)

# ""4 times 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(9, 12),
    comment='""4 times 3 is 12""',
)

# ""81 divided by 3 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*9)/3=27"",
    resulting_state=(5, 27),
    comment='""81 divided by 3 27""',
)

# ""3 times 5 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(9, 9, 15),
    comment='""3 times 5 15""',
)

# ""15 times 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*9=135"",
    resulting_state=(9, 135),
    comment='""15 times 9""',
)

# ""9 times 3 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(5, 9, 27),
    comment='""9 times 3 27""',
)

# ""27 multiplied by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27*5=135"",
    resulting_state=(9, 135),
    comment='""27 multiplied by 5""',
)

# ""9 minus 5 should be 4 4 times 9 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-5)*9=36"",
    resulting_state=(3, 36),
    comment='""9 minus 5 should be 4 4 times 9 36""',
)

# ""9 times 5 is 45 45 minus 9 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5-9=36"",
    resulting_state=(3, 36),
    comment='""9 times 5 is 45 45 minus 9 36""',
)
```"
1707,"[1,11,12,13]",,180," How can I go about this one? 1 plus 11 is 12, so 2 plus 12 is 24. Then how do you get rid of 13? 13 minus 1 is 12. 2 plus 12 is 24. How do I go about this? How do I go about this? How do I go about this? How do I go about this? 11 plus 12 is 23. 11 plus 12 is 23. 23 plus 13 is 36. 10 plus 12 is 24. 10 plus 12 is 24. That's too much. 37. 13 plus 11, I can get 24. 13 plus 11, I can get 24. Then I still have extra 13. 1 plus 12. How can I go about this? How can I go about this? How can I? 12 plus 1 is 13. 12 plus 1 is 13. How can I do? How can I do? How can I do? How can I do? How can I do? How can I do? That cannot work. This cannot work. This cannot work. What am I going to do? This is an old quiz. 11 minus 1 is 10. 10 plus one adds 23. 10 plus one adds 23. What am I going to do? Try Spell when Spirituality happens. 11 times 12 is 132. divided by 13 that's sometimes 12 of the 6 divided by 11 still very wrong 1 plus 11 2 plus 7 4 that's nice after 10 left how can I eliminate this 13 this is what I need to find out how can I eliminate 13 12 minus 13 1 1 times 1 plus 1 2 2 times 0 that's 22 okay maybe it's 12 after me 12 minus 11 so when I was 1 11 11 plus 11 22 on minus 11 okay 12 minus 11 oh my saying what am I saying 13 minus 11 that's 2 2 plus 1 3 no 12 minus 11 that's 1 1 plus 1 2 2 times 13","```python
start_state = (1, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 plus 11 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 12, 13),
    comment='""1 plus 11 is 12""',
)

# ""13 minus 1 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(11, 12, 12),
    comment='""13 minus 1 is 12""',
)

# ""11 plus 12 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(1, 13, 23),
    comment='""11 plus 12 is 23""',
)

# ""23 plus 13 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+13=36"",
    resulting_state=(1, 36),
    comment='""23 plus 13 is 36""',
)

# ""10 plus 12 is 24"" - participant may have gotten 10 from 11-1
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-1)+12=24"",
    resulting_state=(13, 24),
    result_calc_error=True,
    comment='""10 plus 12 is 24"" - participant may have gotten 10 from 11-1',
)

# ""13 plus 11, I can get 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 12, 24),
    comment='""13 plus 11, I can get 24""',
)

# ""12 plus 1 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+1=13"",
    resulting_state=(11, 13, 13),
    comment='""12 plus 1 is 13""',
)

# ""11 minus 1 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(10, 12, 13),
    comment='""11 minus 1 is 10""',
)

# ""11 times 12 is 132""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(1, 13, 132),
    comment='""11 times 12 is 132""',
)

# ""divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""132/13=10.15"",
    resulting_state=(1, 10.15),
    comment='""divided by 13""',
)

# ""12 minus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 13),
    comment='""12 minus 11""',
)

# ""13 minus 11 that's 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 12),
    comment='""13 minus 11 that\'s 2""',
)

# ""2 plus 1 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 12),
    comment='""2 plus 1 3""',
)
```"
1711,"[4,4,8,11]",,180," Okay, 4 plus 4 is 8 plus 8, 16. 10 plus 10 is 27. Open brackets twice. Then 11 minus 8, I think I can get 3. 3 times 4 is 12. 12, 12. Okay. 3 times 4, 4 times 4 is 16. 16 times 3. Nah, no, that's not working. 11 minus 4. 11 minus 4 should give me 7. 7 times 4, 28. Right, yes, 28, 28. No, it's not working. 8 minus 4, 4. 4 times 4 is, okay, 4 times 11. 4 times 11 will give me 44. Divided by 4. 11 is not working still. 4 times 4. 4 times 4. 8 times 4 is 32. 32 divided by 11. 2.9 multiplied by 4. Ah, it's still not working. 4 times 4 is 16. 16 plus 8 is 24. Then how do I get rid of 11? Yes, how do I get rid of 11? 4 plus 8 should give me 12. 12 plus, ooh, 4 plus 8 will give me 12. Okay. 12 plus 11. 12 plus 11. Nah, that's going to be 23, and I didn't even make it to 4. I cannot seem to solve this either. Where do they find these questions? This is basically arithmetic, yet I can't do it. 4 plus 8 is 12. 12 minus 11. 12 minus 4. 8 times, ah, no. Still not working. 8 divided by 4. 2. 2 times 12 is 22. 22 plus 4 is 26. It's still more than enough. 15 plus 4. 15 plus 8 is 23. 23.","```python
start_state = (4, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 4 is 8 plus 8, 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(8, 8, 11),
    comment='""4 plus 4 is 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(11, 16),
    comment='""plus 8, 16""',
)

# ""11 minus 8, I think I can get 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 4),
    comment='""11 minus 8, I think I can get 3""',
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(4, 12),
    comment='""3 times 4 is 12""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 11, 16),
    comment='""4 times 4 is 16""',
)

# ""11 minus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(4, 7, 8),
    comment='""11 minus 4 should give me 7""',
)

# ""7 times 4, 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 28),
    comment='""7 times 4, 28""',
)

# ""8 minus 4, 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 4, 11),
    comment='""8 minus 4, 4""',
)

# ""4 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(4, 8, 44),
    comment='""4 times 11 will give me 44""',
)

# ""Divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44/4=11"",
    resulting_state=(8, 11),
    comment='""Divided by 4""',
)

# ""8 times 4 is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(4, 11, 32),
    comment='""8 times 4 is 32""',
)

# ""32 divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32/11=2.91"",
    resulting_state=(2.91, 4),
    comment='""32 divided by 11. 2.9""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 11, 16),
    comment='""4 times 4 is 16""',
)

# ""16 plus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8=24"",
    resulting_state=(11, 24),
    comment='""16 plus 8 is 24""',
)

# ""4 plus 8 should give me 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(4, 11, 12),
    comment='""4 plus 8 should give me 12""',
)

# ""12 plus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(4, 23),
    comment='""12 plus 11. Nah, that\'s going to be 23""',
)

# ""8 divided by 4. 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 4, 11),
    comment='""8 divided by 4. 2""',
)
```"
1714,"[2,6,6,7]",(6x6),180," Target number 24, 6 plus 6 is 12. Okay, 6 minus 2 is 4, 4 times 6 is 24, so I know. We'll do 7 minus 6 is 1. No, 6 plus 6 is 12. We gotta get that 7 in there soon. We will do 6 plus 7 is 13. 7 plus 2 is 9. 9 plus 6. 7 plus 2 is 9. 9 plus 6 is 15. 15 plus 6 is 21. 6 minus 2 is 4. 9 plus 2 is 4. I think I can only use the numbers once, but if not, I would call it 6 minus 6, which is 0. Oh yes, 6 minus 6 is 0. 0 times 2 times... 7... is 14. That's not gonna be right. Unless I can... No, because I can't use the numbers again. Err, delete, delete, delete, delete, delete. 7 minus 6 is 1. 6 plus 6 is 12. Mmm... 6 times 6 is 36. 6 times 6 is 36. 36 minus... 36... minus 7 plus 9... or 7 plus 2... 36 minus 9 is... 26... 27... No, 25. So...","```python
start_state = (2, 6, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(2, 7, 12),
    comment='""6 plus 6 is 12""',
)

# ""6 minus 2 is 4, 4 times 6 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-2)*6=24"",
    resulting_state=(7, 24),
    comment='""6 minus 2 is 4, 4 times 6 is 24""',
)

# ""7 minus 6 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 2, 6),
    comment='""7 minus 6 is 1""',
)

# ""6 plus 7 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(2, 6, 13),
    comment='""6 plus 7 is 13""',
)

# ""7 plus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(6, 6, 9),
    comment='""7 plus 2 is 9""',
)

# ""9 plus 6 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(6, 15),
    comment='""9 plus 6 is 15""',
)

# ""15 plus 6 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+6=21"",
    resulting_state=(21,),
    comment='""15 plus 6 is 21""',
)

# ""6 minus 2 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-2=4"",
    resulting_state=(4, 6, 7),
    comment='""6 minus 2 is 4""',
)

# ""6 minus 6 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-6=0"",
    resulting_state=(0, 2, 7),
    comment='""6 minus 6 is 0""',
)

# ""0 times 2 times... 7... is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""0*2*7=14"",
    resulting_state=(14,),
    comment='""0 times 2 times... 7... is 14""',
    result_calc_error=True,
)

# ""7 minus 6 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 2, 6),
    comment='""7 minus 6 is 1""',
)

# ""6 plus 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(2, 7, 12),
    comment='""6 plus 6 is 12""',
)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 7, 36),
    comment='""6 times 6 is 36""',
)

# ""36 minus... 7 plus 2"" participant combines numbers to make 9
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(36, 9),
    comment='""36... 7 plus 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-9=27"",
    resulting_state=(27,),
    comment='""36 minus 9 is... 26... 27... No, 25"" - participant seems unsure of calculation',
    result_calc_error=True,
)
```"
1719,"[8,9,9,12]",,180," Target number 24. 9 plus 9 is 18. 18 plus 12 is 30. 30 minus 8 is 22. 9 plus 8 is 17. 17. 9 plus 8 is 17. 17 minus 9. No, 9 plus 12 is 9. Okay, 9 plus 9 is 18. 18. So if we have 12. 12 minus 9 is 3. 3 times 8 is 24. 12. Okay, wait. 12 minus 9. Take away 9 is 3. 12 minus 9 is 3. And 3 times 8 is 24, no, because I only saw for 9, oh god, 9 plus, 9 times 9 is 81, 9 times 9 is 8, oh, I'm just afraid it's going to do, 84, 96, 108, 108 minus 72, there'll still be 38. Okay, um, 9 times 9 minus 8 is 1. 9 plus 12 is 22. Let's see, 12 minus 8 is 4. 4 times 9 is 36. 36 minus 9. No.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(8, 12, 18),
    comment='""9 plus 9 is 18""',
)

# ""18 plus 12 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+12=30"",
    resulting_state=(8, 30),
    comment='""18 plus 12 is 30""',
)

# ""30 minus 8 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-8=22"",
    resulting_state=(22,),
    comment='""30 minus 8 is 22""',
)

# Going back to start state for ""9 plus 8 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(9, 12, 17),
    comment='""9 plus 8 is 17""',
)

# ""9 plus 12 is 9"" seems to be a transcription error

# ""9 plus 9 is 18"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(8, 12, 18),
    comment='""9 plus 9 is 18""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""12 minus 9 is 3""',
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(9, 24),
    comment='""3 times 8 is 24""',
)

# ""9 times 9 is 81""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(8, 12, 81),
    comment='""9 times 9 is 81""',
)

# ""9 times 9 minus 8 is 1"" - participant seems to be trying something new
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9-8=73"",
    resulting_state=(12, 73),
    comment='""9 times 9 minus 8 is 1"" - though their calculation seems off',
)

# ""9 plus 12 is 22"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12=22"",
    resulting_state=(8, 9, 22),
    comment='""9 plus 12 is 22"" - calculation error',
    result_calc_error=True,
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 9, 9),
    comment='""12 minus 8 is 4""',
)

# ""4 times 9 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(9, 36),
    comment='""4 times 9 is 36""',
)

# ""36 minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-9=27"",
    resulting_state=(27,),
    comment='""36 minus 9""',
)
```"
1722,"[1,11,12,12]",12x((12-11)+1),116," Math. So, we have three potential 12s here. The problem is, we only need two. So, 12 times 12 is 24. 12 times 1 would equal that one. Okay, that would be fine. I don't know how to get 24 from here. Like, 12 plus 12 would be 5. 11 plus 1 would equal 12. 11 plus 1 minus 12 would equal 0. 1 minus 12 would equal, okay, oh, 12 minus 1. 12 minus 11 would equal 5. 5 minus 11 would equal 1. Oh, here we go, here we go, okay. So, 12 times 11 plus 1. No. Minus 12, that would equal 0. Umm, hmmm. Oh, oh. 12 minus 11, that would equal 1. Plus 1. Yeah? No. No, no, no. Back. That's 1. Plus 1. I need more brackets. 12 minus 11 plus 1.","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 12 is 24"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 times 12 is 24"" - this is a calculation error',
    result_calc_error=True,
)

# ""12 plus 12 would be 5"" - seems to be a transcription error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12 would be 5"" - seems to be a transcription error',
)

# ""11 plus 1 would equal 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 12),
    comment='""11 plus 1 would equal 12""',
)

# ""11 plus 1 minus 12 would equal 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1-12=0"",
    resulting_state=(0, 12),
    comment='""11 plus 1 minus 12 would equal 0""',
)

# ""12 minus 11 would equal 5"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=5"",
    resulting_state=(1, 5, 12),
    comment='""12 minus 11 would equal 5"" - calculation error',
    result_calc_error=True,
)

# ""12 minus 11 would equal 1"" - participant corrects their error
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 12),
    comment='""12 minus 11 would equal 1""',
)

# ""Plus 1"" - participant adds the 1 from the start state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 12),
    comment='""Plus 1""',
)

# Based on their final answer, they multiply this by 12
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment=""Based on their final answer 12x((12-11)+1), they multiply 12 by 2"",
)
```"
1729,"[3,3,7,13]",((7x3)-13)x3,174," Target number 24, so 3 plus 7 is 10, plus 23, that would be 20, that would be 23, that would be 26. Okay, I'm going to go with 13 minus 3 is 10, times 7 is 70, divided by 3 is something. 7 minus 3, divided by 3, 7 minus 6, hey I found a 6, nice, plus 13, we're close, I can feel it. 13 minus 3 divided by 3 would be 12, plus 7, that's 21, 19. Uh, damn. So 3 times 7 is 21, I think that's right. 3 times 7 plus 3, that would equal 24. But, we have a 13, just hanging out, no reason for it. But that's the number. We have the issue with. 13 minus 7 is 6. Okay. 13 minus 7 is 6. 3 plus 3 is 6. We need a 4. We're 12. Hmm. What's, so 21 minus 13 would equal 9? No, 8. Times 3. I think that's right. So, um. 21, 7 times 3. Minus, oh, put that back. Minus 13 would equal 8. Times 3 would equal 24. Times 3, damn you.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 plus 7 is 10, plus 23, that would be 20, that would be 23, that would be 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7+13+3=26"",
    resulting_state=(26,),
    comment='""3 plus 7 is 10, plus 23, that would be 20, that would be 23, that would be 26""',
)

# ""13 minus 3 is 10, times 7 is 70, divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-3)*7/3=23.33"",
    resulting_state=(23.33,),
    comment='""13 minus 3 is 10, times 7 is 70, divided by 3""',
)

# ""7 minus 3"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(3, 4, 13),
    comment='""7 minus 3""',
)

# ""13 minus 3 divided by 3 would be 12, plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-3)/3+7=10.33"",
    resulting_state=(10.33,),
    comment='""13 minus 3 divided by 3 would be 12, plus 7""',
)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(3, 13, 21),
    comment='""3 times 7 is 21""',
)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7 is 6""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 7, 13),
    comment='""3 plus 3 is 6""',
)

# ""21 minus 13 would equal... 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*3)-13=8"",
    resulting_state=(3, 8),
    comment='""21 minus 13 would equal... 8""',
)

# ""Times 3 would equal 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""Times 3 would equal 24""',
)
```"
1731,"[1,3,3,7]",,180," Alright, 24, so we need 4 and 6, or 6 and 4, 7 minus 3 is 4, and I need a 4, and that gives me 2, no. So 2 times 3 is 6, no, 7, 7 is poopy, 6, 6 times 6 is 36, no, that's not going to work. I want 6, no, 7 minus 3, which gives me 4, and 3 minus 1 gives me 2, so that's not going to work. So I'm going to try to do 7 minus 1 is 6, and I need that to be a 4. So I have a 4 there, so I can't make that a 6. 6, and then I have another 6, so I'm going to do, can I already get something, 18. No, I have a 4, and I want to make 4 times 3 is 12, that's not going to work. Oh, 3 minus 1 is 2, times 3 is 6, that's not going to work. 7 minus 1 is 6, 6, no, I can't make 3 and 3, I make that 2, I can't do anything with that stupid 6. 7, I make that 4, 4 times 3 is, no, I need to make 4 times 3, I need 4 times 6, so I'm going to make the 3 and the 1, 6, which is not going to happen. I make that 4, I can make that a 6, I can't make that a 4, oh my gosh. 3 minus 1 is 2, and I can do 7 plus 1 is 8, times 3 is 24, and then I got that other 3 there. So, I'm going to get rid of that 3, oh, I've got an 8 here, I don't want to do times 6, so I can't really do anything, I guess, 6 plus 7 is, no, it's not going to work, 13. Oh, well, I guess this one's just a bust, because I cannot figure it out, 4, and there's another 4, but it's not going to work. So, the only other thing I can do is, 7 minus 1 is 6, I guess you keep going back to that. 6 minus 3 is 3, can't do anything there. 6 and 6 is 24, 36, not 24. Okay, well, I think that this one, okay, yes, I got it. Okay, so, 7.","```python
start_state = (1, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""so we need 4 and 6, or 6 and 4"" - participant sets subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""so we need 4 and 6, or 6 and 4""',
)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(1, 3, 4),
    comment='""7 minus 3 is 4""',
)

# ""3 minus 1 gives me 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-1=2"",
    resulting_state=(2, 4),
    comment='""3 minus 1 gives me 2""',
)

# ""7 minus 1 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(3, 3, 6),
    comment='""7 minus 1 is 6""',
)

# ""3 minus 1 is 2, times 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3-1)*3=6"",
    resulting_state=(6, 7),
    comment='""3 minus 1 is 2, times 3 is 6""',
)

# ""7 plus 1 is 8, times 3 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+1)*3=24"",
    resulting_state=(3, 24),
    result_calc_error=True,  # This is an error because 1 can only be used once
    comment='""7 plus 1 is 8, times 3 is 24""',
)

# ""7 minus 1 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(3, 3, 6),
    comment='""7 minus 1 is 6""',
)

# ""6 minus 3 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3),
    comment='""6 minus 3 is 3""',
)
```"
1733,"[4,4,9,11]",((11-9)+4)x4,117," I'm going to do 7 and 5. Nope. I'm going to do 11 minus 9, which is 2, times 4 is 8. No, I need that to be a 3, so I need a 6. 11 minus 4 is 7. And I can't make that, but I can do 7. 7. No. 9 minus 4, no. So, 11 minus 4 is 7. 9 minus 4 is 5. 5 times 4 is 20. No, that's not going to work. 11 times 4 is 44. No, that's not going to work. 9 times 4 is 36. 36 minus 11 is 25. Minus 4 is not 24. So, I need it to be a 3 and an 8, a 4 and a 6. 11 minus 9 is what? 2. 2 times 16. It's not 24. 2 times 12 is 24. So, 4 and then that's 11 minus 2. And then 4 is 8 times 4. No, I need it to be a 6. Okay, okay, I got it. Okay, so 11 minus 9. 9 makes it 2. Plus 4 makes it 6. Okay, so I need it. Crap it. Delete, delete, delete, delete, delete. Okay, so I need to do I need to do two sets of parentheses. 11 minus 9, which is 2, plus 4, which is 6, and then I need to close that in. And then I need to times that by 4. Go!","```python
start_state = (4, 4, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 9, which is 2, times 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-9)*4=8"",
    resulting_state=(4, 8, 9),
    comment='""11 minus 9, which is 2, times 4 is 8""',
)

# ""11 minus 4 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(4, 7, 9),
    comment='""11 minus 4 is 7""',
)

# ""9 minus 4 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-4=5"",
    resulting_state=(4, 5, 11),
    comment='""9 minus 4 is 5""',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(11, 20),
    comment='""5 times 4 is 20""',
)

# ""11 times 4 is 44""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=44"",
    resulting_state=(4, 9, 44),
    comment='""11 times 4 is 44""',
)

# ""9 times 4 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(4, 11, 36),
    comment='""9 times 4 is 36""',
)

# ""36 minus 11 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-11=25"",
    resulting_state=(4, 25),
    comment='""36 minus 11 is 25""',
)

# ""Minus 4 is not 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-4=21"",
    resulting_state=(21,),
    comment='""Minus 4 is not 24""',
)

# ""11 minus 9 is what? 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 4, 4),
    comment='""11 minus 9 is what? 2""',
)

# Finally, the participant finds the solution: ""11 minus 9, which is 2, plus 4, which is 6, and then I need to close that in. And then I need to times that by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""((11-9)+4)*4=24"",
    resulting_state=(24,),
    comment='""11 minus 9, which is 2, plus 4, which is 6, and then I need to close that in. And then I need to times that by 4""',
)
```"
1734,"[2,2,5,11]",(11-5)x(2+2),10," Okay, next. 6 and 4. Okay, so I'm going to do parentheses 11 minus 5, which gives me 6, times that by 2 plus 2, which is 4. 6 times 4 is 24.","```python
start_state = (2, 2, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 and 4"" suggests the participant is setting subgoals of getting 6 and 4
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 and 4"" suggests participant wants to get these numbers',
)

# ""11 minus 5, which gives me 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(2, 2, 6),
    comment='""11 minus 5, which gives me 6""',
)

# ""2 plus 2, which is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 6),
    comment='""2 plus 2, which is 4""',
)

# ""6 times 4 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""6 times 4 is 24""',
)
```"
1736,"[8,9,11,11]",,180," Oh, 11 minus 9 is 2. 11 minus 8. Okay, 11 minus 8 is 3. Okay, so I'm going to do, do, do, do, do. 11 minus 9, which is 3, times 11 is 33. Minus 8 is 25. 11 minus 9 is 2. 11 minus 8 is, okay, 2 times 8 is 16. No, it's not. 2 times 11 is 32. No, I'm sorry. Let's see. 11 minus 9 is 2. 11 minus 9 is 3. 2 and 3. 2 and 3. Remember, 2 and 3. 9 times 2 is 18. No. 8 times 2 is 16. No. 22, and then I can't make that 2. 22. 2 and 36. No. 9 plus, all right, 22 plus 9. No, it's not going to work. 20 plus 8 is 28. Nope, not going to work. 11 minus 9 is 3, times 11 is 33. Nope, not going to work. 11 minus 8. I mean, 11 minus 9 is 2, which is 16. 11 minus 9 is 2, times 8, which is 16. No. 11 plus 11 is 22. Plus. No. Ah. This one might be a wash too. 20. 20. And 11 minus 8 is not 4. 17. Nope. I was going to make maybe that 1. Nope. I got to find a way to make that 3, and I can't make that 3. Oh, can I do that? Can I do 11 minus 9, which is 2? No. 11 minus 9 is 2. 9 divided by 11 is 1. No. Okay. I can't figure this one out. 9. No, I don't want that. I want 9, 10, 11, 12. Now I got that 11. So it's not going to work. I can't figure this one out. 11 minus 8 is 3. 11 minus 9 is...","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 8, 11),
    comment='""11 minus 9 is 2""',
)

# ""11 minus 8 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 9, 11),
    comment='""11 minus 8 is 3""',
)

# ""11 minus 9, which is 3, times 11 is 33. Minus 8 is 25"" - calculation error on 11-9=3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-9)*11-8=25"",
    resulting_state=(25,),
    comment='""11 minus 9, which is 3, times 11 is 33. Minus 8 is 25""',
    result_calc_error=True,
)

# After getting 2 from 11-9, ""2 times 8 is 16""
curr_state = graph.move_to_node((2, 8, 11))
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(11, 16),
    comment='""2 times 8 is 16""',
)

# After getting 2 from 11-9, ""2 times 11 is 22""
curr_state = graph.move_to_node((2, 8, 11))
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(8, 22),
    comment='""2 times 11 is 22""',
)

# ""11 minus 9 is 3, times 11 is 33"" - calculation error on 11-9=3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-9)*11=33"",
    resulting_state=(8, 33),
    comment='""11 minus 9 is 3, times 11 is 33""',
    result_calc_error=True,
)

# ""11 minus 9 is 2, times 8, which is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-9)*8=16"",
    resulting_state=(11, 16),
    comment='""11 minus 9 is 2, times 8, which is 16""',
)

# ""11 plus 11 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(8, 9, 22),
    comment='""11 plus 11 is 22""',
)

# ""9 divided by 11 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/11=1"",
    resulting_state=(1, 8, 11),
    comment='""9 divided by 11 is 1""',
    result_calc_error=True,
)

# ""11 minus 8 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 9, 11),
    comment='""11 minus 8 is 3""',
)
```"
1740,"[1,1,7,10]",(1+1)x7+10,85," Okay, so I have the target number 24, and I'm looking to get 24 using 1, 1, 7, 10. Okay, so if I get to 8, I'm trying to see. So, either 8 and 3. Okay, so I can't do that, so that would be 5. If I do 1, 1, that's 2. 14. Okay, so if I do 1 plus 1. That's 2. And then multiply. Let's press this delete. Let's multiply by 7, and then add 10.","```python
start_state = (1, 1, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I get to 8"" suggests participant is setting a subgoal
graph.set_subgoal(
    (8,),
    state_after_subgoal=(24,),
    comment='""if I get to 8""',
)

# ""1, 1, that's 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 7, 10),
    comment='""1, 1, that\'s 2""',
)

# ""multiply by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(10, 14),
    comment='""multiply by 7""',
)

# ""and then add 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(24,),
    comment='""and then add 10""',
)
```"
1741,"[1,4,5,11]",(5x1),180," Okay, so I'm looking for the target number 24. I have 1, 4, 5, and 11. So, what I'm thinking right now is I can go, trying to get to 12, or I can get, that would be 9. 9 or 8. Okay, so, either that can get me to 16, maybe. Would that be, that would be 15 or 16. That's 16. So, if I go 16. 16 plus, hmm, that wouldn't work. Okay. Uh, we could do 5 times 4 is 20. Uh, that wouldn't be right. Okay. Okay, so, 11 or 10. Ooh, this is a difficult one. Okay, so, 1. I don't know if I multiply. 4. 4. Times. Times 1, that's 4. And. Hmm. That's 4. 5 is 9. So, I add 5. That's 20. So, that's not going to be right. Okay. Let's try 5 times 1. And. Okay. Now, that's 20. Okay. Okay. Okay.","```python
start_state = (1, 4, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""trying to get to 12"" suggests setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""trying to get to 12""',
)

# ""that would be 9"" - participant seems to be adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(1, 9, 11),
    comment='""that would be 9""',
)

# ""that would be 15 or 16. That's 16"" - participant seems to be adding 11+4+1
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4+1=16"",
    resulting_state=(5, 16),
    comment='""that would be 15 or 16. That\'s 16""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 11, 20),
    comment='""5 times 4 is 20""',
)

# ""Times 1, that's 4"" - participant multiplies 4*1
new_state = graph.explore_operation(
    curr_state,
    operation=""4*1=4"",
    resulting_state=(4, 5, 11),
    comment='""Times 1, that\'s 4""',
)

# ""5 is 9"" - participant seems to be adding 4+5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(9, 11),
    comment='""5 is 9"" - participant seems to be adding 4+5',
)

# ""That's 20"" - participant may be adding 9+11
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(20,),
    comment='""That\'s 20"" - participant may be adding 9+11',
)

# ""Let's try 5 times 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*1=5"",
    resulting_state=(4, 5, 11),
    comment='""Let\'s try 5 times 1""',
)

# ""that's 20"" - participant may be adding numbers again to get to 20
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+4+11=20"",
    resulting_state=(20,),
    comment='""that\'s 20""',
)

```"
1746,"[5,10,13,13]",5x(10x13)/13,181," Okay, so we have 5, 10, 13, and 13. So, 13 minus 13 is 0. We can add 10 or 50, that would be 50. This would be 130. So, if we do 130 divided by 13. Okay, let's do 130 divided by 13 plus 5. Okay. Okay, so we do 10 divided by 13, which is 10. close file, right? Okay, so, um, I'm looking, okay, so let's do, let's do, let's do, one-thirty, hold on, one-thirty, one-thirty, multiply by five, and, um, so if we do five times thirteen, and then divide it by thirteen, right? Okay. Um, so you gotta do five, ten, ten, thirteen, and then divide it by thirteen. How numbers are you?","```python
start_state = (5, 10, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 13 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-13=0"",
    resulting_state=(0, 5, 10),
    comment='""13 minus 13 is 0""',
)

# ""We can add 10 or 50, that would be 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(13, 13, 50),
    comment='""We can add 10 or 50, that would be 50""',
)

# ""This would be 130"" - participant likely multiplying 10*13
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(5, 13, 130),
    comment='""This would be 130""',
)

# ""130 divided by 13 plus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""130/13+5=15"",
    resulting_state=(15,),
    comment='""130 divided by 13 plus 5""',
)

# ""10 divided by 13, which is 10"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/13=10"",
    resulting_state=(5, 10, 13),
    comment='""10 divided by 13, which is 10"" seems to be a calculation error',
    result_calc_error=True,
)

# ""one-thirty multiply by five"" participant tries multiplying 130 by 5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13*5=650"",
    resulting_state=(13, 650),
    comment='""one-thirty multiply by five""',
)

# ""five times thirteen, and then divide it by thirteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*13/13=5"",
    resulting_state=(5, 10),
    comment='""five times thirteen, and then divide it by thirteen""',
)

# Based on their final response of 5x(10x13)/13, they must have tried this calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*(10*13)/13=50"",
    resulting_state=(50,),
    comment=""Based on their final response"",
)
```"
1748,"[6,9,9,11]",((9+11)6/(9),180," All right, so this is 6, 9, 9, and 11, 11 plus 9, yes, 20. Uh, you can repeat your doom. And multiply by 6. Of course. Very good. Well. Divided by 11. All numbers are used. Okay, so. Okay. Okay. So. That gives me 20 times 6. 6 divided by 9, right? Multiplied by 6. Divided by 9.","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 9, yes, 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(6, 9, 20),
    comment='""11 plus 9, yes, 20""',
)

# ""multiply by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20*6=120"",
    resulting_state=(9, 120),
    comment='""multiply by 6""',
)

# ""Divided by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""120/9=13.33"",
    resulting_state=(13.33,),
    comment='""Divided by 9""',
)

# Based on their submitted response ((9+11)6/(9), they seem to have settled on:
# First adding 9+11=20
# Then multiplying by 6 to get 120
# Then dividing by 9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9+11)*6/9=13.33"",
    resulting_state=(13.33,),
    comment=""Based on submitted response ((9+11)6/(9)"",
)
```"
1750,"[5,6,7,8]",(6x,180," Oh, shit. Let's see. 8 times 5 is 40. Divided by minus- 40 minus 17. Minus 13 is 26, so no. 8 times 7 is 56. Divided by 6? Let's see. 56 divided by 6. No. It's not possible. 42. Minus 13? No. 5 times 7? 35. Minus 6? 48. I don't know. I don't know. Um... 5 times 6... times 7... 6 times 7 is 42. Plus 8 is 50. Divided by 5 is 10. No. Hmm... Let's see. 5 times 7... I'm seeing 8 and 3 derivative, uh, let's see, 12 minus 5 by 6 is 3, ah, okay, no, no, nevermind, to 16, hmm, let's see, let's see, 6 times,","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 7, 40),
    comment='""8 times 5 is 40""',
)

# ""8 times 7 is 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(5, 6, 56),
    comment='""8 times 7 is 56""',
)

# ""56 divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/6=9.33"",
    resulting_state=(5, 9.33),
    comment='""56 divided by 6""',
)

# ""5 times 7? 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(6, 8, 35),
    comment='""5 times 7? 35""',
)

# ""6 times 7 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(5, 8, 42),
    comment='""6 times 7 is 42""',
)

# ""Plus 8 is 50""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42+8=50"",
    resulting_state=(5, 50),
    comment='""Plus 8 is 50""',
)

# ""Divided by 5 is 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""50/5=10"",
    resulting_state=(10,),
    comment='""Divided by 5 is 10""',
)

# The rest of the transcript is unclear or incomplete operations
# ""12 minus 5 by 6 is 3"" might be trying to compute something but it's not clear what
# The participant ends with ""6 times"" which matches their final response of ""(6x""
```"
1755,"[3,5,7,9]",,180," Target number 24, 35, 7, 9. So right off the bat, 2, 6, no, 30, no. 9 times 5, 4 times 12, no, 4 times 7, 20, minus 3, 25, no. Let's see, 9 times 3, 9 minus 3, 6, times 5, 30, minus 7, 23, no. 9 times 7, 9 minus 7, 2, times 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1 divided by 3, no, let's see, 5 plus 7, 12, derivative of 8, let's see, 3 plus 5, 8, can you do a 3, no, here, let's see, 5 plus 9, 14, minus 7, 7, so that wouldn't make any sense, let's see, 5 plus 7, 12, minus 9, 3. 10 times 3, no, 12 times 3, 36, minus 9, is that impossible, 36 minus 9, no, 27, let's see, 9 times 5, 45, divided by 3, 15 plus 7 is 22, no. 9 times 7, 63, minus 5, is 58, divided by 3, no, how about 63, minus 3, 60, divided by 7, that's not possible. Let's see. 7 times 3, 21, plus 9, 30, minus 5, 25, no, 7 times 3.","```python
start_state = (3, 5, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(3, 7, 45),
    comment='""9 times 5""',
)

# ""9 times 7"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 5, 63),
    comment='""9 times 7""',
)

# ""9 minus 3, 6, times 5, 30, minus 7, 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-3)*5-7=23"",
    resulting_state=(23,),
    comment='""9 minus 3, 6, times 5, 30, minus 7, 23""',
)

# ""5 plus 7, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(3, 9, 12),
    comment='""5 plus 7, 12""',
)

# ""3 plus 5, 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(7, 8, 9),
    comment='""3 plus 5, 8""',
)

# ""5 plus 9, 14, minus 7, 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9-7=7"",
    resulting_state=(3, 7),
    comment='""5 plus 9, 14, minus 7, 7""',
)

# ""5 plus 7, 12, minus 9, 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7-9=3"",
    resulting_state=(3, 3),
    comment='""5 plus 7, 12, minus 9, 3""',
)

# ""9 times 5, 45, divided by 3, 15 plus 7 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(3, 7, 45),
    comment='""9 times 5, 45""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45/3+7=22"",
    resulting_state=(22,),
    comment='""divided by 3, 15 plus 7 is 22""',
)

# ""9 times 7, 63, minus 5, is 58, divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 5, 63),
    comment='""9 times 7, 63""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(63-5)/3=19.33"",
    resulting_state=(19.33,),
    comment='""minus 5, is 58, divided by 3""',
)

# ""63, minus 3, 60, divided by 7""
curr_state = graph.move_to_node((3, 5, 63))
new_state = graph.explore_operation(
    curr_state,
    operation=""(63-3)/7=8.57"",
    resulting_state=(5, 8.57),
    comment='""63, minus 3, 60, divided by 7""',
)

# ""7 times 3, 21, plus 9, 30, minus 5, 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+9-5=25"",
    resulting_state=(25,),
    comment='""7 times 3, 21, plus 9, 30, minus 5, 25""',
)
```"
1763,"[7,8,8,11]",,180," 11 minus 8 is 3, times 8 is 24. 11 plus 7 is 18. It's not going to do me anything. 11 times 7 minus 8. 11 minus 8 is 3. 8 minus 7 is 1. It's not going to do me anything. 8 plus 15 times 3 is 45. 8 times 7 is 56. Minus 11 minus 8 is 37. 7 times 8. 9 times 8 divided by 11. No. Do 11 minus 7. Or 11 minus 7, which is 4. Plus 8. Plus 8 is 20. 8 times 8 divided by 4 is 16. 18 plus 8 is 26. 18 times 8 is 64 divided by 4.","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 8 is 3, times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8)*8=24"",
    resulting_state=(7, 24),
    comment='""11 minus 8 is 3, times 8 is 24""',
)

# ""11 plus 7 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(8, 8, 18),
    comment='""11 plus 7 is 18""',
)

# ""11 times 7 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7-8=69"",
    resulting_state=(8, 69),
    comment='""11 times 7 minus 8""',
)

# ""11 minus 8 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 7, 8),
    comment='""11 minus 8 is 3""',
)

# ""8 minus 7 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 8, 11),
    comment='""8 minus 7 is 1""',
)

# ""8 plus 15 times 3 is 45"" - not clear where 15 comes from, might be a transcription error
# ""8 times 7 is 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(8, 11, 56),
    comment='""8 times 7 is 56""',
)

# ""Minus 11 minus 8 is 37""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56-11-8=37"",
    resulting_state=(37,),
    comment='""Minus 11 minus 8 is 37""',
)

# ""11 minus 7, which is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 8, 8),
    comment='""11 minus 7, which is 4""',
)

# ""Plus 8. Plus 8 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8+8=20"",
    resulting_state=(20,),
    comment='""Plus 8. Plus 8 is 20""',
)

# ""8 times 8 divided by 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8/4=16"",
    resulting_state=(16,),
    comment='""8 times 8 divided by 4 is 16""',
)
```"
1767,"[6,6,11,12]",,180," 12 minus 6 is 6, times 6 which is 36, minus 11 is 25, and 12 minus 11 is 1, and 12 minus 6 is 6. Let's see, do you think that's going to get me to 24? Eleven minus 6 is 5. Times 12 is 10. Twelve minus 6 is 6. Twelve plus 6 plus 6, that will work, what am I going to do with the 11? Twelve plus 6 plus 6, that will work, what am I going to do with the 11? Twelve plus 6 plus 6 plus 6 is 7. So yeah, I can turn the 11 and do a 6. I can do a 5. Eleven plus 6 plus 6 is 23. Fifteen. Nine. 11 is really throwing me off, 12 plus 11, 11 minus 6 is 5, plus 12 plus 6, that's going to give me 23, 11 minus 6, times 6, 30, that's not going to do anything, 5 times, 5 times 12, divided by 6 is 10, let's say 11 times 12. 12 times 6, divided by 6, that's 23.","```python
start_state = (6, 6, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 6 is 6, times 6 which is 36, minus 11 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-6)*6-11=25"",
    resulting_state=(25,),
    comment='""12 minus 6 is 6, times 6 which is 36, minus 11 is 25""',
)

# ""12 minus 11 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 6, 6),
    comment='""12 minus 11 is 1""',
)

# ""12 minus 6 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 6, 11),
    comment='""12 minus 6 is 6""',
)

# ""Eleven minus 6 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(5, 6, 12),
    comment='""Eleven minus 6 is 5""',
)

# ""Times 12 is 10"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*12=10"",
    resulting_state=(6, 10),
    comment='""Times 12 is 10"" seems to be a calculation error',
    result_calc_error=True,
)

# ""Twelve plus 6 plus 6"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6+6=24"",
    resulting_state=(11, 24),
    comment='""Twelve plus 6 plus 6""',
)

# ""Eleven plus 6 plus 6 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6+6=23"",
    resulting_state=(12, 23),
    comment='""Eleven plus 6 plus 6 is 23""',
)

# ""11 minus 6 is 5, plus 12 plus 6, that's going to give me 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-6)+12+6=23"",
    resulting_state=(23,),
    comment='""11 minus 6 is 5, plus 12 plus 6, that\'s going to give me 23""',
)

# ""11 minus 6, times 6, 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-6)*6=30"",
    resulting_state=(12, 30),
    comment='""11 minus 6, times 6, 30""',
)

# ""12 times 6, divided by 6, that's 23"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6/6=23"",
    resulting_state=(11, 23),
    comment='""12 times 6, divided by 6, that\'s 23"" seems to be a calculation error',
    result_calc_error=True,
)
```"
1768,"[4,7,8,12]",(8x7),180," Uh, 24. So, um, well, 12 and 12 is what we would need there. Um, 4 plus 7 is 11, plus 1 plus 8 is 19. 31, that's too much. So, what if it was 27 minus 4? That would be 23. So that wouldn't work. What if it was, um, 8 times 4 would be 32. Uh, 7 times 4 is 28. Um, hmm. 12 and 12 is 24, but that leaves 7 over. Uh, 4. 4 times... What about 5 and 9? No, that wouldn't work. 20 minus 7 is 13. Times 4, that wouldn't work. Uh... I need to get to 6, right? So, 20 minus 7 is 13. That won't work. Uh... Can I get to 6 with these numbers? No, not really. 15, 12 is 3. That won't work. 32... Uh, that won't work. Uh, 56 minus 32. Okay, that's what I need. So, it would be... 8 times 7. Uh... Thank you for watching.","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12 is what we would need there"" suggests participant is setting a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""12 and 12 is what we would need there""',
)

# ""4 plus 7 is 11, plus 1 plus 8 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7+8=19"",
    resulting_state=(12, 19),
    comment='""4 plus 7 is 11, plus 1 plus 8 is 19""',
)

# ""8 times 4 would be 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 12, 32),
    comment='""8 times 4 would be 32""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 12, 28),
    comment='""7 times 4 is 28""',
)

# ""8 times 7"" - participant found that 56 (8*7) is what they needed
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(4, 12, 56),
    comment='""8 times 7""',
)
```"
1775,"[3,6,12,12]",(12/12)(+3)(x6),181," All right, 12 and 12, or 9 or 18, 6, add them, I'll end up 9 over. If I do 18 minus 12, that would leave me 6, and 12 would be 18, so that won't work. If I do 12 times 3, that's 36. 36, plus 6, minus 12, 36, that's not the right answer. Thank you. Bye. Bye. Bye. Bye. 36 plus 12 be 48 what about division 12 divided by 12 is war oh yeah okay let's see that I'm 12 divided by 12 plus 3 times 6 12 divided by plus 3 times 6 you you you","```python
start_state = (3, 6, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12, or 9 or 18"" seems to be adding 12+6=18 and 3+6=9
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(3, 12, 18),
    comment='""12 and 12, or 9 or 18"" seems to be adding 12+6=18',
)

# ""If I do 18 minus 12, that would leave me 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-12=6"",
    resulting_state=(3, 6),
    comment='""If I do 18 minus 12, that would leave me 6""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""If I do 12 times 3, that's 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(6, 12, 36),
    comment='""If I do 12 times 3, that\'s 36""',
)

# ""36, plus 6, minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36+6-12=30"",
    resulting_state=(30,),
    comment='""36, plus 6, minus 12""',
)

# ""36 plus 12 be 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""36+12=48"",
    resulting_state=(6, 48),
    comment='""36 plus 12 be 48""',
)

# ""12 divided by 12 is war"" (probably meant ""one"")
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 3, 6),
    comment='""12 divided by 12 is war"" (probably meant ""one"")',
)

# ""12 divided by 12 plus 3 times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12/12+3)*6=24"",
    resulting_state=(12, 24),
    comment='""12 divided by 12 plus 3 times 6""',
)
```"
1779,"[1,7,8,10]",(10-7)x1x8,65," It is really hard to say every thought. That is not going to happen. So, knock it off. Stop yelling at me. It's very distracting. Alright, well, 15, 7 plus 8 being 15 is not helpful. But 8 and 10 would be 18. Not helpful. Let's see. Anything give me 3? Yes. Okay, so 10 minus 7 would be 3. 10 minus 7 is 3. Times 1. Okay. Times 8. Right? That's 3 times 1 is 3 times 8.","```python
start_state = (1, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 8 being 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(1, 10, 15),
    comment='""7 plus 8 being 15""',
)

# ""8 and 10 would be 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(1, 7, 18),
    comment='""8 and 10 would be 18""',
)

# ""Anything give me 3?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (3,),
    state_after_subgoal=(24,),
    comment='""Anything give me 3?""',
)

# ""10 minus 7 would be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(1, 3, 8),
    comment='""10 minus 7 would be 3""',
)

# ""Times 1. Okay. Times 8.""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*1*8=24"",
    resulting_state=(24,),
    comment='""Times 1. Okay. Times 8.""',
)
```"
1780,"[4,7,8,12]",,180," Okay, there's my 12. Can I get 2 out of the rest of this? Yes. 8 divided by 4 would be 2, but then there's still a 7 to deal with. 8 and 7 is 15, not helpful. But 8 minus, stop it. Okay. 8 times 3 would be 24, but then I still have 12. Can I get a 2 out of the rest of these? Yes. I know. 12 minus 8 is 4. There's no 6. Is there? Oh my god. I'm talking and there is a microphone because I was just talking to someone on here yesterday. So if you keep interrupting me, I am going to quit this survey. So 12 plus 12, but then there's still a 7. Okay. 12 minus 4 would be 8. Plus 8 plus 7 is not adding up. 7 minus 4 is 3. Jesus. Stop making me click on that thing. 12 minus 7 is 5. Alright. 8 minus 4 is 4. 8 divided by 4. 12 divided by 4. What about 12 divided by 4? No, that's still not helpful because that would be 3. And I still have to get rid of the 7. Okay. Okay, what about... 4 times 8 being 32.","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 4 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 7, 12),
    comment='""8 divided by 4 would be 2""',
)

# ""8 and 7 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(4, 12, 15),
    comment='""8 and 7 is 15""',
)

# ""8 times 3 would be 24"" - participant sets this as a subgoal
graph.set_subgoal(
    subgoal_state=(3, 8),
    comment='""8 times 3 would be 24"" - participant is trying to get 3 from somewhere to multiply by 8'
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 4, 7),
    comment='""12 minus 8 is 4""',
)

# ""12 minus 4 would be 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 8),
    comment='""12 minus 4 would be 8""',
)

# ""Plus 8 plus 7"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+7=23"",
    resulting_state=(23,),
    comment='""Plus 8 plus 7""',
)

# ""7 minus 4 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 8, 12),
    comment='""7 minus 4 is 3""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 8),
    comment='""12 minus 7 is 5""',
)

# ""8 minus 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 12),
    comment='""8 minus 4 is 4""',
)

# ""12 divided by 4"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 7, 8),
    comment='""12 divided by 4""',
)

# ""4 times 8 being 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(7, 12, 32),
    comment='""4 times 8 being 32""',
)
```"
1785,"[5,5,6,11]",(6x5)-(11-5),79," Okay, target number 24. My numbers are 5, 5, 6, and 11. Ooh. So, okay. 11 minus 5 is 7. Okay, might have it. I think I do 11 minus 5. That gives me 7 times. Nope, that's not it. I needed to get something to a 3. What about 6 minus 5 is 1? Nope. 11 minus 6 is 5. That's not it. 5 times 6 is 30. Let's see. 6 times 5. 5 is 30. Let's see. Minus. Oh, I think I got it. 11 minus 5. 11 minus 5 is 6. Yes.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 5 is 7"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=7"",
    resulting_state=(5, 6, 7),
    comment='""11 minus 5 is 7"" - calculation error',
    result_calc_error=True,
)

# ""6 minus 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 5, 11),
    comment='""6 minus 5 is 1""',
)

# ""11 minus 6 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(5, 5, 5),
    comment='""11 minus 6 is 5""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(5, 11, 30),
    comment='""5 times 6 is 30""',
)

# ""11 minus 5 is 6"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(5, 6, 6),
    comment='""11 minus 5 is 6""',
)

# Based on their final answer (6x5)-(11-5), they must have done:
# First compute 6*5=30
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(5, 11, 30),
    comment=""Based on final answer, first computing 6*5"",
)

# Then compute 11-5=6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(30, 6),
    comment=""Based on final answer, computing 11-5"",
)

# Finally subtract to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-6=24"",
    resulting_state=(24,),
    comment=""Based on final answer, subtracting to get 24"",
)
```"
1786,"[3,9,13,13]",(,180," Okay, I've got 13, 13, 9, and 3. So, can I get something to equal 12 times 2? Nope. Can I get something to equal 8 times 3? Mmm, don't think so. Alright, so it might end up being, what's 9 times 3? Nope. Okay, so 13 minus 9 is 3. That's not correct. Alright, 9 plus 3 is 12, but then I can't get 13 and 13 to equal 2. Hmm. 3 times 13 is 39. Minus 13, no. Jesus. 9 plus 13. 9 plus 13 is 24. No, it's not. 9 plus 13 is 22. Ugh, this one is really hard. 13 minus 3 is 10. I feel like I could do something with that. 13 minus 3 is 10. And then, can I get 9 and 13 to somehow equate to 14? Nope. Mmm. 13 minus 9 is 4. Plus. Plus. 13 minus 9. 13. Alright, so that's only 14. I need to double it and I can't do that. Ugh, crap. Alright. Alright. I feel like I'm not gonna get this one. What about division? Ooh. 9 divided by...","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Can I get something to equal 12 times 2?"" - participant sets subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""Can I get something to equal 12 times 2?""'
)

# ""Can I get something to equal 8 times 3?"" - participant sets another subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""Can I get something to equal 8 times 3?""'
)

# ""what's 9 times 3?""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""what\'s 9 times 3?""',
)

# ""13 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=3"",
    resulting_state=(3, 13, 3),
    comment='""13 minus 9 is 3"" - participant makes calculation error',
    result_calc_error=True,
)

# ""9 plus 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(12, 13, 13),
    comment='""9 plus 3 is 12""',
)

# ""3 times 13 is 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(9, 13, 39),
    comment='""3 times 13 is 39""',
)

# ""9 plus 13 is 24. No, it's not. 9 plus 13 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(3, 13, 22),
    comment='""9 plus 13 is 22"" after correcting their error',
)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(9, 10, 13),
    comment='""13 minus 3 is 10""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9 is 4""',
)

# The participant then says ""that's only 14"" but it's not clear what operation they did to get 14

# The participant ends by considering division but doesn't complete any more operations

```"
1793,"[2,8,10,13]",(13x2)-(10-8),126," Okay, 10, 13, 2, and 8. Okay. 13 minus 10 is 9. 8 minus 2 is 6. That's not it. 8 plus 2 is 10. Okay, no. 13 minus 2 is 11. Nope. 10 minus 8 is 2. No. 8 times 2 is 16. Oh my god, I hate this. Oh my god, I hate this. What the hell? 13. Okay, that's not a division. I am talking out loud. 8 minus 2 is 6. 10 minus 6 is 4. No. 13 minus 10 is 3. 10 times 8 is 80. 10 times 2 is 20. Okay. That's not going to work. 13 times 2 is 26. Okay, that might be something. Delete. 13 times 2 is 26. And then how do I, then I can subtract 10 minus 8. And I think that's it.","```python
start_state = (2, 8, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 10 is 9"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=9"",
    resulting_state=(2, 8, 9),
    comment='""13 minus 10 is 9"" - calculation error',
    result_calc_error=True,
)

# ""8 minus 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(6, 10, 13),
    comment='""8 minus 2 is 6""',
)

# ""8 plus 2 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+2=10"",
    resulting_state=(10, 10, 13),
    comment='""8 plus 2 is 10""',
)

# ""13 minus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(8, 10, 11),
    comment='""13 minus 2 is 11""',
)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 2, 13),
    comment='""10 minus 8 is 2""',
)

# ""8 times 2 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(10, 13, 16),
    comment='""8 times 2 is 16""',
)

# ""8 minus 2 is 6. 10 minus 6 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(6, 10, 13),
    comment='""8 minus 2 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 13),
    comment='""10 minus 6 is 4""',
)

# ""13 minus 10 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(2, 3, 8),
    comment='""13 minus 10 is 3""',
)

# ""10 times 8 is 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(2, 13, 80),
    comment='""10 times 8 is 80""',
)

# ""10 times 2 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(8, 13, 20),
    comment='""10 times 2 is 20""',
)

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(8, 10, 26),
    comment='""13 times 2 is 26""',
)

# ""then I can subtract 10 minus 8"" - participant combines previous operations
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2-(10-8)=24"",
    resulting_state=(24,),
    comment='""then I can subtract 10 minus 8"" - participant combines previous operations',
)
```"
1795,"[5,5,7,10]",(7+5)x(10/5),63," Okay, 24. These numbers are bigger than last time, so I might have to subtract. I know 24 is 6 times 4, 8 times 3. Hmm. Wait, can I add them? Okay, 10 plus 10 plus 7 is 27. So, 10, um, ah, I don't like this one. This one is harder. Wait, 7 plus, oh my god, okay, 7 plus 5 is 12, right? So, I know 24 is... 24 is 12 times 2. So, I can make 2 by doing 10 divided by 5. So, that's 12 times 2.","```python
start_state = (5, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 is 6 times 4, 8 times 3"" - participant is setting subgoals
graph.set_subgoal((6, 4), state_after_subgoal=(24,), comment='""24 is 6 times 4""')
graph.set_subgoal((8, 3), state_after_subgoal=(24,), comment='""8 times 3""')

# ""10 plus 10 plus 7 is 27"" - participant tries adding, using both 5s as 10
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+7+10=27"",
    resulting_state=(27,),
    comment='""10 plus 10 plus 7 is 27""',
)

# ""7 plus 5 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(5, 10, 12),
    comment='""7 plus 5 is 12""',
)

# ""24 is 12 times 2"" - participant sets another subgoal after finding 12
graph.set_subgoal((12, 2), state_after_subgoal=(24,), comment='""24 is 12 times 2""')

# ""I can make 2 by doing 10 divided by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 12),
    comment='""I can make 2 by doing 10 divided by 5""',
)

# ""So, that's 12 times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""So, that\'s 12 times 2""',
)
```"
1796,"[7,7,11,12]",,180," Okay, I have a 12. I know 12 times 2 is 24. 8 times 3 is 6 times 4. I don't know what to do with the 7. I don't like this one either. I could do 7 divided by 7 and that would be a 1. But then I would need a 2. I could do 14 minus 11, but that's 3. I could do 11 minus 7, but that's 4. Oh no, I don't like this one. Wait, 14 minus, no. 7 plus 7 is 14 minus 12 is 2, but then I have 11. 7 plus 11 is 18. 7 plus 11 is 18. I would need 6 to make 24, right? 18. 18 plus 6 is 24. 12 minus 7 is 5, so I don't have 6. Oh wait, 19. 7 and 12 is 19. Plus 5 would be 24. I don't like this. 7 plus 12. 12 plus 7 would be 19. I can make 18 with this. I can make 3. 19 plus 3 would be 22. 19. 19 times. If I could make 8. I actually don't know how to do this one. I think I went into time out. Okay. 12 times 11. What numbers do I have to work with? 12 times 11 is 132. 12 times 7 is 84. 11 times 7 is 77. And 7 times 7 is 49. Oh, 49. That is 25 away. 49, that would be 25.","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I know 12 times 2 is 24"" - participant seems to set a subgoal of getting 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""I know 12 times 2 is 24""',
)

# ""7 divided by 7 and that would be a 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 11, 12),
    comment='""7 divided by 7 and that would be a 1""',
)

# ""14 minus 11, but that's 3"" - participant must have used 7+7=14 first
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(11, 12, 14),
    comment='""14 minus 11, but that\'s 3"" - participant first adds 7+7',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-11=3"",
    resulting_state=(3, 12),
    comment='""14 minus 11, but that\'s 3""',
)

# ""11 minus 7, but that's 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 7, 12),
    comment='""11 minus 7, but that\'s 4""',
)

# ""7 plus 7 is 14 minus 12 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7-12=2"",
    resulting_state=(2, 11),
    comment='""7 plus 7 is 14 minus 12 is 2""',
)

# ""7 plus 11 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(7, 12, 18),
    comment='""7 plus 11 is 18""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 7, 11),
    comment='""12 minus 7 is 5""',
)

# ""7 and 12 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(7, 11, 19),
    comment='""7 and 12 is 19""',
)

# ""Plus 5 would be 24"" - participant realizes they need 5 to get to 24
graph.set_subgoal(
    (5, 19),
    state_after_subgoal=(24,),
    comment='""Plus 5 would be 24""',
)

# ""I can make 18 with this""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(7, 12, 18),
    comment='""I can make 18 with this""',
)

# ""12 times 11 is 132""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(7, 7, 132),
    comment='""12 times 11 is 132""',
)

# ""12 times 7 is 84""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(7, 11, 84),
    comment='""12 times 7 is 84""',
)

# ""11 times 7 is 77""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7=77"",
    resulting_state=(7, 12, 77),
    comment='""11 times 7 is 77""',
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(11, 12, 49),
    comment='""7 times 7 is 49""',
)
```"
1797,"[1,1,5,5]",(5+1)x(5-1),18," Okay, this one looks easier. I can make a 6 and I can make a 4. 6 and a 4 multiplied makes 24.","```python
start_state = (1, 1, 5, 5)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can make a 6 and I can make a 4"" - participant is setting subgoals
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""I can make a 6 and I can make a 4""',
)

# ""6 and a 4 multiplied makes 24"" - participant is working backward from goal
# Then they execute their plan with (5+1)x(5-1)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*(5-1)=24"",
    resulting_state=(24,),
    comment='""6 and a 4 multiplied makes 24"" - participant executes plan with (5+1)x(5-1)',
)
```"
1799,"[1,3,6,7]",(6x3)+(7-1),95," I don't like when I have sevens. Okay, 6. I know I can make 6 times 4 or 3 times 8, but I have something always left over. What if I add these? 4 plus 6 is 10 plus 7 is 17. 17. Or I can do 10 and 7. Okay, so 3 times 1. The 1 is interesting. Oh, what if I turn the 7 into an 8? And then I don't. 8 minus 3 is 5. 8 minus 2. Okay. 7 times 7. Okay. 3 times 1 is 3. So I don't like the 1. And then 3 times 6 is 18. Oh my gosh. Okay. 18 minus. No, 18 plus 6. So I'm going to make the 18. 6 times 3. And then I'm going to add. I'm going to add a 6, which I can make by 7 minus 1.","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I know I can make 6 times 4 or 3 times 8"" - participant seems to be setting a subgoal of making 24
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""I know I can make 6 times 4 or 3 times 8""',
)

# ""What if I add these? 4 plus 6 is 10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(1, 3, 13),
    comment='""What if I add these? 4 plus 6 is 10 plus 7 is 17""',
)

# ""3 times 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*1=3"",
    resulting_state=(3, 6, 7),
    comment='""3 times 1 is 3""',
)

# ""3 times 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(1, 7, 18),
    comment='""3 times 6 is 18""',
)

# ""18 plus 6"" participant realizes they need to make 6 from 7-1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(6, 18),
    comment='""which I can make by 7 minus 1""',
)

# Finally they combine everything: ""6 times 3...and then I'm going to add...7 minus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*3)+(7-1)=24"",
    resulting_state=(24,),
    comment='""6 times 3...and then I\'m going to add...7 minus 1""',
)
```"
1801,"[1,5,5,6]",(6x5)-(5+1),60," Okay, 6, 5 plus 5 is 10, plus 1, oh, can I make a, no, I can't make a 4, 6 and 4, 6 and 4, 8 times 3, 12 times 12, oh, I can make 11, I can make 12 times 5, I can make 11, 5, I can make 25 minus 1, I have a 6 left over, I can make 30, oh my gosh, 30 minus 6, 30, so 36 times 5 minus 6, which is 5 plus 1, 30, 30 minus 6 is 25.","```python
start_state = (1, 5, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 5 is 10, plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+1=11"",
    resulting_state=(6, 11),
    comment='""5 plus 5 is 10, plus 1""',
)

# ""can I make a 4"" suggests participant is setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""can I make a 4""',
)

# ""oh, I can make 11"" - participant already made 11 above
# ""I can make 12 times 5"" - participant seems to be trying to multiply numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 5, 30),
    comment='""I can make 30""',
)

# ""30 minus 6"" - but they still have a 6 left
# Based on their submitted answer (6x5)-(5+1), they eventually realize they can subtract (5+1)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-(5+1)=24"",
    resulting_state=(24,),
    comment='Based on submitted answer ""(6x5)-(5+1)"", they subtract (5+1) from 30',
)
```"
1803,"[2,3,5,10]",(10+5-3)x2,59," Okay, yeah, see, stop giving me 7s. I don't like those. These ones are much better. Okay, so I need an 8 and a 3, or a 6 and a 4, or I need, um, okay, 12, 15 minus 3, 15 minus 3, 15, so 15, 10 plus 5 is 15, minus 3 is 12. Oh, wait, I gotta go, uh, minus 3, 12, oh, that one was tricky, times 2.","```python
start_state = (2, 3, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need an 8 and a 3, or a 6 and a 4"" suggests participant is setting subgoals
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""I need an 8 and a 3""',
)
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""or a 6 and a 4""',
)

# ""10 plus 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(2, 3, 15),
    comment='""10 plus 5 is 15""',
)

# ""minus 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-3=12"",
    resulting_state=(2, 12),
    comment='""minus 3 is 12""',
)

# ""times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""times 2""',
)
```"
1805,"[4,4,5,6]",((5-4)x4)x6,59," Alright, so target number is 24. So 4 plus 4 is 8. 8 minus 5, that wouldn't work. Let's see. I'm trying to do some multiplication. I'm not seeing anything here so far that would actually. So 6 times 4 would be 24. And if I multiply that times 1, so I'm going to do double parentheses again. I'm going to do 5 minus 4, which would give me 1. Close that parentheses and multiply that times 4. Close that parentheses and then multiply that times 6. So it should be 1 times 4, which would be 4 times 6, which would be 24.","```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(5, 6, 8),
    comment='""4 plus 4 is 8""',
)

# ""8 minus 5, that wouldn't work""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6),
    comment='""8 minus 5, that wouldn\'t work""',
)

# ""6 times 4 would be 24"" - participant realizes they need to get to 24 by multiplying by 6
# This seems like setting a subgoal to get 4 to multiply by 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 would be 24"" - participant realizes they need to get to 24 by multiplying by 6',
)

# ""5 minus 4, which would give me 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 4, 6),
    comment='""5 minus 4, which would give me 1""',
)

# ""multiply that times 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*4=4"",
    resulting_state=(4, 6),
    comment='""multiply that times 4""',
)

# ""multiply that times 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""multiply that times 6""',
)
```"
1807,"[2,2,3,11]",,180," Okay, so target number again, 24. So 4. Let's see, 11. So in order to get 24, we would need 13. So how could I get 13? 3. No, that wouldn't work. So what if we did 11 times 2? That would be 22. So 11 times 2 would give me 22. And then if I add 3 to that, that would be 25. No, that wouldn't work. Hmm. So... Let's see. I've got to try this again. 11. Let's see. Okay. Again, I'm still talking out loud. I hope that you're hearing me okay. I'm just going to move my computer again. The test worked at the beginning, so I'm not sure why it's acting like it's not hearing me now. So let's see. So if we did 11 times 2, that would be 22. So let's see. Hmm. 24. Let's see. So 24 minus 3? No, that wouldn't work. So 22. Let's see. If we did 11 times 2... times two again. So I'm going to get to 22. Um, this one's harder. Um, and then, hmm. Okay. Okay. Four. Let's see. Three times two would be six. Six times two. And I'm, I feel like it's showing that it's working. So I'm not sure why it keeps giving me the pop-up. So I'm just going to","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So in order to get 24, we would need 13"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (13, 11),
    state_after_subgoal=(24,),
    comment='""So in order to get 24, we would need 13""',
)

# ""11 times 2? That would be 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 3, 22),
    comment='""11 times 2? That would be 22""',
)

# ""And then if I add 3 to that, that would be 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+3=25"",
    resulting_state=(2, 25),
    comment='""And then if I add 3 to that, that would be 25""',
)

# Participant goes back to start state and tries 11*2 again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 3, 22),
    comment='""if we did 11 times 2, that would be 22""',
)

# ""Three times two would be six""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(2, 6, 11),
    comment='""Three times two would be six""',
)

# ""Six times two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(11, 12),
    comment='""Six times two""',
)

```"
1808,"[1,2,8,10]",((8-1)x2)+10,180," Okay, so 24. Again, so 8 times 3, so that would get 24, but we have the 10 here. 10 plus 8 is 18. 19, 20. That wouldn't work. 16. Let's see, 8. Hmm, let's see. Could I do... 10 times 2 would give me 20. 20. Or let's see, how could I get to like 48? I'm just wondering if I could do something divided by 2, but that won't work either. Um, 10 minus 2 would be 8. 10 minus 1 would be 9. 9. That won't work. Um, 8. 18. 22. Divide it by 2 would give me four. Hmm. Could I do two? I mean, I can only use every number once, right? Yeah. Okay. Okay, man, these are getting harder. If I could just do 8 times 3, yeah. 3, but I don't know how to get to the 3. That 10 is throwing me here. 10 10 divided by 8. That wouldn't work. 10 10 plus I mean I get 21 if I add them all. Hmm. Gosh, and I find myself to be good at math. 16 Oh, okay. So 8 minus 1 would give me 7. 7 times 2 Okay. 8 minus 1 times 2 plus 10.","```python
start_state = (1, 2, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3, so that would get 24"" - participant seems to be setting a subgoal of getting 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3, so that would get 24""',
)

# ""10 plus 8 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(1, 2, 18),
    comment='""10 plus 8 is 18""',
)

# ""19, 20"" seems to be adding 1 and 2 to 18
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+1+2=21"",
    resulting_state=(21,),
    comment='""19, 20"" seems to be adding remaining numbers',
)

# ""10 times 2 would give me 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(1, 8, 20),
    comment='""10 times 2 would give me 20""',
)

# ""10 minus 2 would be 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(1, 8, 8),
    comment='""10 minus 2 would be 8""',
)

# ""10 minus 1 would be 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(2, 8, 9),
    comment='""10 minus 1 would be 9""',
)

# ""8. 18. 22. Divide it by 2 would give me four"" - not clear what numbers are being used

# ""10 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/8=1.25"",
    resulting_state=(1, 2, 1.25),
    comment='""10 divided by 8""',
)

# ""I mean I get 21 if I add them all""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8+2+1=21"",
    resulting_state=(21,),
    comment='""I mean I get 21 if I add them all""',
)

# ""8 minus 1 would give me 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(2, 7, 10),
    comment='""8 minus 1 would give me 7""',
)

# ""7 times 2"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(10, 14),
    comment='""7 times 2""',
)

# ""8 minus 1 times 2 plus 10"" - this is their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-1)*2+10=24"",
    resulting_state=(24,),
    comment='""8 minus 1 times 2 plus 10"" - this is their final answer',
)
```"
1809,"[1,2,7,11]",((7x2)-1)+11,38," Darn, I was so close to that one too. Okay, so let's try this again. All right, so 24 so we have 9 10 and 11 Okay, so 24 minus 11 would give me the 13. So how could I do so? Let's do 7 times 2 which would give me 14 minus 1 Right, so 14 minus 1 would be 13 and then add 11","```python
start_state = (1, 2, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 11 would give me the 13"" - participant is working backward from 24, setting a subgoal
graph.set_subgoal(
    (13, 11),
    state_after_subgoal=(24,),
    comment='""24 minus 11 would give me the 13"" - participant is working backward from 24',
)

# ""7 times 2 which would give me 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 11, 14),
    comment='""7 times 2 which would give me 14""',
)

# ""14 minus 1 would be 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-1=13"",
    resulting_state=(11, 13),
    comment='""14 minus 1 would be 13""',
)

# ""and then add 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(24,),
    comment='""and then add 11""',
)
```"
1811,"[6,6,8,9]",,180," 8 times 6 is 48, and then if I could divide that by 2, but that won't work. Let's see. 9 times 6 is 54. That won't work either. Okay, so what if we do 6, 7, 8. Um, what if I did 8 plus 6 would get me to 14. Don't want that though. 8 plus 9 would get me to 17. 17 plus 6 is 23. So that won't work. Let's see. 6 plus 6 is 12. I can't make that into a 2 though. Okay, so what other combinations am I missing here? 9 times 12 would be, what, 108, right? No. I think so. 108 divided by 8. That wouldn't work either. 9. Let's see. 8 times 6 is 24. 6. 8 minus 6 is 2. 9 plus 6 is 15. That won't work. I was going to say I could do 15 times 2. Um, alright. 8, 24, gosh. I feel like I have this extra 6 here, so I don't know what I would do with that 6. Because if I did 9 minus 6, I could get the 3.","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 6 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(6, 9, 48),
    comment='""8 times 6 is 48""',
)

# ""and then if I could divide that by 2"" - participant considering dividing 48 by 2 but doesn't have a 2
curr_state = graph.move_to_node(start_state)

# ""9 times 6 is 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(6, 8, 54),
    comment='""9 times 6 is 54""',
)

# ""8 plus 6 would get me to 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(6, 9, 14),
    comment='""8 plus 6 would get me to 14""',
)

# ""8 plus 9 would get me to 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(6, 6, 17),
    comment='""8 plus 9 would get me to 17""',
)

# ""17 plus 6 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+6=23"",
    resulting_state=(6, 23),
    comment='""17 plus 6 is 23""',
)

# ""6 plus 6 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(8, 9, 12),
    comment='""6 plus 6 is 12""',
)

# ""9 times 12 would be, what, 108""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(8, 108),
    comment='""9 times 12 would be, what, 108""',
)

# ""108 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108/8=13.5"",
    resulting_state=(13.5,),
    comment='""108 divided by 8""',
)

# ""8 times 6 is 24"" - participant made a calculation error here
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=24"",
    resulting_state=(6, 9, 24),
    comment='""8 times 6 is 24"" - participant made a calculation error',
    result_calc_error=True,
)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 9),
    comment='""8 minus 6 is 2""',
)

# ""9 plus 6 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(6, 8, 15),
    comment='""9 plus 6 is 15""',
)

# ""9 minus 6, I could get the 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 6, 8),
    comment='""9 minus 6, I could get the 3""',
)
```"
1828,"[2,2,5,11]",(11-5)x(2+2),110," Okay, so, 2 times 2 is 4 times 11, no, so 2 times 5, 10, no, so if we did 2 divided by 2, we'd get 1, no, that's not going to work. Hmm, so, no, bigger numbers multiply, no, divide won't work. No, we need an even division. Okay, so, if we did 2 divided by 2, we'd get 1, no, that's not going to work. 5 minus 2 would give us 3, times 11 is 33, that won't work either. 2 plus 2 is 4, no, 11 minus 2, 9. 9, no, 11 minus 2 is 9, times 3 would be 27, so that won't work either. So, if we could somehow get to 6 and 4. Okay, so, let's do 11 minus 5 times 2. Plus 2, and that will get us 6 times 4.","```python
start_state = (2, 2, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 2 is 4 times 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 5, 11),
    comment='""2 times 2 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(5, 44),
    comment='""4 times 11""',
)

# ""2 times 5, 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(2, 10, 11),
    comment='""2 times 5, 10""',
)

# ""2 divided by 2, we'd get 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2/2=1"",
    resulting_state=(1, 5, 11),
    comment='""2 divided by 2, we\'d get 1""',
)

# ""5 minus 2 would give us 3, times 11 is 33""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-2)*11=33"",
    resulting_state=(2, 33),
    comment='""5 minus 2 would give us 3, times 11 is 33""',
)

# ""2 plus 2 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 5, 11),
    comment='""2 plus 2 is 4""',
)

# ""11 minus 2, 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 5, 9),
    comment='""11 minus 2, 9""',
)

# ""if we could somehow get to 6 and 4"" - participant sets a subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""if we could somehow get to 6 and 4""',
)

# ""11 minus 5 times 2. Plus 2"" - participant finds a way to get to their subgoal
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-5)*(2+2)=24"",
    resulting_state=(24,),
    comment='""11 minus 5 times 2. Plus 2, and that will get us 6 times 4""',
)
```"
1832,"[3,3,12,12]",(3+12)+(12-3),31," Okay, 3 times 3 is 9, plus 12, 21, plus 12, 35, no. So, 3 plus 12, 15, and then, okay, so, hold on here. 3 plus 12 would get us to 15, then we need 9, so, then, plus 12 minus 3.","```python
start_state = (3, 3, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 12, 12),
    comment='""3 times 3 is 9""',
)

# ""plus 12, 21, plus 12, 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12+12=35"",
    resulting_state=(35,),
    comment='""plus 12, 21, plus 12, 35""',
    result_calc_error=True,
)

# ""no"" indicates participant realizes this won't work, goes back to start state
curr_state = graph.move_to_node(start_state)

# ""3 plus 12, 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+12=15"",
    resulting_state=(3, 12, 15),
    comment='""3 plus 12, 15""',
)

# ""plus 12 minus 3"" - participant completes the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+(12-3)=24"",
    resulting_state=(24,),
    comment='""plus 12 minus 3""',
)
```"
1834,"[8,9,11,11]",,180," Okay, this one looks tricky too. Okay, I'm probably not going to multiply anything. Probably not going to divide much. So I'm sure there's some addition and subtraction going on. So if I do 11 plus 8 I get 19 and then I need 5. That ain't going to work. So, hmm. If I do 11 plus 11 I'll need 2. But how am I going to get 2 from that? So, let's see. I'm not sure. 9 plus 8? 17? No. So maybe something like subtract first and then multiply. So 2 times 8? 16? No. 11 minus 8? Is 3. 3 times 20? No. 1 times... Hmm. 9 minus 8? 1. Plus 11 is what? 12? Hold up. 9 minus 8 is 1. Wait, so 11 minus 9 is 2. That ain't going to work either. 11... Divided by 11 is 1, 10, 18. Hmm. So if I get to 12 then I can get to 24 by multiplication. So, 11... Divided by 11 is 1 plus 9 plus 8. 17 plus 1 is 18. So how can I get to 12? How to get to 12? I'm not sure. Not thinking of anything here. . . .","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 8 I get 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(9, 11, 19),
    comment='""11 plus 8 I get 19""',
)

# ""11 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(8, 9, 22),
    comment='""11 plus 11""',
)

# ""9 plus 8? 17?""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(11, 11, 17),
    comment='""9 plus 8? 17?""',
)

# ""2 times 8? 16?"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (2, 8),
    comment='""2 times 8? 16?""'
)

# ""11 minus 8? Is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 9, 11),
    comment='""11 minus 8? Is 3""',
)

# ""9 minus 8? 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 11, 11),
    comment='""9 minus 8? 1""',
)

# ""Plus 11 is what? 12?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(11, 12),
    comment='""Plus 11 is what? 12?""',
)

# ""11 minus 9 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 8, 11),
    comment='""11 minus 9 is 2""',
)

# ""Divided by 11 is 1"" - participant seems to be dividing 11 by 11
new_state = graph.explore_operation(
    curr_state,
    operation=""11/11=1"",
    resulting_state=(1, 8, 9),
    comment='""Divided by 11 is 1""',
)

# ""plus 9 plus 8. 17 plus 1 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+9+8=18"",
    resulting_state=(18,),
    comment='""plus 9 plus 8. 17 plus 1 is 18""',
)

# The participant sets a subgoal of getting to 12 so they can multiply by 2 to get 24
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""So if I get to 12 then I can get to 24 by multiplication""',
)
```"
1836,"[6,6,8,9]",(9-6)x(8-6),182," Ok, 6 plus 6 is 4. 6 plus 6 is 12. Ok, 12 plus 20 is 29. 8 minus 6 is 2. 8 plus 8 is 8. 8 minus 6 is 2. 8 plus 8 is 8. Uh, yeah. Meteor. Yeah, 24, 24. Yeah, it is up to get 50. Meteor. Okay, so 9 minus 6 times 8, no, no, 8 minus 6. Okay, so 9 minus 6 times 8 minus 9 minus 6 times 8 minus 9 minus 6 times 8 minus 9 minus 8 minus 9 times 8 minus 9 minus 9, really.","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 6 is 4"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=4"",
    resulting_state=(4, 8, 9),
    comment='""6 plus 6 is 4"" - calculation error',
    result_calc_error=True,
)

# ""6 plus 6 is 12"" - participant corrects their error
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(8, 9, 12),
    comment='""6 plus 6 is 12""',
)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 9),
    comment='""8 minus 6 is 2""',
)

# ""8 plus 8 is 8"" seems to be a transcription error

# The participant repeats ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 9),
    comment='""8 minus 6 is 2"" repeated',
)

# There's some unclear text about ""meteor"" and ""24"" and ""50""

# ""9 minus 6 times 8 minus"" participant seems to be working toward their final answer
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-6)*(8-6)=6"",
    resulting_state=(6,),
    comment='""9 minus 6 times 8 minus"" participant seems to be working toward their final answer',
)

# The participant repeats variations of this calculation several times, which suggests they are verifying their answer
```"
1837,"[3,6,8,13]",(13,180," forty-three thirty minus eight times six minus three. 13 minus 8 Multiplied by Multiplied by 6 minus 3 Okay, I'm coming. I can't open 6 minus 3 5 minus Oh, really? Really? 13 minus 8 Multiplied by Multiplied by 8 Multiplied by 6 6 9 10 Damn rather Really? Yeah. 30 minus 3 is 5, 6 minus 3 is 15, plus 6, and then we'll do this one.","```python
start_state = (3, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(3, 5, 6),
    comment='""13 minus 8""',
)

# ""6 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 8, 13),
    comment='""6 minus 3""',
)

# ""6 minus 3 is 15"" seems to be another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=15"",
    resulting_state=(8, 13, 15),
    comment='""6 minus 3 is 15"" seems to be a calculation error',
    result_calc_error=True,
)

# The rest of the transcript is unclear about what operations are being performed
```"
1840,"[2,2,3,11]",,180," It's a big loser time in the day. I remember one day I said it's not a loser. Okay, 11 times 2 is 22. 11 minus 2 is 9. 9 times 2 is 18. 18 plus 2 is 21. Okay, so... 3 minus 2 is 1. And 11 times 2 is 22. 22 will leave me out. So let's make it 11 minus... 3 is... 8. 8 times 2 is 16. And 6 is 19? 8 times 2 is 8. And 7 plus 5 is 10. And 8 plus 5 is 10. 2 plus 5 is 11. 2 plus 3 is 9. 2 minus 3 is 9. 1 minus 3 is 11. Oh, there is a lot of them. One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen,","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 2 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 3, 22),
    comment='""11 times 2 is 22""',
)

# ""11 minus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 3, 9),
    comment='""11 minus 2 is 9""',
)

# ""9 times 2 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(2, 3, 18),
    comment='""9 times 2 is 18""',
)

# ""18 plus 2 is 21"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+2=21"",
    resulting_state=(3, 21),
    comment='""18 plus 2 is 21"" - calculation error',
    result_calc_error=True,
)

# ""3 minus 2 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-2=1"",
    resulting_state=(1, 2, 11),
    comment='""3 minus 2 is 1""',
)

# ""11 times 2 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 3, 22),
    comment='""11 times 2 is 22""',
)

# ""11 minus... 3 is... 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(2, 2, 8),
    comment='""11 minus... 3 is... 8""',
)

# ""8 times 2 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(2, 16),
    comment='""8 times 2 is 16""',
)

# The rest of the transcript contains some unclear calculations and counting, which don't seem to be part of the problem-solving process
```"
1846,"[3,9,13,13]",,180," Okay, 3, 9, 13, 13. Okay, so 13 minus 3 is 10, 13 minus 9 is 4. Let me see, 9 minus 3 is 6. I am, shut up. Let me think, let me think, let me think, let me think. 9 plus 13 is 22. Um, 13, okay. Stop it! Am I not, am I not speaking loud enough for you? Okay, how about now? Um, thinking, thinking, thinking. 9 times 3 is 27. No, 3 times 13 is 36. Um, da-da-da-da-da-da-da-da-da-da-da-da-da-da. Oh, jeez, I don't know how to do this. Um, all right. I don't think I'm going to get this one. 9 times 3, parentheses. I'm talking, you stupid! 9 times 3, close. Plus 13, minus 13, whatever. Incorrect answer. Okay, come on. How the hell do I get this? Um... I did not click on that. Um, let me think, let me think, let me think, let me think. Thinking, thinking, thinking. Um... Stop fucking nagging me! Ah, okay. Um, da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da-da. Okay, 3 times 9 is 27. But what can I do with the... Okay, no. 9 times 13 is... a lot. Um... I don't know.","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(9, 10, 13),
    comment='""13 minus 3 is 10""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9 is 4""',
)

# ""9 minus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 13, 13),
    comment='""9 minus 3 is 6""',
)

# ""9 plus 13 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(3, 13, 22),
    comment='""9 plus 13 is 22""',
)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""9 times 3 is 27""',
)

# ""3 times 13 is 36"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=36"",
    resulting_state=(9, 13, 36),
    comment='""3 times 13 is 36"" - participant made a calculation error',
    result_calc_error=True,
)

# ""9 times 13 is... a lot"" - participant doesn't complete the calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""9*13=117"",
    resulting_state=(3, 13, 117),
    comment='""9 times 13 is... a lot""',
)

```"
1854,"[5,6,7,8]",(6/(7-5))x8,92, natuurlijkYearlyS motionskanallongs minus five wait I was going somewhere I'm trying to get to three so I want to do six divided by seven minus two I don't know if this is gonna work by using or seven minus five I don't know if this is gonna work by using double parentheses but that would be six divided by two which is three times eight and that's eight times three,"```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I'm trying to get to three"" - participant sets a subgoal of getting to 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I\'m trying to get to three""',
)

# ""six divided by seven minus five"" - participant tries to get 3 by dividing 6 by (7-5)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/(7-5)=3"",
    resulting_state=(3, 8),
    comment='""six divided by seven minus five""',
)

# ""that's eight times three""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""that\'s eight times three""',
)
```"
1855,"[7,8,8,12]",8-(12-7),180," Okay, 8 times 8 is 64, 8 times 7 is 56, 8 times 12 is 76, no, 96, 12 times 8, 96, okay. I'm not really sure of many numbers that are divisible by 8, I mean, many numbers that go into 96. Uh, 8 minus 7 is 1, hmm, 12 minus 7 is 5. Try to think of something else. Some numbers that could get me to 24 if I eliminate certain ones. 8 minus 8 is 0, so we could multiply something by 0, but I don't really think that would work. 64, does 12 go into 64? Um, 12, 24, 36, 48, 16, no, it doesn't. Does 7 go into 64? No. 56, I think 8 goes in, yeah, 8 goes into 56 7 times. Um, 56 divided by 12, no. Um, okay, 12 minus 8 is 4. 16, if we were to add 8 plus 8 minus 12 is 4. 7, 14, 21, 28. That wouldn't get me a 24, that'd give me a 28 if I were to multiply it by 7. Um, 8 minus 7 is 2, oh no, 8 minus 7 is 1. Hmm. 12 minus 7 is 5. 8 minus 5 is 3. 8 times 3, okay, wait. 12 minus 7 is 3. 8, wait, 5. 8 minus 5 is 3. Shoot, now I'm like stressing out because of time. 8 minus 12 minus 7. So 8 minus 5 is 3 times.","```python
start_state = (7, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 12, 64),
    comment='""8 times 8 is 64""',
)

# ""8 times 7 is 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(8, 12, 56),
    comment='""8 times 7 is 56""',
)

# ""8 times 12 is 76, no, 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(7, 8, 96),
    comment='""8 times 12 is 96""',
)

# ""8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 8, 12),
    comment='""8 minus 7 is 1""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 8, 8),
    comment='""12 minus 7 is 5""',
)

# ""8 minus 8 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=0"",
    resulting_state=(0, 7, 12),
    comment='""8 minus 8 is 0""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 7, 8),
    comment='""12 minus 8 is 4""',
)

# ""8 plus 8 minus 12 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8-12=4"",
    resulting_state=(4, 7),
    comment='""8 plus 8 minus 12 is 4""',
)

# ""8 minus 7 is 2, oh no, 8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 8, 12),
    comment='""8 minus 7 is 1""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 8, 8),
    comment='""12 minus 7 is 5""',
)

# ""8 minus 5 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 8),
    comment='""8 minus 5 is 3""',
)

# ""8 minus 12 minus 7"" - this matches their final response of 8-(12-7)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-(12-7)=3"",
    resulting_state=(3, 8),
    comment='""8 minus 12 minus 7""',
)
```"
1856,"[9,11,12,13]",,180," Okay, this is where I'm not going to do very well because the numbers are getting bigger, but 11 minus 9 is 2. 12 times 2 is 24. 13 minus 11 is 2. Scratch that. 12 times 9. 12 minus 11 is 1. I don't know if we're allowed to use a calculator, but part of me wants to use a calculator, but I don't think I'm going to. I don't know. 13 minus 9 is 4. 12 times 4 is 36. 12, 24, oh no, it's 48. 13 minus 9 is 4. 4 times 11 is 44. 12 times 9 is 108. 108 plus 13. Okay, I feel like that might be getting me somewhere. 12 times 9 is 108. Plus 13. Um, what is 108 plus 13? 121 divided by 11. Ugh, that would be 11. Hmm. 24 times 2 is 48. 12, 24, 36, 48. And 13 minus 9 is 4. So you could do 12 times 4 divided by 2 somehow. Uh, but I don't think that would work. 11 minus 9 is 2. 13 times 2 is 26. Minus 12, nope. 12 plus 13 is 25. Plus 11 is 34. Minus 9 is 24. Minus 9 is 25.","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 12, 13),
    comment='""11 minus 9 is 2""',
)

# ""12 times 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(13, 24),
    comment='""12 times 2 is 24""',
)

# ""13 minus 11 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 9, 12),
    comment='""13 minus 11 is 2""',
)

# ""12 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(11, 13, 108),
    comment='""12 times 9""',
)

# ""12 minus 11 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 9, 13),
    comment='""12 minus 11 is 1""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 11, 12),
    comment='""13 minus 9 is 4""',
)

# ""12 times 4 is 36"" (participant corrects to 48)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(11, 48),
    comment='""12 times 4 is 48""',
)

# ""4 times 11 is 44""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(12, 44),
    comment='""4 times 11 is 44""',
)

# ""12 times 9 is 108""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(11, 13, 108),
    comment='""12 times 9 is 108""',
)

# ""Plus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108+13=121"",
    resulting_state=(11, 121),
    comment='""Plus 13""',
)

# ""121 divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""121/11=11"",
    resulting_state=(11,),
    comment='""121 divided by 11""',
)

# ""13 minus 9 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 11, 12),
    comment='""13 minus 9 is 4""',
)

# ""11 minus 9 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 12, 13),
    comment='""11 minus 9 is 2""',
)

# ""13 times 2 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(12, 26),
    comment='""13 times 2 is 26""',
)

# ""12 plus 13 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(9, 11, 25),
    comment='""12 plus 13 is 25""',
)

# ""Plus 11 is 34""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+11=36"",
    resulting_state=(9, 36),
    comment='""Plus 11 is 34"" - participant made calculation error',
    result_calc_error=True
)

# ""Minus 9 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-9=25"",
    resulting_state=(25,),
    comment='""Minus 9 is 24"" though participant says 25',
    result_calc_error=True
)
```"
1858,"[1,5,10,13]",,180, 10 times 5 is 50 50 divided by 13 6 times 3 5 plus 1 is 6 13 minus 10 is 3 13 plus 1 is 4 13 plus 1 is 14 but that's not going to work 10 plus 1 is 11 11 minus 5 is 6 13 times 6 is not 24 13 plus 5 is 18 13 plus 5 is 18 minus 10 I'm kind of lost with this one I don't know if I'm just getting tired from doing all of them but I'm starting to like hit a wall and I really don't know 10 times 5 is 2 no 10 divided by 5 is 2 and then 13 times 1 is 13 13 times 2 is 26 not 24 um 13 plus 1,"```python
start_state = (1, 5, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 5 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(1, 13, 50),
    comment='""10 times 5 is 50""',
)

# ""50 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""50/13=3.85"",
    resulting_state=(1, 3.85),
    comment='""50 divided by 13""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""5 plus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 10, 13),
    comment='""5 plus 1 is 6""',
)

# ""13 minus 10 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(1, 3, 5),
    comment='""13 minus 10 is 3""',
)

# ""13 plus 1 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(5, 10, 14),
    comment='""13 plus 1 is 14""',
)

# ""10 plus 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+1=11"",
    resulting_state=(5, 11, 13),
    comment='""10 plus 1 is 11""',
)

# ""11 minus 5 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 13),
    comment='""11 minus 5 is 6""',
)

# ""13 plus 5 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=18"",
    resulting_state=(1, 10, 18),
    comment='""13 plus 5 is 18""',
)

# ""18 minus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-10=8"",
    resulting_state=(1, 8),
    comment='""18 minus 10""',
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(1, 2, 13),
    comment='""10 divided by 5 is 2""',
)

# ""13 times 1 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*1=13"",
    resulting_state=(2, 13),
    comment='""13 times 1 is 13""',
)

# ""13 times 2 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(26,),
    comment='""13 times 2 is 26""',
)

# ""13 plus 1"" is repeated from earlier
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(5, 10, 14),
    comment='""13 plus 1"" is repeated from earlier',
)
```"
1859,"[1,1,5,6]",1x((5-1)x6),91," Okay. 12 times 2. We've got 6 and 1 and 1, so we can make 12 with that, but then we have 5. We wanted to do 8 times 3 to get to 24. 6, 7, 8, but we can't do 5. 5 plus 1 is 6. 6 times 6 is 36. 6 times 5 is 30. Minus... 1 is 29, so that wouldn't work. 6 times 4? Okay. I'm seeing something. So we're going to do 1 times this whole thing. 1 times 5 minus 1. 5 minus 1 times 6. Then close the parentheses.","```python
start_state = (1, 1, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We've got 6 and 1 and 1, so we can make 12 with that""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1*1=6"",
    resulting_state=(5, 6),
    comment='""We\'ve got 6 and 1 and 1, so we can make 12 with that"" - though they say 12, they actually compute 6',
)

# ""We wanted to do 8 times 3 to get to 24"" - this seems to be setting a subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""We wanted to do 8 times 3 to get to 24""',
)

# ""5 plus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(1, 6, 6),
    comment='""5 plus 1 is 6""',
)

# ""6 times 6 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(1, 36),
    comment='""6 times 6 is 36""',
)

# ""6 times 5 is 30. Minus... 1 is 29""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5-1=29"",
    resulting_state=(1, 29),
    comment='""6 times 5 is 30. Minus... 1 is 29""',
)

# ""1 times 5 minus 1. 5 minus 1 times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*((5-1)*6)=24"",
    resulting_state=(24,),
    comment='""1 times 5 minus 1. 5 minus 1 times 6""',
)
```"
1860,"[3,3,6,11]",(11-3)x(6-3),99, eight times three 11 minus 8 16 24 11 minus 3 is 8 um 11 minus 3 is 8 8 times 3 24 but what can we do that's 6 okay 6 minus 3 11 minus 3 times 6 minus 3 11 minus 3 times 6 minus 3,"```python
start_state = (3, 3, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""eight times three"" - participant seems to be trying to get to 24 by multiplying 8 and 3
# They haven't computed 8 yet, but this suggests they're setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""eight times three"" suggests participant is trying to get to 24 via 8*3',
)

# ""11 minus 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(3, 6, 8),
    comment='""11 minus 3 is 8""',
)

# ""8 times 3 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(6, 24),
    comment='""8 times 3 24""',
)

# ""6 minus 3"" participant explores a new operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3, 11),
    comment='""6 minus 3""',
)

# ""11 minus 3 times 6 minus 3"" participant puts it all together
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-3)*(6-3)=24"",
    resulting_state=(24,),
    comment='""11 minus 3 times 6 minus 3""',
)
```"
1862,"[1,11,12,13]",(13-11)x12x1,73," So, oh, this is crazy. It's 12 plus 12. How the heck am I going to do this? Okay, wait a second. Okay, I'm just thinking right now. Let's see what we can do here. 12. I really want to do 12 plus 12. I can't. So I must do... 13 minus that is 2. Just like this. 13 minus 11 is 2. 2 times 12 times 1. There we go.","```python
start_state = (1, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12"" - participant seems to be setting a subgoal to get two 12s
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""12 plus 12. How the heck am I going to do this?""',
)

# After some thinking, participant tries ""13 minus 11 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 12),
    comment='""13 minus 11 is 2""',
)

# ""2 times 12 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12*1=24"",
    resulting_state=(24,),
    comment='""2 times 12 times 1""',
)
```"
1872,"[7,9,13,13]",(13-9)x(13-7),177," So 13 plus 13 gives me 26 plus 9, and then minus 7. Is that 24? I guess not. Oh, okay. I get it. I think I do. So instead of 13 plus 13, 13 minus 13 gives me 0, and then plus 9 times 7, I guess. No, that's not right. I don't know. Okay, so 13 times minus 13 gives me 0, for example, and then 9 times 7 is 63. I don't know. Let's see if this doesn't work. Okay, so 13 plus 9, that's 22. 22 plus 7 is 20. No. 26 plus 7, that gives me 33. 33 minus 9, no, that gives me 22-ish. Okay. Okay. Let's see. What other... 13 minus 9 gives me 4. 13 minus 7 is 6. Okay, I think I get it. Let's try... 13 minus 9, and then... times... 13 minus 7... 2. Thank you.","```python
start_state = (7, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 gives me 26 plus 9, and then minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13+9-7=28"",
    resulting_state=(28,),
    comment='""13 plus 13 gives me 26 plus 9, and then minus 7""',
)

# ""13 minus 13 gives me 0, and then plus 9 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-13+9*7=63"",
    resulting_state=(63,),
    comment='""13 minus 13 gives me 0, and then plus 9 times 7""',
)

# ""13 plus 9, that's 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(7, 13, 22),
    comment='""13 plus 9, that\'s 22""',
)

# ""22 plus 7 is 20"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+7=20"",
    resulting_state=(13, 20),
    comment='""22 plus 7 is 20"" seems to be a calculation error',
    result_calc_error=True,
)

# ""13 minus 9 gives me 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 7, 13),
    comment='""13 minus 9 gives me 4""',
)

# ""13 minus 7 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 13),
    comment='""13 minus 7 is 6""',
)

# Finally, the participant multiplies these differences together
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-9)*(13-7)=24"",
    resulting_state=(24,),
    comment='The participant multiplies the differences they found to get 24',
)
```"
1877,"[1,6,8,13]",(13-8),180," Okay, let's see. How did I go about this? How? I don't know. 1, 6, 8, and 13. Does this give me a headache? Let's see. Take the two largest numbers. Let's see. 6 times 8 doesn't work. 13 plus 3 is 21. 22 plus 1 is 22. And then, no. 18, 21, 27 minus 1 is 26. No, so that doesn't work. Let's see. 6 times 8. Okay, this is good. This is good. Okay. It seems like it's getting more challenging each round, unless I'm just getting tired. Let's see. 6 plus 1, 7. 7 times 8, 42-ish, I believe. 8, 42, no, that's not right. 14 minus 13 is 29. 13 plus, no, 13 is just too large of a number. Let's see. Let's see. Let's decrease the numbers like I did the previous round, let's say. 13 minus 8. Does that work? 13 minus 8. So that gives me 5. 13 minus 8 is 5. 13 minus 8 is 5. 13 minus 8 is 5. 6 is 30. Plus 1 is 31, or minus 1 is 29. Let's see. 13 minus 6.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 8 doesn't work""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(1, 13, 48),
    comment='""6 times 8 doesn\'t work""',
)

# ""13 plus 3"" (possibly meant 8) ""is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(1, 6, 21),
    comment='""13 plus 3 is 21"" - likely meant 13+8=21',
)

# ""22 plus 1 is 22"" seems to be continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+1=22"",
    resulting_state=(6, 22),
    comment='""22 plus 1 is 22"" - participant adds 1 to previous result',
)

# ""6 plus 1, 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(7, 8, 13),
    comment='""6 plus 1, 7""',
)

# ""7 times 8, 42-ish""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=42"",
    resulting_state=(13, 42),
    comment='""7 times 8, 42-ish""',
    result_calc_error=True,
)

# ""13 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(1, 5, 6),
    comment='""13 minus 8""',
)

# ""6 is 30. Plus 1 is 31, or minus 1 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6+1=31"",
    resulting_state=(31,),
    comment='""6 is 30. Plus 1 is 31""',
)

new_state = graph.explore_operation(
    curr_state,
    operation=""5*6-1=29"",
    resulting_state=(29,),
    comment='""minus 1 is 29""',
)

# ""13 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 7, 8),
    comment='""13 minus 6""',
)
```"
1878,"[3,7,7,9]",,180," Okay, so it doesn't get easier. Of course not. Let's see. So if I take 7 plus 7 is 14 plus 9, 9 is 23 minus 3 is 20, so that doesn't work. 9 plus 7 is 16. That doesn't work either, 23, 26, or 20. If I do 9 plus 7 is 16. Let's see. Why is it so hard? 9 plus 7 gives me 16. 16, 16, 16, and then 7 plus 3 is 10, so that gives me 20. 26 which is not what i want uh okay seven times seven 29 48 no so that's too high uh let's see seven okay three times seven is 21 21 plus seven is 28 wait 21 plus nine is 30 and then mine seven is 23. just give me one oh my gosh um let's say i'm getting closer i'm just off uh how about this so three 95 by three is three three times seven is 21 and plus seven is 26 so that doesn't work okay so how about nine minus seven you get two nine minus seven you get two times and then three plus","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14 plus 9, 9 is 23 minus 3 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+9-3=20"",
    resulting_state=(20,),
    comment='""7 plus 7 is 14 plus 9, 9 is 23 minus 3 is 20""',
)

# ""9 plus 7 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(3, 7, 16),
    comment='""9 plus 7 is 16""',
)

# ""7 plus 3 is 10"" from the new state with 16
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(10, 16),
    comment='""7 plus 3 is 10""',
)

# ""seven times seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""seven times seven""',
)

# ""three times seven is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 9, 21),
    comment='""three times seven is 21""',
)

# ""21 plus seven is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+7=28"",
    resulting_state=(9, 28),
    comment='""21 plus seven is 28""',
)

# ""21 plus nine is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""21+9=30"",
    resulting_state=(7, 30),
    comment='""21 plus nine is 30""',
)

# ""mine seven is 23"" (probably means ""minus seven"")
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-7=23"",
    resulting_state=(23,),
    comment='""mine seven is 23"" (probably means ""minus seven"")',
)

# ""three times seven is 21 and plus seven is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7+7=26"",
    resulting_state=(9, 26),
    result_calc_error=True,
    comment='""three times seven is 21 and plus seven is 26""',
)

# ""nine minus seven you get two""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""nine minus seven you get two""',
)
```"
1887,"[4,8,8,11]",,180," 4, 8, 8, 11. Isn't this the other one? Oh, no, it was 7, 8, 8, 11. Okay, I don't have time to worry about that. Okay, 4, 8, 8, 11. Okay, let's see. 4 minus 8, no, no, I'm sorry, 8 minus 4 would be 4, plus 8 would be 12, but nope. Okay. Let's see, times 4 would be 32, hmm, then if I subtract 11, that would be 21, 11 would be 43, that's still too much, um, what about 8 plus 4, nope, okay, 8, hmm. 12 plus 8 would be 64, then that would be 68, um, 24, 25, nope, that would not go in there. Um, let's see, that would be 44, oops, 16, 17. Nope, that would be 38, okay. Uh, what if we did, um, let's see, 8 plus 8 would be 16, plus 11 would be 27, oh, man, what about, uh, okay, what about 16 and 4, but then that would be 4, you know what I mean? Okay, no, that would not work. 8, okay, what about 11 minus 8 would give me 3, and then, uh, no, then I'll have an extra number left over. Um, um, okay, 8, but then that's still.","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 4 would be 4, plus 8 would be 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4+8=12"",
    resulting_state=(11, 12),
    comment='""8 minus 4 would be 4, plus 8 would be 12""',
)

# ""times 4 would be 32"" - participant seems to be multiplying 8*4
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(8, 11, 32),
    comment='""times 4 would be 32""',
)

# ""then if I subtract 11, that would be 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-11=21"",
    resulting_state=(8, 21),
    comment='""then if I subtract 11, that would be 21""',
)

# ""11 would be 43"" - participant may be adding 32+11
curr_state = graph.move_to_node((8, 11, 32))
new_state = graph.explore_operation(
    curr_state,
    operation=""32+11=43"",
    resulting_state=(8, 43),
    comment='""11 would be 43""',
)

# ""8 plus 4"" participant goes back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(8, 11, 12),
    comment='""8 plus 4""',
)

# ""12 plus 8 would be 64"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=64"",
    resulting_state=(11, 64),
    comment='""12 plus 8 would be 64""',
    result_calc_error=True,
)

# ""8 plus 8 would be 16, plus 11 would be 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+11=27"",
    resulting_state=(4, 27),
    comment='""8 plus 8 would be 16, plus 11 would be 27""',
)

# ""11 minus 8 would give me 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 8),
    comment='""11 minus 8 would give me 3""',
)
```"
1888,"[2,8,10,12]",(8+10)x2-12,127," Okay, so we want to go for 24. Now, I need to make a way to make this to 24. Okay, let's experiment with it. So, to reach 24, I need to use one of these numbers in the sum. Okay, if I reverse-engineer this, I need to find 12, because I'm gonna use the last 12 to reach the final one. Okay, how about this? Eight minus, oh wait, let's use brackets. It'll make it easier. Eight minus two. Now, I have a six there. Thinking about the relationship between 6 and 24. Is there a way for me to find 6 out of these two numbers? Maybe not. Okay, 6 plus 12 would make 18. Okay, there's no way. Is that gonna work? Let's start over. Twelve minus two, maybe. What if I use plus? Okay, eight plus ten. That'll make 18, right? So, 18 times two. It'll make 36 minus 12. Okay.","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need to find 12, because I'm gonna use the last 12 to reach the final one"" 
# This suggests they are working backward from 24 and want to get to 36 first (since 36-12=24)
graph.set_subgoal(
    (12, 36),
    state_after_subgoal=(24,),
    comment='""I need to find 12, because I\'m gonna use the last 12 to reach the final one""'
)

# ""Eight minus, oh wait, let's use brackets. It'll make it easier. Eight minus two""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(6, 10, 12),
    comment='""Eight minus two""',
)

# ""6 plus 12 would make 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12=18"",
    resulting_state=(10, 18),
    comment='""6 plus 12 would make 18""',
)

# ""Twelve minus two, maybe""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-2=10"",
    resulting_state=(8, 10, 10),
    comment='""Twelve minus two, maybe""',
)

# ""eight plus ten. That'll make 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(2, 12, 18),
    comment='""eight plus ten. That\'ll make 18""',
)

# ""18 times two. It'll make 36 minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18*2-12=24"",
    resulting_state=(24,),
    comment='""18 times two. It\'ll make 36 minus 12""',
)
```"
1889,"[3,5,7,10]",(,180," Okay, so the target number is 24 again. Okay. If I were to sum all up, that would be 25, but that's not what I want. To be able to find 24, I need to make something different. But if I use multiplier for 2 numbers, then I find the relationship between them. Okay. 3 times 5 would be 15. Then I would be looking for 9, but that's not going to work with these 2 numbers. Okay. 3 times 7, 21. 21 and 5. That would give me 16. I can find 16 plus 10. No, it's not going to work. 30. 7 and 5. 30 multiplied by 5. 150. You can divide it by 7. That's not going to work either. Okay. Oh, I see. 3 plus 5 times. Wait, not times. That would be 8. Oh, okay. I'm wrong. Back to square 1. That would be 25, not 24. So. 10 minus 3. Or wait. 10 minus 5 would be 5. 5. Oh, I found it, I guess. Did I? No, that's not going to work. 10 minus 3 plus. Right now I have 7. 7 plus. I'll wait. Times. Let's delete. Times 5. That would be 35. There's no way. Okay. It's not going to work. How about reaching 30? I can't find. Okay. That will not work either. 357.","```python
start_state = (3, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I were to sum all up, that would be 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5+7+10=25"",
    resulting_state=(25,),
    comment='""If I were to sum all up, that would be 25""',
)

curr_state = graph.move_to_node(start_state)
# ""3 times 5 would be 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(7, 10, 15),
    comment='""3 times 5 would be 15""',
)

curr_state = graph.move_to_node(start_state)
# ""3 times 7, 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(5, 10, 21),
    comment='""3 times 7, 21""',
)

# ""21 and 5. That would give me 16"" - participant seems to be trying 21-5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21-5=16"",
    resulting_state=(10, 16),
    comment='""21 and 5. That would give me 16""',
)

# ""16 plus 10"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+10=26"",
    resulting_state=(26,),
    comment='""16 plus 10""',
)

curr_state = graph.move_to_node(start_state)
# ""7 and 5. 30 multiplied by 5"" - participant seems to be trying different combinations
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(3, 10, 35),
    comment='""7 and 5. 30 multiplied by 5""',
)

curr_state = graph.move_to_node(start_state)
# ""3 plus 5"" participant starts a new attempt
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(7, 8, 10),
    comment='""3 plus 5""',
)

curr_state = graph.move_to_node(start_state)
# ""10 minus 5 would be 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 7),
    comment='""10 minus 5 would be 5""',
)

curr_state = graph.move_to_node(start_state)
# ""10 minus 3"" participant tries a different subtraction
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 7),
    comment='""10 minus 3""',
)

# ""Times 5. That would be 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(7, 35),
    comment='""Times 5. That would be 35""',
)

# ""How about reaching 30?"" participant seems to set a subgoal
graph.set_subgoal(
    (30,),
    state_after_subgoal=(24,),
    comment='""How about reaching 30?""',
)
```"
1892,"[1,2,2,6]",6x((2+2)/1),22," Okay, this one's easy. 6 times 4. I need to make these 4 and make 1 obsolete. That's easy. 6 times open brackets, another bracket, 2 plus 2, close bracket, divided by 2, divided by 1. Sorry.","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4. I need to make these 4"" - participant sets a subgoal of making 4
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4. I need to make these 4""',
)

# ""2 plus 2"" - participant combines the 2s to make 4
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(1, 4, 6),
    comment='""2 plus 2""',
)

# Then they divide by 1 (which doesn't change the value) and multiply by 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(4/1)*6=24"",
    resulting_state=(24,),
    comment='""divided by 1"" and then multiplies by 6',
)

```"
1893,"[3,4,8,11]",(11-(8-3))x4,45," Okay, 3, 4, 8, 11. Now, if I can find 6 out of 3, 8 and 11, that would be easy. Is there a way for me to do that? Yes, there is. Okay, open bracket, 11 minus another bracket inside, 8 minus 3, that will give me 5, and the result is going to be 6, so I'm going to multiply that with 4 and have 24. Wait, did I do? Oh, okay, I forgot a bracket. 2 brackets, 12, times 4.","```python
start_state = (3, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I can find 6 out of 3, 8 and 11"" - participant is setting a subgoal to get 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""if I can find 6 out of 3, 8 and 11""',
)

# ""8 minus 3"" is the first operation they try
new_state = graph.explore_operation(
    curr_state,
    operation=""8-3=5"",
    resulting_state=(4, 5, 11),
    comment='""8 minus 3""',
)

# Then ""11 minus"" that result to get 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(4, 6),
    comment='""11 minus...that will give me 5, and the result is going to be 6""',
)

# Finally multiply by 4 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""so I\'m going to multiply that with 4 and have 24""',
)

```"
1896,"[1,3,6,9]",6x((9/3)+1),26," 1, 3, 6, 9. Alright. Okay, 6 times, open bracket, now I need to find 4. Let's do it like this. Open bracket, 9 minus 3 plus 1. Close bracket.","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times, open bracket, now I need to find 4"" suggests the participant is setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times, open bracket, now I need to find 4""',
)

# ""9 minus 3 plus 1"" - though the participant says minus, they submitted 9/3+1 as their answer
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3+1=4"",
    resulting_state=(4, 6),
    comment='""9 minus 3 plus 1"" though they actually used division based on their response',
)

# Then they multiply by 6 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment=""Multiplying by 6 to reach 24"",
)
```"
1897,"[3,5,7,11]",(7-3)x(11-5),52," 3, 5, 7, 11. 7 plus 11 is 18. 5, 3 plus 3 is 8, so that would be 26. How can we get a 6 times 4 here, or an 8 times 3? Hmm, 3 times 5 is 15. 3 times 30. Number 1, whew, this one's quite difficult. 4, okay, 7 minus 3 is 4, 11 minus 5 is 6, so that would work. 7 minus 3 times 11 minus 5, which would be 4 times 6.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 11 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(3, 5, 18),
    comment='""7 plus 11 is 18""',
)

# ""How can we get a 6 times 4 here, or an 8 times 3?"" - participant is setting subgoals
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""How can we get a 6 times 4 here""',
)
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""or an 8 times 3""',
)

# ""3 times 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(7, 11, 15),
    comment='""3 times 5 is 15""',
)

# ""7 minus 3 is 4, 11 minus 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 5, 11),
    comment='""7 minus 3 is 4""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(3, 6, 7),
    comment='""11 minus 5 is 6""',
)

# ""7 minus 3 times 11 minus 5, which would be 4 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-3)*(11-5)=24"",
    resulting_state=(24,),
    comment='""7 minus 3 times 11 minus 5, which would be 4 times 6""',
)
```"
1898,"[1,1,2,6]",6x(1+1+2),14," All right, keep going. 1, 1, 2, 6. We've done 6 times 4, so it would be 6 times 1 plus 1 plus 2, which is 4 in parentheses.","```python
start_state = (1, 1, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We've done 6 times 4"" suggests participant is setting a subgoal of getting to 4 to multiply by 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""We\'ve done 6 times 4""',
)

# ""6 times 1 plus 1 plus 2, which is 4 in parentheses""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1+2=4"",
    resulting_state=(4, 6),
    comment='""1 plus 1 plus 2, which is 4""',
)

# Then multiply by 6 to reach the goal
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment=""Multiply by 6 to reach goal"",
)
```"
1900,"[5,6,8,8]",8x(5-(8-6)),20," Alright, 8 times 3, so 8 times 5 minus 6, which is 2.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3"" suggests the participant is setting a subgoal to get 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3"" suggests participant wants to multiply 8 by 3',
)

# ""8 times 5 minus 6, which is 2"" seems to be a transcription error
# Based on their response of 8x(5-(8-6)), they actually computed:
# First 8-6=2, then 5-2=3, then multiply by 8
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 8),
    comment=""Based on their response, they first computed 8-6=2"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 8),
    comment=""Then computed 5-2=3"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment=""Finally multiplied 8*3=24"",
)
```"
1901,"[5,8,8,9]",9/(8-5)x8,57, How many times do I have to do this? Can we get 8 times 3 here? 17... 16... 2 plus 11... Hmm... 4... 2... Hmm... 2... Almost like it's 8 times 3 would do it. How do we get 3? 8 minus 5 is 3... 9 divided by 3 is... Okay. So it's 9 divided by 8 minus 5... and that'll be a 3... times 8.,"```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Can we get 8 times 3 here?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""Can we get 8 times 3 here?""',
)

# ""17... 16..."" participant seems to be trying addition
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(5, 8, 17),
    comment='""17..."" participant seems to be trying addition',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 8, 9),
    comment='""8 minus 5 is 3""',
)

# ""9 divided by 3"" participant uses the 3 they just computed
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 8),
    comment='""9 divided by 3""',
)

# ""times 8"" participant multiplies by 8 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""times 8""',
)
```"
1904,"[5,5,8,10]",8x(5-(10/5)),75," 5 times 5 is 25, minus 1, but I can't get a 1 from an 8 and a 10. 40 minus 16, can't get that. 15 minus, no, 10 plus 10 is 20. 10 plus 8, 2 times 12, 3 times 8, 10. Okay, I can get that. 8 times... 10 divided by 5, which is 2. Oops, delete, delete. 5 minus... 10 divided by 5...","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""minus 1, but I can't get a 1 from an 8 and a 10"" - participant realizes this won't work and backtracks

curr_state = graph.move_to_node(start_state)
# ""40 minus 16"" - participant likely got 40 from 5*8
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(5, 10, 40),
    comment='""40"" - participant likely multiplied 5*8',
)

# ""10 plus 10 is 20"" - participant likely added 10+10 after dividing 40/2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40/2=20"",
    resulting_state=(5, 10, 20),
    comment='""10 plus 10 is 20"" - participant likely divided 40 by 2',
)

# ""10 plus 8"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(5, 5, 18),
    comment='""10 plus 8""',
)

# ""2 times 12"" - not clear where 12 comes from
# ""3 times 8"" - not clear where 3 comes from

# ""10 divided by 5, which is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 8),
    comment='""10 divided by 5, which is 2""',
)

# Based on their final answer of 8*(5-(10/5)), they must have:
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(5-2)=24"",
    resulting_state=(24,),
    comment='Based on their final answer of ""8*(5-(10/5))"", they computed 8*(5-2)',
)
```"
1910,"[7,12,12,13]",,180," 12 plus 12 equals 24, but that's too much. 12 plus 13 is 25. 25 plus 12 equals 25 plus 12 equals 37 minus 7 is 30. 25 plus 7 equals 32 minus 12 would be 20. That's not, that's too small. 12, 13, what about 12 plus 12 plus 7 minus 13? No. 12 times 7 is 80, no, 60, 72. 72 minus 12 would be 60 minus 30. No. 72, no. 7 times 13 is 70, 70, 81. Or is that 91? No. 70 is 91. 91, and then 12 times 12 is 144. That difference wouldn't make sense. 12 times 12 divided by 7, I don't think that would work. What about 12 minus 7? 12 minus 7 is 5 plus 12 is 17 plus 13 would be 30, I think. What about 5 plus 13 is 18 plus 12? No. 12 divided by 7? No. 13 times 7, already did that. 7 times 12, already tried that. Hm. Times, 7 times, no. Maybe plus. 12 plus 12 plus 13 minus 7 doesn't work. 13 minus 7 would just give us 6. 6 times 12 equals 60. 60 minus 12 doesn't reach 24.","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 equals 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(7, 13, 24),
    comment='""12 plus 12 equals 24""',
)

# ""12 plus 13 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(7, 12, 25),
    comment='""12 plus 13 is 25""',
)

# ""25 plus 12 equals 37 minus 7 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+12-7=30"",
    resulting_state=(30,),
    comment='""25 plus 12 equals 37 minus 7 is 30""',
)

# ""25 plus 7 equals 32 minus 12 would be 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""25+7-12=20"",
    resulting_state=(20,),
    comment='""25 plus 7 equals 32 minus 12 would be 20""',
)

# Back to start state for ""12 plus 12 plus 7 minus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12+7-13=18"",
    resulting_state=(18,),
    comment='""12 plus 12 plus 7 minus 13""',
)

# ""12 times 7 is 80, no, 60, 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=72"",
    resulting_state=(12, 13, 72),
    result_calc_error=True,
    comment='""12 times 7 is 80, no, 60, 72""',
)

# ""72 minus 12 would be 60""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72-12=60"",
    resulting_state=(13, 60),
    comment='""72 minus 12 would be 60""',
)

# ""7 times 13 is 70, 70, 81. Or is that 91?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13=91"",
    resulting_state=(12, 12, 91),
    comment='""7 times 13 is 91""',
)

# ""12 times 12 is 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(7, 13, 144),
    comment='""12 times 12 is 144""',
)

# ""12 minus 7 is 5 plus 12 is 17 plus 13 would be 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 12, 12, 13),
    comment='""12 minus 7 is 5""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+12+13=30"",
    resulting_state=(12, 30),
    comment='""5 plus 12 is 17 plus 13 would be 30""',
)

# ""13 minus 7 would just give us 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 12, 12),
    comment='""13 minus 7 would just give us 6""',
)

# ""6 times 12 equals 60""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=72"",
    resulting_state=(12, 72),
    result_calc_error=True,
    comment='""6 times 12 equals 60""',
)

# ""60 minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72-12=60"",
    resulting_state=(60,),
    comment='""60 minus 12""',
)
```"
1911,"[2,3,7,10]",(2x10)+(7-3),116," Okay, 7 times 10 equals 70. 70 minus 3 times 2 doesn't work. 7 times 3 equals 21, plus 2 is 23, plus 10 is 33. Doesn't work. What about 2 times 3 is 6. 6 times 10 is 60. Divided by 7? No. This is harder to solve talking out loud than it is to write it down. 3 times 10 equals 30 minus 7 plus 2 is equal to 23. 21, 7, 9, 7 plus 2 is 9, and then 9 times 3 is 27, minus 10 is 17. 17, 7 plus 10 times 3, 17 times 3 would be 51, divided by 2? No. Let's see. 3 times 7. 3 times 7. 3 times 7. What about 2 times 10? Oh, I got it! 2, 2 times 10, plus 7. Plus parentheses 7 minus 3. Let's see.","```python
start_state = (2, 3, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 10 equals 70""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(2, 3, 70),
    comment='""7 times 10 equals 70""',
)

# ""70 minus 3 times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70-3*2=64"",
    resulting_state=(64,),
    comment='""70 minus 3 times 2""',
)

# ""7 times 3 equals 21, plus 2 is 23, plus 10 is 33""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+2+10=33"",
    resulting_state=(33,),
    comment='""7 times 3 equals 21, plus 2 is 23, plus 10 is 33""',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 7, 10),
    comment='""2 times 3 is 6""',
)

# ""6 times 10 is 60""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(7, 60),
    comment='""6 times 10 is 60""',
)

# ""Divided by 7?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60/7=8.57"",
    resulting_state=(8.57,),
    comment='""Divided by 7?""',
)

# ""3 times 10 equals 30 minus 7 plus 2 is equal to 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10-7+2=25"",
    resulting_state=(25,),
    comment='""3 times 10 equals 30 minus 7 plus 2 is equal to 23"" (though they miscalculated)',
)

# ""7 plus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(3, 9, 10),
    comment='""7 plus 2 is 9""',
)

# ""9 times 3 is 27, minus 10 is 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-10=17"",
    resulting_state=(17,),
    comment='""9 times 3 is 27, minus 10 is 17""',
)

# ""7 plus 10 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+10)*3=51"",
    resulting_state=(2, 51),
    comment='""7 plus 10 times 3""',
)

# ""divided by 2?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""51/2=25.5"",
    resulting_state=(25.5,),
    comment='""divided by 2?""',
)

# ""3 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 10, 21),
    comment='""3 times 7""',
)

# ""2 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(3, 7, 20),
    comment='""2 times 10""',
)

# Finally, the participant finds the solution: ""2 times 10, plus 7 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10+(7-3)=24"",
    resulting_state=(24,),
    comment='""2 times 10, plus parentheses 7 minus 3""',
)
```"
1915,"[3,3,6,10]",(10-(3+3))x6,145," 3 times 3 equals 9, plus 6 equals 15, plus 10 equals 25. 16 minus 3 is 13, plus 3 is 16. 6 times 3 is 18, plus 10 equals 28, minus 3 is 25. 10 minus 3 equals 7, plus 6 equals 13, plus 3 equals 16. 3 times 10 equals 30, minus 3 is 27, minus 6 is 21. Could I make 8? Could I make, well, I have a 6, 6 times 4. Oh, 10 minus 6, 3 times 3, okay. So, 10, another parenthesis, 10 minus, um, I lost my train of thought. 10 minus, 10 minus, uh, 3 plus 3. Yeah. 10 minus parenthesis, 3 plus 3, parenthesis, parenthesis. And that equals 4. 4 times 6 equals 24. Oh, what did I do? Parenthesis, parenthesis. That's not invalid. Okay. Okay. Okay. So, 3 plus 3, no, 10 minus 3, no, 3 plus 3, plus, or times, times 6. Oh, I see where I did it wrong. Okay. One parenthesis there. 10 minus, parenthesis, 3 plus 3, parenthesis, parenthesis, times 6.","```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 equals 9, plus 6 equals 15, plus 10 equals 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 10),
    comment='""3 times 3 equals 9""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(10, 15),
    comment='""plus 6 equals 15""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+10=25"",
    resulting_state=(25,),
    comment='""plus 10 equals 25""',
)

# Going back to start state for new attempt
curr_state = graph.move_to_node(start_state)

# ""6 times 3 is 18, plus 10 equals 28, minus 3 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 10, 18),
    comment='""6 times 3 is 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+10-3=25"",
    resulting_state=(25,),
    comment='""plus 10 equals 28, minus 3 is 25"" though calculation seems off',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""10 minus 3 equals 7, plus 6 equals 13, plus 3 equals 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(3, 6, 7),
    comment='""10 minus 3 equals 7""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(3, 13),
    comment='""plus 6 equals 13""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(16,),
    comment='""plus 3 equals 16""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""3 times 10 equals 30, minus 3 is 27, minus 6 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(3, 6, 30),
    comment='""3 times 10 equals 30""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-3-6=21"",
    resulting_state=(21,),
    comment='""minus 3 is 27, minus 6 is 21""',
)

# ""Could I make 8?"" suggests setting a subgoal
graph.set_subgoal((8,), state_after_subgoal=(24,), comment='""Could I make 8?""')

# Going back to start state for final solution
curr_state = graph.move_to_node(start_state)

# ""10 minus parenthesis 3 plus 3 parenthesis"" participant finds the solution
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 6, 10),
    comment='""3 plus 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 6),
    comment='""10 minus parenthesis 3 plus 3 parenthesis""',
)

# ""4 times 6 equals 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""4 times 6 equals 24""',
)
```"
1919,"[1,11,12,12]",(12-11)+,180," Oh, gosh, okay. 1, 11, 12, and 12. 1, 11, 12, and 12. So, 12 times 12 is 144. 144 divided by, uh, that won't work either. Okay, 11 plus 1 is 12. 12 plus 12 is 24. But then what do I do with the 12? 12 plus 12 is 24. But then what do I do with the 12? 12 plus 12 is 24. But then what do I do with the 12? Okay, 11 minus 1 is 10. Okay, let's, let's see, what if, uh, 132, no? 11 times 12 is 132. 132. No. 11 times 12 is 132. 130. No. No. No. response No, that's not gonna, that won't do it either. 120. No. That's not gonna, that won't do it either. No, that's not gonna, that won't do it either. 12 minus 11 is 14. 1, ah, try this, 12, oops, 12 minus 11, okay, that gives me 1, plus 1, plus 12, no, okay, that would be 1, okay, 1, plus 1, times, okay, 11 minus, 12 minus 11 is 1, plus 1, and I know I can get there, how can I get there? That'd be 2 times 12, no, okay, I'm doing something wrong, there's something with parentheses that I'm doing wrong. I'm missing some parentheses, I'm doing something with parentheses, what am I doing wrong? Let me...","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 12 is 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 times 12 is 144""',
)

# ""11 plus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 12),
    comment='""11 plus 1 is 12""',
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(12, 24),
    comment='""12 plus 12 is 24""',
)

# ""11 minus 1 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(10, 12, 12),
    comment='""11 minus 1 is 10""',
)

# ""11 times 12 is 132""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(1, 12, 132),
    comment='""11 times 12 is 132""',
)

# ""12 minus 11 is 14"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=14"",
    resulting_state=(1, 12, 14),
    comment='""12 minus 11 is 14"" - calculation error',
    result_calc_error=True,
)

# ""12 minus 11, okay, that gives me 1, plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11+1=2"",
    resulting_state=(2, 12, 12),
    comment='""12 minus 11, okay, that gives me 1, plus 1""',
)

# ""2 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(12, 24),
    comment='""2 times 12""',
)

```"
1921,"[3,4,7,9]",(9-7)x(3x4),74," 3, 4, 7, 9. Okay, let's try 3 times 4 is 36, minus 7 is 29, 28, 27, 26. That only takes me to 26. Okay, let's try 9 minus 7, in parentheses, that's 2, that gives me the 2 in there. 2 plus, in parentheses, 3. 3 times 4, in parentheses. Come on. Oh, wait a minute. I want it to be times, times, in parentheses, 3 times 4. Come on, let's get this, let's get this.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 4 is 36"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=36"",
    resulting_state=(7, 9, 36),
    comment='""3 times 4 is 36"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""minus 7 is 29, 28, 27, 26"" - participant is counting down from their incorrect calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-7=26"",
    resulting_state=(9, 26),
    comment='""minus 7 is 29, 28, 27, 26"" - participant is counting down',
    result_calc_error=True,
)

# ""9 minus 7, in parentheses, that's 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 4),
    comment='""9 minus 7, in parentheses, that\'s 2""',
)

# ""3 times 4, in parentheses"" - participant correctly calculates this time
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(2, 12),
    comment='""3 times 4, in parentheses""',
)

# Finally, based on their submitted response (9-7)x(3x4), they multiply these together
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='Based on submitted response ""(9-7)x(3x4)"", they multiply 2 and 12',
)
```"
1927,"[1,6,11,13]",,180," Okay. 1, 6, 11, 13. To do 11, 13 minus 11 is 2. And that would give me 12 for this? No. 6, 12, 18? No. What about doing 11 minus 6, which would be 5 minus... dang it. What about... this shouldn't work. Would it? That would be 7. It would most likely have to be like this. Or what about divided by? I didn't realize that was a thing. What is 66 divided by 13? I have no idea. 26, 39, 52, 65. It would be somewhere around like 6. Okay. Dang, I thought I'd be better at this. Hmm. 7... 12... that wouldn't be... what about 10... no. Oh. Uh... Wait, no. Nevermind. 10, 20... I might have to draw out the clock on this one. Damn, I'm dumb. Um... 5... 18... no. What about... What about 6 times 13? What is that? 78? Right? Yeah, I am. Does this microphone work? Does it tell me if it works? This page is accessing your microphone. Yeah. It says I'm using it down here. So...","```python
start_state = (1, 6, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 11 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 6),
    comment='""13 minus 11 is 2""',
)

# ""11 minus 6, which would be 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(1, 5, 13),
    comment='""11 minus 6, which would be 5""',
)

# ""That would be 7"" - participant may be adding 1+6
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(7, 11, 13),
    comment='""That would be 7""',
)

# ""What is 66 divided by 13?"" - participant may have multiplied 6*11=66 first
new_state = graph.explore_operation(
    curr_state,
    operation=""6*11=66"",
    resulting_state=(1, 13, 66),
    comment='""What is 66 divided by 13?""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""66/13=6"",
    resulting_state=(1, 6),
    comment='""It would be somewhere around like 6""',
    result_calc_error=True,
)

# ""6 times 13? What is that? 78?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*13=78"",
    resulting_state=(1, 11, 78),
    comment='""6 times 13? What is that? 78?""',
)

# The rest of the transcript appears to be the participant checking if the microphone is working
```"
1934,"[6,7,9,12]",(7-(12-9))x6,143," 6, 7, 9, 12... 6, 12, 18, 24, that would be 6 times 4 to get that, so... It'll give us 3... Oh. Oh, by pure chance. So, 12 minus 9 should be 3... Oh, wait. 7 minus 12 minus 9 parentheses times 6, because 7 minus 12 minus 9, which is 3, would be 4 times 6... 6 times 4 is 24. I did use all of the numbers. Why do I need to re-4m at this? Ummmmmmmmmm.... Can I put them all in one parenthesis like 6 times 7 minus 12 minus 9 that would be negative 5 negative 14 no that wouldn't work. 6 times 7 minus that amount I did use all the numbers what are you doing oh wait at 6 what if we put it next to it like a regular one we can't because I have to do that. 7 minus 9 minus 12 gives us 4 times 6 I just realized the issue. How do I reformat this to work? Let's try putting parentheses here minus that so 12 minus 9 then put two of these times 6.","```python
start_state = (6, 7, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6, 12, 18, 24, that would be 6 times 4 to get that""
# The participant seems to be setting a subgoal of getting 4 to multiply by 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6, 12, 18, 24, that would be 6 times 4 to get that""',
)

# ""12 minus 9 should be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 6, 7),
    comment='""12 minus 9 should be 3""',
)

# ""7 minus 12 minus 9 parentheses times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-(12-9)*6=24"",
    resulting_state=(24,),
    comment='""7 minus 12 minus 9 parentheses times 6""',
    result_calc_error=True,  # This calculation would not actually give 24
)

# ""6 times 7 minus 12 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7-12-9=-14"",
    resulting_state=(-14,),
    comment='""6 times 7 minus 12 minus 9 that would be negative 5 negative 14""',
    result_calc_error=True,
)

# ""7 minus 9 minus 12 gives us 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-9-12=-14"",
    resulting_state=(-14, 6),
    comment='""7 minus 9 minus 12 gives us 4"" - participant makes calculation error',
    result_calc_error=True,
)

# Finally, the participant seems to arrive at the correct formulation
# ""12 minus 9 then put two of these times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-(12-9))*6=24"",
    resulting_state=(24,),
    comment='""12 minus 9 then put two of these times 6"" - participant arrives at correct solution',
)
```"
1939,"[3,9,13,13]",(13+13-9,180," Okay, 3 times 9, 9 times 9, 9 plus 9, 9 times 3 is 27. No, I won't do it. 13 plus, 13 times 9, 13 times 9, 13 times 3, 13 minus 9 is 4. You can see, minus 3, 6. It's actually 10. Nine times three is 27. 22 minus 13 is crazy. 9 minus 13. Yeah, 3, 9, 13, 13, 13 plus 13 minus 9, 26, okay, that's good, 13, 13 plus 13. Minus 9, no, delete, delete, minus 9, close brackets, divided by 3, okay, 13 plus 13 is 26, minus 9 is, I think, 26 minus 9 is 17, 17 by 3. Didn't give you that, 13 plus 13, 13 plus 13 is 26, 26, I have to find a way to get through. 13 minus, 13 minus 9 is 4, times, decimal, wow, she's hectic, wow, wow, wow, wow, wow, wow,","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""9 times 3 is 27""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9 is 4""',
)

# ""Nine times three is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""Nine times three is 27""',
)

# ""13 plus 13 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13-9=17"",
    resulting_state=(3, 17),
    comment='""13 plus 13 minus 9, 26, okay, that\'s good, 13, 13 plus 13. Minus 9""',
)

# ""divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17/3=5.67"",
    resulting_state=(5.67,),
    comment='""divided by 3""',
)

# ""13 minus 9 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9 is 4""',
)
```"
1941,"[5,5,7,7]",(5x5)-(7/7),52, 5 x 5 is 24. 7 x 7 is 49. 49-25. 5 x 5 is 24! 5 x 5 is 25. Minus 7 divided by 7 is 1. So 25 divided by 1. 25 minus 1 is 24. So there we go. 5. Minus 7 divided by 7.,"```python
start_state = (5, 5, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 x 5 is 24"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=24"",
    resulting_state=(7, 7, 24),
    comment='""5 x 5 is 24"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""7 x 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(5, 5, 49),
    comment='""7 x 7 is 49""',
)

# ""5 x 5 is 24!"" - participant makes same calculation error again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=24"",
    resulting_state=(7, 7, 24),
    comment='""5 x 5 is 24!"" - participant makes same calculation error again',
    result_calc_error=True,
)

# ""5 x 5 is 25"" - participant corrects their error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(7, 7, 25),
    comment='""5 x 5 is 25"" - participant corrects their error',
)

# ""Minus 7 divided by 7 is 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-7/7=24"",
    resulting_state=(24,),
    comment='""Minus 7 divided by 7 is 1. So 25 minus 1 is 24""',
)
```"
1943,"[7,9,11,11]",((9-7)+11)+11,72," Okay, okay. I have 7, 9, 11, 11. 7, 9, how do we go with this? Okay, okay. So 9 minus 7 is 2, plus 11 is 23. 23 plus 11. Okay, no, no. 9 minus 7 is 2. 2 plus 11 is 13. 13 plus 11 is 24. Yeah. So open bracket 7. No, 9. 9 minus, sorry. Open another bracket. 9 minus 7. Plus 11. No. Plus 11. It's brackets. Plus 11.","```python
start_state = (7, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 11, 11),
    comment='""9 minus 7 is 2""',
)

# ""plus 11 is 23"" - participant makes a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+11=23"",
    resulting_state=(11, 23),
    comment='""plus 11 is 23"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""23 plus 11"" - participant realizes this is wrong (""Okay, no, no"")

# Participant starts over: ""9 minus 7 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 11, 11),
    comment='""9 minus 7 is 2""',
)

# ""2 plus 11 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+11=13"",
    resulting_state=(11, 13),
    comment='""2 plus 11 is 13""',
)

# ""13 plus 11 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(24,),
    comment='""13 plus 11 is 24""',
)

```"
1947,"[1,1,4,6]",(4x1x1)x6,23," Okay, 24 divided by 6 is 4. So, we're going to get these other ones to equal 4, which means we could do 4 times 1 times 1, which is 4, and then we can multiply all that by 6.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 6 is 4"" - participant is working backward from the goal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 is 4"" - participant is working backward from the goal',
)

# ""4 times 1 times 1, which is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*1*1=4"",
    resulting_state=(4, 6),
    comment='""4 times 1 times 1, which is 4""',
)

# ""and then we can multiply all that by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""and then we can multiply all that by 6""',
)
```"
1948,"[2,4,7,12]",,180," Okay, 24, I can divide that by 12. No, that wouldn't work because that would leave 2. Here, 12. Yeah, 2. No, 12. So 12 plus 7, oh, 4 and 2 is 6, plus 12 is 18, plus 7, 19, 20, 21, 22, 23, 24, 25. Ooh, tricky, tricky. Okay. Interesting. So 7 minus 4 is 3. What if I can get that to cancel out and just do 12 times 2? Um, which means you have to get, you have to get that to be a 2 somehow. So 7 minus, no, 7 minus 2 is 5. No, that won't work. Shoot, this is a tough one. Okay. 12, 7, 4 is 6. 6 plus 12 is 18. No, 6 and, okay, what if we go over? 4 times 7 is 28. Yeah, 28. Divide 28 by 2, you get 14. 14 plus 12. Oh, what did I just do? 7 times 4 is 28. If you subtract, no, then you divide that by 2. That's right, that's right, that's right. 7 times 4 divided by 2 plus 12. 12 would give you, 7 times 4 is 28. Divided by 2 is 14 plus 12 is 20. Oh, no, it's not 24. 20, 14 plus 12 is not 24. Oh, I feel good about that. Okay. What am I freaking doing wrong here? 12 times, what's 7 times 2 is 14? 7 times 2 is 14. Minus 4 is 10. Plus 12 is 22. 7 times, that's 4 times 12 is, what, 48? 48 divided by 2 is 28. 20.","```python
start_state = (2, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24, I can divide that by 12"" suggests working backward from 24
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""24, I can divide that by 12"" suggests working backward from 24',
)

# ""4 and 2 is 6, plus 12 is 18, plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+2=6"",
    resulting_state=(6, 7, 12),
    comment='""4 and 2 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12+7=25"",
    resulting_state=(25,),
    comment='""plus 12 is 18, plus 7, 19, 20, 21, 22, 23, 24, 25""',
)

# ""7 minus 4 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(2, 3, 12),
    comment='""7 minus 4 is 3""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(4, 5, 12),
    comment='""7 minus 2 is 5""',
)

# ""12, 7, 4 is 6"" participant seems to be adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""4+2=6"",
    resulting_state=(6, 7, 12),
    comment='""12, 7, 4 is 6""',
)

# ""6 plus 12 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12=18"",
    resulting_state=(7, 18),
    comment='""6 plus 12 is 18""',
)

# ""4 times 7 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(2, 12, 28),
    comment='""4 times 7 is 28""',
)

# ""Divide 28 by 2, you get 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28/2=14"",
    resulting_state=(12, 14),
    comment='""Divide 28 by 2, you get 14""',
)

# ""14 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+12=26"",
    resulting_state=(26,),
    comment='""14 plus 12""',
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(4, 12, 14),
    comment='""7 times 2 is 14""',
)

# ""Minus 4 is 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-4=10"",
    resulting_state=(10, 12),
    comment='""Minus 4 is 10""',
)

# ""Plus 12 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(22,),
    comment='""Plus 12 is 22""',
)

# ""4 times 12 is, what, 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=48"",
    resulting_state=(2, 7, 48),
    comment='""4 times 12 is, what, 48""',
)

# ""48 divided by 2 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/2=24"",
    resulting_state=(7, 24),
    comment='""48 divided by 2 is 28"" - participant makes calculation error',
    result_calc_error=True,
)
```"
1949,"[1,4,7,13]",(7+13+4)/1,56," Okay, so 4, 24 is not divisible by 13, which means you have to do something to it, the 13 can't multiply, divide by 13 to get it, probably. So 24 divided by 7 is 3, add 3 to 13. Well, 14 and 13 is 17, 18, 19, 20, 21, 22, 23, 24. You just divide that by 1, can't you? You times that by 1, right? 7 and 13 is 20, yeah, we'll do that. 7 plus 13 plus 4 is 24, divide by 1.","```python
start_state = (1, 4, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 is not divisible by 13"" - participant seems to be working backward from 24
graph.set_subgoal(
    (13, 24),
    state_after_subgoal=(24,),
    comment='""24 is not divisible by 13"" - participant seems to be working backward from 24',
)

# ""7 and 13 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(1, 4, 20),
    comment='""7 and 13 is 20""',
)

# ""7 plus 13 plus 4 is 24, divide by 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+13+4)/1=24"",
    resulting_state=(24,),
    comment='""7 plus 13 plus 4 is 24, divide by 1""',
)
```"
1950,"[4,7,7,8]",(7-(8-7))x4,118," Okay, you can divide 24 by 8. Let's see. 8 times what equals 24? Times 3. 4 minus 7. 7 minus 4 is 3. We have this random 7. 7 times 7 is 42. No. Yeah, 42. No. 7 times 7 is 49. 49 is divided by 4. 7 times 4 is 28. 7 over 7 is just 1. 4 over 8 is 2. 7 times 2 is 14. Plus 7. No. 8 over 4 is...well, that's also 1 half. 7 times 7...no, I don't get the decimals. They don't work. 4 plus 8 is 12. 4 plus 8 is 12. No. 24 divided by 7...can't do that. 24 divided by 4 is 6. So can we make 6 out of this? 8 minus 7 is 1. Yes. Yeah. No. No. 8 minus 7 is 1. 7 minus 8 minus 7. Ah-ha-ha. Oh, um, which means we need to do 7 minus parentheses 8 minus 7 parentheses times 4. 8 minus 7 is 1. 7 minus 7 is 6. 6 times 4 is 24.","```python
start_state = (4, 7, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times what equals 24? Times 3"" - participant seems to be working backward
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times what equals 24? Times 3""',
)

# ""7 minus 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 7, 8),
    comment='""7 minus 4 is 3""',
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(4, 8, 49),
    comment='""7 times 7 is 49""',
)

# ""49 is divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/4=12.25"",
    resulting_state=(8, 12.25),
    comment='""49 is divided by 4""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(7, 8, 28),
    comment='""7 times 4 is 28""',
)

# ""7 over 7 is just 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 4, 8),
    comment='""7 over 7 is just 1""',
)

# ""4 over 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 7, 7),
    comment='""4 over 8 is 2""',
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(7, 14),
    comment='""7 times 2 is 14""',
)

# ""4 plus 8 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(7, 7, 12),
    comment='""4 plus 8 is 12""',
)

# ""24 divided by 4 is 6"" - participant seems to be working backward again
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 4 is 6"" - participant working backward',
)

# ""8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 4, 7),
    comment='""8 minus 7 is 1""',
)

# Finally, the participant finds the solution: ""7 minus parentheses 8 minus 7 parentheses times 4""
# They break this down: ""8 minus 7 is 1. 7 minus 7 is 6. 6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-(8-7))*4=24"",
    resulting_state=(24,),
    comment='""7 minus parentheses 8 minus 7 parentheses times 4. 8 minus 7 is 1. 7 minus 7 is 6. 6 times 4 is 24""',
)
```"
1951,"[5,5,8,13]",(13-5-5)x8,21," All right, so 24 divided by 8 is 3. 13 minus 10 is 3. So we do 13 minus 5 minus 5 times 8.","```python
start_state = (5, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 8 is 3"" - participant is working backward from the goal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 8 is 3"" - participant is working backward from the goal',
)

# ""13 minus 10 is 3"" and ""13 minus 5 minus 5"" shows they found a way to make 3 using the available numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5-5=3"",
    resulting_state=(3, 8),
    comment='""13 minus 5 minus 5""',
)

# Then they multiply by 8 to reach 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""times 8""',
)
```"
1952,"[2,2,7,7]",((7+7)-2)x2,29," Okay, 7 and 7 is 14. 2 and 2 is 4. That gives you 18. Not enough. So if we can make 12, we can multiply it by 2. 7 and 7 is 14 minus 2 times 2 is 24. 7 plus 7 minus 2 is 12 times 2 is 24.","```python
start_state = (2, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(2, 2, 14),
    comment='""7 and 7 is 14""',
)

# ""2 and 2 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 7, 7),
    comment='""2 and 2 is 4""',
)

# ""Not enough. So if we can make 12, we can multiply it by 2"" - participant sets a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""So if we can make 12, we can multiply it by 2""',
)

# ""7 and 7 is 14 minus 2 times 2 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((7+7)-2)*2=24"",
    resulting_state=(24,),
    comment='""7 and 7 is 14 minus 2 times 2 is 24""',
)
```"
1954,"[4,7,12,12]",,180," Okay, 12 and 12 is 24. 4 times 7 is 28. That doesn't work. So we could, let's see, 4 times 12 is 28. If you subtracted 12 from 28, you'd get 14 plus 7 is 21. 24 is not divisible by 7, which means 7 has to be added or subtracted, I think, before we got involved in this, probably. Um, 24, oh, if only we could get those to be 0. So, 24 times 4, 12 minus 4 is 8. 8 plus 7 is, what, 15 plus 12 would be 20, no, 12 minus 7 is 4, 8, 9, 10, 11, 12. So 12 minus 7 is 5. 5 and 4 is 9. 12 and 9 is 21. That's not it. I don't have a good idea, though, of 12 minus 7 being 5. 5 times 4 is, no, 12 minus 7, no, okay. 12 minus 4 is 8. 12 minus 8 is 4. 7 times 4 is 28. Can't do that. Um, 12 minus 7 times, ugh, 24. If we add 4 at the end, then we would have to make 20 out of 7, 12, and 12. 12 and 12 is 24 minus 7, no. Oh, oh, 12 and 12 is 24 minus 7 is, oh gosh, 4, that's 17. Plus 4. 18, 19, 20, 21, no. That's not how that works. Um, 4 times 12 is 48. 48 minus 12 is 36, minus 7 is 29, it's not that. 4, 12 divided by 4 is 3, times 7 is 21.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 7, 24),
    comment='""12 and 12 is 24""',
)

# ""4 times 7 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(12, 12, 28),
    comment='""4 times 7 is 28""',
)

# ""4 times 12 is 28"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=28"",
    resulting_state=(7, 12, 28),
    comment='""4 times 12 is 28"" - calculation error',
    result_calc_error=True,
)

# ""If you subtracted 12 from 28, you'd get 14 plus 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-12+7=23"",
    resulting_state=(23,),
    result_calc_error=True,
    comment='""If you subtracted 12 from 28, you\'d get 14 plus 7 is 21""',
)

# ""12 minus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 12),
    comment='""12 minus 4 is 8""',
)

# ""8 plus 7 is, what, 15 plus 12 would be 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7+12=27"",
    resulting_state=(27,),
    comment='""8 plus 7 is, what, 15 plus 12""',
)

# ""12 minus 7 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 12),
    comment='""12 minus 7 is 5""',
)

# ""5 and 4 is 9. 12 and 9 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+4+12=21"",
    resulting_state=(21,),
    comment='""5 and 4 is 9. 12 and 9 is 21""',
)

# ""12 minus 4 is 8. 12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 12),
    comment='""12 minus 4 is 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 7),
    comment='""12 minus 8 is 4""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(12, 12, 28),
    comment='""7 times 4 is 28""',
)

# ""12 and 12 is 24 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12-7=17"",
    resulting_state=(4, 17),
    comment='""12 and 12 is 24 minus 7""',
)

# ""Plus 4. 18, 19, 20, 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+4=21"",
    resulting_state=(21,),
    comment='""Plus 4. 18, 19, 20, 21""',
)

# ""4 times 12 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=48"",
    resulting_state=(7, 12, 48),
    comment='""4 times 12 is 48""',
)

# ""48 minus 12 is 36, minus 7 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-12-7=29"",
    resulting_state=(29,),
    comment='""48 minus 12 is 36, minus 7 is 29""',
)

# ""12 divided by 4 is 3, times 7 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4*7=21"",
    resulting_state=(12, 21),
    comment='""12 divided by 4 is 3, times 7 is 21""',
)
```"
1956,"[3,3,6,10]",(10-6)x3x3,180," Okay. 3, 3, 6, and 10. Hmm. Okay. Um, 18. 3 times 3. Mmm, minus 6? Plus 9. No, no, no, no, no. Wait. Minus 10? No. Okay. 3 divided by 3 is 1. Okay. Um... Uh, hmm. Hmm. A 10? Okay. A 20? No, no, no, no, no. Um, 6? 6? 24 divided by 6. 24 divided by 6? 4 hmm okay 3 3 plus 3 equals 6 times 6 minus 10 damn it 0 no that's gonna be 0 oh my gosh um 10 hmm okay okay we're going somewhere 4 okay no wait that's 4","```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 10),
    comment='""3 times 3""',
)

# ""minus 6? Plus 9"" participant seems to be trying operations with the 9 they just computed
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 10),
    comment='""minus 6""',
)

new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(6, 19),
    comment='""Plus 9""',
)

# ""3 divided by 3 is 1"" participant goes back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 6, 10),
    comment='""3 divided by 3 is 1""',
)

# ""24 divided by 6"" participant seems to be working backwards from 24
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""24 divided by 6"" participant seems to be working backwards from 24',
)

# ""3 plus 3 equals 6 times 6 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 6, 10),
    comment='""3 plus 3 equals 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6-10=26"",
    resulting_state=(26,),
    comment='""6 times 6 minus 10""',
)

# ""4"" participant seems to compute 10-6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(3, 3, 4),
    comment='""4"" participant seems to compute 10-6',
)

# Based on their final answer (10-6)x3x3, they must have then multiplied 4 by both 3s
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3*3=36"",
    resulting_state=(36,),
    comment=""Based on their final answer, they multiplied 4 by both 3s"",
)
```"
1957,"[1,3,3,10]",(3+1)x3+10,180," Okay, this should be easy. Okay, I think I got this one. Um, 10 minus, nah, 3 minus 1. 3 divided by 3, wait, wait, wait, wait, wait, wait, wait, wait, wait, wait, no, wait, 3, um, 3, 2, 2 times 10. Minus 3? No. Plus 3? Divided by 3? Goddammit. 3? Mmmmm. Okay, um, 3, 2, 1, 3, 2, 3, 2, um... Uhh... Okay. Hmmmm.... Uhhh... Okay 13. 13 minus 1 is 12. Plus 3? No. Okay. Gosh. Gosh. Okay. 10? No. Um. Is 4. Times 10. 4 times 10. No. No. And then plus 10? Ugh.","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus, nah"" - participant starts to try something with 10 but abandons it

# ""3 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-1=2"",
    resulting_state=(2, 3, 10),
    comment='""3 minus 1""',
)

# ""2 times 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(3, 20),
    comment='""2 times 10""',
)

# ""Minus 3? No. Plus 3? Divided by 3?"" participant considers operations with 3 but doesn't commit

# ""13"" - participant may be adding 10+3
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(1, 3, 13),
    comment='""13""',
)

# ""13 minus 1 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(3, 12),
    comment='""13 minus 1 is 12""',
)

# ""Plus 3? No."" participant considers adding 3 but doesn't commit

# ""4 times 10"" - the 4 likely comes from 3+1
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+1)*10=40"",
    resulting_state=(3, 40),
    comment='""4 times 10"" - the 4 likely comes from 3+1',
)

# ""And then plus 10?"" participant considers adding 10 but doesn't commit

```"
1961,"[1,11,11,12]",,180," Okay, this one should be easy. Okay. 24 divided by 2. Okay. Okay. Okay. Ooh! I think I got it. Okay. 11 minus... ... ... ... ... ... What? No! Okay. 10. No, no, no, no, no, no, no, no, no. No, no, no, no, no, no, no, no. No, wait, wait, wait, wait, wait, wait, wait, wait, wait, wait. Plus 1. Plus 1. Plus 1. Plus 1. Plus 1. Plus 1. Plus 1. Plus 1. Plus 1. Dang it! No, no, no, no, no, no. 12 minus 1. Dang it! No, no, no, no, no, no, no. 12 minus 1. That'll be 11, though, wait, okay, um, no, no, no, no, 11 plus 12, 12 divided by, ahem, 12, oh, wait, wait, wait, wait, wait, wait, no, wait, 11 plus 1 is 12 divided by 11 times 12. Dude, I need to get this, I got it, okay, 20, no, okay, divided by 12, it's 2.","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 2"" suggests participant is working backward from 24
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""24 divided by 2"" suggests participant is working backward from 24',
)

# ""11 minus..."" participant starts to try an operation but doesn't complete it

# ""12 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(11, 11, 11),
    comment='""12 minus 1""',
)

# ""11 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(1, 11, 23),
    comment='""11 plus 12""',
)

# ""11 plus 1 is 12 divided by 11 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""((11+1)/11)*12=13.09"",
    resulting_state=(13.09,),
    comment='""11 plus 1 is 12 divided by 11 times 12""',
)

# ""divided by 12, it's 2"" seems to be dividing something by 12 to get 2
graph.set_subgoal(
    (24, 12),
    state_after_subgoal=(2,),
    comment='""divided by 12, it\'s 2"" seems to be dividing something by 12 to get 2',
)
```"
1964,"[1,1,4,6]",(4x1)x(6x1),34," Okay, we have a 4, a 6, and two 1s. 6 times 4 would be 24. Maybe just, I could do 4 times 1, so there's 4, and then times another parenthesis of 6 times 1. So there's a 6, so Ancestry is making 6 times 4.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 would be 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 would be 24""',
)

# ""4 times 1, so there's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*1=4"",
    resulting_state=(1, 4, 6),
    comment='""4 times 1, so there\'s 4""',
)

# ""6 times 1. So there's a 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1=6"",
    resulting_state=(4, 6),
    comment='""6 times 1. So there\'s a 6""',
)

# ""making 6 times 4"" - participant multiplies the results together
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""making 6 times 4""',
)
```"
1968,"[2,4,7,12]",,180," Okay, so we have a 12, a 7, and a 4. We could do maybe, 4 plus 7 would be 11, plus 12 would be 23. Okay, so that wouldn't, that wouldn't work. Just 20, okay. Maybe if I multiply 7 and 4 it would be 20. But then that wouldn't. 7 and 4 would be 24. No, 28. Okay, that wouldn't work. But if I take 2, maybe, I could do 12 times 2, yeah, and that would be 24. But I still have 4 and 7. Maybe if I subtract 12 over 2, it would be 10. And then, add 4 and 7. That would be 21. Maybe, 12 plus 4 and 7. I can't. Maybe 7 minus 12 would be 5. Times 4 would be 20. Now, how about...","```python
start_state = (2, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 7 would be 11, plus 12 would be 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7+12=23"",
    resulting_state=(2, 23),
    comment='""4 plus 7 would be 11, plus 12 would be 23""',
)

# ""Maybe if I multiply 7 and 4 it would be 20"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=20"",
    resulting_state=(2, 12, 20),
    comment='""Maybe if I multiply 7 and 4 it would be 20""',
    result_calc_error=True,
)

# ""7 and 4 would be 24. No, 28"" - participant corrects calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(2, 12, 28),
    comment='""7 and 4 would be 24. No, 28"" - participant corrects calculation',
)

# ""12 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(4, 7, 24),
    comment='""12 times 2""',
)

# ""12 over 2, it would be 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=10"",
    resulting_state=(4, 7, 10),
    comment='""12 over 2, it would be 10""',
    result_calc_error=True,
)

# ""add 4 and 7. That would be 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+4+7=21"",
    resulting_state=(21,),
    comment='""add 4 and 7. That would be 21""',
)

# ""7 minus 12 would be 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(2, 4, 5),
    comment='""7 minus 12 would be 5""',
)

# ""Times 4 would be 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(2, 20),
    comment='""Times 4 would be 20""',
)
```"
1973,"[3,3,3,4]",3x(4+3)+3,125," Okay, so you could do 3 times 3 is 9, plus 3 times 4 is 12. 12 plus 9, no, we're not there yet, so that wouldn't do it. Let's do 3 plus 3, that's 9. 9 times 4, it's 32, so no. Let's see if you did 4 times 3 is 12, times, I don't know, let's see, let's see if you did 3 times 3 is 6, I mean 3 times 3 is 9, excuse me. So you couldn't do that. You could do 3 plus 3 plus 3 is a 9, times 4, that's 36. You could do 4 times 3 is 12. 4 plus 3. 4 plus 3 is 7, times 3 is 21, plus 3, okay, so that would be 4 plus 3, gives you 7. Okay, so you want this to all be times 3. 3 times 4 plus 3, which is 21, plus 3, so that would be 21, yeah.","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9, plus 3 times 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 4, 9),
    comment='""3 times 3 is 9""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(9, 12),
    comment='""plus 3 times 4 is 12""',
)

# ""12 plus 9"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(21,),
    comment='""12 plus 9""',
)

# ""Let's do 3 plus 3, that's 9"" - this seems to be a calculation error, 3+3=6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=9"",
    resulting_state=(3, 4, 9),
    comment='""Let\'s do 3 plus 3, that\'s 9"" - calculation error',
    result_calc_error=True,
)

# ""9 times 4, it's 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=32"",
    resulting_state=(3, 32),
    comment='""9 times 4, it\'s 32""',
    result_calc_error=True,
)

# ""4 times 3 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(3, 3, 12),
    comment='""4 times 3 is 12""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 4, 9),
    comment='""3 times 3 is 9""',
)

# ""3 plus 3 plus 3 is a 9, times 4, that's 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3+3)*4=36"",
    resulting_state=(36,),
    comment='""3 plus 3 plus 3 is a 9, times 4, that\'s 36""',
)

# ""4 plus 3 is 7, times 3 is 21, plus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*((4+3))+3=24"",
    resulting_state=(24,),
    comment='""4 plus 3 is 7, times 3 is 21, plus 3""',
)
```"
1974,"[1,11,12,12]",,180," So you could do 12 times 1, 12 times 2. It's got to be a division one. What's 12 times 12? 144. What's 144 divided by 11? Okay. Okay, hold on. Let's see. What's 12 times 12? So that is 24 if you added those together. You had to add them together, though. Hmm. I'm just, okay, I'm just wondering here. If you did, I mean, yeah, you can't divide it by, okay, so what happens if you did 13? 13 times 12 divided by 11? We're not there yet. It's too big. Let's do 11 plus 12. No. Let's do 13. You could do, that's only a 4. What's 11 plus 12? The answer is 23. 4. Well, that is 12, and that's 12, and that's 12. So if you did 12, 12, 12, you'd have to eliminate one. 11 plus 1, 12, 11 plus 1, times 12 divided by 12. No. That's 10. 11 minus 1 is 10. 11 minus, okay, 10 times 12. 120 divided by 12. Which just brings you to 10. Okay. Okay. So, that is 12. What's 11 plus 1? We're not there yet. You'd have to eliminate one. Well, that is","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*1=12"",
    resulting_state=(11, 12, 12),
    comment='""12 times 1""',
)

# ""12 times 12? 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""What\'s 12 times 12? 144""',
)

# ""What's 144 divided by 11?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/11=13.09"",
    resulting_state=(1, 13.09),
    comment='""What\'s 144 divided by 11?""',
)

# ""11 plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(1, 12, 23),
    comment='""11 plus 12. The answer is 23""',
)

# ""11 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 12),
    comment='""11 plus 1""',
)

# ""11 minus 1 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(10, 12, 12),
    comment='""11 minus 1 is 10""',
)

# ""10 times 12. 120 divided by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12/12=10"",
    resulting_state=(10,),
    comment='""10 times 12. 120 divided by 12""',
)
```"
1975,"[3,4,7,9]",,180," I'm so glad they switched us so I can try a new one here um 12 do 7 times 5 7 times 9 is 50 or no 63 63 so that's 60 60 divided by 4 15 they're not there 7 times 4 is 28 27 26 25 28 minus 9 no that's not it either you do 10 11 12 12 times 7 84 divided by 4 and I thought I was close 9 minus 3 is 6 times 4 is 24 that's not going to help you so I'm as if you did 9 times 4 is 36 what's 36 times 7 two 52 divided by three. Okay. I mean, let's just add them, right? 14, 15, 16, 17, 18, 19. It's going to be 23, right? 14, 15, 16, 20, 23. Darn it. Okay. Oh man. Oh, math. Remember this now. 36 minus it's 29, 28, 27. That's 26. We're close. Okay. Nine plus four. Wow. Nine. Hmm. I'm just trying to think. Four times seven is 28. 28 times three. 28 times nine. We want to get something like, we want to get, we want to get six, we want to get seven.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 9 is 50 or no 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(3, 4, 63),
    comment='""7 times 9 is 50 or no 63""',
)

# ""60 divided by 4 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63/4=15"",
    resulting_state=(3, 15),
    comment='""60 divided by 4 15""',
    result_calc_error=True,
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(3, 9, 28),
    comment='""7 times 4 is 28""',
)

# ""28 minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-9=19"",
    resulting_state=(3, 19),
    comment='""28 minus 9""',
)

# ""9 minus 3 is 6 times 4 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-3)*4=24"",
    resulting_state=(7, 24),
    comment='""9 minus 3 is 6 times 4 is 24""',
)

# ""9 times 4 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(3, 7, 36),
    comment='""9 times 4 is 36""',
)

# ""what's 36 times 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36*7=252"",
    resulting_state=(3, 252),
    comment='""what\'s 36 times 7""',
)

# ""divided by three""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""252/3=84"",
    resulting_state=(84,),
    comment='""divided by three""',
)

# ""let's just add them"" participant adds all numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+4+7+3=23"",
    resulting_state=(23,),
    comment='""let\'s just add them""',
)

# ""four times seven is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(3, 9, 28),
    comment='""four times seven is 28""',
)

# The participant mentions ""28 times three"" and ""28 times nine"" but doesn't actually compute these values
# The transcript ends with the participant stating they want to get to 6 or 7, which seems to be setting subgoals
graph.set_subgoal((6,), state_after_subgoal=(24,), comment='""we want to get six""')
graph.set_subgoal((7,), state_after_subgoal=(24,), comment='""we want to get seven""')
```"
1977,"[2,3,6,6]",(6-3),180," 6 times 6 is 36. 36 divided by 2. 36 divided by 2 is 18 plus 3. That would bring me to 22. 18. 18 plus 6 is 24. Let's see. 6 times 2 is 12. 6 plus, so we could do 6. We could do 6. Plus 6 is 12. Times 2 is 24. But if you did this, let's see. 6 plus 2 is 8. 8 times 6. 8 times 6. It's 8 times 6 is 48. 48 divided by 3. 48 divided by 3. Oh, man. Or if you did this, if you did 3 minus 2, that gives you 1. Times. Or you could do 6 minus 3 is 3. 6 minus 3 is 3. Sorry. 6 minus 3 is 3. Ah, I got it. 6 minus, okay, I get it. Hold on. Do 6 minus 3 is 3. 6 minus 3 is 3. 6 minus 3 is 3. Okay, so 3. 3. Oh, I had it. . .","```python
start_state = (2, 3, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 3, 36),
    comment='""6 times 6 is 36""',
)

# ""36 divided by 2 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/2=18"",
    resulting_state=(3, 18),
    comment='""36 divided by 2 is 18""',
)

# ""plus 3. That would bring me to 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3=22"",
    resulting_state=(22,),
    comment='""plus 3. That would bring me to 22""',
    result_calc_error=True,
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""6 times 2 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(3, 6, 12),
    comment='""6 times 2 is 12""',
)

# ""6 plus 6 is 12. Times 2 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+6)*2=24"",
    resulting_state=(3, 24),
    comment='""6 plus 6 is 12. Times 2 is 24""',
)

# ""6 plus 2 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+2=8"",
    resulting_state=(3, 6, 8),
    comment='""6 plus 2 is 8""',
)

# ""8 times 6 is 48""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(3, 48),
    comment='""8 times 6 is 48""',
)

# ""48 divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/3=16"",
    resulting_state=(16,),
    comment='""48 divided by 3""',
)

# ""3 minus 2, that gives you 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-2=1"",
    resulting_state=(1, 6, 6),
    comment='""3 minus 2, that gives you 1""',
)

# ""6 minus 3 is 3"" repeated several times
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(2, 3, 6),
    comment='""6 minus 3 is 3"" repeated several times',
)
```"
1978,"[8,8,8,11]",,180," Oh, I feel like I did this one already. It's a pain in the tush. 16 plus, so that's, that is 24. 88 divided by 8, it's 10, now it's 18, what about 11 times 16? 176 divided by 8. Mmm, that's so close. I'm just stuck. Okay. 80, let's see. Hmm. I feel like, what happens if you did 8 times 8 times 8? 512 divided by 11. Okay, what happens if you did 8 times 8, which is 64, subtract 8. How do I get to 40? What's 11? Hmm. 240. What's the factors of 11? Okay. So obviously that can't make it. So. 88 times 8. Hmm. Let's see. 16 minus 11 is 5. 16 minus 11. Hmm.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""16 plus, so that's, that is 24"" - participant likely adding 8+8=16
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(8, 11, 16),
    comment='""16 plus, so that\'s, that is 24"" - participant likely adding 8+8=16',
)

# ""88 divided by 8, it's 10"" - participant seems to be concatenating two 8s to make 88
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*8)/8=8"",
    resulting_state=(8, 11),
    comment='""88 divided by 8, it\'s 10"" (though they made a calculation error)',
    result_calc_error=True
)

# ""11 times 16"" - participant needs to make 16 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(8, 11, 16),
    comment='""11 times 16"" - first making 16',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*16=176"",
    resulting_state=(8, 176),
    comment='""11 times 16""',
)

# ""176 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""176/8=22"",
    resulting_state=(22,),
    comment='""176 divided by 8""',
)

# ""8 times 8 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8*8=512"",
    resulting_state=(11, 512),
    comment='""8 times 8 times 8""',
)

# ""512 divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""512/11=46.55"",
    resulting_state=(46.55,),
    comment='""512 divided by 11""',
)

# ""8 times 8, which is 64, subtract 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8-8=56"",
    resulting_state=(11, 56),
    comment='""8 times 8, which is 64, subtract 8""',
)

# ""88 times 8"" - participant needs to make 88 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(8, 8, 88),
    comment='""88 times 8"" - first making 88',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88*8=704"",
    resulting_state=(8, 704),
    comment='""88 times 8""',
)

# ""16 minus 11 is 5"" - participant needs to make 16 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(8, 11, 16),
    comment='""16 minus 11 is 5"" - first making 16',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16-11=5"",
    resulting_state=(5, 8),
    comment='""16 minus 11 is 5""',
)
```"
1979,"[3,3,3,9]",,180," 9 x 3 is 27, minus 3 is 24. You can't do that, so you do 3 x 3 is 6. 6 x 9 is 50. What did I say? 9 x 6? Is that what I said? Uh, so that's 54. 54 divided by 3? No. 9 plus 3 is 12. 12 divided by 3 is 4. 4 x 3 is 12, so I need to get 8. 8 x 3, so 9 minus 3 is 6. So 9 minus 3 is 6. And then 6 plus 3 is 9. 9 x 3 is 27, no. 9 x 3 minus 3 is 0. 9, I need to take away, hmm. You could do 9 divided by 3 is 3. 3 x 3 is 6. 6 x 3 is, no, I need to get to 8, right? So I need, what are the factors of 24? What are the factors of 24? Hmm, hmm, hmm, hmm, okay. So if I did 6, let's see, is there a way I could make 8? 8. 3 x 3 is 9, minus 3 is 6, times 9 is 36. 9 x 3 is 27, minus 3 is 24, so that's not going to help. Okay. Yep. So, 3 times 27, I don't know, 3 times 3 is 9, 9 times 9 is 81, 9 times 6.","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 x 3 is 27, minus 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-3=24"",
    resulting_state=(3, 24),
    comment='""9 x 3 is 27, minus 3 is 24""',
)

# ""3 x 3 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=6"",
    resulting_state=(3, 6, 9),
    comment='""3 x 3 is 6"" - calculation error',
    result_calc_error=True,
)

# ""6 x 9 is 50"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=50"",
    resulting_state=(3, 50),
    comment='""6 x 9 is 50"" - calculation error',
    result_calc_error=True,
)

# Participant corrects themselves: ""What did I say? 9 x 6? Is that what I said? Uh, so that's 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(3, 54),
    comment='""so that\'s 54""',
)

# ""9 plus 3 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(3, 3, 12),
    comment='""9 plus 3 is 12""',
)

# ""12 divided by 3 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(3, 4),
    comment='""12 divided by 3 is 4""',
)

# ""4 x 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(12,),
    comment='""4 x 3 is 12""',
)

# ""9 minus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 3, 6),
    comment='""9 minus 3 is 6""',
)

# ""6 plus 3 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(3, 9),
    comment='""6 plus 3 is 9""',
)

# ""9 x 3 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(27,),
    comment='""9 x 3 is 27""',
)

# ""9 divided by 3 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 3, 3),
    comment='""9 divided by 3 is 3""',
)

# ""3 x 3 is 9, minus 3 is 6, times 9 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3*3-3)*9=36"",
    resulting_state=(36,),
    result_calc_error=True,
    comment='""3 x 3 is 9, minus 3 is 6, times 9 is 36""',
)

# ""9 x 3 is 27, minus 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-3=24"",
    resulting_state=(3, 24),
    comment='""9 x 3 is 27, minus 3 is 24""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 9, 9),
    comment='""3 times 3 is 9""',
)

```"
1980,"[4,6,13,13]",,180," Maybe this will be my last one. Okay, 13, 13, 26. Let's see. 13 minus 6 is 17. 17 minus 3 is 13. 13 plus, no. So you could do 13 times 4 is 72. 26, 22, 10, 23, and you're now 13. Could you do, let's see, you could do 13 times 13. Let's see what the heck that is. What's 13 times 13? What are the factors of 169? Yeah, there's nothing else. So, okay. What's 13 times 6? 78 divided by 4. What's... 10. 13 minus 10 is 3. Okay. Somebody texting me. Okay. Let me see. Who is this? Sue. Sue. Let's see. What time did I see? What time did I see?","```python
start_state = (4, 6, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13, 13, 26"" participant adds the 13s
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(4, 6, 26),
    comment='""13, 13, 26"" participant adds the 13s',
)

# ""13 minus 6 is 17"" participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=17"",
    resulting_state=(4, 13, 17),
    comment='""13 minus 6 is 17"" participant makes a calculation error',
    result_calc_error=True,
)

# ""17 minus 3 is 13"" participant continues with incorrect calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17-4=13"",
    resulting_state=(13, 13),
    comment='""17 minus 3 is 13"" participant continues with incorrect calculation',
    result_calc_error=True,
)

# ""13 times 4 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*4=72"",
    resulting_state=(6, 13, 72),
    comment='""13 times 4 is 72"" participant multiplies numbers from start state',
    result_calc_error=True,
)

# ""13 times 13"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(4, 6, 169),
    comment='""13 times 13""',
)

# ""13 times 6? 78""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(4, 13, 78),
    comment='""13 times 6? 78""',
)

# ""78 divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""78/4=19.5"",
    resulting_state=(13, 19.5),
    comment='""78 divided by 4""',
)

# The rest appears to be the participant getting distracted by texts
```"
1981,"[3,3,7,13]",13,180," Okay, 3 times 3, or 3 times 3 times, that's 10. So 7 times 3 is 21, plus 4 is 24. 3 minus, or 6, you got 6. 6 times 7 is 42, minus 13. What's 42 minus 13? If you can't, I understand, and I can give you all of the... I can pass along all the info to you. No, I'm saying it's my fault for sending the text right after we met and thinking I mentioned it to you. Man, this is taking forever because I am not good at math. Okay, 9 times, 9 minus, you know, 6 could be, or 7 minus. Minus 6 is 1, no, because that's 14, 26, minus 3 is 7 times, I'm trying to get to 12, 7, 8, 9, 10, 7, 13 minus 7 is 6. 6 times 3 is 18, plus 3 is 21. Still not doing it. 13 times, 13 times 4. What's 13 times 4? What's 52 divided by 3? No. 21 minus 24, 13. So it's 10, 13. I'm sorry.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3, or 3 times 3 times, that's 10"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=10"",
    resulting_state=(7, 10, 13),
    comment='""3 times 3, that\'s 10"" - calculation error',
    result_calc_error=True,
)

# ""7 times 3 is 21, plus 4"" - not clear where 4 comes from
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3 is 21""',
)

# ""3 minus, or 6, you got 6"" - participant seems to be adding 3+3=6
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 7, 13),
    comment='""3 minus, or 6, you got 6"" - participant seems to be adding 3+3',
)

# ""6 times 7 is 42""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(13, 42),
    comment='""6 times 7 is 42""',
)

# ""minus 13. What's 42 minus 13?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-13=29"",
    resulting_state=(29,),
    comment='""minus 13. What\'s 42 minus 13?""',
)

# There's some off-topic conversation

# ""13 minus 7 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7 is 6""',
)

# ""6 times 3 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 18),
    comment='""6 times 3 is 18""',
)

# ""plus 3 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3=21"",
    resulting_state=(21,),
    comment='""plus 3 is 21""',
)

# The participant seems to give up, saying ""13"" as their final answer
```"
1986,"[2,6,6,7]",,180," 12, 18, and 25. 13, let's say, is 21. Okay. 6 times 6 is 36. 36 minus 9, no. 42, no. Alright, something has to be multiplied here. I don't know what. Oh, God. 4 times 7 is 28 minus 6, no. Jesus, this is hard. 12. 7 is fucking me up. Okay. Can't use powers. Crap. 12 plus 7 is 19. 2 times 7 is 14. No. I don't know. 2 times 6. 12 plus 13 is 25. 6 plus 7 is 13. Times 2 would be 26. No. 42. No. 36. Minus 9 is not it. Alright. 6 times 6 is 36. No. No. Time 6 is 12. Times 6 is.","```python
start_state = (2, 6, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 7, 36),
    comment='""6 times 6 is 36""',
)

# ""36 minus 9"" - participant may be trying to subtract 7+2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-(7+2)=27"",
    resulting_state=(27,),
    comment='""36 minus 9"" - participant may be trying to subtract 7+2',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""4 times 7 is 28 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*2*7)-6=22"",
    resulting_state=(6, 22),
    comment='""4 times 7 is 28 minus 6"" where 4 likely comes from 2*2',
)

# ""12 plus 7 is 19"" - 12 likely comes from 2*6
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*6)+7=19"",
    resulting_state=(6, 19),
    comment='""12 plus 7 is 19"" where 12 comes from 2*6',
)

# ""2 times 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(6, 6, 14),
    comment='""2 times 7 is 14""',
)

# ""6 plus 7 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(2, 6, 13),
    comment='""6 plus 7 is 13""',
)

# ""Times 2 would be 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(6, 26),
    comment='""Times 2 would be 26""',
)

# ""6 times 6 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 7, 36),
    comment='""6 times 6 is 36""',
)

# ""Time 6 is 12"" - participant likely means 2*6=12
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(6, 7, 12),
    comment='""Time 6 is 12"" - participant likely means 2*6=12',
)

```"
1989,"[2,12,12,13]",(13-12)x2x12,69," Alright, 13, so 13 times 2 is 26, no. 24 plus 13 is 37, 39, no. 2 times 12 is 24. 13 times 2 is 26, but then there's no way to shave 2. 12 times 12 times 12 is 48. I mean, 12 times 12 times 2 is 48, but that's not right. 12 times 2 is 36, minus 12, and then I still get that 13. I've got it. 13 minus 12 is 1, times 2 times 12.","```python
start_state = (2, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(12, 12, 26),
    comment='""13 times 2 is 26""',
)

# ""2 times 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(12, 13, 24),
    comment='""2 times 12 is 24""',
)

# ""13 times 2 is 26"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(12, 12, 26),
    comment='""13 times 2 is 26""',
)

# ""12 times 12 times 2 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12*2=48"",
    resulting_state=(13, 48),
    comment='""12 times 12 times 2 is 48""',
    result_calc_error=True,
)

# ""12 times 2 is 36, minus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2-12=12"",
    resulting_state=(12, 13),
    comment='""12 times 2 is 36, minus 12""',
)

# ""13 minus 12 is 1, times 2 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-12)*2*12=24"",
    resulting_state=(24,),
    comment='""13 minus 12 is 1, times 2 times 12""',
)
```"
1995,"[1,4,5,8]",,180," Okay. Let's see. 8 times 3 is 24. So I need a 3. 3, 5, 6, 5, minus 1 is 4, minus 4. Oh! Your little speak out loud is annoying. Okay. So, 5 times 5 is 25. 5 times 4 is 20. 5 minus 8 is 3. 3 times 4 is 12. 4 times 8 is 4. Hmm. Let's see. 20. 20. Nope. How about 8 times 4? 4 times 4 is 6. 8 times 4 is negative. 4 times 1 is negative. 2 divided by 2 is negative. 5 times 2 is negative. Of all the numbers on the board, plus 4 to give you an answer is ____. You are playingza Minus 6. x 3. Now, you tell the numbers, so 32. Yeah, I don't know.","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24. So I need a 3"" - participant sets a subgoal of making 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24. So I need a 3""',
)

# ""5 minus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 4, 8),
    comment='""5 minus 1 is 4""',
)

curr_state = graph.move_to_node(start_state)
# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 8, 20),
    comment='""5 times 4 is 20""',
)

curr_state = graph.move_to_node(start_state)
# ""5 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(1, 3, 4),
    comment='""5 minus 8 is 3"" - participant likely meant 8-5=3',
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(1, 12),
    comment='""3 times 4 is 12""',
)

curr_state = graph.move_to_node(start_state)
# ""4 times 8 is 4"" seems to be a transcription error or calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=4"",
    resulting_state=(1, 5, 4),
    comment='""4 times 8 is 4"" seems to be a transcription or calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""8 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(1, 5, 32),
    comment='""8 times 4""',
)

# The rest of the transcript is unclear or seems to be responses to notifications/reminders
```"
1996,"[1,6,11,13]",6x(13-11+1),181," Okay. So, 11 minus 6 is 5. Nope. Eleven minus 7. Okay, 6 times 3. How about 13 minus 11 minus 1. I'm thinking plus 1 times 6. Yes, it is. And I used all the numbers. Okay, how about some parentheses. Thirteen minus 11 is 2. Plus 1 is 3 times 6. I don't know why you say that. Thirteen minus 11 is 2. Plus 1 is 3 times 6 is 24. So, yes, this is correct. I can put it the other way. So, I... 6 times... Thirteen minus 11... is 2. 2 plus 1 is 3 times 6.","```python
start_state = (1, 6, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 6 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(1, 5, 13),
    comment='""11 minus 6 is 5""',
)

# ""Eleven minus 7"" seems incomplete and may be a transcription error

# ""6 times 3"" seems to be setting a subgoal
graph.set_subgoal(
    (3, 6),
    state_after_subgoal=(24,),
    comment='""6 times 3"" seems to be setting a subgoal since 6*3=18 which is not 24',
)

# ""13 minus 11 minus 1"" participant explores this operation
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11-1=1"",
    resulting_state=(1, 6),
    comment='""13 minus 11 minus 1""',
)

# ""I'm thinking plus 1 times 6"" participant modifies the operation
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-11+1)*6=18"",
    resulting_state=(18,),
    result_calc_error=True,
    comment='""13 minus 11 is 2. Plus 1 is 3 times 6 is 24"" - participant incorrectly states this equals 24',
)

# The participant then repeats the successful operation several times, verifying it works
```"
1997,"[6,6,8,12]",12,180," Okay, 12 plus 12 is 24. So 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20. I can't do this one without a calculator. You didn't say you couldn't use a calculator. Okay, I'm thinking, I'm thinking. Let's see. 12 plus 8 is 20. Nope. Okay, I don't know what you expect to hear on this. An old woman doing middle school math. Okay, so 12. 6 and 6 is 12. 12. Minus 8 is 4. Times 6 is 24, but there's an extra 6. Okay, 8 plus 6. Oops. 8 plus 6. 6 is 14. Well, I need a 2. Okay, so. 8 times 6. 6 is 48. Divided by 6 is 8. I don't know. 12 plus 12 is 24. Well, I don't know. 12. 12. 12.","```python
start_state = (6, 6, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24"" - participant seems to want another 12, setting this as a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""12 plus 12 is 24""',
)

# After counting up from 8, which doesn't lead anywhere...

# ""12 plus 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(6, 6, 20),
    comment='""12 plus 8 is 20""',
)

# ""6 and 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(8, 12, 12),
    comment='""6 and 6 is 12""',
)

# ""12. Minus 8 is 4. Times 6 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-8)*6=24"",
    resulting_state=(6, 24),
    comment='""12. Minus 8 is 4. Times 6 is 24""',
)

# ""8 plus 6. 6 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(6, 12, 14),
    comment='""8 plus 6. 6 is 14""',
)

# ""8 times 6. 6 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(6, 12, 48),
    comment='""8 times 6. 6 is 48""',
)

# ""Divided by 6 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/6=8"",
    resulting_state=(8, 12),
    comment='""Divided by 6 is 8""',
)

# ""12 plus 12 is 24"" - participant goes back to their original idea
curr_state = graph.move_to_node((8, 12, 12))  # state from earlier when they made 12 from 6+6
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(8, 24),
    comment='""12 plus 12 is 24""',
)
```"
2004,"[2,3,7,9]",(9-3),180," Okay. Let's do 9 times 3, which is 27. But that won't work, maybe. Let's do 2. Let's try 2 times 9, which is 18. And then 18 plus 7 is 25. Okay. 18. No, that's not going to work. I think we're close, though. 3 times 2. That's not going to work, either. Um, hmm. What about 9 times 7 is 64? I don't think that's going to lead anywhere. Okay, let's try 3 times 7. And then, which is 21. Plus... No, that's not going to go. Um, I don't know. I feel like I was close with the 3 times 9. That's 27. But still, I'm getting more 22 than I am 24 with all of this. Maybe let's do 2 times 3. Okay. Let's try 2 times 7 is 6. Um, maybe let's try 2 times 7, oops, is 14. 14 plus 9 is 23. Let's try 9 times 2, which is 18. 18 plus 3 is 21. Yeah. What about 9 minus 3 is 6? Okay. Okay. Okay.","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3, which is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(2, 7, 27),
    comment='""9 times 3, which is 27""',
)

# ""Let's try 2 times 9, which is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(3, 7, 18),
    comment='""Let\'s try 2 times 9, which is 18""',
)

# ""And then 18 plus 7 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(3, 25),
    comment='""And then 18 plus 7 is 25""',
)

# ""3 times 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(6, 7, 9),
    comment='""3 times 2""',
)

# ""9 times 7 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=64"",
    resulting_state=(2, 3, 64),
    comment='""9 times 7 is 64""',
    result_calc_error=True,
)

# ""3 times 7... which is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 9, 21),
    comment='""3 times 7... which is 21""',
)

# ""2 times 7... is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 9, 14),
    comment='""2 times 7... is 14""',
)

# ""14 plus 9 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+9=23"",
    resulting_state=(3, 23),
    comment='""14 plus 9 is 23""',
)

# ""9 times 2, which is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(3, 7, 18),
    comment='""9 times 2, which is 18""',
)

# ""18 plus 3 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3=21"",
    resulting_state=(7, 21),
    comment='""18 plus 3 is 21""',
)

# ""9 minus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(2, 6, 7),
    comment='""9 minus 3 is 6""',
)

```"
2005,"[5,5,6,11]",(5x6)-11+5,79," Okay, let's try 11 minus 5, which is 6, or let's not, I don't think that's going to go anywhere. Um, maybe, what is 11 plus 5? That's 16. Plus 6, that'd be 22. Or we could do, I think it's got to be 11 minus something. Or it could be, no, I think it's got to be 11 minus, um, we could do 30 minus 11 plus 5. What is that? I think that would work, actually. So let's do 5 times 6, parentheses, minus 11, plus 5.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 5, which is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(5, 6, 6),
    comment='""11 minus 5, which is 6""',
)

# ""what is 11 plus 5? That's 16. Plus 6, that'd be 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5+6=22"",
    resulting_state=(5, 22),
    comment='""what is 11 plus 5? That\'s 16. Plus 6, that\'d be 22""',
)

# ""we could do 30 minus 11 plus 5"" - participant seems to be working backward from a plan to get 30 first
graph.set_subgoal(
    (30,),
    state_after_subgoal=(24,),
    comment='""we could do 30 minus 11 plus 5"" - participant seems to be working backward',
)

# ""5 times 6, parentheses, minus 11, plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6-11+5=24"",
    resulting_state=(24,),
    comment='""5 times 6, parentheses, minus 11, plus 5""',
)
```"
2007,"[3,9,13,13]",,180," Okay, let's see here. 13 plus 9 is 22. 13, what is 13 minus 9? It's 4. And 13 minus 3 is 10. It doesn't really go anywhere. 13 plus 13 is 26. 26 minus 9. No. Could do. This one's tough. 13 minus 9. No. 13 plus 9. 13 minus 9. That's 4. Or maybe we need to do, I guess that's the only way I can get to 4. Because we could do 13 minus 9. Right. And then 4 times 3 is 12, which I could double, but I don't have anything to double that with. Let's think here. 13. 9 times 3 is 12. 27. No, I think it's got to be 13 minus something. Or it could be 13 plus something, I guess. 13 plus 3 is 16. Plus another 13 is 29. That wouldn't equal 24 though. 13 times 3. Which is 36. Divided by 9, which is 4. That doesn't get me anywhere. 36 minus 13 is 23. Hmm. Okay. Close. Not there yet.","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 9 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(3, 13, 22),
    comment='""13 plus 9 is 22""',
)

# ""13 minus 9? It's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9? It\'s 4""',
)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(9, 10, 13),
    comment='""13 minus 3 is 10""',
)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13 plus 13 is 26""',
)

# The participant goes back to trying 13-9=4
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9. That\'s 4""',
)

# ""4 times 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(12, 13),
    comment='""4 times 3 is 12""',
)

# ""9 times 3 is 12. 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""9 times 3 is 27""',
)

# ""13 plus 3 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(9, 13, 16),
    comment='""13 plus 3 is 16""',
)

# ""Plus another 13 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+13=29"",
    resulting_state=(9, 29),
    comment='""Plus another 13 is 29""',
)

# ""13 times 3. Which is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(9, 13, 39),
    comment='""13 times 3. Which is 36"" - participant made calculation error',
    result_calc_error=True,
)

# ""Divided by 9, which is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39/9=4"",
    resulting_state=(4, 13),
    comment='""Divided by 9, which is 4""',
    result_calc_error=True,
)

# ""36 minus 13 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""39-13=26"",
    resulting_state=(9, 26),
    comment='""36 minus 13 is 23"" - participant continues with incorrect 36',
    result_calc_error=True,
)

```"
2010,"[2,8,10,13]",(13x2)-(10-8),109," Okay, 13 minus 8 is 4, um, 4, or we could do, oh, maybe let's do, um, 13 minus 8 is minus 10, which is 3, um, 3 times 8 is 24, but then I don't have anything to do with the 2. What about if we did, oh wait, I think it's this, I think it's 2 times 10 plus 13 minus 8. Or is that not right? 20. That should be right. Maybe I need these parentheses. Okay. 2, or is that 5? Oh, I've been counting wrong. 13 minus 8 is 5. Okay. Um. Well, that changes. Okay. It just sings, I guess. 13 times 2 is 26. Oh wait, that's it. 13 times 2 is 26 minus 10 minus 8.","```python
start_state = (2, 8, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 8 is 4"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=4"",
    resulting_state=(2, 4, 10),
    comment='""13 minus 8 is 4"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""13 minus 8 is minus 10, which is 3"" - participant seems confused but trying another calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8-10=3"",
    resulting_state=(2, 3),
    comment='""13 minus 8 is minus 10, which is 3""',
    result_calc_error=True,
)

# ""2 times 10 plus 13 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10+13-8=25"",
    resulting_state=(25,),
    comment='""2 times 10 plus 13 minus 8""',
)

# ""13 minus 8 is 5"" - participant corrects their earlier calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(2, 5, 10),
    comment='""13 minus 8 is 5"" - participant corrects their earlier calculation error',
)

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(8, 10, 26),
    comment='""13 times 2 is 26""',
)

# ""13 times 2 is 26 minus 10 minus 8"" - participant finds the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(10-8)=24"",
    resulting_state=(24,),
    comment='""13 times 2 is 26 minus 10 minus 8"" - participant finds the solution',
)
```"
2020,"[1,3,6,13]",,180," Let's see, 13, that could be adding 9. Nope, that doesn't get to 24. I thought it was hard with small numbers, it's harder with bigger numbers. 3 times 6 is 18. No, that's not going to help. Aha! No, that's not going to help. 3 times 6 is 18. 13. 13. Hmmm, the talking doesn't help. 13 times 6. I'm saying things out loud, not really, but... 18. 18. 18. That's not going to help. 6. Aha! 6 times... 3 minus 1 is 2, times 12 is 12. That gets me to 25. That doesn't help. Yes! 6 minus 1 is 5. And 8, that doesn't help anymore. 13 minus 6 is 7. 7 times 3 is 21, 22. That doesn't help. 13 minus 6.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13, that could be adding 9"" - participant seems to be thinking about getting to 24 by adding 9 to 13
graph.set_subgoal(
    (9, 13),
    state_after_subgoal=(24,),
    comment='""13, that could be adding 9""',
)

# ""3 times 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(1, 13, 18),
    comment='""3 times 6 is 18""',
)

# ""13 times 6"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(1, 3, 78),
    comment='""13 times 6""',
)

# ""3 minus 1 is 2"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3-1=2"",
    resulting_state=(2, 6, 13),
    comment='""3 minus 1 is 2""',
)

# ""6 minus 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(3, 5, 13),
    comment='""6 minus 1 is 5""',
)

# ""13 minus 6 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 6 is 7""',
)

# ""7 times 3 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 21),
    comment='""7 times 3 is 21""',
)
```"
2027,"[2,7,7,10]",(10-7)x(7),180," 3 times 7 is 14. I'm sure that doesn't help. It's nice that the 7-7 would give me the nice 14 I need, but then what do I do with the other ones? 10 plus 17 gives me 24. It seems like I can have this extra 2. I'm going to get rid of the 2. 10 minus 2 is 8. Doesn't really help. 10 minus 7 is 8. Doesn't really help. 10 minus 7 is 3. 3 times 7 is 21 plus 2. Doesn't help. 10 2 times 7 is 14. 14 plus 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 10 times 7 is 8. Doesn't really help. 5, 5 and 7, so 12 is 24, that's another one. Hmm, this one's a little bit harder. Not getting it. 10 minus 7 is 3, plus, times, ah, there it is, bracket, 10 minus 7 is 3, times, bracket, 7, that's 21, not 23.","```python
start_state = (2, 7, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 17 gives me 24"" - participant may have combined the 7s to get 17
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7+7=24"",
    resulting_state=(2, 24),
    comment='""10 plus 17 gives me 24""',
)

# ""10 minus 2 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(7, 7, 8),
    comment='""10 minus 2 is 8""',
)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 7),
    comment='""10 minus 7 is 3""',
)

# ""3 times 7 is 21 plus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7+2=23"",
    resulting_state=(23,),
    comment='""3 times 7 is 21 plus 2""',
)

# ""2 times 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(7, 10, 14),
    comment='""2 times 7 is 14""',
)

# ""14 plus 7 is 8"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+7=8"",
    resulting_state=(8, 10),
    comment='""14 plus 7 is 8"" - calculation error',
    result_calc_error=True,
)

# There are several repetitions of ""10 times 7 is 8"" which seems to be a transcription error

# ""5, 5 and 7, so 12 is 24"" - not clear what operations they're trying

# ""10 minus 7 is 3, times, bracket, 7, that's 21, not 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-7)*7=21"",
    resulting_state=(2, 21),
    comment='""10 minus 7 is 3, times, bracket, 7, that\'s 21""',
)
```"
2032,"[1,3,3,10]",3x(10-3+1),114," Okay, I've got numbers 1, 3, 3, and 10. So let's see, 10, 3, okay, 3 times 8. 10 minus 3 is 7, plus 1 is 8. Okay, alright, 3 plus, and in parentheses, 10, minus, um, 10 minus, uh, or is it 3 times 8? I'm going to do 3 times 8. 3, okay, 3 times, uh, 3 times 8. Okay, 10, 3 times 10. Oh, I'm not going to use a parentheses. 3 times 10 is, uh, or maybe I, uh, 3 times 8. I have to come up with 3 times 8, right? Yes, I do. 30 minus 6. No, that's not going to work either. Okay, 3, um, times, in a parentheses. 3 times 8. 3 times 8. 10, uh, okay, 10 minus 3. 3 times 7 is 21. 10 plus, 10 minus 3 plus 1, parentheses.","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 3 is 7, plus 1 is 8"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3+1=8"",
    resulting_state=(3, 8),
    comment='""10 minus 3 is 7, plus 1 is 8""',
)

# ""3 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(1, 3, 30),
    comment='""3 times 10""',
)

# The participant seems to be trying to get to 3*8=24 as a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment=""The participant repeatedly mentions wanting to get 3*8"",
)

# ""10 minus 3"" participant goes back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(1, 3, 7),
    comment='""10 minus 3""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(1, 21),
    comment='""3 times 7 is 21""',
)

# Finally, the participant finds the solution: ""10 minus 3 plus 1, parentheses"" times 3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*(10-3+1)=24"",
    resulting_state=(24,),
    comment='""10 minus 3 plus 1, parentheses"" times 3',
)
```"
2036,"[1,11,11,12]",,180," Okay, 1, 11, 11, and 12. All right, so let's see. 12 minus 1 equals 11. 24 minus 11 is 13. 12 times 2. 12 times 2, no, 10. 10 plus 14, 13. 12 and 11 are 13 plus 11. Or, 12 and 11 come to 23 plus 23. Or, 22 plus 2. 23 plus 1. 23 plus 1. Okay, 12 times 1 is going to be, what about 12 minus 1? 12 minus 1 equals 11. 12 plus 1 equals 13. Equals 13. 12 plus 1 is 13. Let's try that. Parentheses. 12 plus 1. Parentheses. That's 13. 13 plus. Uh, plus. 11. Um. Uh. Plus 11. Okay. 12 and 1 are 13 plus 11 is 23. 24. Oh. Okay. 24. 24. Ugh. Okay. 12 plus 1. Well, um. Okay. 13 plus 11 is 24. And now I'm stuck with that extra number, which isn't going to work. All right. Let's try this again. 12. 11 and 11. Or 11 and 1. 12. 12. Plus. Uh. 12 plus. 12. 12 minus 11 is 10. 10 plus 12. 10. 10 plus 12. Right? So 10. Um.","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 1 equals 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(11, 11, 11),
    comment='""12 minus 1 equals 11""',
)

# ""24 minus 11 is 13"" seems to be working backwards from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 11 is 13"" seems to be working backwards from 24',
)

# ""12 and 11 are 13"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=13"",
    resulting_state=(1, 11, 13),
    comment='""12 and 11 are 13"" seems to be a calculation error',
    result_calc_error=True,
)

# ""12 and 11 come to 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(1, 11, 23),
    comment='""12 and 11 come to 23""',
)

# ""23 plus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+1=24"",
    resulting_state=(11, 24),
    comment='""23 plus 1""',
)

# ""12 minus 1 equals 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(11, 11, 11),
    comment='""12 minus 1 equals 11""',
)

# ""12 plus 1 equals 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+1=13"",
    resulting_state=(11, 11, 13),
    comment='""12 plus 1 equals 13""',
)

# ""13 plus 11 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(11, 24),
    comment='""13 plus 11 is 24""',
)

# ""12 minus 11 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 11),
    comment='""12 minus 11 is 10"" - participant made calculation error',
    result_calc_error=True,
)
```"
2040,"[4,10,12,12]",,180," Okay, my target number is 24 and I have 4, 10, 12 and 12. Okay, let me figure it out. It's not an easy one, but I will try. It's not an easy one, but I will try. Let me start with 2 plus 1 is 3. 12 divided by 3 is 4. 12 divided by 3 is 4. 12 divided by 3 is 4. That will not give me what I want. Okay. Okay. I need a 24. I need a 24. I need a 24. I need a 24. Where do I get 24 here? I need a 24. I need a 24. It is 12 divided by 4 is 3. Okay. 12 divided by 4 is 3. 3. 3. This is not an easy one. What is 40 divided by 12? 40 divided by 12. It's not an easy one. It's not an easy one. 40 divided by 12. Hmm. Hmm. It's not an easy one, guys. Okay. Let me try again. Let me try again. Okay.","```python
start_state = (4, 10, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let me start with 2 plus 1 is 3"" - it's not clear where these numbers came from since they aren't in the start state

# ""12 divided by 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 10, 12),
    comment='""12 divided by 4 is 3""',
)

# ""What is 40 divided by 12?"" - participant likely multiplied 4*10 first
new_state = graph.explore_operation(
    curr_state,
    operation=""4*10=40"",
    resulting_state=(12, 12, 40),
    comment='""What is 40 divided by 12?"" - participant likely multiplied 4*10 first',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40/12=3.33"",
    resulting_state=(12, 3.33),
    comment='""40 divided by 12""',
)
```"
2043,"[6,8,11,12]",,180," Okay, let me try another one here. Another one here. I have 6. Okay. I have 6, 8, 11, 12, 6, 8, 11, and 12. 6, 8, 11, and 12. Oh, this is not working as well. I don't know what 8 is doing, but it's not an easy one. 12 divided by 6 is 2. 2. Okay. I need to get a 3. I need to multiply by... Okay. I need to get a 3 somewhere. A 3. How do I get a 3? It's not working, guys. What is... 66. 6 times 11 is 66. Divided by 12. Which is 5.5. Multiplied by 8. It's 44, guys. Okay. Let me try something else. 6 multiplied by 12 is 72. 72. Divided by 11. Multiplied by 8. Oh, not working. What is 11? It's 2. It's 2.","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# First the participant just lists the numbers

# ""12 divided by 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 8, 11),
    comment='""12 divided by 6 is 2""',
)

# ""I need to get a 3"" suggests they are setting a subgoal
graph.set_subgoal(
    (3,),
    state_after_subgoal=(24,),
    comment='""I need to get a 3""',
)

# ""6 times 11 is 66""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*11=66"",
    resulting_state=(8, 12, 66),
    comment='""6 times 11 is 66""',
)

# ""Divided by 12. Which is 5.5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""66/12=5.5"",
    resulting_state=(5.5, 8),
    comment='""Divided by 12. Which is 5.5""',
)

# ""Multiplied by 8. It's 44""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5.5*8=44"",
    resulting_state=(44,),
    comment='""Multiplied by 8. It\'s 44""',
)

# ""6 multiplied by 12 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=72"",
    resulting_state=(8, 11, 72),
    comment='""6 multiplied by 12 is 72""',
)

# ""Divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/11=6.55"",
    resulting_state=(6.55, 8),
    comment='""Divided by 11""',
)

# ""Multiplied by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6.55*8=52.4"",
    resulting_state=(52.4,),
    comment='""Multiplied by 8""',
)

```"
2044,"[1,5,6,11]",,180," Okay, this one looks like a simple one. Yeah, this one looks like a simple one. Let's see. 6. Okay, I'm saying 5 plus 1 is 6. It is 11 minus 1 is 10. Together, 24. 30. 11 minus 6, which is 5. 11 minus 4. 11. 11 minus 5. 5 times 1 is 6. 5 plus 1 is 6. 6. 6 minus 5 is 1. 1. 6. 6 plus 5 is 11. 11. 11 minus 5 is 6. 11 minus 6 is 5. Oh, my God. 6 divided by 1 is 6 times 5. 30. 30. 6 times... 11 times 6. 11. 11 times 5 is 55. Mm-hmm. Oh. Oh, huh? Let me see. 18.","```python
start_state = (1, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 6, 11),
    comment='""5 plus 1 is 6""',
)

# ""11 minus 1 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(5, 6, 10),
    comment='""11 minus 1 is 10""',
)

# ""Together, 24. 30"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6+5=30"",
    resulting_state=(30,),
    comment='""Together, 24. 30""',
    result_calc_error=True,
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""11 minus 6, which is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(1, 5, 5),
    comment='""11 minus 6, which is 5""',
)

# ""11 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(1, 6, 6),
    comment='""11 minus 5""',
)

# ""5 times 1 is 6"" - this would be incorrect but we'll record it
new_state = graph.explore_operation(
    curr_state,
    operation=""5*1=6"",
    resulting_state=(6, 6, 11),
    comment='""5 times 1 is 6""',
    result_calc_error=True,
)

# ""5 plus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 6, 11),
    comment='""5 plus 1 is 6""',
)

# ""6 minus 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 1, 11),
    comment='""6 minus 5 is 1""',
)

# ""6 plus 5 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(1, 11, 11),
    comment='""6 plus 5 is 11""',
)

# ""11 minus 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(1, 6, 6),
    comment='""11 minus 5 is 6""',
)

# ""11 minus 6 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(1, 5, 5),
    comment='""11 minus 6 is 5""',
)

# ""6 divided by 1 is 6 times 5. 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6/1)*5=30"",
    resulting_state=(11, 30),
    comment='""6 divided by 1 is 6 times 5. 30""',
)

# ""11 times 5 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(1, 6, 55),
    comment='""11 times 5 is 55""',
)

# The final ""18"" seems to be a stray number without context for how it was computed
```"
2045,"[2,4,6,13]",,180," I need to get at least one. 24, 27, 37, 38, 39, 40. I need a 3. 7, 6, 7, 1. I need to get a 3. It's 9. 9 divided by 6. 9 divided by 6. Time. 24. Times 24 times 2 is 48 minus 1. That's 24. Let me try it again, guys. I don't know if I'm going to get it. I need to get one. I'm going to get this. 2 times 4. It's not on this one. Let me check. 8. 8 times 8. Not working. 4, 24. 4, 26. 4 times 3, 2. 4 times 13. 52. Divide by 6. 52 divided by 4. Times 6. This is not easy. It's not easy, guys. It's not easy, guys. It's not easy, guys. It's not easy, guys. It's not easy, guys.","```python
start_state = (2, 4, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need to get a 3"" followed by ""9 divided by 6"" suggests participant is trying to get 3
new_state = graph.explore_operation(
    curr_state,
    operation=""13-4=9"",
    resulting_state=(2, 6, 9),
    comment='""I need to get a 3"" followed by mentions of 9',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/6=1.5"",
    resulting_state=(2, 1.5),
    comment='""9 divided by 6""',
)

# ""2 times 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(6, 8, 13),
    comment='""2 times 4""',
)

# ""4 times 13. 52""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*13=52"",
    resulting_state=(2, 6, 52),
    comment='""4 times 13. 52""',
)

# ""Divide by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""52/6=8.67"",
    resulting_state=(2, 8.67),
    comment='""52 divided by 6""',
)

# The rest appears to be the participant expressing frustration rather than trying new operations
```"
2048,"[1,8,8,12]",(1+8/8)x12,66," 1, 8, 8, 12. Okay, 1 for stirrer is 12 times 2 is 24, so if I can get 8 down to 2 then that would be wonderful. 8 divided by 8, or 8 plus 9, yeah 9 divided by 8. So we do 1 plus 8. Divide by 8, 9, and then put that in parentheses, times 12.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 is 24"" - participant seems to be setting a subgoal to get 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 is 24"" - participant seems to be setting a subgoal to get 2',
)

# ""8 divided by 8"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 1, 12),
    comment='""8 divided by 8""',
)

# ""1 plus 8. Divide by 8"" - participant is trying to get to 2 by doing (1+8)/8
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+8)/8=1.125"",
    resulting_state=(1.125, 12),
    comment='""1 plus 8. Divide by 8""',
)

# ""and then put that in parentheses, times 12"" - participant multiplies 2 by 12 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1.125*12=13.5"",
    resulting_state=(13.5,),
    comment='""and then put that in parentheses, times 12""',
)
```"
2062,"[5,8,9,11]",,180," 5, 8, 9, and 11. That's 20. That's going to give me 3. That's going to be 17. Okay, let's see. 72. Let's see. 5 plus... 8 is 13. 13. 13 plus 9 is only 22. Okay, so let's try 11. 5 minus... 11 minus 5 is going to give me 6. And 17. That's going to be 23. 11 minus 8 is going to give me 3. And 3. This is... 5 plus 9 is 14. Let's see. Let's see. Another toughie. Love the toughies. Let's see. I have to sit here and think for a bit here. So that would give me 2. 11 minus 9 would give me 2. I'm pointing to the numbers. That's why I'm not saying them. So that probably is not helping you any. 8 minus... 9 minus 8 is 1. 5 plus 11 is 16. 26 is equal to 12. I could use the operations, but I can't use the numbers more than 1. I'm going to use the numbers more than once. Toughie toughie toughie. 11 plus 9 is 20. 20. That's not going to work. Nine is 3. 9 is 3. 12. 13. 18. All right, multiples of 24, 1, 24, 2, and 12, 3, and 8, 6, and 4. So can I get a 6 and a 4 out of any of this mess? I can get a 6, but I can't get a 4. So I can get a 1 times 24. Can I get that anyway? Um, 11.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""That's 20"" seems to be adding some numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(5, 8, 20),
    comment='""That\'s 20"" seems to be adding 11 and 9',
)

# ""5 plus... 8 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(9, 11, 13),
    comment='""5 plus... 8 is 13""',
)

# ""13 plus 9 is only 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(11, 22),
    comment='""13 plus 9 is only 22""',
)

# ""11 minus 5 is going to give me 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 8, 9),
    comment='""11 minus 5 is going to give me 6""',
)

# ""11 minus 8 is going to give me 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 5, 9),
    comment='""11 minus 8 is going to give me 3""',
)

# ""5 plus 9 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9=14"",
    resulting_state=(8, 11, 14),
    comment='""5 plus 9 is 14""',
)

# ""11 minus 9 would give me 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 5, 8),
    comment='""11 minus 9 would give me 2""',
)

# ""9 minus 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 5, 11),
    comment='""9 minus 8 is 1""',
)

# ""5 plus 11 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+11=16"",
    resulting_state=(8, 9, 16),
    comment='""5 plus 11 is 16""',
)

# ""11 plus 9 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(5, 8, 20),
    comment='""11 plus 9 is 20""',
)

# The participant then starts thinking about factors of 24 and setting subgoals
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""multiples of 24, 1, 24, 2, and 12, 3, and 8, 6, and 4. So can I get a 6 and a 4 out of any of this mess?""',
)

```"
2065,"[2,3,5,13]",,180," Okay. 13 minus 5 is 8. And 8. I am saying aloud. I'm just looking. I'm trying. I'm just looking at the numbers. Let me see. 2, that's 13. 5, 3, 15 plus 13 is 28 minus 2. 2 is 26. That does not work. 13 minus 2 is 11. Plus 3 times 5 is 15. And then that gives me 26. So that doesn't work. I don't know why I keep trying to add everything. I know there's other operations. Can I get 48 out of anything? That's going to give me 26. That's going to give me 39. Hmm. If I do 13 times 3 is 39. 39. No, that won't work. 2 plus 3 is 5. 5 and 13 is 18. And 5 is only 23. Can't divide. They're all... Oh, these are all prime numbers. How do I get 24 out of all prime numbers? 8, I see the 8, I need 3 to make 24 without, 6 times 4, I can't get 4 anywhere out of this, can I? This is 6, any of these that I divide are not going to divide evenly by anything that I can think of, 18 divided by 3 is 6.","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(2, 3, 8),
    comment='""13 minus 5 is 8""',
)

# ""5, 3, 15 plus 13 is 28 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3+13-2=26"",
    resulting_state=(26,),
    comment='""5, 3, 15 plus 13 is 28 minus 2""',
)

# ""13 minus 2 is 11. Plus 3 times 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2+(3*5)=26"",
    resulting_state=(26,),
    comment='""13 minus 2 is 11. Plus 3 times 5 is 15""',
)

# ""Can I get 48 out of anything?"" suggests participant is looking for ways to get 48 to divide by 2
graph.set_subgoal((48,), state_after_subgoal=(24,), comment='""Can I get 48 out of anything?""')

# ""That's going to give me 39"" - participant likely computing 13*3
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(2, 5, 39),
    comment='""That\'s going to give me 39""',
)

# ""2 plus 3 is 5. 5 and 13 is 18. And 5 is only 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3+5+13=23"",
    resulting_state=(23,),
    comment='""2 plus 3 is 5. 5 and 13 is 18. And 5 is only 23""',
)

# ""18 divided by 3 is 6"" - participant may be trying to get to 24 by getting to 18 first
graph.set_subgoal((18,), state_after_subgoal=(24,), comment='""18 divided by 3 is 6""')

```"
2070,"[3,9,13,13]",,180," Okay, now let's look here. Okay, so we got 26. I'm curious, if you minus 9 from that, maybe I'll, maybe I'll like put it down here because that might help me like visualize it. 26 minus 9 would be, okay, 26 minus 9 would be 15 and that'd be 18. So that wouldn't be enough. What about 9 times 3 is 27. Minus 13 would be 14. Yeah, that's not going to work. How about 13 times 3 would be 39. Minus 13 would be 26. Yep, that's not going to work. How about, how about instead of the, let's think about this. 13 plus 9 is 22. Yeah, that ain't going to work. Um, let's see here. I don't think I'll be good with dividing. I'm just going to be honest. In my head I'm like, I could use divide, but I'm not like. Hmm, let me think about this for a second. 13, 13. Wow, this one's hard for some reason. And you can visualize, my brain works at chunking things. And so this is like, I can't chunk it as easily, so it's harder. 9 times 3 is 27. Wonder if you, yeah, that's not going to make a difference. What about 9 times 3. Let's see. I'm trying to think in my head like, different ways I could do this. This is hard. 9 plus 13, no. Divided by 13, I wouldn't really know. Let's see, 9 plus, times 13 is 27. I wonder if there's, or 9 times 3 is 27. Phew. How about 3 plus 26, 17, 29. Nope, that's not going to work. I was adding to the 2 thirteens and adding the 3. What about 9 plus that? Nope, that's not going to work. I'm wondering if I have to divide by 3 or something, but that's going to be, I'm not going to lie, that's going to be really hard for me to do in my head. I wonder 9 times 13.","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""we got 26"" - participant likely added the two 13s
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""we got 26"" - participant likely added the two 13s',
)

# ""26 minus 9 would be 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-9=15"",
    resulting_state=(3, 15),
    comment='""26 minus 9 would be 15""',
    result_calc_error=True,  # participant says it would be 18 right after
)

# ""9 times 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""9 times 3 is 27""',
)

# ""Minus 13 would be 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-13=14"",
    resulting_state=(13, 14),
    comment='""Minus 13 would be 14""',
)

# ""13 times 3 would be 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(9, 13, 39),
    comment='""13 times 3 would be 39""',
)

# ""Minus 13 would be 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39-13=26"",
    resulting_state=(9, 26),
    comment='""Minus 13 would be 26""',
)

# ""13 plus 9 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(3, 13, 22),
    comment='""13 plus 9 is 22""',
)

# ""9 times 3 is 27"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(13, 13, 27),
    comment='""9 times 3 is 27"" - participant tries this again',
)

# ""3 plus 26"" - participant likely adding 3 to 13+13
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13+3=29"",
    resulting_state=(9, 29),
    comment='""3 plus 26"" - participant likely adding 3 to 13+13',
)

# The participant mentions possibly dividing by 3 but doesn't actually try it

# ""9 times 13"" is mentioned at the end but no calculation is performed

```"
2073,"[2,2,6,7]",,180," I'm finding that I'm overthinking these. Okay, 13. If you add them all together, that's not going to work. Let's try to do more deductive reasoning here, because 13 plus 4 is 17. What if I do 7 times 4 is 14, plus 6 is 20. That's going to be short. Okay. What if I do, this is 13 plus 4, no, 2 times 6, 12 times 2 is 24. No, that's not going to work. What else could I do? 7 times 6 is 42. Divided by 2 is 21. Nope, that's not going to work. Let me think here. I'm sure there's a way to do this. 7, 6, 5. 7, 6, 5. Okay, sorry. 7, 6, 5 times 2. Nope, that's not going to work. In my head, I'm just thinking, okay, how can I take these numbers and make it into something I can chunk to get 24? And that's where I'm struggling with here. 6 times 2. It's 12 times 2 is 24. No. 7 times 2 is 14 times 2 is 28 minus 6. That wouldn't be good enough. How about 6 plus 2 is 8 times 2. No, 6 times 2 is 8. Nope, that's going to be an odd number. I think, how can I get an even number from this? 42, yeah. Ooh, this is hard. Let's see, how else can I do this? 2 plus 2 is 4. 4 times 7 is 28. Nope, I already tried that. 6 minus 2 is 4. Times 4 times 7 is 28. Minus 2 would be 26. What else could I do? What other combinations? I feel like I've exhausted a lot of them already. 7 times 2 times 2. Yeah, I already did that. Oh, God, this is hard. I wish I could just get rid of that 7. Because 6 times 2 times 2 would be it. That's where I'm getting thrown off here. What else could I do? If it takes 7 minus 2, that's 5. And then is there any way I can combine that with this? I don't think so. To make that work. Because 5 times 6 is 30 minus 2.","```python
start_state = (2, 2, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If you add them all together"" - participant tries adding all numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2+6+7=17"",
    resulting_state=(17,),
    comment='""If you add them all together""',
)

# ""7 times 4 is 14, plus 6 is 20"" - the 4 likely comes from 2+2
new_state = graph.explore_operation(
    curr_state,
    operation=""7*(2+2)+6=20"",
    resulting_state=(20,),
    result_calc_error=True,
    comment='""7 times 4 is 14, plus 6 is 20"" - the 4 likely comes from 2+2',
)

# ""2 times 6, 12 times 2 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*6)*2=24"",
    resulting_state=(7, 24),
    comment='""2 times 6, 12 times 2 is 24""',
)

# ""7 times 6 is 42. Divided by 2 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*6)/2=21"",
    resulting_state=(2, 21),
    comment='""7 times 6 is 42. Divided by 2 is 21""',
)

# ""7 times 2 is 14 times 2 is 28 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2*2-6=22"",
    resulting_state=(22,),
    comment='""7 times 2 is 14 times 2 is 28 minus 6""',
)

# ""6 plus 2 is 8 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+2)*2=16"",
    resulting_state=(7, 16),
    comment='""6 plus 2 is 8 times 2""',
)

# ""2 plus 2 is 4. 4 times 7 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+2)*7=28"",
    resulting_state=(6, 28),
    comment='""2 plus 2 is 4. 4 times 7 is 28""',
)

# ""6 minus 2 is 4. Times 4 times 7 is 28. Minus 2 would be 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-2)*7-2=26"",
    resulting_state=(26,),
    comment='""6 minus 2 is 4. Times 4 times 7 is 28. Minus 2 would be 26""',
)

# ""7 times 2 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2*2=28"",
    resulting_state=(6, 28),
    comment='""7 times 2 times 2""',
)

# ""7 minus 2, that's 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(2, 5, 6),
    comment='""7 minus 2, that\'s 5""',
)

# ""5 times 6 is 30 minus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6-2=28"",
    resulting_state=(28,),
    comment='""5 times 6 is 30 minus 2""',
)
```"
2074,"[2,3,7,9]",((3+2)x7)-9,182," Let's keep checking through this here. Okay, so 9 times 3 is 27. Minus 7 is 20, and then that's only 24, 2, excuse me. What about 9 plus 7 is 16, 17, 18, 19, 20, 21? Nope, not enough. When you add them together, what about 7 times 3 is 21, plus 9 is 30, nope, minus 2, that's not enough. 9 times 7 is 63, I'm not going to be able to divide that. 7 times 2 is 14, plus 9 is 23, and that's not going to be enough. It's going to be too much if I add 3. What other combinations could I do? If I add 6 times 7, nope. What if I do, let's see, 9 times 2 is 18, plus 7 would be 25, nope. 5 times 7 is, oh, here we go. I think I got it, okay. 3 plus 2 is 5, times 7 is 35, minus 9 would be 24, right? 5 times 7 is 35, minus 9 would be 24. Wait, I used it all, didn't I? It's saying error. Not incorrect answer and all numbers are used. Oh my, wait, I don't believe that. Okay, let me do this again. It's, it's, I must have messed it up. 3 plus 2, oh wait, let me go back. 3 plus 2, times 7, minus 9. Hey, that's not, don't lie to me. 3 times 2, that's not correct. I think that's right. 3 times 2 is 5, 3 plus 2 is 5, times 7, minus 9. It's saying it's wrong, but I know that's not true. So you got an error, you got an error in your thing. Because 35 minus 9 is 24. Just letting you know. That is wrong. Wrong. 3 plus 2, times 7 is 35, minus 9 is 24. I don't know why there's an error though in here. Just want to let you know. You might want to fix that unless you're trying to mess with me, which is possible. Unless I'm, I'm way off base.","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 27. Minus 7 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-7=20"",
    resulting_state=(2, 20),
    comment='""9 times 3 is 27. Minus 7 is 20""',
)

# ""9 plus 7 is 16"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(2, 3, 16),
    comment='""9 plus 7 is 16""',
)

# ""7 times 3 is 21, plus 9 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+9=30"",
    resulting_state=(2, 30),
    comment='""7 times 3 is 21, plus 9 is 30""',
)

# ""9 times 7 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(2, 3, 63),
    comment='""9 times 7 is 63""',
)

# ""7 times 2 is 14, plus 9 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+9=23"",
    resulting_state=(3, 23),
    comment='""7 times 2 is 14, plus 9 is 23""',
)

# ""9 times 2 is 18, plus 7 would be 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2+7=25"",
    resulting_state=(3, 25),
    comment='""9 times 2 is 18, plus 7 would be 25""',
)

# ""3 plus 2 is 5, times 7 is 35, minus 9 would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+2)*7-9=24"",
    resulting_state=(24,),
    result_calc_error=True,
    comment='""3 plus 2 is 5, times 7 is 35, minus 9 would be 24""',
)

# The participant then spends time arguing that their answer is correct, which it is not
```"
2075,"[2,8,10,13]",(13x2)-10+8,133," Okay, I'm laughing because it's 26. I was wrong. I was so confident in my last answer. That's funny. Well, it is what it is. Alright, y'all are going to laugh at my responses. So, 18 plus 13 would be 18 plus 3 is 31 minus 2. Nope, that's going to be too much. If I add those together, it'll be 23. Nope. What if I do 16 plus 13? Nope. I think some of these are impossible, but maybe I'm wrong. What if I do 20 plus 13? The thing that's messing me up is we have to get an even number. So, the one thing I have to do... out of this is I have to somehow do something with that 13. So, in my head, thinking about this a little bit more logically than just trying numbers, which is what I was doing, I have to take that 13 and times it by 2. Because otherwise I'm going to get an odd number at the end. Okay, so 13 times 2. There has to be a 13 times 2. There has to be somewhere. Because I can't mind that. And a 6. I'll still get a... Well, I could get a 110 divided by 8, or I could get a 88 divided by 10, but that's not going to work. Yeah, in my head, that's not going to work. Okay. So, 26. So... A minus 10. Okay. I think I got it. So, if I minus 10... Oops. Minus 10 from 26, I have 16 plus 8 is 24.","```python
start_state = (2, 8, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""18 plus 13 would be 18 plus 3 is 31 minus 2"" 
# The 18 likely comes from 10+8
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(2, 13, 18),
    comment='""18 plus 13"" suggests participant first computed 10+8=18',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+13-2=31"",
    resulting_state=(31,),
    comment='""18 plus 13 would be 18 plus 3 is 31 minus 2""',
    result_calc_error=True,
)

# ""If I add those together, it'll be 23"" - not clear which numbers they're adding
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(2, 8, 23),
    comment='""If I add those together, it\'ll be 23"" - trying 13+10',
)

# ""What if I do 16 plus 13?"" - the 16 likely comes from 8*2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(10, 13, 16),
    comment='""What if I do 16 plus 13?"" - first computing 8*2=16',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+13=29"",
    resulting_state=(10, 29),
    comment='""What if I do 16 plus 13?"" - adding 13 to the 16',
)

# ""What if I do 20 plus 13?"" - the 20 likely comes from 10*2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(8, 13, 20),
    comment='""What if I do 20 plus 13?"" - first computing 10*2=20',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+13=33"",
    resulting_state=(8, 33),
    comment='""What if I do 20 plus 13?"" - adding 13 to the 20',
)

# The participant then has an insight about needing to multiply 13 by 2 to get an even number
# ""13 times 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(8, 10, 26),
    comment='""13 times 2. Because otherwise I\'m going to get an odd number at the end""',
)

# ""minus 10 from 26, I have 16 plus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-10+8=24"",
    resulting_state=(24,),
    comment='""minus 10 from 26, I have 16 plus 8 is 24""',
)
```"
2078,"[3,3,3,4]",3x4x,181," So, maybe the target number is 24, so I have 12. So what I want is... Interesting here. So this one's gonna be a little tougher. Okay, shit. Time to delete it here. 3 times 1. 3 times 1. 3 times 1. Would be... 3 times... 3 divided by... 3 divided by 3. No, that won't work. Let's see here. 24. So I need to get 6. How am I going to get 6? I could get 12. How am I gonna get 2, though? Oh, I'm not sure. 12 times 3. 3 divided by 3 would be 1. But then how am I gonna get... I could get to 9. I could get to 7, but that's not going to help. I could get to... Let's see. 4 plus 3 would be 12, but how do I get 2 out of the 3 and the 3? That's not gonna work. How do I get the 6 to the 3? 3 divided by 3 would be 1 times 4 times 12. That gets me to 12. 3 divided by 4. I can't figure this one out. And now I have to wait 3 minutes to get to the end of the process here. 3 times 4 would be 12. That would be 36. Divided by 3 would still be 3. I could do 4 times 3. I don't have a square root function. Hmm. 3 times 4 would be 12. I need 8. Okay, so that's the...","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So I have 12"" - participant seems to be thinking about getting to 12 first
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""So I have 12"" - participant seems to be thinking about getting to 12',
)

# ""3 times 1"" participant seems to be trying to divide 3 by 3 to get 1
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 4),
    comment='""3 times 1. 3 times 1. Would be... 3 times... 3 divided by... 3 divided by 3""',
)

# ""So I need to get 6"" - participant sets another subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""So I need to get 6""',
)

# ""I could get 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(3, 3, 12),
    comment='""I could get 12""',
)

# ""12 times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(3, 36),
    comment='""12 times 3""',
)

# ""I could get to 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 4, 9),
    comment='""I could get to 9""',
)

# ""4 plus 3 would be 12"" - this seems to be a calculation error since 4+3=7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+3=12"",
    resulting_state=(3, 3, 12),
    comment='""4 plus 3 would be 12"" - this seems to be a calculation error',
    result_calc_error=True,
)

# ""3 divided by 3 would be 1 times 4 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3*4=4"",
    resulting_state=(3, 4),
    comment='""3 divided by 3 would be 1 times 4""',
)

# ""3 times 4 would be 12. That would be 36. Divided by 3 would still be 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4*3/3=12"",
    resulting_state=(12,),
    comment='""3 times 4 would be 12. That would be 36. Divided by 3 would still be 3""',
)

# ""4 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(3, 3, 12),
    comment='""4 times 3""',
)

# ""3 times 4 would be 12. I need 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(3, 3, 12),
    comment='""3 times 4 would be 12. I need 8""',
)
```"
2081,"[3,3,3,9]",(9)+3,180," Okay, let's see now. Here we have this one here, which is that we have a 9, we can get to 12. But we cannot get to the 2 again. These are harder when they have the 3 3's. 3 times 3 is 9. So 18 would be 21. I can get to 6. If I could get to 4 somehow. But I need a 4. It's very hard to keep talking when I have to analyze this. I want to be thinking inside myself. 27 minus 3. But that's not going to work. 9 times 3 minus 3. Let's try. Let's get started daily. 9 minus 3 would be 6 plus 3. No, that will not work at all. How about 3? No, that won't work. Divided by 3. I could use 3 divided by 3 to get to a 1. I keep trying to use the multiplication as the backspace. 3, so 1 would be 27. That can get me to 26. I can get a 6. I can get another 3. 3 times 6. But I need 6 times 4. This is another tough one. I'll probably figure it out right at the end. Let's see here. 3 minus 3 would be 1. Plus 3, which would be 4. 3 minus 3 would be 0. That doesn't work. 9 plus 3 would be 12. But how do I get that times 2? I need 2.","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""we have a 9, we can get to 12"" - participant adds 3 to 9
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(3, 3, 12),
    comment='""we have a 9, we can get to 12""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 9, 9),
    comment='""3 times 3 is 9""',
)

# ""So 18 would be 21"" - participant likely adding 3 to 18 (which could come from 9*2)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+3=21"",
    resulting_state=(21,),
    comment='""So 18 would be 21"" - participant likely adding 3 to 18',
)

# ""I can get to 6"" - participant likely multiplying 3*2 or adding 3+3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 6, 9),
    comment='""I can get to 6""',
)

# ""27 minus 3"" - participant likely multiplied 9*3 first
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 3, 27),
    comment='""27 minus 3"" - participant first computes 9*3',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(3, 24),
    comment='""27 minus 3""',
)

# ""9 minus 3 would be 6 plus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 3, 6),
    comment='""9 minus 3 would be 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(3, 9),
    comment='""plus 3""',
)

# ""3 divided by 3 to get to a 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 3, 9),
    comment='""3 divided by 3 to get to a 1""',
)

# ""3 minus 3 would be 1. Plus 3, which would be 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-3+3=3"",
    resulting_state=(3, 9),
    comment='""3 minus 3 would be 1. Plus 3, which would be 4""',
)

# ""9 plus 3 would be 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(3, 3, 12),
    comment='""9 plus 3 would be 12""',
)
```"
2083,"[3,4,7,9]",(9-7)x(3x4),28," Okay, here we go. Now we got some different stuff. I can get to 12. 12 times 2 is 7. That should be pretty quick. So what I need is 9 minus 7, which will get me 2, times 3 times 4. Okay, put too many backspashes in there.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can get to 12"" suggests setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""I can get to 12""',
)

# ""3 times 4"" to get to 12
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(7, 9, 12),
    comment='""3 times 4"" to get to 12',
)

curr_state = graph.move_to_node(start_state)
# ""9 minus 7, which will get me 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 4),
    comment='""9 minus 7, which will get me 2""',
)

# Then the participant combines these operations: ""times 3 times 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-7)*(3*4)=24"",
    resulting_state=(24,),
    comment='Based on submitted response ""(9-7)x(3x4)"", multiplied (9-7) by (3*4)',
)
```"
2084,"[8,8,8,11]",,180," If I could get to 2, then I could get to 24. This is another tough one again. I could get 24, but then what am I going to do with the 11? I could get 19, but how am I going to modify the 8 to make it work? I can get a 3, and I could get a 1, but that doesn't help. I could add that. Those two will only ever make 16 or 19. I have 16 and a 19, and then I have the two 8s left over. I can turn one of the 8s into a 1, but how is that going to ever help? That's not going to help. I could turn the 11 into a 1.3 times 8. That's still not going to get me to where I want to go, I don't believe. Let's see, 8 divided by 11. No, that doesn't work at all. I don't think division is the key here, although it could be. 19 plus 27, 16, and 3, that doesn't help. Oh my goodness. I do not know the answer. I'm going to have to do this one. 11, I can get to 19, I can get to negative 3, I can get to 16. Man, this is another tough one. I don't think I'm going to be going to Stanford, boys. Let's see here. 8 plus 16 would be minus, that would be 8, but how do I get back to 24? Throughout that, I can't square root. I can't. I could multiply 8 times 8, well, that would be a huge number. 8 times 8 is 64, or 400, and that's not going to work. I could divide by 11.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I could get to 2, then I could get to 24"" - setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""If I could get to 2, then I could get to 24""',
)

# ""I could get 19"" - participant likely adding 11+8
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(8, 8, 19),
    comment='""I could get 19""',
)

# ""I can get a 3"" - participant likely doing 11-8
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""I can get a 3""',
)

# ""Those two will only ever make 16"" - participant likely adding 8+8
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(8, 11, 16),
    comment='""Those two will only ever make 16""',
)

# ""8 divided by 11. No, that doesn't work at all""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/11"",
    resulting_state=(8, 8, 8/11),
    comment='""8 divided by 11. No, that doesn\'t work at all""',
)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""8 times 8 is 64""',
)

```"
2086,"[5,6,7,7]",,180," Here we go. Most targets here. We have 14 plus 10. I can get to 1. There's a lot of options here. I can get to 42 minus 12. I can get to 35 minus 13. That doesn't work. I can get to 14, but then I need 10. I can't get that. I can get to 11. I can get to 25 a lot of different ways, but I don't seem to be able to get to... 30 minus 7 plus 7 doesn't work. 42, 42. So I have 42, but I would need to get 18 off. I don't see any way to get back to 18 from 42. I can get 35, and then I have 13. That doesn't work. I can get 1 and 30. I can get a 2, but I can't get a 12. I can get a 13 times 2. I can get 14 plus... 1. I can't make a 2, though. That would only be a 20, though. I can get 13, 25. If I add the 7 and 7 and then the 5 and the 6, that gives me 11 plus 14. Still coming up to 25. I cannot seem to find a way to get to... 12. I can get 1 with the 7 times the 6. 6 times 5. That still comes up to just 24. 24. They got me stumped on this one, boys. 7 times 6 is 24. Plus 7. That would be 18. That doesn't work either. Okay, I don't know this one either. I've tried to work it through in my head, and I can't figure this one out. 6 times 5. 7 times 5. 30 minus 7. 23 to get to 28. 13 plus 18.","```python
start_state = (5, 6, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""14 plus 10"" - participant likely got 14 from 7+7
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(5, 6, 14),
    comment='""14 plus 10"" - participant starts by adding 7+7',
)

# ""42 minus 12"" - participant likely got 42 from 7*6
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 7, 42),
    comment='""42 minus 12""',
)

# ""35 minus 13"" - participant likely got 35 from 7*5
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(6, 7, 35),
    comment='""35 minus 13""',
)

# ""I can get to 11"" - participant likely adding 5+6
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(7, 7, 11),
    comment='""I can get to 11""',
)

# ""30 minus 7 plus 7"" - participant likely got 30 from 5*6
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(7, 7, 30),
    comment='""30 minus 7 plus 7""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-7+7=30"",
    resulting_state=(30,),
    comment='""30 minus 7 plus 7""',
)

# ""If I add the 7 and 7 and then the 5 and the 6, that gives me 11 plus 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(5, 6, 14),
    comment='""If I add the 7 and 7""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(7, 7, 11),
    comment='""and then the 5 and the 6, that gives me 11""',
)

# ""7 times 6 is 24"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=24"",
    resulting_state=(5, 7, 24),
    comment='""7 times 6 is 24"" - participant makes calculation error',
    result_calc_error=True,
)

# ""Plus 7. That would be 18"" - participant continues with incorrect calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+7=18"",
    resulting_state=(5, 18),
    comment='""Plus 7. That would be 18"" - participant continues with incorrect calculation',
    result_calc_error=True,
)

# ""6 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(7, 7, 30),
    comment='""6 times 5""',
)

# ""7 times 5. 30 minus 7. 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5-7=28"",
    resulting_state=(6, 28),
    comment='""7 times 5. 30 minus 7. 23"" - participant trying different combinations',
)

```"
2087,"[3,3,7,13]",7+3x3,180," The target number is 24 on this one. I can get to 4 times 12, 13. I can get to 20 minus that. I can get a 4 times that. I can get a 10. 13 would get me to 10 plus 10. That doesn't work. I could get to 6 plus 6. No. I can get to 26. I can get to 16 plus 4. I can get to 21. 33. So that would be 91 divided by 3. I could do 21 plus 14. This one isn't obvious either. This one, I'm doing a study. It's with a microphone though. 20 plus 26. That's 42. 3 would be 3 times 3 would be 9. Plus 16 would be 25. I could get 6. I need to get 8 somehow. How do I get 8 from this? If I can get 8 out of those other numbers, then I can multiply the whole thing by 8. I have 3. I have 4, but I need to get minus 5. I don't have any way to get minus 5. I could get 6, and that would be 9. This one's got me stumped too, boys. 3 times 3 is 9. 3 times 7 is 24 minus 18. 91 divided by 3 would be a strange number, obviously. 3 times 3 again is 9. I could get 2. I could get to 26. That doesn't help. I can get that 6. 6 times 6 is 36. 6 divided by 6 is 1, obviously. 4, 12, 25. I can get to 25. Oh my goodness. This is going to be another one I'm not going to be able to answer directly. Waiting for that 3 minutes to be up. Drive my best, boys. 7 plus 3 is 10. Times 3 would be 36.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can get to 4 times 12"" - participant might be trying to get to 48/2=24
graph.set_subgoal(
    (4, 12),
    state_after_subgoal=(24,),
    comment='""I can get to 4 times 12""',
)

# ""13 would get me to 10"" - participant might be trying 13-3
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(3, 7, 10),
    comment='""13 would get me to 10""',
)

# ""I can get to 26"" - participant might be trying 13*2
graph.set_subgoal(
    (26,),
    state_after_subgoal=(24,),
    comment='""I can get to 26""',
)

# ""I can get to 16 plus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(3, 7, 16),
    comment='""I can get to 16""',
)

# ""I can get to 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""I can get to 21""',
)

# ""33"" - participant might be adding all numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+3+3=33"",
    resulting_state=(33,),
    comment='""33"" - participant might be adding all numbers',
    result_calc_error=True,
)

# ""91 divided by 3"" - not clear where 91 comes from

# ""3 times 3 would be 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(7, 9, 13),
    comment='""3 times 3 would be 9""',
)

# ""7 plus 3 is 10. Times 3 would be 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(3, 10, 13),
    comment='""7 plus 3 is 10""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(13, 30),
    comment='""Times 3 would be 36"" - participant made calculation error',
    result_calc_error=True,
)
```"
2088,"[5,5,7,7]",(7-(5/5))x7,180," Jesus. This is hard. Like, I'm having to use a damn calculator because I don't know math. And I don't like that the numbers are doubled. So, we are going to, and I don't like parentheses. Alright, let's see. Let's try this. Um, do this. Alright. And then if I close that up and do that. Ah! What do you mean? It's not right. Okay. Oh, okay. I see where I messed up. Whoops, whoops, whoops. I forgot to close that parentheses. Whew! Okay. It's the damn parentheses that are getting me. That's annoying. What do you mean? Sigh. Invalid... Ughhh! Mmmkay. Alright. If I do 7... Ughhh! Okay, if I do 7 minus 5 divided by 5, and I close all that up... Ughhh! It's not letting me close all that up. Okay. Seven. Minus. 5 nope 7 minus close the parentheses 5 divided by 5 Close close that times 7. Is that what I was we gonna do? Oh What the hell Maybe I don't need to close that front one 7 minus Close 5 Divided by 5 close close times 7 This is annoying That is right All right, cuz if you do 7 minus close parentheses 5 divided by 5 and Then you close it cuz 5 divided by 5 is 6 7 minus 6 is 1 Um, yeah, yeah 7 minus 1 is 6 and then 6 times 7 is 24. So what's the issue? That is right. Oh My god, that is right Y'all are pissing me off because this one is right. I am right and y'all are wrong. Uh, I Don't get it","```python
start_state = (5, 5, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant seems to be struggling with parentheses notation but eventually works out:
# ""7 minus 5 divided by 5... times 7""
# They then verify their logic:
# ""5 divided by 5 is 6"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5/5=6"",
    resulting_state=(6, 7, 7),
    comment='""5 divided by 5 is 6"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""7 minus 6 is 1"" - continuing with their incorrect calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 7),
    comment='""7 minus 6 is 1"" - continuing with incorrect calculation',
)

# ""6 times 7 is 24"" - participant makes another calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*7=24"",
    resulting_state=(24,),
    comment='""6 times 7 is 24"" - participant makes another calculation error',
    result_calc_error=True,
)

# The participant seems convinced their answer is correct despite multiple calculation errors
# The actual calculation they're trying to do is (7-(5/5))*7 which would be:
# 5/5 = 1
# 7-1 = 6
# 6*7 = 42
# But they make several calculation errors along the way
```"
2092,"[5,5,6,11]",(5+(5x6))-11,59," We are understanding. I think I prefer the bigger numbers over the smaller numbers. So okay, 11. I think I kind of like doing separate parentheses for things. So let's let's do this. Let's do five. No. Um, maybe the 11 I want on the back end. Let's do that. Let's do that on the back end because I feel like it'll be easier to subtract 11 from whatever big number I get in the middle to get 24. So let's do five plus five times no matter what I like five times six so that helps. Um, yep.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""maybe the 11 I want on the back end"" - participant is planning to subtract 11 at the end
# This suggests they are working backward from 24, wanting to get to 35 (since 35-11=24)
graph.set_subgoal(
    (35,),
    state_after_subgoal=(24,),
    comment='""maybe the 11 I want on the back end"" - participant plans to subtract 11 at the end to get 24',
)

# ""five times six""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(5, 11, 30),
    comment='""five times six""',
)

# Then the participant adds the remaining 5 and subtracts 11 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30+5-11=24"",
    resulting_state=(24,),
    comment='Based on their response ""(5+(5x6))-11""',
)
```"
2096,"[1,3,3,10]",(10-3+1)x3,154," So you get 24. 10 times 3 is too high. You can get 7 times 3, 21. That's too low. 9 times 20. 3 times 3 is not. Plus 10 is not enough. 7 times 3. I already went over that. 6. 4. Times 7. No. 7. 4 minus 3 is 1. Okay. It's really hard to do math when I'm thinking out loud because I'm not sure. sophomores. Instead of having 1,000, I'm narrating. I'm not actually in my head that much. Okay. 6. 0. 6 times 3 is 18. No. How do I get 24? 8 times 3. Is there a way to get 8? 4. 6. Oh, no. 7. 8 times 3. Okay. 10 minus 3 plus 1 times 3. freshmen.","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 3 is too high""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(1, 3, 30),
    comment='""10 times 3 is too high""',
)

# ""You can get 7 times 3, 21"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 7),
    state_after_subgoal=(21,),
    comment='""You can get 7 times 3, 21""',
)

# ""3 times 3 is not. Plus 10 is not enough""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3+10=19"",
    resulting_state=(1, 19),
    comment='""3 times 3 is not. Plus 10 is not enough""',
)

# ""8 times 3"" participant seems to be looking for a way to make 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3. Is there a way to get 8?""',
)

# Finally ""10 minus 3 plus 1 times 3"" - this is their solution
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3+1)*3=24"",
    resulting_state=(24,),
    comment='""10 minus 3 plus 1 times 3""',
)
```"
2098,"[7,12,12,13]",(12/(13-7))x12,63," Okay, if we get a 12 times 2, that would be helpful. 12, 13 minus 12 is 1, 7, 7 minus 13, 13 minus 7 is 6. 12 divided by 6, okay. So we're starting with 12, 13 minus 7 to get 6. Oh, we're not starting with that. We're starting with 12 divided by parentheses, 13 minus 7 to get 6. Should give us 2 times 12.","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if we get a 12 times 2, that would be helpful"" - participant sets a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""if we get a 12 times 2, that would be helpful""',
)

# ""13 minus 12 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 7, 12),
    comment='""13 minus 12 is 1""',
)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 12, 12),
    comment='""13 minus 7 is 6""',
)

# ""12 divided by 6"" participant uses the 6 they just computed
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 12),
    comment='""12 divided by 6""',
)

# ""times 12"" participant multiplies by the remaining 12
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='""times 12""',
)
```"
2102,"[3,5,8,13]",,180," 5 times 8 is too much. 5 times 3 is 15. 13 minus 8 is 6. 5. 8 plus 5. No, 15 plus 5 is 20. What do we need? 10. 4. 23. 5 times 5 is 25. 3 left over. That doesn't work. 8 minus 3. 5 times 5 is 25. Yeah. Same problem. 8 times 3 would be nice. 8 times 3. Okay. Um. There's a lot of ways to get 8 times 3. Okay. 13 minus 8 is 5. 5. 5 plus 8. 8 times 3, I think, is the solution. How do we get there? How do we get an 8 from all this? Um. I don't know. I don't know. 8 minus 5 is 3. 3. Um. Okay. 8 plus 5 is 13. 13 minus 5. 8. Okay. 8 plus 5 is 13.","```python
start_state = (3, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 8 is too much""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(3, 13, 40),
    comment='""5 times 8 is too much""',
)

# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(8, 13, 15),
    comment='""5 times 3 is 15""',
)

# ""13 minus 8 is 6. 5.""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(3, 5, 5),
    comment='""13 minus 8 is 6. 5."" - participant corrects themselves to 5',
)

# ""8 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(3, 13, 13),
    comment='""8 plus 5""',
)

# ""8 times 3"" - participant seems to set this as a subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3 would be nice""',
)

# ""13 minus 8 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(3, 5, 5),
    comment='""13 minus 8 is 5""',
)

# ""5 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(3, 13, 13),
    comment='""5 plus 8""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 3, 13),
    comment='""8 minus 5 is 3""',
)

# ""8 plus 5 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(3, 13, 13),
    comment='""8 plus 5 is 13""',
)

curr_state = graph.move_to_node(start_state)
# ""13 minus 5. 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(3, 8, 8),
    comment='""13 minus 5. 8""',
)
```"
2112,"[7,7,11,12]",(12+11)+(7/7),76," No, it don't matter. I can't get them anyway. Uh, phew, really? I have no clue. Um, say... 7 times 7 is 49 minus 11 and minus 12. 26, that ain't gonna work. Um... 7 times 12, um... Uh, 7 times 12 is 64. 7 times... minus 77. Oh yeah, duh, it's only 7, duh. Um... phew... Oh, 7 divided by 7 is 1. And then we do 11 to, uh, 23. Um... 12 plus 11. And then... add... bracket 7 divided by 7. And then... phew...","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is 49 minus 11 and minus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7-11-12=26"",
    resulting_state=(26,),
    comment='""7 times 7 is 49 minus 11 and minus 12. 26""',
)

# ""that ain't gonna work""

# ""7 times 12 is 64"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=64"",
    resulting_state=(7, 11, 64),
    comment='""7 times 12 is 64""',
    result_calc_error=True,
)

# ""Oh, 7 divided by 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 11, 12),
    comment='""7 divided by 7 is 1""',
)

# ""And then we do 11 to, uh, 23. Um... 12 plus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(1, 23),
    comment='""12 plus 11""',
)

# ""And then... add... bracket 7 divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+1=24"",
    resulting_state=(24,),
    comment='""And then... add... bracket 7 divided by 7""',
)
```"
2114,"[2,6,6,7]",7,186," Let's see, 2 minus 6 is 4, or 6 minus 2 is 4, times 6 is 24. That won't work. 6 times 6 is 36, minus 14 is 22. Hmm, the 7 is tricky. 2 times 7 is 14. How can I get to 10? Nope. 7 minus 6, no, 6 times 6 is 36. Divided by 2, 18 plus 7 is 25. 6 times 7 is 43. Divided, no, not divided by 2. 6 times 6, hmmm. 6 times 2 is 12. 12 times 6, 72 divided by 7, no. I can only use it once, alright. 6 plus 7 is 13. Plus 6, 19, plus, no. What can I do? 2, no, you can only use it once. Okay. 2, 6 times 6 is 36, minus 7, no, minus... 7 minus, ah, there it is. Okay. Okay. 7... No. No, no. Oops. I thought I had it. 7 minus... 7... Trying to...","```python
start_state = (2, 6, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 minus 2 is 4, times 6 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-2=4"",
    resulting_state=(4, 6, 7),
    comment='""6 minus 2 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(7, 24),
    comment='""times 6 is 24""',
)

# ""6 times 6 is 36, minus 14 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 7, 36),
    comment='""6 times 6 is 36""',
)

# ""2 times 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(6, 6, 14),
    comment='""2 times 7 is 14""',
)

# ""6 times 6 is 36. Divided by 2, 18 plus 7 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 7, 36),
    comment='""6 times 6 is 36""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/2=18"",
    resulting_state=(7, 18),
    comment='""Divided by 2, 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(25,),
    comment='""plus 7 is 25""',
)

# ""6 times 7 is 43"" (calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=43"",
    resulting_state=(2, 6, 43),
    comment='""6 times 7 is 43""',
    result_calc_error=True,
)

# ""6 times 2 is 12. 12 times 6, 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(6, 7, 12),
    comment='""6 times 2 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(7, 72),
    comment='""12 times 6, 72""',
)

# ""6 plus 7 is 13. Plus 6, 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(2, 6, 13),
    comment='""6 plus 7 is 13""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(2, 19),
    comment='""Plus 6, 19""',
)

# ""6 times 6 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 7, 36),
    comment='""6 times 6 is 36""',
)

# The participant submitted just ""7"" as their response, suggesting they either gave up or ran out of time
```"
2117,"[8,9,9,12]",,186," Let's see, 9 times 9, 81, 9, plus 9, 18, plus 8, 26, 9, let's see, 12 minus 9 is 3, times 8 is 24. 9 times 9 is 81, 8 times 9 is 72, 12 times 9 is 106, divided by 8 is 13, is that right? 12 times 9, divided by 8, no, 9 plus 12 is 21. Okay. Uh, how can I get 2 out of this? 18, 8 times 9 is 72, divided by, no, 12, 12 divided by 9. 12 divided by, no, 12 divided by 8 is 1.5 times 18, yeah, okay. 12 divided by 8 is 1.5 times 18, oops. Oh, wait, no, no, no, that's wrong. No, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, that's wrong. All right, 1.5 times 18, 27, that's wrong. Okay, 12 divided by 9, plus 17, no. Okay. Okay. 9 times…. 9 times… You okay with that, baby? Yes, I'm 10. 18 times 9 is 15, that's 9 times, oh no, 2 times 12, I meant 9. Yeah. Sppped it. The second time, zФ��ı received again from someone. A whole bunch of those were minus 16, which is, let's say, 6 to minus 18 times 9 times,","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 9, 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(8, 12, 81),
    comment='""9 times 9, 81""',
)

# ""plus 9, 18, plus 8, 26"" seems to be adding numbers from start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+8=26"",
    resulting_state=(12, 26),
    comment='""plus 9, 18, plus 8, 26""',
)

# ""12 minus 9 is 3, times 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(9, 24),
    comment='""12 minus 9 is 3, times 8 is 24""',
)

# ""9 times 9 is 81"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(8, 12, 81),
    comment='""9 times 9 is 81""',
)

# ""8 times 9 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(9, 12, 72),
    comment='""8 times 9 is 72""',
)

# ""12 times 9 is 106"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=106"",
    resulting_state=(8, 9, 106),
    comment='""12 times 9 is 106"" - calculation error',
    result_calc_error=True,
)

# ""divided by 8 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""106/8=13"",
    resulting_state=(9, 13),
    comment='""divided by 8 is 13""',
    result_calc_error=True,
)

# ""9 plus 12 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12=21"",
    resulting_state=(8, 9, 21),
    comment='""9 plus 12 is 21""',
)

# ""12 divided by 8 is 1.5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8=1.5"",
    resulting_state=(1.5, 9, 9),
    comment='""12 divided by 8 is 1.5""',
)

# The rest of the transcript becomes increasingly difficult to interpret, with what appears to be transcription errors and unclear operations. The participant seems to be getting frustrated and their speech becomes less coherent.
```"
2121,"[1,1,5,8]",(5-1-1)x8,16," Um... Huh. Oh, yeah, okay. 8 times 3, so 5 minus 1, minus 1, times 8.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3"" suggests participant is working backward from 24, setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3"" suggests participant is working backward from 24',
)

# ""5 minus 1, minus 1, times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-1-1)*8=24"",
    resulting_state=(24,),
    comment='""5 minus 1, minus 1, times 8""',
)
```"
2134,"[3,6,8,13]",13+6+8-3,66," Okay, target number is 24. Let's see, 13. 6, 12, 18. 18 minus 8. That would be 23. No. 6 times 8, 16, 24. Hmm. 8 times 8. 24. 13. Hmm. Let's see what we can do. 13. 13 plus 6 is 19. 19 plus... 8 is 27. Plus 8 minus 3? All right.","```python
start_state = (3, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13. 6, 12, 18"" seems to be adding numbers: 13+6=19
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(3, 8, 19),
    comment='""13. 6, 12, 18"" seems to be adding numbers starting with 13+6',
)

# ""18 minus 8. That would be 23"" - participant seems to have made a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19-8=23"",
    resulting_state=(3, 23),
    comment='""18 minus 8. That would be 23"" - participant seems to have made a calculation error',
    result_calc_error=True,
)

# ""6 times 8, 16, 24"" - participant made a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=24"",
    resulting_state=(3, 13, 24),
    comment='""6 times 8, 16, 24"" - participant made a calculation error',
    result_calc_error=True,
)

# ""13 plus 6 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(3, 8, 19),
    comment='""13 plus 6 is 19""',
)

# ""19 plus... 8 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+8=27"",
    resulting_state=(3, 27),
    comment='""19 plus... 8 is 27""',
)

# ""Plus 8 minus 3"" - participant likely meant ""27 minus 3"" since they already added 8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(24,),
    comment='""Plus 8 minus 3"" - participant likely meant ""27 minus 3"" since they already added 8',
)
```"
2141,"[2,2,3,11]",,180," 2, 2, 3, and 11. What do I do? 11 times 2 would be 22. 22 plus 2, no. 11 times 33 minus 4, no. Say 2 minus, no. So what if I just did 1? So can I, can I do it with 1? Hmmm. Let's see, 11 times, say 3 minus 2 would be 1. Oh, that wouldn't work. Hmmm. 11 times 2 is 22. How can I get 2 from these 2 numbers? How can I get 2 from these 2 numbers? How can I get 2 from these 2 numbers? Hmmm. 2, 2, 3, and 11. 3 minus 1. 2 minus 2 is 1. 1 times... Hmmmm. 2 divided by 2. So that would be 1. Hmmmm. 2 times 11 would be 22. 2 times 11 would be 22. Ah, this is a tough one. How do I get to 8? 2 times 5...","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 2 would be 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 3, 22),
    comment='""11 times 2 would be 22""',
)

# ""22 plus 2"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+2=24"",
    resulting_state=(3, 24),
    comment='""22 plus 2""',
)

# ""3 minus 2 would be 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-2=1"",
    resulting_state=(1, 2, 11),
    comment='""3 minus 2 would be 1""',
)

# ""2 minus 2 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2-2=0"",
    resulting_state=(0, 3, 11),
    comment='""2 minus 2 is 1"" - participant states 1 but calculates 0',
    result_calc_error=True
)

# ""2 divided by 2. So that would be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2/2=1"",
    resulting_state=(1, 3, 11),
    comment='""2 divided by 2. So that would be 1""',
)

# ""2 times 11 would be 22"" - participant tries this calculation again
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 3, 22),
    comment='""2 times 11 would be 22"" - participant tries this calculation again',
)

# ""How do I get to 8? 2 times 5..."" participant seems to be setting a subgoal of 8
graph.set_subgoal(
    (8,),
    state_after_subgoal=(24,),
    comment='""How do I get to 8? 2 times 5..."" participant seems to be setting a subgoal of 8',
)
```"
2143,"[1,5,10,12]",12/(1-(5/10)),100," Okay, so 1, 5, 10, and 12. How am I going to make 24? 10 times 12 is 22. 20. No, I can't do anything with 22. 22 minus 5. 22 plus 5 is 7. Minus 1, no. 4. Hmm. I know I'm going to have to divide something here. 5. Hmm. Can I do fractions maybe? So I'll do 1 minus 0.5. Huh. Minus 5 over 10, right? That'll give me 0.5. 12 divided by 1 minus 5 over 10.","```python
start_state = (1, 5, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 12 is 22"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=22"",
    resulting_state=(1, 5, 22),
    comment='""10 times 12 is 22"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""22 plus 5 is 7"" - another calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+5=7"",
    resulting_state=(1, 7),
    comment='""22 plus 5 is 7"" - participant makes another calculation error',
    result_calc_error=True,
)

# ""Can I do fractions maybe? So I'll do 1 minus 0.5"" 
# The participant realizes they can use division and works out 5/10 = 0.5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5/10=0.5"",
    resulting_state=(0.5, 1, 12),
    comment='""Can I do fractions maybe? So I\'ll do 1 minus 0.5"" participant computes 5/10',
)

# ""12 divided by 1 minus 5 over 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/(1-0.5)=24"",
    resulting_state=(24,),
    comment='""12 divided by 1 minus 5 over 10""',
)
```"
2147,"[4,7,8,11]",,180," 4, 7, 8, 11, 11, 19, 19, 20, 21, 22, 23, 24, 11, minus 7, 34, 45, 46, 48, 59, 51, 22, 23, 24, 35, 59, 53, 54, 5, 49, 54, 5, 50 . . . 4 times eight, 4x8, 4x8 4x8 8 minus 4, 11, 4 times 8, 4 times 8, 4 times 8, minus 4, 4, 8 times 4, 8, 7 times 4, 7 times 4, plus 4. 8, 7 times 4, times 8, divided by 11. 7 times 4, times 11, 7. 7 times 4 7 times 8 7 77 32 7 times 11 7 times","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The first part of the transcript appears to be the participant listing numbers, possibly intermediate results, 
# but without clear operations

# ""4 times eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(7, 11, 32),
    comment='""4 times eight""',
)

# ""8 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 11),
    comment='""8 minus 4""',
)

# ""7 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 11, 28),
    comment='""7 times 4""',
)

# ""7 times 4, times 8, divided by 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4*8/11=20.36"",
    resulting_state=(20.36,),
    comment='""7 times 4, times 8, divided by 11""',
)

# ""7 times 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*11=77"",
    resulting_state=(4, 8, 77),
    comment='""7 times 11""',
)

```"
2161,"[7,9,9,13]",(13-7)+9+9,67," 24, okay, let's see. 2, 9 minus 9 is 1. 9 minus 9 is 0. Let's see, you can't know division here. It's got to be subtraction or add. That's 2. 13 minus 9 plus 7 is 16. 13 minus 7 is 6. 9 plus 9 is 18, okay. 13 minus 7 is 6. That's plus 9. Wait a second, 9 plus 9 is 18, plus 6 should be 20.","```python
start_state = (7, 9, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 9 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-9=0"",
    resulting_state=(0, 7, 13),
    comment='""9 minus 9 is 0""',
)

# ""13 minus 9 plus 7 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9+7=16"",
    resulting_state=(9, 16),
    comment='""13 minus 9 plus 7 is 16""',
    result_calc_error=True,
)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 9),
    comment='""13 minus 7 is 6""',
)

# ""9 plus 9 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 18),
    comment='""9 plus 9 is 18""',
)

# ""plus 6 should be 20"" - participant realizes this adds to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(24,),
    comment='""plus 6 should be 20"" - participant realizes this adds to 24',
)

```"
2167,"[7,10,10,12]",,180," So what if you do... Hmm. Alright, so... Hmm, this is a tricky one again. 10 plus 7 is 17. You need to get 7. No, it's not going to work. 10 times 10 is 100. 12 times 7 is 84. That's only 16. If you subtract them, that's not going to work. Is there a way to get 4? Because 12... 48 divided by 12 is 24. Is there a way to get 48? No, I don't think there is. Is there a way to get 2? 12 times 2 is 24. 10 minus 7 is 3. No, 3 times now. I don't see any way to get that. Um... 10 times 7 is 70. 12 minus 10 is 2. 70 divided by 2 is 35. No. 12 plus 10 is 22. Plus 3 now. 12 minus 7 is 5. 10 divided by 5 is 2. Times 10 would be 20. 20... Hmm, this is a tough one. I'm not seeing this one. Let's see. 24, 48, 72. 12 times 6 is 72. 22... 24... This is a tough one.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(10, 12, 17),
    comment='""10 plus 7 is 17""',
)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(7, 12, 100),
    comment='""10 times 10 is 100""',
)

# ""12 times 7 is 84""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(10, 10, 84),
    comment='""12 times 7 is 84""',
)

# ""That's only 16"" might refer to subtracting something, but it's not clear what

# The participant mentions ""48 divided by 12 is 24"" and wonders if there's a way to get 48
graph.set_subgoal(
    (48,),
    state_after_subgoal=(24,),
    comment='""48 divided by 12 is 24"". Is there a way to get 48?',
)

# ""12 times 2 is 24"" - participant realizes they need to get 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 is 24""',
)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 10, 12),
    comment='""10 minus 7 is 3""',
)

# ""10 times 7 is 70""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7=70"",
    resulting_state=(10, 12, 70),
    comment='""10 times 7 is 70""',
)

# ""12 minus 10 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(2, 7, 10),
    comment='""12 minus 10 is 2""',
)

# ""12 plus 10 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10=22"",
    resulting_state=(7, 10, 22),
    comment='""12 plus 10 is 22""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 10, 10),
    comment='""12 minus 7 is 5""',
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 10),
    comment='""10 divided by 5 is 2""',
)

# ""Times 10 would be 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(20,),
    comment='""Times 10 would be 20""',
)

# ""12 times 6 is 72"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (6, 12),
    state_after_subgoal=(72,),
    comment='""12 times 6 is 72""',
)

```"
2173,"[1,4,5,6]",6/((5,180," As of right now, that's 21. That doesn't work. It's 25. That doesn't work. That's 22. That also doesn't work. So, some things aren't working here. I'm a little bit stumped right now. Uh, yeah, this one's a little tricky. But I think I got it. Okay. So, I think I got it. 6 divided by the quantity of 5 minus 4 divided by 1 should equal 24. I'm probably not inputting that right. 5 divided by 4 is 1.25. Minus 1 is 0.25. 6 divided by 0.25 is 24. So, how do I show that? . .","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""As of right now, that's 21"" - participant seems to have tried some operation that gave 21
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5+4+1=21"",
    resulting_state=(21,),
    result_calc_error=True,
    comment='""As of right now, that\'s 21"" - likely tried adding all numbers',
)

# ""It's 25"" - participant tried something else
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4+1=25"",
    resulting_state=(5, 25),
    comment='""It\'s 25"" - participant likely tried 6*4+1',
)

# ""That's 22"" - participant tried another combination
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4-5=19"",
    resulting_state=(1, 19),
    comment='""That\'s 22""',
)

# ""6 divided by the quantity of 5 minus 4 divided by 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/((5-4)/1)=6"",
    resulting_state=(6,),
    comment='""6 divided by the quantity of 5 minus 4 divided by 1""',
)

# ""5 divided by 4 is 1.25. Minus 1 is 0.25. 6 divided by 0.25 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/(5/4-1)=24"",
    resulting_state=(24,),
    comment='""5 divided by 4 is 1.25. Minus 1 is 0.25. 6 divided by 0.25 is 24""',
)
```"
2178,"[2,3,6,7]",((2x7)-6)x3,139," All right, I'm thinking, I'm thinking. How do we get to 6? Um, all right, it's not coming overly easy for me. Oh, yeah, yeah, yeah, yeah, yeah, I got it, I got it. So, no, I don't got it. Crap. I'm thinking, I'm thinking. Oh, yeah, I do got it, I got it. So, 2, no, put it in wrong again. 2 times 7 is 14, minus 6 is 8, times 3 is 24. What? These parentheses are killing me. Um, all right, try this again. 2 times 7 is 14, minus 6 is 8, and then 8 times 3 is 24. What the heck? 2 times 7 is 14, minus 6 is 8, and then 8 times 7 is 24. I can't remember anything. I can't remember. I can't remember. Thank you.","```python
start_state = (2, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""How do we get to 6?"" suggests participant is considering 6 as a subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""How do we get to 6?""',
)

# ""2 times 7 is 14, minus 6 is 8, times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 6, 14),
    comment='""2 times 7 is 14""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-6=8"",
    resulting_state=(3, 8),
    comment='""minus 6 is 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""times 3 is 24""',
)

# The participant repeats this sequence several times, apparently having trouble with the parentheses notation
# but keeps arriving at the same sequence of operations that leads to 24

```"
2184,"[1,6,12,13]",(13-1)x12/6,122," Alright, so, once again, it might be a little easier if we're, you know, using, so let's see, 6, 6 plus 12 is 18, minus, no, no, no, that's not going to work. So, it feels like we want to get, can we get rid of the 6, 12, 6 times 4 would be 24, is there a way to get a 4? 13, so this would be 25. But, we don't want to do that, so 12, 6 is 13, 13, 19 is 20, or, sorry, incorrectly thinking, it's, speaking out loud and trying to do this, it's easier for me if I could just think mentally without communicating it, because it's slowing me down. Alright, so, 6, 12, so. Uh, that's a multiple, um, maybe 12, 12 times 12, um, divided by 6? No. That feels like I'm onto something there, but, so, like, 12 times 12 is 144, right? Um, yeah, so let's do 13 minus 1, times 12, divided by 6.","```python
start_state = (1, 6, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 12 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12=18"",
    resulting_state=(1, 13, 18),
    comment='""6 plus 12 is 18""',
)

# ""6 times 4 would be 24, is there a way to get a 4?"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 would be 24, is there a way to get a 4?""',
)

# ""13, so this would be 25"" - participant may be adding 12+13
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(1, 6, 25),
    comment='""13, so this would be 25""',
)

# ""12, 6 is 13, 13, 19"" - participant seems to be adding numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6+1=19"",
    resulting_state=(13, 19),
    comment='""12, 6 is 13, 13, 19""',
)

# Finally, the participant finds the solution: ""13 minus 1, times 12, divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-1)*12/6=24"",
    resulting_state=(24,),
    comment='""13 minus 1, times 12, divided by 6""',
)
```"
2189,"[5,6,8,8]",,180," Uh, how can I do this? Um. Um. Taji's number is 24. 6 times 5 is 30. 30 minus 8, 22. No. Um. 8 minus 8. 0. 5 times 6, 30. 30 minus 6, 24. 8. Yeah, yeah, yeah. 8 minus. Let me not be in brackets. 8 minus 8 is 0. So let's say 8 minus 8 times. No, let me say plus. Plus 5 times 6. Minus 6. Oh, shit. Okay, it obviously can't work that way. Um. It's times 6. 6. 6. Uh. 8 times 8. 64. 6 times 5, 30. 30 plus 8, that's 8. 8 times 5. 40. 40 minus. 8 times 5, 40. 8 plus 6. Minus. Minus. 5, 30. 30 minus 16. Give me 14. How about 6 times 8? 48. 6 times 8. 48. 48 minus 8. 0. 40. Haqqwa. Um. 5. 5. 5.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(8, 8, 30),
    comment='""6 times 5 is 30""',
)

# ""30 minus 8, 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-8=22"",
    resulting_state=(8, 22),
    comment='""30 minus 8, 22""',
)

# ""8 minus 8. 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=0"",
    resulting_state=(0, 5, 6),
    comment='""8 minus 8. 0""',
)

# ""5 times 6, 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(8, 8, 30),
    comment='""5 times 6, 30""',
)

# ""30 minus 6, 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-6=24"",
    resulting_state=(8, 8, 24),
    comment='""30 minus 6, 24""',
)

# ""8 times 8. 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""8 times 8. 64""',
)

# ""6 times 5, 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(8, 8, 30),
    comment='""6 times 5, 30""',
)

# ""30 plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30+8=38"",
    resulting_state=(8, 38),
    comment='""30 plus 8""',
)

# ""8 times 5. 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 8, 40),
    comment='""8 times 5. 40""',
)

# ""8 plus 6"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(5, 8, 14),
    comment='""8 plus 6""',
)

# ""6 times 8? 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(5, 8, 48),
    comment='""6 times 8? 48""',
)

# ""48 minus 8. 0. 40""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-8=40"",
    resulting_state=(5, 40),
    comment='""48 minus 8. 0. 40""',
)

```"
2191,"[2,4,5,9]",,180," Okay, 4 times 2 is 10. 10 plus 9, 9, 19, 20, 20, 20. How about 9 times 2, 18. 18 plus 4, 9 divided, times 4, 20. 5 times 4, 20. 4 times 2, 8. 8 plus 9. 8 plus 9, 70. Oh! How about 4 times 2, 8. 4 times 2, 8. 8 plus 9, 9. 8 plus 9 will be plus 5. 4 times 2 is 8. 8 plus 9, 8. 9, 10, 11, 12, 13, 14, 15, 16, 17. 5 times 2, 10. 4 times 2, 10. 10 plus 9, 19. No. 9 times 5. 9 times 4. 9 times 2, 18. 9 times 5. 9 times 4. 9 times 2, 18. 9 times 4. 9 times 4. 36. 36 minus 10. 9 times 5. 45. No. 4 times 20. 20 plus 2. 9 times 5. 45. No. 4 times 20. 20 plus 2. 2 times 5. 46. 35 minus 2. 45 minus 3. 35 minus 3. 9-5 is 4, 9-4 is 5, no, 9-3 is 7, 7x5, 7x5, 5x5, 7x5 is 5, yeah, 9-5 is 4, it's...","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 2 is 10"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=10"",
    resulting_state=(5, 9, 10),
    comment='""4 times 2 is 10"" - calculation error',
    result_calc_error=True,
)

# ""10 plus 9, 9, 19, 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+9=19"",
    resulting_state=(5, 19),
    comment='""10 plus 9, 9, 19""',
)

# ""9 times 2, 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(4, 5, 18),
    comment='""9 times 2, 18""',
)

# ""18 plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+4=22"",
    resulting_state=(5, 22),
    comment='""18 plus 4""',
)

# ""5 times 4, 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(2, 9, 20),
    comment='""5 times 4, 20""',
)

# ""4 times 2, 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(5, 8, 9),
    comment='""4 times 2, 8""',
)

# ""8 plus 9, 70"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=70"",
    resulting_state=(5, 70),
    comment='""8 plus 9, 70"" - calculation error',
    result_calc_error=True,
)

# ""5 times 2, 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(4, 9, 10),
    comment='""5 times 2, 10""',
)

# ""9 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 5, 36),
    comment='""9 times 4""',
)

# ""9 times 5. 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(2, 4, 45),
    comment='""9 times 5. 45""',
)

# ""9-5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(2, 4, 4),
    comment='""9-5 is 4""',
)

# ""9-4 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-4=5"",
    resulting_state=(2, 5, 5),
    comment='""9-4 is 5""',
)
```"
2195,"[3,5,7,11]",,180, six seven eight nine twenty six splitting okay um half time three is fifteen fifteen plus eleven is twenty five seven times five is thirty five thirty five minus fourteen thirty five minus ten thirty five minus eleven okay um half times seven no eleven times three is thirty three thirty three is half times five is thirty five so how about eleven times five is fifty five wow eleven times five fifty five minus seven seven times three let us write fifty five fifty five minus five minus twenty one works now eleven times five fifty five minus fifty five minus seven times three eleven times five fifty five fifty five minus eleven times five fifty five minusoooo eleven times five Ohенной seven times three five times one similarly what is he going on five times three velocity seven times three Oh마 Twenty one. Twenty one plus eleven is thirty two. No. Twenty one.,"```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""half time three is fifteen"" - unclear what ""half"" refers to, but they get 15
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(7, 11, 15),
    comment='""half time three is fifteen"" - unclear what ""half"" refers to, but they get 15',
)

# ""fifteen plus eleven is twenty five""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+11=25"",
    resulting_state=(7, 25),
    comment='""fifteen plus eleven is twenty five""',
    result_calc_error=True,
)

# ""seven times five is thirty five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(3, 11, 35),
    comment='""seven times five is thirty five""',
)

# ""thirty five minus eleven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-11=24"",
    resulting_state=(3, 24),
    comment='""thirty five minus eleven""',
)

# ""eleven times three is thirty three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(5, 7, 33),
    comment='""eleven times three is thirty three""',
)

# ""eleven times five is fifty five""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(3, 7, 55),
    comment='""eleven times five is fifty five""',
)

# ""seven times three""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(5, 11, 21),
    comment='""seven times three""',
)

# ""Twenty one plus eleven is thirty two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+11=32"",
    resulting_state=(5, 32),
    comment='""Twenty one plus eleven is thirty two""',
)

```"
2206,"[6,6,11,12]",,180," 12 minus 6 is 6, but that's only 23. 11. The 11 throws the little monkey wrench into it. Does that 12 plus 6 is 18. 11 minus 6 is 5. That only equals 23. I can come up with 23 really easy. 6 times 6 is 36. 36 minus 12 is 24. But then we have this stupid 11 that we still have to deal with. 12 times 6 is 72. 11 times 6 is 66. That doesn't make sense. 36. What's 11 times 12? 11 times 11 is 121. Times 12 is 123. 12 divided by 6 is 2. 2 times 6 is 12 plus 11 is only 23. Hmm. 6 times 6. 11 minus 6 is 5. 12 minus 11 is 1. 6 plus 1 times 6 is 42. Hmm. I don't know. There's too many factors in this one for me to figure it out. And I actually did quite a bit of math and tutored math when I was at college. Actually, 6 plus 11 is 17. 12 plus 1 times 6 is 4.","```python
start_state = (6, 6, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 6, 11),
    comment='""12 minus 6 is 6""',
)

# ""12 plus 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(6, 11, 18),
    comment='""12 plus 6 is 18""',
)

# ""11 minus 6 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(5, 6, 12),
    comment='""11 minus 6 is 5""',
)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(11, 12, 36),
    comment='""6 times 6 is 36""',
)

# ""36 minus 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(11, 24),
    comment='""36 minus 12 is 24""',
)

# ""12 times 6 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(6, 11, 72),
    comment='""12 times 6 is 72""',
)

# ""11 times 6 is 66""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*6=66"",
    resulting_state=(6, 12, 66),
    comment='""11 times 6 is 66""',
)

# ""11 times 12 is 123"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=123"",
    resulting_state=(6, 6, 123),
    comment='""11 times 12 is 123"" (calculation error)',
    result_calc_error=True,
)

# ""12 divided by 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 6, 11),
    comment='""12 divided by 6 is 2""',
)

# ""2 times 6 is 12 plus 11 is only 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6+11=23"",
    resulting_state=(23,),
    comment='""2 times 6 is 12 plus 11 is only 23""',
)

# ""11 minus 6 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(5, 6, 12),
    comment='""11 minus 6 is 5""',
)

# ""12 minus 11 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 6, 6),
    comment='""12 minus 11 is 1""',
)

# ""6 plus 1 times 6 is 42"" (calculation error)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+1)*6=42"",
    resulting_state=(42,),
    comment='""6 plus 1 times 6 is 42""',
)

# ""6 plus 11 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+11=17"",
    resulting_state=(6, 12, 17),
    comment='""6 plus 11 is 17""',
)

# ""12 plus 1 times 6 is 4"" seems to be a transcription error or incomplete thought
```"
2213,"[1,5,7,11]",(5+1)x(11-7),117," One six five plus one is six. Okay, I think I got it. Okay, parentheses five plus one parentheses is six and that will be times parentheses 11 minus seven which equals four, which should equal 22.","```python
start_state = (1, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""five plus one is six""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 7, 11),
    comment='""five plus one is six""',
)

# ""11 minus seven which equals four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 6),
    comment='""11 minus seven which equals four""',
)

# ""which should equal 22"" - participant multiplies 6 and 4 but makes a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=22"",
    resulting_state=(22,),
    comment='""which should equal 22"" - participant makes calculation error',
    result_calc_error=True,
)

```"
2217,"[8,9,9,12]",,180," Okay, let's see here. So, 12 times 2 is what I need. How am I going to get that? I don't know if I can. 12 minus 9 is 3. That doesn't help me either. What about, what is 12 times 8? 96 minus 81 is not going to help me. Okay. 12 minus 8 is 4. 9 times 4 is 36. Minus 9 is not going to be 24. So, that's not going to work either, but that's close. This one's harder. 12 times, so I can do 9 minus 9, which is, that doesn't help me. What is 9 times 8? 72 and 9 times 12, 108. That's not it. So, that's not going to work either. Okay. I can do division. I just remembered that for some reason. That was silly. I don't know if that's actually going to help me or not though. 12 divided by 9. No. Okay. I'm struggling here, but it's going to have to do something with division. 9 divided by 9 is 1. That doesn't help me. This is 9 divided by 8. I guess 8 divided by 9. That doesn't help me either. Hmm. Target number 24. What else can I do here? Okay. 12 plus 9 is 21. No. That's not going to help me. I'm probably going to run out of time here, I'm guessing. What else? What else can I do? Okay. So, let's see here. Let's see. I'm not sure I'm going to be able to finish this one. Gosh. Oh, I wonder if I can use it now. Okay.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 is what I need"" - participant sets a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 is what I need""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""12 minus 9 is 3""',
)

# ""what is 12 times 8? 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(9, 9, 96),
    comment='""what is 12 times 8? 96""',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 9, 9),
    comment='""12 minus 8 is 4""',
)

# ""9 times 4 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(9, 36),
    comment='""9 times 4 is 36""',
)

# ""Minus 9 is not going to be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-9=27"",
    resulting_state=(27,),
    comment='""Minus 9 is not going to be 24""',
)

# ""9 minus 9, which is""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-9=0"",
    resulting_state=(0, 8, 12),
    comment='""9 minus 9, which is""',
)

# ""What is 9 times 8? 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(9, 12, 72),
    comment='""What is 9 times 8? 72""',
)

# ""9 times 12, 108""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(8, 9, 108),
    comment='""9 times 12, 108""',
)

# ""12 divided by 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 8, 9),
    comment='""12 divided by 9""',
)

# ""9 divided by 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 8, 12),
    comment='""9 divided by 9 is 1""',
)

# ""12 plus 9 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 9, 21),
    comment='""12 plus 9 is 21""',
)
```"
2220,"[1,1,5,8]",8x(5-1-1),14," Okay, let's try this again. 24. 8 times 3 is 24, so 8 times 5 minus 1 minus 1.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24"" - participant sets a subgoal of getting to 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""8 times 5 minus 1 minus 1"" - participant finds a way to get to 3 by subtracting 1s from 5
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(5-1-1)=24"",
    resulting_state=(24,),
    comment='""8 times 5 minus 1 minus 1""',
)
```"
2222,"[5,9,10,11]",,180," 9 minus 5 is 4. I don't think a 4 helps me very much. 11 minus 5 is 6. That also doesn't help me very much. 11 minus 9 is 2. That would get me to 20. That doesn't help me. 24. Okay, it's going to have to be 10 divided by 5 is 2. I'm going to have to. It's got to be. Those are the only two numbers that are divisible, right? That's not going to help me at all. 10 divided by 5 is 2. That could get me to 18 plus. That's not going to work. Or 22 plus 9. That also doesn't help me. If I go the opposite route, 5 divided by 10 is 1 half. But none of those are divisible, so that doesn't help me very much either. 11 minus 5 is 6. 6 times 9. That's going to be way too much. That's all I can do there. None of these are divisible by anything. Well, I could do 9 divided by 11 times 50. But that's not any of that. None of those are real numbers. Okay. What do we have? There's got to be something. 10 minus 5 is 5. 5 times 9 is 7. That's not enough. That's not going to work. I need to get a 6 or an 8 or a 12. That's not going to happen. 110 is 10 times 11. That's way too much. And less. What is 110 times 5? 9.","```python
start_state = (5, 9, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 10, 11),
    comment='""9 minus 5 is 4""',
)

# ""11 minus 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 9, 10),
    comment='""11 minus 5 is 6""',
)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 5, 10),
    comment='""11 minus 9 is 2""',
)

# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 9, 11),
    comment='""10 divided by 5 is 2""',
)

# ""5 divided by 10 is 1 half""
new_state = graph.explore_operation(
    curr_state,
    operation=""5/10=0.5"",
    resulting_state=(0.5, 9, 11),
    comment='""5 divided by 10 is 1 half""',
)

# ""11 minus 5 is 6"" (again)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 9, 10),
    comment='""11 minus 5 is 6""',
)

# ""6 times 9"" from the previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(10, 54),
    comment='""6 times 9""',
)

# ""10 minus 5 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 9, 11),
    comment='""10 minus 5 is 5""',
)

# ""5 times 9 is 7"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=7"",
    resulting_state=(7, 11),
    comment='""5 times 9 is 7"" - calculation error',
    result_calc_error=True,
)

# ""10 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*11=110"",
    resulting_state=(5, 9, 110),
    comment='""110 is 10 times 11""',
)

```"
2228,"[1,11,12,13]",((13-11)+12)x1,192," I feel like I'm blazing through this. Oh! 11 plus 1, 12 plus that, 4, wait, oh shoot. Okay, so I probably want to get 12 plus 12. Uh, wait, wait, wait, wait, wait, no, times 1, okay, 11 plus 1, 12, 24, there is an 11 or no, there is definitely like a 12 plus 12 somewhere here, right? I just can't see it right now, or like a times 1, hold on. Hold on, I feel like there's probably multiple ways to do this one actually, times 2, times 2, the, I feel like I'm visually looking at what I'm saying, I am saying all of my thoughts out loud, it's honestly making my mind more busy trying to say my thoughts out loud, and it's making me take longer. Um, shoot, why is this one so hard for me? 13 minus, I'm just going to start trying, 12, fuck, oh, no, um, so 12 plus 12, but I don't want it to be, oh, oh, oh, okay, I got it, I got it, I'm here. Times 1, because I want it to be times 1, so it would be 13. 13 minus, no, that's not it, I was going to say, oh, it's 13 minus, wait, it is it, because that's 2, times 12, I need more fucking brackets, can you help me remember, it's 13 minus 11, 13 minus 11, times no, plus 12. Is 24, and I need that to be multiplied, I am saying all my motherfucking thoughts out loud, I swear to God. What? All the numbers are used, oh. What? That's 13 minus 11, I use all the numbers, I am saying my thoughts out loud, you son of a bitch. Uh, 13 minus 11, uh, plus 12, times 1, son of a bitch, I used all of the fucking numbers, I am saying my thoughts out loud, I swear to fucking God, shut up, 13, is this the whole game, you just pissed me off, plus 12, times 1.","```python
start_state = (1, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 1, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 13),
    comment='""11 plus 1, 12""',
)

# ""12 plus 12"" - participant seems to set this as a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""I probably want to get 12 plus 12""',
)

# ""13 minus 11"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 12),
    comment='""13 minus 11""',
)

# Then ""plus 12"" from the previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+12=14"",
    resulting_state=(1, 14),
    comment='""plus 12""',
)

# Finally the participant realizes they can multiply by 1 to get to 24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((13-11)+12)*1=14"",
    resulting_state=(14,),
    comment='""13 minus 11, plus 12, times 1""',
)
```"
2230,"[6,6,8,12]",(6x6)/(12/8),173," Target number 24, 6 plus 6, 8. 6 plus 6 is 12, plus 12 is 24, but that is too big of a number. 6 minus 6, 0, no. 8 plus 12 is 20, no. If this is going to get into fractions, I need a piece of paper, but I'm not sure if that's allowed, because 6 plus 6 is 12, plus 12, no. 8 divided by 6 would be... 8 divided by 6 would be... What? 4 over 3? Oh god. 4 over 3, 1 and a third? That sounds fucking miserable to multiply. Ummm... Wait, 12... 5 by 6 is 2... Is that going to bring me anywhere? Ummm... This would be 2... And then there'd be an 8 and a 6 left over... 8 plus 6... Ooh! I think that's it, because 8 plus 6 would be... 14... No, that's not it. Fucking dumb. Wait, 8 plus 6 would be... Yeah, 14. That's not 12. I need 12. Ummm... What did I divide? I divided it by 12 by 6 to get 2. 12 by 8? I don't want to do that. 12 by 8... I'm not going to get, like, the rest of these fucking answers. 4... 12 by 8, 4... 2... Am I doing that right? 12 over 8... Is divisible by 4... And it would be 4... And a 2... No... No... Because a 4, that would be 16. It'd be 3 and a 2... Which would be 1 and a half... And... 6... You know what? I'm just going to start typing stuff. 6... No... 6 times 6... Uh... It would be 36... 5 by... Uh, 12... 5 by 8...","```python
start_state = (6, 6, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 6 is 12, plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6+12=24"",
    resulting_state=(8, 24),
    comment='""6 plus 6 is 12, plus 12 is 24""',
)

# ""6 minus 6, 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-6=0"",
    resulting_state=(0, 8, 12),
    comment='""6 minus 6, 0""',
)

# ""8 plus 12 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(6, 6, 20),
    comment='""8 plus 12 is 20""',
)

# ""8 divided by 6 would be... 4 over 3?""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/6=1.33"",
    resulting_state=(1.33, 6, 12),
    comment='""8 divided by 6 would be... 4 over 3?""',
)

# ""12... 5 by 6 is 2"" seems to be 12/6=2
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 6, 8),
    comment='""12... 5 by 6 is 2""',
)

# ""8 plus 6 would be... 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(6, 12, 14),
    comment='""8 plus 6 would be... 14""',
)

# ""12 by 8"" participant computes 12/8
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8=1.5"",
    resulting_state=(1.5, 6, 6),
    comment='""12 by 8""',
)

# ""6 times 6... Uh... It would be 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(8, 12, 36),
    comment='""6 times 6... Uh... It would be 36""',
)

# Based on their final answer (6x6)/(12/8), they must have divided 36 by 1.5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/(12/8)=24"",
    resulting_state=(24,),
    comment=""Based on their final answer (6x6)/(12/8), they divided 36 by 1.5"",
)
```"
2231,"[4,4,8,11]",,180," Target number 24. 4 times 4 is 24. But how do I get rid of the other numbers? 11 minus 8 would be 3. That's not helpful. 8 divided by 4 would be 2. 2 times 15 doesn't make sense. 2 times 11 minus 4 would be 7. 2 times 7, that doesn't make any sense. 4 times 4, I'm addicted to the idea that it's just 4 times 4. That's clearly not it. 11 minus 8 is 3. Does that have anything to do with anything? 3. No, there's just no way because I would leave. Too many numbers. This one sucks. This one's hard. 4 divided by 4 would be 1. 8 plus 11 would be 19 times 1. That doesn't make any sense. 19 plus 1 would only be 20. I'm sure there's lots of ums, which is probably annoying as hell. 8 divided by 4 would be 2. 2 plus 11 plus 4 would be 15, 16, 17. That sucks. I'm not going to get this one because this one is too hard. Am I allowed to have a calculator? 11 divided by 8 would be 1.375. No, that doesn't make sense. 8 divided by 11, that doesn't make any sense either because 4 times 4 is 16. What is wrong with me? Oh my fucking god. 4 times 4. I need the calculator. 16 plus 8 is 24. But there's an 11. Shhh. Wait. 4 times 4.","```python
start_state = (4, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 24"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=24"",
    resulting_state=(8, 11, 24),
    comment='""4 times 4 is 24"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""11 minus 8 would be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 4),
    comment='""11 minus 8 would be 3""',
)

# ""8 divided by 4 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 4, 11),
    comment='""8 divided by 4 would be 2""',
)

# ""2 times 11 minus 4 would be 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11-4=18"",
    resulting_state=(18,),
    comment='""2 times 11 minus 4 would be 7"" - participant makes calculation error',
    result_calc_error=True,
)

# ""4 divided by 4 would be 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 8, 11),
    comment='""4 divided by 4 would be 1""',
)

# ""8 plus 11 would be 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(1, 4, 19),
    comment='""8 plus 11 would be 19""',
)

# ""19 plus 1 would only be 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+1=20"",
    resulting_state=(4, 20),
    comment='""19 plus 1 would only be 20""',
)

# ""8 divided by 4 would be 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 4, 11),
    comment='""8 divided by 4 would be 2""',
)

# ""2 plus 11 plus 4 would be 15, 16, 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+11+4=17"",
    resulting_state=(17,),
    comment='""2 plus 11 plus 4 would be 15, 16, 17""',
)

# ""11 divided by 8 would be 1.375""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/8=1.375"",
    resulting_state=(1.38, 4, 4),
    comment='""11 divided by 8 would be 1.375""',
)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 11, 16),
    comment='""4 times 4 is 16""',
)

# ""16 plus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8=24"",
    resulting_state=(11, 24),
    comment='""16 plus 8 is 24""',
)
```"
2234,"[6,7,9,12]",,182," Target number 24, 12, 9 minus 7 is 2. 2 times 12 would be an easy 24, but of course this stupid little game isn't that fucking easy. 7 minus 6 is 1. Okay, big numbers. 9, 2, 12 divided by 6 is also 2. What's 9 plus 7? It's 16. 16 times 2 is 32. That doesn't make sense. 12 minus 9. 9 is 3. What is 24 divided by 3? It's 8. There's no 8s here. Lots of being able to make it 2 or 1 or 3. Because 7 minus 6 would be 1. 9 minus 2 would be 2. I don't remember how I got 3 earlier. 9 minus 7 is 2. 12 divided by 6 is 2. And it's nice because we got a 12 which would be a 2. But there's extra numbers that I don't know how to get rid of, except I have to do it in the fucking clusterfuck of a way. 9 plus 7. It's 16. I just did that one times 32. That doesn't make any sense. Um... 12. 12. 12. 9 minus 7 is 2 times 12. Ah, fuck! Um... For 12, I am saying everything out loud. 12 over 9 is... I just feel like that's not helpful. 12 over 9 would be like 7 plus 6. Is that something? 13? No, that's not helpful. 9... Okay, what if... Adding them all together. Let's start simple. It's 34. That's not helpful. Um... I don't know, brother.","```python
start_state = (6, 7, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 6, 12),
    comment='""9 minus 7 is 2""',
)

# ""2 times 12 would be an easy 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(6, 24),
    comment='""2 times 12 would be an easy 24""',
)

# ""7 minus 6 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 9, 12),
    comment='""7 minus 6 is 1""',
)

# ""12 divided by 6 is also 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 7, 9),
    comment='""12 divided by 6 is also 2""',
)

# ""What's 9 plus 7? It's 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(6, 12, 16),
    comment='""What\'s 9 plus 7? It\'s 16""',
)

# ""16 times 2"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (2, 16),
    state_after_subgoal=(32,),
    comment='""16 times 2 is 32""',
)

# ""12 minus 9 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 6, 7),
    comment='""12 minus 9 is 3""',
)

# ""What is 24 divided by 3? It's 8"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""What is 24 divided by 3? It\'s 8"" - participant seems to be working backwards',
)

# ""9 minus 7 is 2"" - participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 6, 12),
    comment='""9 minus 7 is 2"" - participant tries this operation again',
)

# ""12 divided by 6 is 2"" - participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 7, 9),
    comment='""12 divided by 6 is 2"" - participant tries this operation again',
)

# ""9 plus 7. It's 16"" - participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(6, 12, 16),
    comment='""9 plus 7. It\'s 16"" - participant tries this operation again',
)

# ""12 over 9 would be like 7 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(9, 12, 13),
    comment='""12 over 9 would be like 7 plus 6""',
)

# ""Adding them all together""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9+7+6=34"",
    resulting_state=(34,),
    comment='""Adding them all together""',
)
```"
2235,"[1,4,5,8]",,183," Target number, 24. 8, 8, 24 divided by 8 is 3. Son of a bitch, dude. I need 8 times 3, but there's, 4 minus 1 would be 3, but there's the extra 5. And then I can do 5 minus 4, so it would be 1 plus 1, 2 times 8. That's not enough. Um, 5, 5 minus 4, what is 8? 8, 8 minus 5, 8 minus 5 would be 3. 3 times 4 is 12, plus 1, that's not helpful. Um, I feel like if it was like anything, in a not-getting-larger order, this would be easier to kind of not be hooked on the biggest number. Because it would just be so easy to be, oh, it's, it's 3 times 8, 4 minus 1 is 3, times 8, and that's 24. But no, there's a 5, what the fuck am I supposed to do with the 5? 5 times 4 is 20. 8 minus 1, 7, that's not helpful. 5 times 4 is 20. Ah, fuck. Wait, 8, 8 times 5 is 40. Divided by 4 is 10 plus 1, that's not helpful. Um, 5, 4 plus 1 would be 5, 5 times 5 is 25, that's not helpful. 8 times 4, 8 times 4 is 32, minus 6. Is 26, oh my fucking god, that's not helpful. I'm not gonna get, like, the rest of these, I feel like. This is so frustrating. 5, 8 minus 5, 8 minus 4 is 4, times 5 is 20, plus 1 is 21, 8 minus 5 is 3, times 3 times 4 would be 12. Well, 4 times 4 would be 16, that's not fucking helpful. 5 times 4 is 20, 20 plus 8, 20, 8 minus 1 is 27, that's not it, oh my goodness, what are all of them added up together, 8 plus 5 plus 4 plus 1 is 18, that sucks, 5 plus 8 is 13. 18 plus 4 times 1 is 17, that's not helpful.","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 8 is 3"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 8 is 3"" - participant working backwards from goal',
)

# ""4 minus 1 would be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 5, 8),
    comment='""4 minus 1 would be 3""',
)

# ""5 minus 4, so it would be 1 plus 1, 2 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4+1=2"",
    resulting_state=(2, 8),
    comment='""5 minus 4, so it would be 1 plus 1""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(16,),
    comment='""2 times 8""',
)

# ""8 minus 5 would be 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(1, 3, 4),
    comment='""8 minus 5 would be 3""',
)

# ""3 times 4 is 12, plus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4+1=13"",
    resulting_state=(13,),
    comment='""3 times 4 is 12, plus 1""',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 8, 20),
    comment='""5 times 4 is 20""',
)

# ""8 minus 1, 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(4, 5, 7),
    comment='""8 minus 1, 7""',
)

# ""8 times 5 is 40. Divided by 4 is 10 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(1, 4, 40),
    comment='""8 times 5 is 40""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40/4+1=11"",
    resulting_state=(11,),
    comment='""Divided by 4 is 10 plus 1""',
)

# ""4 plus 1 would be 5, 5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+1=5"",
    resulting_state=(5, 5, 8),
    comment='""4 plus 1 would be 5""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 25),
    comment='""5 times 5 is 25""',
)

# ""8 minus 4 is 4, times 5 is 20, plus 1 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(1, 4, 5),
    comment='""8 minus 4 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5+1=21"",
    resulting_state=(21,),
    comment='""times 5 is 20, plus 1 is 21""',
)

# ""8 minus 5 is 3, times 3 times 4 would be 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(1, 3, 4),
    comment='""8 minus 5 is 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(1, 12),
    comment='""times 3 times 4 would be 12""',
)

# ""5 times 4 is 20, 20 plus 8, 20, 8 minus 1 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 8, 20),
    comment='""5 times 4 is 20""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+8-1=27"",
    resulting_state=(27,),
    comment='""20 plus 8, 20, 8 minus 1 is 27""',
)

# ""8 plus 5 plus 4 plus 1 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5+4+1=18"",
    resulting_state=(18,),
    comment='""8 plus 5 plus 4 plus 1 is 18""',
)

# ""5 plus 8 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(1, 4, 13),
    comment='""5 plus 8 is 13""',
)
```"
2242,"[1,6,12,13]",12x6,180," 1, 6, 12, 13. Let's start by adding them. That's 7 plus 12 plus 13 is 32. 9 is 24, the difference of 8. Okay. 13 minus 6 is 7 plus 1. That's going to use up all my numbers, isn't it? 13. Okay, 13, 12 times 6 is 72. Okay, let's do 12 times 6 equals 36. Okay, so 12 times 6 equals 36. Minus 13 minus 1. Okay, so wait. 12 times 6 is 72. Minus... How did I figure this out? Minus 13. Plus 1. I don't remember what I did. 12 times 6 is 72, and we need to get to 48. Is it 13 times 6 is 78? Oh, I don't remember. 12 times 6 is 72, and we're trying to get to 24, so we need 48. Okay, try something else. 6 times 12. 6 times 13 is 78 minus 24. What if we just add them all? What happens? 13 plus 12 plus... 13 plus 12 is 25 plus 6. 6. Uh-uh. All right, 12 plus 13. That's a 9. Uh-uh. Okay. 12 plus... That's 18. . . .","```python
start_state = (1, 6, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let's start by adding them. That's 7 plus 12 plus 13 is 32""
# First they seem to add 1+6=7
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(7, 12, 13),
    comment='""That\'s 7""',
)

# Then they add the rest
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12+13=32"",
    resulting_state=(32,),
    comment='""7 plus 12 plus 13 is 32""',
)

# ""13 minus 6 is 7 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 7, 12),
    comment='""13 minus 6 is 7""',
)

# ""12 times 6 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(1, 13, 72),
    comment='""12 times 6 is 72""',
)

# ""12 times 6 equals 36"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=36"",
    resulting_state=(1, 13, 36),
    comment='""12 times 6 equals 36""',
    result_calc_error=True,
)

# ""6 times 13 is 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*13=78"",
    resulting_state=(1, 12, 78),
    comment='""6 times 13 is 78""',
)

# ""What if we just add them all? ... 13 plus 12 is 25 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12+6=31"",
    resulting_state=(1, 31),
    comment='""13 plus 12 is 25 plus 6""',
)

# ""12 plus... That's 18"" - likely adding 12+6
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(1, 13, 18),
    comment='""12 plus... That\'s 18""',
)

```"
2245,"[1,11,12,12]",12,180," Okay, so here we go again, 12 times 12 is 144 divided by 11. I don't know what that is. Okay, let's not do that. 11 times 12 is 121. Why don't I just do 11 plus 1 is 12. 11 plus 1 is 12, plus 12 would get me there. But I don't want to do that. I don't want to divide it. What if I do 12 plus 11 plus 1. Oh wait, hold on. I can do 12. No, no, no, no, I got it, I got it. Crap, crap. Okay. I can do 11 plus 12 over 12. Wait, that's just 1. Look, that's 24. No, no, no, that's not 24. Hmm. Let's do 12 divided by 1. Now, the 11 and 1 have to go together somehow. So, 11 plus 1. Okay, that's 12. 11 plus 1, 12. 11 plus 1, 12. Ugh, plus. 12. Uh, 12 minus 12, no. Come on, use your brain. 12 divided by 1. Uh, is 12. Crap. Hmm.","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 12 is 144 divided by 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12/11=144/11"",
    resulting_state=(1, 13.09),
    comment='""12 times 12 is 144 divided by 11""',
)

# ""11 times 12 is 121"" - this appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=121"",
    resulting_state=(1, 12, 121),
    comment='""11 times 12 is 121"" - calculation error',
    result_calc_error=True,
)

# ""11 plus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 12),
    comment='""11 plus 1 is 12""',
)

# ""plus 12 would get me there""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12+12=36"",
    resulting_state=(36,),
    comment='""plus 12 would get me there""',
)

# ""12 plus 11 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11+1=24"",
    resulting_state=(12, 24),
    comment='""12 plus 11 plus 1""',
)

# ""11 plus 12 over 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12/12=12"",
    resulting_state=(1, 12),
    comment='""11 plus 12 over 12""',
)

# ""12 divided by 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/1=12"",
    resulting_state=(11, 12, 12),
    comment='""12 divided by 1""',
)

# ""11 plus 1, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 12),
    comment='""11 plus 1, 12""',
)

# ""12 minus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-12=0"",
    resulting_state=(0, 1, 11),
    comment='""12 minus 12""',
)

# ""12 divided by 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/1=12"",
    resulting_state=(11, 12, 12),
    comment='""12 divided by 1""',
)
```"
2246,"[8,8,8,11]",8+,180," Target number 24, so, 11 times 8, that's 88, divided by, oh, hold on, 8 times 3, hmm, oh no, 8 times, I got it, 11, so 8 times 3 equals 24, right, so 11 minus 8, 11 minus 8 equals 3, so 11, 11 minus 8, aw, dang, I, okay, let me see, how about 8, 8, hmm, plus 8, that's 16, let me see, 8 plus 8, 16 times 11, divided by 8, I don't know what that is, okay, yeah, so it wasn't, it wasn't correct. Okay, hmm, let's see, 8 divided by, no, that's not going to work, 8 times 11, divided by 8, that's just 11, ah, hold on, 8 plus, wait, 8 plus 11 is 19 minus 8, 19 minus 8 is 11, ah, I'm so, what am I doing? Come on, man, 8, divided by 8 plus 11. 11 plus 8 is 16, wait, 16, 8, 8 over 16, 16 divided by 8, there's no way, 11 plus 8 is 19, I can't, okay. Okay, ooh, jeez, there's, 11 times 8, no, 11. Minus, I feel like it has to be something to do with 8, plus.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 8, that's 88""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(8, 8, 88),
    comment='""11 times 8, that\'s 88""',
)

# ""11 minus 8 equals 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8 equals 3""',
)

# ""8 plus 8, that's 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(8, 11, 16),
    comment='""8 plus 8, that\'s 16""',
)

# ""16 times 11, divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16*11/8=22"",
    resulting_state=(22,),
    comment='""16 times 11, divided by 8""',
)

# ""8 times 11, divided by 8, that's just 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11/8=11"",
    resulting_state=(8, 11),
    comment='""8 times 11, divided by 8, that\'s just 11""',
)

# ""8 plus 11 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(8, 8, 19),
    comment='""8 plus 11 is 19""',
)

# ""19 minus 8 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19-8=11"",
    resulting_state=(8, 11),
    comment='""19 minus 8 is 11""',
)

# ""11 plus 8 is 16"" (participant makes calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=16"",
    resulting_state=(8, 8, 16),
    comment='""11 plus 8 is 16"" (participant makes calculation error)',
    result_calc_error=True,
)

# ""16 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16/8=2"",
    resulting_state=(2, 8),
    comment='""16 divided by 8""',
)

# ""11 plus 8 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(8, 8, 19),
    comment='""11 plus 8 is 19""',
)
```"
2247,"[4,6,13,13]",(13/13)x4x6,19," Okay, I gotta get this one. Come on, now. Uh... Oh. 13 divided by 13. So 4 times 6 is 24, right? So 1 times 4 times 6. Okay. Okay.","```python
start_state = (4, 6, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 divided by 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 4, 6),
    comment='""13 divided by 13""',
)

# ""4 times 6 is 24"" - participant seems to be setting this as a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 times 6 is 24""',
)

# ""1 times 4 times 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*4*6=24"",
    resulting_state=(24,),
    comment='""1 times 4 times 6""',
)
```"
2248,"[2,3,6,6]",(3+2)x6-6,55," Alright, come on, come on. Let's see, 6, so, 18, 3 times 6 is 18, plus 6, that doesn't get there, that's 26. Okay, so 12 times 2 is 24, but no, 2 times 3, hold on, I can do, wait, I just thought of it. 2, okay, 2, so yeah, let's see, 3 plus 2 is 5, right? 3 plus 2 is 5, times 6 is 30, minus 6. . . .","```python
start_state = (2, 3, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(2, 6, 18),
    comment='""3 times 6 is 18""',
)

# ""plus 6, that doesn't get there, that's 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=26"",
    resulting_state=(2, 26),
    comment='""plus 6, that doesn\'t get there, that\'s 26""',
    result_calc_error=True,  # since 18+6=24
)

# ""12 times 2 is 24"" - participant likely got 12 from 6+6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+6)*2=24"",
    resulting_state=(3, 24),
    comment='""12 times 2 is 24"" - participant likely got 12 from 6+6',
)

# ""3 plus 2 is 5, times 6 is 30, minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+2)*6-6=24"",
    resulting_state=(24,),
    comment='""3 plus 2 is 5, times 6 is 30, minus 6""',
)
```"
2249,"[3,3,3,9]",9+,180," Okay, so here we go again, 3, 3, 3, and 9, um, 9 times 3 is 27 minus 3, that doesn't work, uh, 3 plus 3, hold on, 3 plus 3 is 6, ah, uh, wait, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 plus 9 is 12, but I need it to be times 2, not times 3, uh, 3 plus 3 is 6, plus 9, um, 9 minus, 9 minus 3 is also 6, 9 minus 3 is 6, wait, 9 minus 3 minus 3, ah, that's not it, okay, 9 minus 3 is 6, hmm, what if I do 3 times 3 is 9, times 3, 27, minus 3 is 6, minus 9, no, uh, 24, what is 24 minus 9, uh, 15, hmm, 9 minus, if I do 3 times 3, no, that's just, bruh, what am I doing, okay, what about 3 times times 9 minus 3 is 18, plus 3, no, that's 21, 21, 9 times 3 plus 3 is, uh, 56, wait, 56 divided by 3, right, oops, I'm done, yeah, I mean, 9 times 6 is not, okay, 9, uh, 3 times 6 is 18, 18 plus 9, that's not it, uh, dang, I'm gonna run out of time on this one, 9 plus,","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 27 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-3=24"",
    resulting_state=(3, 24),
    comment='""9 times 3 is 27 minus 3""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 6, 9),
    comment='""3 plus 3 is 6""',
)

# ""3 plus 9 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+9=12"",
    resulting_state=(3, 3, 12),
    comment='""3 plus 9 is 12""',
)

# ""3 plus 3 is 6, plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3+9=18"",
    resulting_state=(3, 15),
    comment='""3 plus 3 is 6, plus 9""',
)

# ""9 minus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 3, 6),
    comment='""9 minus 3 is 6""',
)

# ""9 minus 3 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3-3=3"",
    resulting_state=(3, 3),
    comment='""9 minus 3 minus 3""',
)

# ""3 times 3 is 9, times 3, 27, minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3=27"",
    resulting_state=(3, 27),
    comment='""3 times 3 is 9, times 3, 27""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(24,),
    comment='""27 minus 3""',
)

# ""9 times 3 plus 3 is, uh, 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3+3=56"",
    resulting_state=(3, 56),
    comment='""9 times 3 plus 3 is, uh, 56""',
    result_calc_error=True,
)

# ""56 divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/3=18.67"",
    resulting_state=(18.67,),
    comment='""56 divided by 3""',
)

# ""3 times 6 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*2=18"",
    resulting_state=(3, 9, 18),
    comment='""3 times 6 is 18"" - participant likely computed 3*3*2',
)

# ""18 plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+9=27"",
    resulting_state=(3, 27),
    comment='""18 plus 9""',
)
```"
2250,"[3,3,7,13]",13x7/(3/3,180," Okay, please let me get this. I'm feeling real dumb. Seven plus three is ten. Times thirteen. Divided by three. Seven plus three. Oops. Seven plus three. Ten. Times thirteen. Divided by three. Is that... I don't know if that felt right. Guess not. Okay. How about... Three? See... Ugh, it's so annoying. Because... I mean... I mean... Oh, wait. Hold on. Forty-two divided by thirteen. Isn't that... Okay, three plus... Three. Times... Seven. Six. Divided by... There's no way. Come on. Seven plus thirteen is twenty. No, that's not gonna be it. Thirteen minus three is ten. Wait, thirteen plus three... What if I do thirteen plus... Thirteen plus nine? What is thirteen plus nine? Not twenty-four. Thirteen plus nine plus... Thirteen plus nine plus... Thirteen plus... Thirteen plus... Thirteen plus... Twenty-one minus three. That's not gonna do it. Three... Times seven is twenty-one. Times seven is twenty-one. Plus... Thirteen. Twenty-one plus thir... I don't know. It's probably a multiplication. How about thirteen times three? Thirty-nine. Thirty-nine, right? Minus twenty... No, come on. Times seven. I don't know what that is. Divided by... Divided by six? Let's try that. Ugh.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Seven plus three is ten""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(3, 10, 13),
    comment='""Seven plus three is ten""',
)

# ""Times thirteen""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(3, 130),
    comment='""Times thirteen""',
)

# ""Divided by three""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""130/3=43.33"",
    resulting_state=(43.33,),
    comment='""Divided by three""',
)

# ""Three times seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(3, 13, 21),
    comment='""Three times seven""',
)

# ""Seven plus thirteen is twenty""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(3, 3, 20),
    comment='""Seven plus thirteen is twenty""',
)

# ""thirteen minus three is ten""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(3, 7, 10),
    comment='""thirteen minus three is ten""',
)

# ""Times seven is twenty-one""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(3, 13, 21),
    comment='""Times seven is twenty-one""',
)

# ""thirteen times three? Thirty-nine""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 7, 39),
    comment='""thirteen times three? Thirty-nine""',
)

# ""Times seven... Divided by six""
# Based on their submitted response of ""13x7/(3/3"", it seems they were trying to compute 13*7/(3/3)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7/(3/3)=91"",
    resulting_state=(91,),
    comment='""Times seven... Divided by six"" - Based on their submitted response, they were trying 13*7/(3/3)',
)
```"
2253,"[6,9,9,11]",(11-6),180," Okay, our target number is 24, and we have 6, 9, 9, and 11. So, let's see, 24, 11, and 9 is 20, so that doesn't equal, right, what I'm looking for, 9, 18, 9 plus 9 plus 6 would be 24, but I have to use 11. So, we are going to, and we have to use all the numbers, so we are going to do, let's see, I wonder what 9 minus 6 would be, 3, 19, 23, let me try, 9 minus 6 plus 9 plus 9, maybe, is that right? That is not the correct answer. Okay, and delete that, start over. Let's do, so I know 9, I know 9, oops, delete that too. We're going to do, I know 9, 9, and 6 are 24, the 11 is what's throwing me off here. So, if we do, um, hmm. We can also divide, though, and subtract, and I'll just have to add here. So, I could do, I could do 11, let's see, maybe part of this is division, so it'd be 16 divide, let's see, 9 divided by 9 would be 1 plus 11 plus 6, that would only be 18. So that's not right. And 6, 9 is not divisible by 6 and neither is 11. So that's not right. Let's see, 11 minus 9 is 2. Okay, that's what we want to do. Okay, 11 minus 9 will give us 2 plus 9 plus 6. That's not right.","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 and 9 is 20"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(6, 9, 20),
    comment='""11 and 9 is 20""',
)

# ""9 plus 9 plus 6 would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+6=24"",
    resulting_state=(11, 24),
    comment='""9 plus 9 plus 6 would be 24""',
)

# ""9 minus 6 would be, 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 9, 11),
    comment='""9 minus 6 would be, 3""',
)

# ""9 minus 6 plus 9 plus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-6)+9+9=21"",
    resulting_state=(11, 21),
    comment='""9 minus 6 plus 9 plus 9""',
)

# ""9 divided by 9 would be 1 plus 11 plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9+11+6=18"",
    resulting_state=(18,),
    comment='""9 divided by 9 would be 1 plus 11 plus 6""',
)

# ""11 minus 9 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 6, 9),
    comment='""11 minus 9 is 2""',
)

# ""11 minus 9 will give us 2 plus 9 plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+9+6=17"",
    resulting_state=(17,),
    comment='""11 minus 9 will give us 2 plus 9 plus 6""',
)
```"
2268,"[5,7,13,13]",13x7-13/5,180," 13 plus 13, that's 9. That's 9 minus 12, yeah. Where is it, that's 9? 13 plus 13, 26. 26 minus, oh shit. 13 plus 13. 13 times 5 is not 24, it's 35. Okay. 5 plus 7, 12. 5 plus 13, oh shit, shit, shit, shit, that's 8. Okay. 13 minus 5. 13 minus 7 is what? 13 minus 7, that was... Huh? I mean, let's try 13 times 7. 13 minus 7. 13 minus 7. 6. 6, yes. 13 minus 5. 13 minus 7, 6. 13 minus 5. 8. 6 times, oh shit. 8. 5, 1, 2, 1, 2, 3. 9? 8. 8? 17 by 13 equals 1 7 times 5 35 35 minus 7 20 is oh fuck 13 plus 7 20 13 plus 7 20 20 minus 13 plus 7 30 plus 7 20 20 plus 30 32","```python
start_state = (5, 7, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13, that's 9"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=9"",
    resulting_state=(5, 7, 9),
    comment='""13 plus 13, that\'s 9"" - calculation error',
    result_calc_error=True,
)

# The participant realizes their error: ""13 plus 13, 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(5, 7, 26),
    comment='""13 plus 13, 26""',
)

# ""13 times 5 is not 24, it's 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*5=35"",
    resulting_state=(7, 13, 35),
    comment='""13 times 5 is not 24, it\'s 35""',
    result_calc_error=True,
)

# ""5 plus 7, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(12, 13, 13),
    comment='""5 plus 7, 12""',
)

# ""13 minus 7 is what? ... 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(5, 6, 13),
    comment='""13 minus 7 is what? ... 6""',
)

# ""13 minus 5 ... 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(7, 8, 13),
    comment='""13 minus 5 ... 8""',
)

# ""13 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(5, 13, 91),
    comment='""13 times 7""',
)

# ""7 times 5 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(13, 13, 35),
    comment='""7 times 5 35""',
)

# ""13 plus 7 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(5, 13, 20),
    comment='""13 plus 7 20""',
)

# Based on their final response of ""13x7-13/5"", they must have eventually computed:
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7-13/5=88.4"",
    resulting_state=(88.4,),
    comment=""Based on their final response of '13x7-13/5'"",
)
```"
2269,"[2,7,7,10]",10+(7x2),180," 7 times 2 is 14. 7 times 2 is 14. 10 plus 7 is 7. 7 plus 7 is 14. 10 plus 7 is 14. That's 24. Okay, minus 2 is 9. 10 plus 7 is 14. Yeah. 14 plus 10 is 24. Yeah. Okay, okay. Bullet mouse. Bucket, bucket, bucket. No, no, no, 24 and 1. 2 guys. 7 times. 7 minus 2 is 5. 5. five times seven that's five that's five minus ten is not really this is simple okay okay okay okay okay we need to 24. seven seven times two fourteen i mean seven seven times two fourteen fourteen plus ten seven times two fourteen fourteen plus ten twenty four yes you're not saying leave it seven times two fourteen i was using seven divided by the seven seven plus ten seventeen so seventeen plus nine twenty six i think this thing is 24. seven plus seven fourteen fourteen times two twenty six minus ten that's the new 24. seven times two fourteen five plus seven four minutes four oh we need this four coming gets four it's four minutes seven minus two five five plus seven five plus seven ten seven divided by two","```python
start_state = (2, 7, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(7, 10, 14),
    comment='""7 times 2 is 14""',
)

# ""10 plus 7 is 7"" seems to be a transcription error
# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(2, 10, 14),
    comment='""7 plus 7 is 14""',
)

# ""10 plus 7 is 14"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=14"",
    resulting_state=(2, 7, 14),
    comment='""10 plus 7 is 14"" - calculation error',
    result_calc_error=True,
)

# ""14 plus 10 is 24"" - participant seems to be using the 14 from 7*2
curr_state = graph.move_to_node((7, 10, 14))
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(7, 24),
    comment='""14 plus 10 is 24""',
)

# ""7 minus 2 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(5, 7, 10),
    comment='""7 minus 2 is 5""',
)

# ""seven seven times two fourteen"" participant goes back to 7*2=14
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(7, 10, 14),
    comment='""seven seven times two fourteen""',
)

# ""seven plus seven fourteen fourteen times two twenty six minus ten""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+7)*2-10=26"",
    resulting_state=(26,),
    comment='""seven plus seven fourteen fourteen times two twenty six minus ten""',
    result_calc_error=True,
)

# ""seven times two fourteen"" participant goes back to this calculation again
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(7, 10, 14),
    comment='""seven times two fourteen""',
)

# ""fourteen plus ten twenty four"" participant finds the solution again
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(7, 24),
    comment='""fourteen plus ten twenty four""',
)
```"
2288,"[1,2,7,9]",(7x2)+9+1,83, I don't think I'm gonna get the bonuses okay okay let's see one two seven and nine so you want to get seven times four to get 24 would be an option how do you get a four out of a one and two and a nine three minus nine is six that wouldn't work maybe nine divided by nine divided by two plus one that's three three times seven oh three times seven is twenty one man okay ten plus nine that's not right fourteen oh I see fourteen okay I get it 7 times 2 equals 14 plus 9 plus plus one.,"```python
start_state = (1, 2, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""you want to get seven times four to get 24 would be an option""
# This seems like setting a subgoal to get 4 to multiply with 7
graph.set_subgoal(
    (4, 7),
    state_after_subgoal=(24,),
    comment='""you want to get seven times four to get 24 would be an option""',
)

# ""nine divided by two plus one that's three""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/2+1=3"",
    resulting_state=(3, 7),
    comment='""nine divided by two plus one that\'s three""',
    result_calc_error=True,
)

# ""three times seven is twenty one""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(21,),
    comment='""three times seven is twenty one""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""7 times 2 equals 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 9, 14),
    comment='""7 times 2 equals 14""',
)

# ""plus 9 plus plus one""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+9+1=24"",
    resulting_state=(24,),
    comment='""plus 9 plus plus one""',
)
```"
2291,"[2,3,5,13]",(13x2)-(5-3),175," Okay, 2, 3, 5, 13. So if you minus 13, 5, that's 8, 8, 2, and 3. Well, 8 times 3 is 24, but then you still have the 2. So, if you had 13 minus 3, it's 10, but then you have a 2 and a 5. That can't be right. Okay, what about just adding them all together? No, because then it's 5, 5, that's 23. Let's see, 5 minus 2 is 3. 1, 2, 3. You have a 3 and a 3 and a 13. 13 times 3 is 26, 39, and then a 3. That's not right. Hmm, 3, 10. Multiply those. 10, okay, 13. Let's see, it's got to be 13 minus 2 is 11. Times 3 is 33. No, that can't be it. 13 minus 5. Okay, 8, 2, and 3. What could that be? Nothing, huh? Okay. Okay, so if you got, also you could get up to 48 and divide by 2. So maybe 13 times 5. This is taxing my math abilities. 13 times 5 is, 13 times 5, 65, divided by 3, divided by 2. Nope, okay. 13 plus 5. 18 times 3, 54, divided by 2. Nope. 13 plus 3, times 2, minus 5. Nope. 13 times 2, 26. Oh, I got it. Okay. 13 times 2, minus 5 minus 3. Is that it?","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if you minus 13, 5, that's 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(2, 3, 8),
    comment='""if you minus 13, 5, that\'s 8""',
)

# ""8 times 3 is 24, but then you still have the 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(2, 24),
    comment='""8 times 3 is 24, but then you still have the 2""',
)

# ""13 minus 3, it's 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(2, 5, 10),
    comment='""13 minus 3, it\'s 10""',
)

# ""what about just adding them all together?""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5+3+2=23"",
    resulting_state=(23,),
    comment='""what about just adding them all together?""',
)

# ""5 minus 2 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 3, 13),
    comment='""5 minus 2 is 3""',
)

# ""13 times 3 is 26, 39""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 39),
    comment='""13 times 3 is 26, 39""',
)

# ""13 minus 2 is 11. Times 3 is 33""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-2)*3=33"",
    resulting_state=(5, 33),
    comment='""13 minus 2 is 11. Times 3 is 33""',
)

# ""13 minus 5. Okay, 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(2, 3, 8),
    comment='""13 minus 5. Okay, 8""',
)

# ""13 times 5 is, 13 times 5, 65, divided by 3, divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*5/(3*2)=10.83"",
    resulting_state=(10.83,),
    comment='""13 times 5 is, 13 times 5, 65, divided by 3, divided by 2""',
)

# ""13 plus 5. 18 times 3, 54, divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+5)*3/2=27"",
    resulting_state=(27,),
    comment='""13 plus 5. 18 times 3, 54, divided by 2""',
)

# ""13 plus 3, times 2, minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+3)*2-5=27"",
    resulting_state=(27,),
    comment='""13 plus 3, times 2, minus 5""',
)

# ""13 times 2, 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(3, 5, 26),
    comment='""13 times 2, 26""',
)

# ""13 times 2, minus 5 minus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(5-3)=24"",
    resulting_state=(24,),
    comment='""13 times 2, minus 5 minus 3""',
)
```"
2294,"[2,2,10,11]",,180," 10-2 is 9. It doesn't help. 12. 10-2 is 12. 12. 11-2 is 9. 11-2 is 9. 11-2 is 9. 9-2 is 7. That's 17. Nope. 20. 12-2 is 22. 2 plus 2 is 4. 2 times 10 is 20, plus 11 is 31, minus 2 is 29. 11 plus 2 times 11 is 22. Plus 2 is 24, but 10. 10 plus 11 is 21. 10 times 2 is 20, plus 11 is 31, minus 2 is 29. 2 times 11 is 22. 10 divided by 2 is 5, plus 11 is 16. No. 10 divided by 2 is 5. 5 times 2 is 10, plus 11 is... Hmm.","```python
start_state = (2, 2, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10-2 is 9"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=9"",
    resulting_state=(2, 9, 11),
    comment='""10-2 is 9"" - calculation error',
    result_calc_error=True,
)

# ""10-2 is 12"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=12"",
    resulting_state=(2, 11, 12),
    comment='""10-2 is 12"" - calculation error',
    result_calc_error=True,
)

# ""11-2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 9, 10),
    comment='""11-2 is 9""',
)

# ""9-2 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(7, 10),
    comment='""9-2 is 7""',
)

# ""That's 17"" - participant may be adding 7+10
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(17,),
    comment='""That\'s 17"" - participant may be adding 7+10',
)

# Going back to start state for new attempts
curr_state = graph.move_to_node(start_state)

# ""2 plus 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 10, 11),
    comment='""2 plus 2 is 4""',
)

# ""2 times 10 is 20, plus 11 is 31, minus 2 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10+11-2=29"",
    resulting_state=(29,),
    comment='""2 times 10 is 20, plus 11 is 31, minus 2 is 29""',
)

# ""11 plus 2 times 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 10, 22),
    comment='""11 plus 2 times 11 is 22""',
)

# ""Plus 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+2=24"",
    resulting_state=(10, 24),
    comment='""Plus 2 is 24""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""10 plus 11 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(2, 2, 21),
    comment='""10 plus 11 is 21""',
)

# ""10 times 2 is 20, plus 11 is 31, minus 2 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2+11-2=29"",
    resulting_state=(29,),
    comment='""10 times 2 is 20, plus 11 is 31, minus 2 is 29""',
)

# ""2 times 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 10, 22),
    comment='""2 times 11 is 22""',
)

# ""10 divided by 2 is 5, plus 11 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2+11=16"",
    resulting_state=(2, 16),
    comment='""10 divided by 2 is 5, plus 11 is 16""',
)

# ""10 divided by 2 is 5. 5 times 2 is 10, plus 11 is...""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/2)*2+11=21"",
    resulting_state=(21,),
    comment='""10 divided by 2 is 5. 5 times 2 is 10, plus 11 is...""',
)
```"
2299,"[3,3,11,12]",(11-3),180," 3 plus 11 is 14, 15, 16, 17, 19, 29, 12 divided by 3 is 4, 4 times 3 is 12, plus 11 is 25, 12 plus 11 is 23, 12 minus 3 is 8, 8 plus 3 is 11, plus 11 is 22, it doesn't work. Oh, here it is. All right. 12 divided by 3 plus 3, which is 6, that gets me, 12 divided by 6 is 2, times 11. 12 divided by 6 is 2, 2 times 11 is 22. Shoot. What if I got 12? 12. 3 plus 3. 24 divided by 3 is 24 divided by 3. It's 8. 24 divided by 3 is 8. Can I get to 8? Okay. Okay. All right. So, 11 minus 3 is 8, times 3 is 24. Okay, let's try this. 11 minus 3, which is 8, times 12 minus 3? No, that's 16. Oh, that's 16. 11 minus 3 is 8, plus... Times... Now... 11 minus 3 is 8. What is 8? Six? 11 minus 3 is 8. Oh, that's 16. 11 minus.","```python
start_state = (3, 3, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 plus 11 is 14, 15, 16, 17, 19, 29"" - participant seems to be making calculation errors
new_state = graph.explore_operation(
    curr_state,
    operation=""3+11=29"",
    resulting_state=(3, 12, 29),
    comment='""3 plus 11 is 14, 15, 16, 17, 19, 29"" - participant seems to be making calculation errors',
    result_calc_error=True,
)

# ""12 divided by 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(3, 4, 11),
    comment='""12 divided by 3 is 4""',
)

# ""4 times 3 is 12, plus 11 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3+11=25"",
    resulting_state=(25,),
    comment='""4 times 3 is 12, plus 11 is 25""',
    result_calc_error=True,
)

# ""12 plus 11 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(3, 3, 23),
    comment='""12 plus 11 is 23""',
)

# ""12 minus 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(3, 9, 11),
    comment='""12 minus 3 is 8"" - participant makes calculation error',
    result_calc_error=True,
)

# ""8 plus 3 is 11, plus 11 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3+11=22"",
    resulting_state=(22,),
    comment='""8 plus 3 is 11, plus 11 is 22""',
    result_calc_error=True,
)

# ""12 divided by 3 plus 3, which is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3+3=7"",
    resulting_state=(7, 11),
    comment='""12 divided by 3 plus 3, which is 6"" - participant makes calculation error',
    result_calc_error=True,
)

# ""24 divided by 3 is 8""
graph.set_subgoal(
    (8,),
    state_after_subgoal=(24,),
    comment='""24 divided by 3 is 8"" - participant seems to be working backward',
)

# ""11 minus 3 is 8, times 3 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-3)*3=24"",
    resulting_state=(12, 24),
    comment='""11 minus 3 is 8, times 3 is 24""',
)

# ""11 minus 3, which is 8, times 12 minus 3? No, that's 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-3)*(12-3)=16"",
    resulting_state=(16,),
    comment='""11 minus 3, which is 8, times 12 minus 3? No, that\'s 16""',
    result_calc_error=True,
)

# The participant continues to repeat ""11 minus 3 is 8"" but doesn't seem to make progress toward a solution
```"
2300,"[1,2,5,7]",7+5x(1x2),190," Target number is 24. 1, 2, 5, 7. 1, 2, 5, 7. So, let's see. 5 times 1 is 12. So, that's not it. 7 minus 1 is 6. 6 plus 5 is 11 times 2. No, that's not it. Not going to get you there. 7 plus 1 equals 8 times 2 is 16 plus 5. No. Okay. So, 2 minus 1 equals 1 times 7. No, that's not it. Okay. Oh, wait. 1 times 7 is 7 plus 5 equals 12 times 2. Okay. I think I got it. So, we have 1 plus. 1 times. Oops sorry. 1 times. 1 times cannot be empty or separate. 1 plus 5 equals 20. 1 times cannot be empty or seven one times seven in parentheses plus five times two equals 24. incorrect answer not all the numbers are used no they are used one times okay so we have okay how about seven plus five times parentheses one times two close parentheses submit answer i've used all numbers seven plus five is twelve okay maybe i need to do it the other way okay okay","```python
start_state = (1, 2, 5, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 1 is 12"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*1=12"",
    resulting_state=(2, 7, 12),
    comment='""5 times 1 is 12"" - participant made a calculation error',
    result_calc_error=True,
)

# ""7 minus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(2, 5, 6),
    comment='""7 minus 1 is 6""',
)

# ""6 plus 5 is 11 times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+5)*2=22"",
    resulting_state=(22,),
    comment='""6 plus 5 is 11 times 2""',
)

# ""7 plus 1 equals 8 times 2 is 16 plus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((7+1)*2)+5=21"",
    resulting_state=(21,),
    comment='""7 plus 1 equals 8 times 2 is 16 plus 5""',
)

# ""2 minus 1 equals 1 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2-1)*7=7"",
    resulting_state=(5, 7),
    comment='""2 minus 1 equals 1 times 7""',
)

# ""1 times 7 is 7 plus 5 equals 12 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(1*7+5)*2=24"",
    resulting_state=(24,),
    comment='""1 times 7 is 7 plus 5 equals 12 times 2""',
)

# ""1 plus 5 equals 20"" - seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=20"",
    resulting_state=(2, 7, 20),
    comment='""1 plus 5 equals 20"" - calculation error',
    result_calc_error=True,
)

# Finally the participant tries ""seven plus five times parentheses one times two close parentheses""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5*(1*2)=17"",
    resulting_state=(17,),
    comment='""seven plus five times parentheses one times two close parentheses""',
)
```"
2307,"[7,12,12,13]",,180," Target number 24, we got 7, 12, 12, 13. So, 7 and 12 is 19, so 13 times, 13 and 7 is 20. 12 times 12, 12 times 12. Is 144 divided by 7 plus 3 equals, no, that's not going to do it. Okay, 13 plus 24 plus, 12 plus 12, 24 plus. Okay. 13 is 37, minus 7 is only 30. That's not going to do it. 7 plus 2 is, 12 is 19, plus 12 is 31, minus 13 is, 31 minus 13 is 18. That's not going to do it. So, 12. 17 minus 13, 13 minus 7 equals 6. 6 plus 12 equals 18, plus 12 equals 30. That's not going to do it. 7. Oh. 13 plus 12. There's no number times 7 that gets me to 24. What number divided by 7 gets me to 24? And divided by 7 equals 24. Ch-ch-ch-ch. No, that's not going to work. 12 plus 12. 12 times 12 equals 144. Divided by 7 equals 20. No, because that's not, nope, nope, nope, nope, nope. I'm not going to get this one. So, 12 plus 12 is 24. Plus 20 is 44. No. 12.","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and 12 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(12, 13, 19),
    comment='""7 and 12 is 19""',
)

# ""13 and 7 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(12, 12, 20),
    comment='""13 and 7 is 20""',
)

# ""12 times 12 is 144 divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12/7=20.57"",
    resulting_state=(13, 20.57),
    comment='""12 times 12 is 144 divided by 7""',
)

# ""12 plus 12, 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(7, 13, 24),
    comment='""12 plus 12, 24""',
)

# ""plus 13 is 37, minus 7 is only 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+13-7=30"",
    resulting_state=(30,),
    comment='""plus 13 is 37, minus 7 is only 30""',
)

# ""7 plus 12 is 19, plus 12 is 31, minus 13 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12+12-13=18"",
    resulting_state=(18,),
    comment='""7 plus 12 is 19, plus 12 is 31, minus 13 is 18""',
)

# ""13 minus 7 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 12, 12),
    comment='""13 minus 7 equals 6""',
)

# ""6 plus 12 equals 18, plus 12 equals 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12+12=30"",
    resulting_state=(30,),
    comment='""6 plus 12 equals 18, plus 12 equals 30""',
)

# ""12 times 12 equals 144. Divided by 7 equals 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12/7=20"",
    resulting_state=(13, 20),
    comment='""12 times 12 equals 144. Divided by 7 equals 20""',
    result_calc_error=True,
)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(7, 13, 24),
    comment='""12 plus 12 is 24""',
)

```"
2309,"[3,5,8,13]",(8x5)-(13+3),95," Target number 24, 3, 5, 8, and 13. So, 8 times 3 is 24. That's too obvious. So, 13 minus 5 is 8. No, that's not going to work. 3 times 5 is 15. 15 times 13 is 5, 4, 5, 5, 5, 9, 1, 2, 3, 2, 4. Okay, 195 divided by 8, that is not going to get me 24. Okay, 8 times 5 is 40. Yes, okay. 8 times 5, parentheses, 8 times 5 is 40, yes. Okay, 8 times 5, parentheses, 8 times 5, parentheses. times 5 is 40 minus parentheses 13 plus 3 which is 16 40 minus 16 is 20","```python
start_state = (3, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(5, 13, 24),
    comment='""8 times 3 is 24""',
)

# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(3, 8, 8),
    comment='""13 minus 5 is 8""',
)

# ""3 times 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(8, 13, 15),
    comment='""3 times 5 is 15""',
)

# ""15 times 13 is ... 195""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*13=195"",
    resulting_state=(8, 195),
    comment='""15 times 13 is ... 195""',
)

# ""195 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""195/8=24.375"",
    resulting_state=(24.38,),
    comment='""195 divided by 8""',
)

# ""8 times 5 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(3, 13, 40),
    comment='""8 times 5 is 40""',
)

# ""13 plus 3 which is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(5, 8, 16),
    comment='""13 plus 3 which is 16""',
)

# ""40 minus 16 is 20"" - participant is using results from previous operations
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*5)-(13+3)=24"",
    resulting_state=(24,),
    comment='""40 minus 16 is 20"" - participant is using results from previous operations but gets the final answer correct',
    result_calc_error=True,
)
```"
2313,"[8,9,9,12]",(12,180," Can you hear that? Did I just do this right? Oh, 8, 9, 9, and 12 should be like the same thing. Still do 18? Oh no, you can't do that. Because then 12 minus 8 is 4. So then it'll be 22. Okay. What if we do 17? 9, 8 plus 9 is 17. And then 12 minus 9 is 30. Nope. I did 18. Nope. 18. What is it? I had to get 3, 6, 14, 15. And let's see. 9 divided by 9 is 1. Nope. 9 plus 12, I think that's it. 11. And then I need many more. 13. It's not going to work. So I'm going to say it's 21. I can just 20 away. Okay. 8 plus 9 is 17. It's too much. Okay. Let's see. I'm going to get this one. I'll try 12. I need 12. 12 in the front. Then 12, 9, 9 divided by 9 is 1. 12, 9, 9. What's wrong with me? Oh, wait a minute.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 8 is 4. So then it'll be 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 9, 9),
    comment='""12 minus 8 is 4""',
)

# ""9, 8 plus 9 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(9, 12, 17),
    comment='""8 plus 9 is 17""',
)

# ""And then 12 minus 9 is 30"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=30"",
    resulting_state=(17, 30),
    comment='""And then 12 minus 9 is 30""',
    result_calc_error=True,
)

# ""9 divided by 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 8, 12),
    comment='""9 divided by 9 is 1""',
)

# ""9 plus 12"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12=21"",
    resulting_state=(8, 9, 21),
    comment='""9 plus 12""',
)

# ""8 plus 9 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(9, 12, 17),
    comment='""8 plus 9 is 17""',
)

# ""9 divided by 9 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 8, 12),
    comment='""9 divided by 9 is 1""',
)
```"
2315,"[1,1,5,8]",8x(5-1-1),62," Okay, 1, 1, 5, 8. Okay, 8 times 3, nope. It's going to be plus something. Um, 8 and 3. Yeah. So if I do, wait a minute. If I do 8 times 5 minus 1 minus 1. 2 minus 1 is 4. 4 minus 1 is 3. And then I'll put, I'll put a times. So 8 times 5 minus 1 minus 1. Parentheses. Parentheses. 4, 3, 8, 2, 3.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3, nope"" - participant seems to be setting a subgoal of getting 3
graph.set_subgoal((3,), comment='""8 times 3, nope"" - participant seems to be trying to get to 24 by multiplying 8 by 3')

# ""8 times 5 minus 1 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(5-1-1)=24"",
    resulting_state=(24,),
    comment='""8 times 5 minus 1 minus 1"" - participant finds the solution',
)

# The rest appears to be the participant working out how to write the expression properly with parentheses
# ""2 minus 1 is 4. 4 minus 1 is 3"" seems to be a transcription error since they already found 5-1-1=3
```"
2317,"[2,6,6,7]",,180," Okay, 13, 12, 4, okay, 12, 4, okay, 6 plus 6 is 4, 6 plus 6 is 14, so 13 minus 2, I don't think it's allowed, 13 minus 2 is 12, no, nope, 7 plus 2 is 9, nope, but 6 minus 2 is 4, and 4 times 6 is 24. I have to get rid of this, 7 minus 6 is 1, 7 minus 6 is 1, and that doesn't make sense, okay. 6 plus 6 is 36, no, 28, 27, I do the 2, that's too much. Don't say that 6 is 4, I still have to get rid of that. So 6, what about 6, no, 6 minus 2 is 4, that has to be 1, 1, okay, 7 plus 6 is 13, okay, 6 plus 6, no, no, 7 minus 6 is 3, 6 plus 6 is 4, 8 times 3 is 7, that's too much, that's too much, what about 11 plus 5, 7 plus 5 is 11, 9 times 5 is 7, 8 plus 5 is 12, what about 6 is 3, 6 times 3 is 18. Okay. Okay, what about... Okay, so... What do one... So, minus six is one.","```python
start_state = (2, 6, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 6 is 14"" (miscalculation)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=14"",
    resulting_state=(2, 7, 14),
    comment='""6 plus 6 is 14""',
    result_calc_error=True,
)

# ""7 plus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(6, 6, 9),
    comment='""7 plus 2 is 9""',
)

# ""6 minus 2 is 4, and 4 times 6 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-2=4"",
    resulting_state=(4, 6, 7),
    comment='""6 minus 2 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(7, 24),
    comment='""4 times 6 is 24""',
)

# ""7 minus 6 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 6, 2),
    comment='""7 minus 6 is 1""',
)

# ""6 plus 6 is 36"" (miscalculation)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=36"",
    resulting_state=(2, 7, 36),
    comment='""6 plus 6 is 36""',
    result_calc_error=True,
)

# ""7 plus 6 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(2, 6, 13),
    comment='""7 plus 6 is 13""',
)

# ""7 minus 6 is 3"" (miscalculation)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=3"",
    resulting_state=(2, 3, 6),
    comment='""7 minus 6 is 3""',
    result_calc_error=True,
)

# ""6 plus 6 is 4"" (miscalculation)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=4"",
    resulting_state=(2, 4, 7),
    comment='""6 plus 6 is 4""',
    result_calc_error=True,
)

# The final ""minus six is one"" seems to be repeating an earlier calculation
```"
2320,"[2,4,6,9]",,180," So we have all these big numbers. Oh, I bet we divide by 2. I bet that's what it is. So 9 times 6 is going to be 43. So let's see, 24 times 2 is 48, so that's what we want to get to. So 9 times 6, nope, 9 times 4, 36, plus 6, then divide it by 42. Ugh, that didn't work. Whoa! So, 6 times 4 is 24. 6 times 9, 54, now wait a minute, we want to get to 44 divided by, I mean, 24. Oh, this is harder. 24 times... What am I thinking? 2. So we want to get to 48. So 9 times 4, 9 times 4, plus 6, that's 42. So, not quite. Um, 4 times 6 is 24, plus 9, oop. Okay, maybe it's not dividing by 2 then. uh four times six times nine i mean sorry two times six times nine calculator's not working okay two times six times nine 108 by four too much well four times six is 24 about 19 9 10 11. yeah i don't like this at all okay there's","```python
start_state = (2, 4, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 6 is going to be 43"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=43"",
    resulting_state=(2, 4, 43),
    comment='""9 times 6 is going to be 43"" - calculation error',
    result_calc_error=True,
)

# ""9 times 4, 36, plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4+6=42"",
    resulting_state=(2, 42),
    comment='""9 times 4, 36, plus 6""',
)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(2, 9, 24),
    comment='""6 times 4 is 24""',
)

# ""6 times 9, 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(2, 4, 54),
    comment='""6 times 9, 54""',
)

# ""9 times 4, plus 6, that's 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4+6=42"",
    resulting_state=(2, 42),
    comment='""9 times 4, plus 6, that\'s 42""',
)

# ""4 times 6 is 24, plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6+9=33"",
    resulting_state=(2, 33),
    comment='""4 times 6 is 24, plus 9""',
)

# ""two times six times nine""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6*9=108"",
    resulting_state=(4, 108),
    comment='""two times six times nine""',
)

# ""four times six is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(2, 9, 24),
    comment='""four times six is 24""',
)

```"
2328,"[3,3,9,9]",(9-3)x(,180," I don't know if I can close this corner. All 3s and 9s. So, all 3s and 9s, which we can get to 24. Yes, we're all 3s. So let's figure this out. Oh yeah, yeah, let's reduce those zeros. And negate these. 1 plus 9. Okay. Let's try, oh, let's try 3 plus 3. Nope. Okay, we can do the 9 times the 3s. I am saying my thoughts out loud. I'm just thinking. 9 times 3. Okay. 9 times 3. 27. Minus 3, right? Minus 3. Okay. 9 times 3. Minus the 9 minus 3. Right? I... You did that right. 9... 9 times 3. 9 times 3. Minus the 99876. Minus the 99876. Oh, it's 21. Oh, it's 21. Okay. I guess I didn't do my maths right. I guess I didn't do my maths right. Ah. Umm... 9... I thought these 3s would be easier. I thought these 3s would be easier. Okay, let's try this. Sweet, sweet , sweet, sweet. 9. Let's try the nine minus 3 again. 9 minus 3. And let's do this again, let's see, times nine.","```python
start_state = (3, 3, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 9, 9),
    comment='""3 plus 3""',
)

# ""9 times 3. 27. Minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-3=24"",
    resulting_state=(9, 24),
    comment='""9 times 3. 27. Minus 3""',
)

# ""9 times 3"" again
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 9, 27),
    comment='""9 times 3""',
)

# ""Oh, it's 21"" participant realizes they made a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=21"",
    resulting_state=(3, 9, 21),
    comment='""Oh, it\'s 21"" participant realizes they made a calculation error',
    result_calc_error=True,
)

# ""9 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 6, 9),
    comment='""9 minus 3""',
)

# ""times nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(3, 54),
    comment='""times nine""',
)

```"
2344,"[4,4,5,6]",(6x4)x(5-4),107," 1, 11 minus 1, 24, 24, 24, 4 times 6 is 24, minus, ok, 4 times 6, 4 times 6, 4 times 6, times 6 with... Wait, let's quickly do this one. Okay. 5 minus 4, 5 minus 4, double, close brackets, close. 4. 4. Let's try it out. Okay. 6 times 4, 26, 6 times 4. Okay. Go. Into brackets, eh? Yeah. 6. 6 times 4. Close the brackets. Minus. Minus. Ok, minus, yes. 5 plus 4. No, 5 minus 4. Minus. this is 10 times this one will be times the one in the middle yeah instead of minus three times this one will not go instead of minus times bracket four minus four close bracket it's not good","```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(4, 5, 24),
    comment='""4 times 6 is 24""',
)

# ""5 minus 4"" participant explores this operation
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 4, 6),
    comment='""5 minus 4""',
)

# ""6 times 4, 26"" participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=26"",
    resulting_state=(4, 5, 26),
    comment='""6 times 4, 26"" participant makes calculation error',
    result_calc_error=True,
)

# Based on their final response (6x4)x(5-4), they eventually correctly calculate:
# First 6*4=24
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(4, 5, 24),
    comment=""Based on final response, participant calculates 6*4"",
)

# Then multiply by (5-4)=1 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*(5-4)=24"",
    resulting_state=(24,),
    comment=""Based on final response, participant multiplies by (5-4)"",
)

```"
2349,"[3,3,7,13]",,180," Alright, our target number is 24. If I add all this, we have 20, 23, 24, in fact 26. And we need 24. So, if we take 7 times 3, close parenthesis, that would be 21. And I'm gonna need 13, right? Yes, to make 24. But, hmm. How will we multiply that? Because this one would have been sufficient. 7 times 3 is 21, plus 13 is 24. Okay. Alright, so let's try this. Oh no, I can't do that. 7, 14, 21. 7, 14, 21. Okay. 7, 14. These two are 10, 20. That's not gonna work. It's not gonna work. It's not gonna work. 20, 23. Nope, not gonna work. 13 plus 7, 20. Nope. Hmm. 13 times 3, maybe? Let's see. Times 3 is 33. Hmm. Minus 7? No, minus 7 minus 3. That's still, I still don't have enough. Hmm. Hmm. Kind of like out of options here. 20, 16, 19. Still not gonna work. If I add 13 plus 7 plus 3, it's not gonna work. It's just 23.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I add all this, we have 20, 23, 24, in fact 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+3+3=26"",
    resulting_state=(26,),
    comment='""If I add all this, we have 20, 23, 24, in fact 26""',
)

# ""if we take 7 times 3, close parenthesis, that would be 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""if we take 7 times 3, that would be 21""',
)

# ""plus 13 is 24"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+13=34"",
    resulting_state=(3, 34),
    comment='""plus 13 is 24"" - participant realizes this won\'t work',
)

# ""7, 14, 21"" seems to be multiplying 7 by 3 again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7, 14, 21"" seems to be multiplying 7 by 3 again',
)

# ""These two are 10, 20"" seems to be adding 3+7=10 and then adding 10 again
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7+10=20"",
    resulting_state=(3, 13, 20),
    comment='""These two are 10, 20"" seems to be adding 3+7=10 and then adding 10',
)

# ""20, 23"" participant may be adding 3 to 20
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+3=23"",
    resulting_state=(13, 23),
    comment='""20, 23"" participant may be adding 3 to 20',
)

# ""13 plus 7, 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(3, 3, 20),
    comment='""13 plus 7, 20""',
)

# ""13 times 3, maybe? Let's see. Times 3 is 33""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 7, 39),
    comment='""13 times 3, maybe? Let\'s see. Times 3 is 33"" - participant miscalculates',
)

# ""minus 7 minus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39-7-3=29"",
    resulting_state=(29,),
    comment='""minus 7 minus 3""',
)

# ""20, 16, 19"" not clear what operations these represent

# ""If I add 13 plus 7 plus 3, it's not gonna work. It's just 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+3=23"",
    resulting_state=(3, 23),
    comment='""If I add 13 plus 7 plus 3, it\'s not gonna work. It\'s just 23""',
)
```"
2350,"[3,4,7,9]",(9x3),180," Okay, so our target number is again 24. If I add 9 plus 7 plus 4 plus 7, that is 27. So I 9 plus 7 plus 4, 20, and I need 24. 9, 18, 27, 36. 36 minus 7. 36 minus 7 is 29. It's still not going. 36 minus 7. 36 minus 7 is 29. And then minus 11. No, it's still not. I mean, I know how to do this. Why am I freezing right now? 7, 14, 21. Still not. 4, 8, 12. What about 12? 6. 7 plus 9. Nope. Mmm. 9. 9. Okay. 63 minus. Okay. 9, 18, 27. 27 minus 4, but then I'm still missing one letter. 10. Okay. We should do 21. No, 19 and 36. 9 times C4. Close. 36. And we need 12. Hmm. If I add that, that'll be 21. That's not going to work. What about 9 times 3? 3. 9. 9, 18, 27. 9. But then 7. 27.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I add 9 plus 7 plus 4 plus 7, that is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+4+3=27"", 
    resulting_state=(27,),
    comment='""If I add 9 plus 7 plus 4 plus 7, that is 27"" - participant likely meant 3 instead of the second 7',
    result_calc_error=True,
)

# ""9 plus 7 plus 4, 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+4=20"",
    resulting_state=(3, 20),
    comment='""9 plus 7 plus 4, 20""',
)

# ""9, 18, 27, 36"" participant is multiplying 9 by 4
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(3, 7, 36),
    comment='""9, 18, 27, 36"" participant is multiplying 9 by 4',
)

# ""36 minus 7 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-7=29"",
    resulting_state=(3, 29),
    comment='""36 minus 7 is 29""',
)

# ""7, 14, 21"" participant is multiplying 7 by 3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(4, 9, 21),
    comment='""7, 14, 21"" participant is multiplying 7 by 3',
)

# ""4, 8, 12"" participant is multiplying 4 by 3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(7, 9, 12),
    comment='""4, 8, 12"" participant is multiplying 4 by 3',
)

# ""7 plus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(3, 4, 16),
    comment='""7 plus 9""',
)

# ""9. 9. Okay. 63"" participant might be multiplying 9 by 7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 4, 63),
    comment='""9. 9. Okay. 63""',
)

# ""9, 18, 27. 27 minus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-4=23"",
    resulting_state=(7, 23),
    comment='""9, 18, 27. 27 minus 4""',
)

# ""What about 9 times 3?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(4, 7, 27),
    comment='""What about 9 times 3?""',
)
```"
2355,"[4,6,13,13]",(6x4)x(13/13),159," So 13 plus 13 is 26. 6 times 4 is 36. 36. Okay. Here we go again. Let's see. What about 13 times 6? That's 78. 13 times 6 is 78. 78 minus 52 is 26. Still not going to work. Oh. 13 times 4 is 52 minus 13 minus 13. 26 still. 6, 12, 6, 12, 18. 24. That'll be 0 then. Yet it's not going to work. Let's see. 13 divided by 13, I guess. Close. Plus 6 times 4. 4. Not use. That's 26, right? Oh. No, that's 1. 6, 12, 18, 24. Let's do that. 6 times 4. 6, 12, 18, 24. And that would be... 12 times 3. 12 times 4. Makes... 1, the 3rd vowel. 5 times 4. 4 times 4. 7 times 5. 6 times 4. 9 times 6. 4 times 1. 5 times 2. 6 times 5. 7 times 2. by 13 or multiply perhaps 13 divided by 13","```python
start_state = (4, 6, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(4, 6, 26),
    comment='""13 plus 13 is 26""',
)

curr_state = graph.move_to_node(start_state)
# ""6 times 4 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(13, 13, 24),
    comment='""6 times 4 is 24"" (participant said 36 but this seems to be a slip)',
)

curr_state = graph.move_to_node(start_state)
# ""13 times 6 is 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(4, 13, 78),
    comment='""13 times 6 is 78""',
)

curr_state = graph.move_to_node(start_state)
# ""13 times 4 is 52 minus 13 minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*4=52"",
    resulting_state=(6, 13, 52),
    comment='""13 times 4 is 52""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""52-13-13=26"",
    resulting_state=(6, 26),
    comment='""minus 13 minus 13""',
)

curr_state = graph.move_to_node(start_state)
# ""6, 12, 18, 24"" participant seems to be counting by 6s
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(13, 13, 24),
    comment='""6, 12, 18, 24"" participant seems to be counting by 6s',
)

curr_state = graph.move_to_node(start_state)
# ""13 divided by 13"" participant realizes they can divide 13 by 13 to get 1
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 4, 6),
    comment='""13 divided by 13""',
)

curr_state = graph.move_to_node(start_state)
# Based on their final answer (6x4)x(13/13), they multiply these together
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*4)*(13/13)=24"",
    resulting_state=(24,),
    comment='Based on their final answer (6x4)x(13/13), they multiply these together',
)
```"
2358,"[1,11,13,13]",,180," Alright, 1, 11, 13, 13. So those are some big numbers, so I feel like we're gonna have to divide at some point. If we did 13 plus 13, we're already at 26. Um, if we did 13 times 13, that would be a big number, I can't calculate that off the top of my head. 11 times 13, that's up there. Um, hmm. Okay. I feel like if we did 13, 13 plus 13 is 26. We can't subtract either the 11 or the 1 from that 26. 11, 11 plus 13 gives you 26. So, we're already at 24 already. So... Wow. Okay, so... If 11 plus 13 is 24... We would want... Hmm. We would want... Oh, I don't know. I just feel like some division will have to go into this and I can't seem to figure out what way I want to do it. 1 plus 11 is 12. 12 plus 13 is 25. No, that's not gonna work. Oh, man. We could do... Um... Maybe subtract? Maybe subtract something here. To... I don't know if... What? 13 times 13 is... If we divide it by that... That by 11, I feel like that would be way lower than 24. Um... Oh, boy. Okay.","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13, we're already at 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(1, 11, 26),
    comment='""13 plus 13, we\'re already at 26""',
)

# ""11 plus 13 gives you 26"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=26"",
    resulting_state=(1, 13, 26),
    comment='""11 plus 13 gives you 26"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""1 plus 11 is 12. 12 plus 13 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 13, 13),
    comment='""1 plus 11 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(13, 25),
    comment='""12 plus 13 is 25""',
)

# The participant mentions division and multiplication operations but doesn't actually compute them:
# ""13 times 13, that would be a big number""
# ""13 times 13 is... If we divide it by that... That by 11""
# They seem to be considering these operations but don't actually perform the calculations

```"
2359,"[7,10,11,13]",(10+11),180," 7, 10, 11, 13, 7, 10, 11, 13, um, take it to 24, 10 plus 13 will give us 23, what's 11 times 7, 11 times 7, 11 times 7 is 77, 11 times 7 is 77, mmm, 11 times 7 is 77 divided by 10 will just give us 7 again. 10, 10 plus 7. 11 is 21, so 10 plus 11 is 21, I feel like what if you did plus 13 minus 7, no, 10 plus 11 is 21. So 10 plus 11 is 21, minus 7 plus 13 maybe, 10, 10 plus, I don't know, 10 plus, I don't know, 11 is 21, plus 13 minus 7? Incorrect. Okay. I feel like it starts with the 10 plus 11 because we're already at the top. It's 21. If we subtract, 21, subtract 13, plus 7, subtract 8, subtract 9, subtract 10, subtract 9, subtract no that's not going to give us enough oh my god 13","```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 13 will give us 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(7, 11, 23),
    comment='""10 plus 13 will give us 23""',
)

# ""what's 11 times 7, 11 times 7 is 77""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7=77"",
    resulting_state=(10, 13, 77),
    comment='""what\'s 11 times 7, 11 times 7 is 77""',
)

# ""77 divided by 10 will just give us 7 again""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""77/10=7"",
    resulting_state=(7, 13),
    comment='""77 divided by 10 will just give us 7 again""',
    result_calc_error=True,
)

# ""10 plus 7. 11 is 21"" - participant seems to be trying different additions
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(7, 13, 21),
    comment='""10 plus 11 is 21""',
)

# ""plus 13 minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+13-7=27"",
    resulting_state=(27,),
    comment='""plus 13 minus 7""',
)

# ""21, subtract 13, plus 7, subtract 8, subtract 9, subtract 10, subtract 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""21-13+7=15"",
    resulting_state=(15,),
    comment='""21, subtract 13, plus 7""',
)

```"
2361,"[5,8,9,11]",,180," Alright, 5, 8, 9, 11. 5, 8, 9, 11. I feel like I want to start out with the highest number and do maybe 11 minus 5 to give us 6. Hmm, what is 6 times 8? That's 48. No. What is 9 times? 9 times 5, 45. 9 times 5 is 45. I don't know. 9 times 5. I feel like 9 times 5 is 45. And then we got 11 and 8. Oh man. What if we did 9 times 5 is 45. Divided by 8. That's a really low number. Divided by, what's 11? 11 plus 8. 11 plus 8 is 19. What did I say 9 times 5 was? 45. Um, no. What if we did 11 times 8? 88. 88. 11 times 8. 11 times 8 is 88. What's 88 divided by 9? It's like 9. Yeah. 11. I could do 11 times 5. 11 times 5 is 55. I feel like I'm going to need to minus 11 somewhere. 9 times 8 is 70. 9 times 8 is 72. Divided by 5 is 14. No, that's not going to work. 14 plus 11 is 25. So I'd be too high there. 8 times 5 is 40. 40.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 5 to give us 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 8, 9),
    comment='""11 minus 5 to give us 6""',
)

# ""what is 6 times 8? That's 48""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(9, 48),
    comment='""what is 6 times 8? That\'s 48""',
)

# Going back to start state for ""9 times 5, 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(8, 11, 45),
    comment='""9 times 5, 45""',
)

# ""11 plus 8 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(5, 9, 19),
    comment='""11 plus 8 is 19""',
)

# ""11 times 8? 88""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(5, 9, 88),
    comment='""11 times 8? 88""',
)

# ""88 divided by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88/9=9"",
    resulting_state=(5, 9),
    comment='""88 divided by 9""',
    result_calc_error=True,
)

# ""11 times 5 is 55""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(8, 9, 55),
    comment='""11 times 5 is 55""',
)

# ""9 times 8 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(5, 11, 72),
    comment='""9 times 8 is 72""',
)

# ""Divided by 5 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/5=14"",
    resulting_state=(11, 14),
    comment='""Divided by 5 is 14""',
    result_calc_error=True,
)

# ""14 plus 11 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+11=25"",
    resulting_state=(25,),
    comment='""14 plus 11 is 25""',
)

# ""8 times 5 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(9, 11, 40),
    comment='""8 times 5 is 40""',
)
```"
2367,"[1,11,12,12]",(12-11+1)x12,35," Alright, so we've got 1, 11, 12, and 12. So, we need to get to 24. Obviously, 12 plus 12 is 24, but then we've got an 11 and a 1 to deal with. Oh, 12 times 2 is 24, and we can take this 12 minus 11 to get 1, plus 1. So, this would equal 2. 1 plus 1 is 2, times 12 to be 24.","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12 is 24""',
)

# ""but then we've got an 11 and a 1 to deal with"" suggests this won't work, so participant tries new approach

# ""12 times 2 is 24"" suggests participant sets a subgoal of making 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 is 24"" suggests participant wants to make 2 to multiply by 12',
)

# ""12 minus 11 to get 1, plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11+1=2"",
    resulting_state=(2, 12),
    comment='""12 minus 11 to get 1, plus 1""',
)

# ""times 12 to be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='""times 12 to be 24""',
)
```"
2372,"[3,3,7,13]",,180," Okay, we've got to do better this time. 13, 7, 3, 3. Alright, so 13, we're in a prime number situation again. 13, so we could subtract 1 from that to get 12, and we would need to multiply by 2. Or we could... 13 minus 7 is 6, which doesn't really help with 3s. Because we would want to multiply by 4. 13 times 3 is 39. That doesn't really help either, because we would be 15 off, and there's not a good way to get to 15 with 7 and 3. 13, 7, 13. 13 times 2. Which we could get... With... I don't know how we could get that. If we add these together... We get 26. If we... 3 times 7 is... 3 times 7 plus 3 is 24, then we just have this 13 left over. Like a third wheel. 7 times... 7... 7 and 13 are both primes, so if we multiply them, we don't really get any good divisors or anything. 3 times 13 is... These are all prime numbers, so multiplying and dividing isn't really going to help us, because we would just get back to 3, 7, or 13. Um... 7 minus 3 is 4. Does that help? 4... 13... I don't know. If I could get to 8... If I could get to 8 times 3, that would be good. But I don't see a good way to get to 8 with 3, 7, and 13. 13... 3 plus 3 is 6. I wish I could get to a 4. 4... I wish I could get to a 6 with 3 and 13. Um... I feel like I'm going to run out of time on this one, too. Deal. Um... 7 times 3 is 21.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7 is 6""',
)

# ""13 times 3 is 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 7, 39),
    comment='""13 times 3 is 39""',
)

# ""If we add these together... We get 26"" - participant likely adding 13+13 or 13+7+3+3
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+3+3=26"",
    resulting_state=(26,),
    comment='""If we add these together... We get 26""',
)

# ""3 times 7 plus 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7+3=24"",
    resulting_state=(13, 24),
    comment='""3 times 7 plus 3 is 24""',
)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(3, 4, 13),
    comment='""7 minus 3 is 4""',
)

# ""If I could get to 8 times 3, that would be good"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""If I could get to 8 times 3, that would be good""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 7, 13),
    comment='""3 plus 3 is 6""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3 is 21""',
)

```"
2373,"[2,3,6,6]",(3+6)x2+6,106," These are getting hard. Okay, 2, 3, 6, 6. Surely this is going to be easy, right? Maybe you're going to make me feel a little better. Three of these together would be easy because you can multiply 3 times 8. Two 6s and a 2 are easy. Let's see. Let's do... Can we get to 12 with 3, 6, and 6? Maybe. Can we get to 8 with 6, 6, and 2? Oh, gosh. 2 times 3 is 6. Then we'd have 3 6s. That's not helpful. We need 4 of them. 2 times 6 is 12. 12 divided by 6 is 2. No, that doesn't really help. That's dividing 6 by 6. 6 times 3 is 18. Plus 6, and then we have an extra 2. Sorry. Times 3 plus 6 is 9. Oh, 3 plus 6 is 9 times 2 is 18 plus 6. Yeah, yeah, yeah. 3 plus 6, 9 times 2 is 18 plus 6 is 24.","```python
start_state = (2, 3, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Three times 8"" seems to be the participant noting a possible way to get 24, setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""Three times 8"" seems to be noting a possible way to get 24',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 6, 6),
    comment='""2 times 3 is 6""',
)

# ""2 times 6 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(3, 6, 12),
    comment='""2 times 6 is 12""',
)

# ""12 divided by 6 is 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 3),
    comment='""12 divided by 6 is 2""',
)

# ""6 times 3 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(12, 18),
    comment='""6 times 3 is 18""',
)

# ""3 plus 6 is 9 times 2 is 18 plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+6)*2+6=24"",
    resulting_state=(24,),
    comment='""3 plus 6 is 9 times 2 is 18 plus 6""',
)
```"
2390,"[1,2,11,13]",13x2,180," 24 minus 1 is 23 minus 2, I don't know, 9. 9 would make 22, that would make 23. 11 minus 1 would be 10. No, I need two 1s. 13 minus 2 is 11. 11, nope, this is not going to be an easy one. 22, no. 26, nope. 12, no. No. 11 times 2, no. Let's see, 13 minus 11, no. 13 times 11, I will never get that. I can't figure out that math. Let's see, 1 plus 2 is 3. 3 times 11 is 33, no, it's never coming out. 2 times 11 is 22. And then if I subtract 1, I have 21. No. Okay, 13 minus 1 is 12. this is never happening this is just not feasible 13 plus 2 is 15 yes 15 plus 11 is 26 and then we know there is definitely some trickery in this one 2 minus 11 is minus 9 no can't have that 11 minus 1 is 10 10 times 2 is 20 nope it's all coming to 23 this is not an easy one 9 13 times 2 is 26 26 13 times 2 26","```python
start_state = (1, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 1 is 23 minus 2"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (23, 2),
    state_after_subgoal=(24,),
    comment='""24 minus 1 is 23 minus 2"" - participant seems to be working backwards',
)

# ""11 minus 1 would be 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(2, 10, 13),
    comment='""11 minus 1 would be 10""',
)

# ""13 minus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(1, 11, 11),
    comment='""13 minus 2 is 11""',
)

# ""11 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(1, 13, 22),
    comment='""11 times 2""',
)

# ""13 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 2),
    comment='""13 minus 11""',
)

# ""1 plus 2 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+2=3"",
    resulting_state=(3, 11, 13),
    comment='""1 plus 2 is 3""',
)

# ""3 times 11 is 33""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11=33"",
    resulting_state=(13, 33),
    comment='""3 times 11 is 33""',
)

# Going back to start state for ""2 times 11 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(1, 13, 22),
    comment='""2 times 11 is 22""',
)

# ""And then if I subtract 1, I have 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22-1=21"",
    resulting_state=(13, 21),
    comment='""And then if I subtract 1, I have 21""',
)

# ""13 minus 1 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(2, 11, 12),
    comment='""13 minus 1 is 12""',
)

# ""13 plus 2 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(1, 11, 15),
    comment='""13 plus 2 is 15""',
)

# ""15 plus 11 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+11=26"",
    resulting_state=(1, 26),
    comment='""15 plus 11 is 26""',
)

# ""2 minus 11 is minus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2-11=-9"",
    resulting_state=(-9, 1, 13),
    comment='""2 minus 11 is minus 9""',
)

# ""11 minus 1 is 10 10 times 2 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-1)*2=20"",
    resulting_state=(13, 20),
    comment='""11 minus 1 is 10 10 times 2 is 20""',
)

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(1, 11, 26),
    comment='""13 times 2 is 26""',
)

```"
2396,"[4,4,5,6]",4x(5-4)x6,46," You've got 4, 4, 5, 6. Well, 4, 4, 5, 6. That's tough, eh? Let's see, 4, 4, 5, 6. Okay, so 4, 4 could multiply 1. 4 by 1 is 4. Yeah, 4 times 6. Okay, so how do we get 1? 5 minus 4 gives us 1. That's correct. So, 5 minus 4 gives us 1, all by 6 gives us 24.","```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first repeats the numbers

# ""4, 4 could multiply 1"" - participant seems to be setting a subgoal to get 1 to multiply with 4 and 6
graph.set_subgoal(
    (1, 4, 6),
    state_after_subgoal=(24,),
    comment='""4, 4 could multiply 1"" - participant seems to want to multiply 4, 1, and 6',
)

# ""5 minus 4 gives us 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 4, 6),
    comment='""5 minus 4 gives us 1""',
)

# ""That's correct. So, 5 minus 4 gives us 1, all by 6 gives us 24.""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*4*6=24"",
    resulting_state=(24,),
    comment='""So, 5 minus 4 gives us 1, all by 6 gives us 24""',
)
```"
2397,"[2,2,7,10]",(10/2+7)x2,50," So, we have 2, 2, 7, 10. Okay, so 2, 2, 7, 10. 5 plus 7 gives us 12, right? How do we get 5 plus 7? We divide 10 by 2. Okay, so let's divide 10 by 2 to get 5 plus our 7 to get 12. And then we multiply 12 by 2 to get 24.","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""How do we get 5 plus 7? We divide 10 by 2"" - participant is setting a subgoal of getting 12 by first getting 5
graph.set_subgoal(
    (5, 7),
    state_after_subgoal=(24,),
    comment='""How do we get 5 plus 7? We divide 10 by 2""',
)

# ""let's divide 10 by 2 to get 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 7),
    comment='""let\'s divide 10 by 2 to get 5""',
)

# ""plus our 7 to get 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(2, 12),
    comment='""plus our 7 to get 12""',
)

# ""And then we multiply 12 by 2 to get 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""And then we multiply 12 by 2 to get 24""',
)
```"
2398,"[1,2,4,4]",(4+2)x4x1,42," Okay, we have 1, 2, 4, 4. Let's see, 1, 2, 4, 4. With 1, 2, 4, 4, multiply 4 by 6 to get 24, multiply by 1. That's quite easy because 6 times 4 is 24. How do we get 6? We add 4 plus 2 to get 6. So this is 6 multiplied by 4 multiplied by 1.","```python
start_state = (1, 2, 4, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""multiply 4 by 6 to get 24"" - participant sets a subgoal of getting 6 first
graph.set_subgoal(
    (6, 4, 1),
    state_after_subgoal=(24,),
    comment='""multiply 4 by 6 to get 24""',
)

# ""How do we get 6? We add 4 plus 2 to get 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+2=6"",
    resulting_state=(1, 4, 6),
    comment='""How do we get 6? We add 4 plus 2 to get 6""',
)

# ""So this is 6 multiplied by 4 multiplied by 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4*1=24"",
    resulting_state=(24,),
    comment='""So this is 6 multiplied by 4 multiplied by 1""',
)
```"
2400,"[2,2,3,11]",(11-2+3)x2,57," I'm not tired yet. 11 by 2 gives 22 22 plus 2 gives 24 minus Let me take this again. We've got 11, 2, 2, 3 11, 2, 2, 3 Let's take it this way. 9 plus No, 11 minus How do we even get 12 out of this? 9 plus 3 gives 12 and we are going to get 9 by 11 minus 2 gives us 9 So 9 plus 3 gives us 12 12 times 2 gives us 23","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 by 2 gives 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 3, 22),
    comment='""11 by 2 gives 22""',
)

# ""22 plus 2 gives 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+2=24"",
    resulting_state=(3, 24),
    comment='""22 plus 2 gives 24""',
)

# ""Let me take this again"" suggests backtracking
curr_state = graph.move_to_node(start_state)

# ""11 minus 2 gives us 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 3, 9),
    comment='""11 minus 2 gives us 9""',
)

# ""9 plus 3 gives us 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(2, 12),
    comment='""9 plus 3 gives us 12""',
)

# ""12 times 2 gives us 23"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=23"",
    resulting_state=(23,),
    comment='""12 times 2 gives us 23"" - calculation error',
    result_calc_error=True,
)

# Based on their submitted response (11-2+3)*2, they must have eventually tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-2+3)*2=24"",
    resulting_state=(24,),
    comment=""Based on submitted response"",
)
```"
2402,"[9,11,12,13]",,423," Thirteen minus nine minus thirteen Thirteen minus eleven Thirteen minus eleven Times twelve Times twelve Times twelve Times twelve Times twelve Times twelve Times twelve Times twelve Times twelve Times twelve Times twelve Times twelve Times twelve 13 minus 12 is 1, 9 times 11, 12 times 9 is 8. Plus 13. All right. All right. All right. All right.","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Thirteen minus nine minus thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9-13=-9"",
    resulting_state=(-9, 11, 12),
    comment='""Thirteen minus nine minus thirteen""',
)

# ""Thirteen minus eleven""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 9, 12),
    comment='""Thirteen minus eleven""',
)

# The participant repeats ""Times twelve"" many times, possibly considering multiplying different numbers by 12

# ""13 minus 12 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 9, 11),
    comment='""13 minus 12 is 1""',
)

# ""9 times 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*11=99"",
    resulting_state=(12, 13, 99),
    comment='""9 times 11""',
)

# ""12 times 9 is 8"" appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=8"",
    resulting_state=(8, 11, 13),
    comment='""12 times 9 is 8"" appears to be a calculation error',
    result_calc_error=True,
)

# ""Plus 13"" seems to be continuing from the previous calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+13=21"",
    resulting_state=(11, 21),
    comment='""Plus 13""',
)

```"
2410,"[3,7,7,9]",,180," Okay, hun. up, meow, woof, woof, 7, 7, 6, 7, 8, 9, 10, that's not it, 7 times 7, 49, minus 9, no, that's definitely not it, 21, plus, oh, no, that's not even close, um, 49 divided by 3, plus 9, it's close, but no. 7 times 9, 63, minus 7, nope, divided by 3, this is a little tough, man, 21, 21 times 7, divided by 9, oh my god, 9 times 7, 63, minus 7, together by 3, no, definitely not, 14, 14 times 9, divided by 3, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, times 7, that's definitely not going to do it, 9 plus 7, plus 7, 23, times 7, divided by 3, oh my god, oh my god, oh my god, 9 times 7, minus, wait, plus 9, divided by 3, I'm going to run out of time again. All right.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# After some non-mathematical utterances, the participant starts calculating:

# ""7 times 7, 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7, 49""',
)

# ""minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49-9=40"",
    resulting_state=(3, 40),
    comment='""minus 9""',
)

# ""49 divided by 3, plus 9""
curr_state = graph.move_to_node((3, 9, 49))  # going back to state with 49
new_state = graph.explore_operation(
    curr_state,
    operation=""49/3+9=25.33"",
    resulting_state=(25.33,),
    comment='""49 divided by 3, plus 9""',
)

# ""7 times 9, 63""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(3, 7, 63),
    comment='""7 times 9, 63""',
)

# ""minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63-7=56"",
    resulting_state=(3, 56),
    comment='""minus 7""',
)

# ""divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/3=18.67"",
    resulting_state=(18.67,),
    comment='""divided by 3""',
)

# ""9 times 7, 63""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 7, 63),
    comment='""9 times 7, 63""',
)

# ""minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63-7=56"",
    resulting_state=(3, 56),
    comment='""minus 7""',
)

# ""together by 3"" (likely means ""divided by 3"")
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/3=18.67"",
    resulting_state=(18.67,),
    comment='""together by 3"" (likely means ""divided by 3"")',
)

# ""9 plus 7, plus 7, 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+7=23"",
    resulting_state=(3, 23),
    comment='""9 plus 7, plus 7, 23""',
)

# ""times 7"" - participant tries to multiply by 7 but doesn't have it anymore
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 7, 63),
    comment='""9 times 7""',
)

# ""plus 9, divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*7+9)/3=24"",
    resulting_state=(7, 24),
    comment='""plus 9, divided by 3""',
)
```"
2414,"[3,5,10,10]",,180," Alright, let's try this. 10 times 10 divided by 5 is 23. 10 times 15 divided by 5 is 26. 15...no way. 20...I am...20...5 divided by 3...no way. No way. 5, 10, 5, plus 5, 6, 7, and 7, that's 3, that's 10, that's 35, 9, all 10, 10 plus 10 times 5, oh, that's 33 again, oh my god, oh my god, I don't know why I'm even bothering to do this, but I know it's not going to work, oh, I didn't even do it right, okay, oh my god, Athena, 18, that's 10, that's 5, that's 5, that's 6, that's 7, that's 8, that's 9, that's not it, 15 times 3, that's not it, that's 35, 10 minus, minus 10, 8, 10 minus, whoops, oh, okay, hold on, 10 minus 5, times 3, plus 10, that's 25, oh my god, this is hard, man, this is hard, 10 times 7, wait, 10, 10 times, 10 minus 3, oops, 10 times, 10 minus 3,","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 10 divided by 5 is 23"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10/5=23"",
    resulting_state=(3, 23),
    comment='""10 times 10 divided by 5 is 23"" - calculation error',
    result_calc_error=True,
)

# ""10 plus 5 times 3"" participant combines operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+5)*3=45"",
    resulting_state=(10, 45),
    comment='""10 times 15 divided by 5 is 26"" - participant combines 10+5 first',
    result_calc_error=True,
)

# ""5 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5/3=1.67"",
    resulting_state=(1.67, 10, 10),
    comment='""5 divided by 3""',
)

# ""10 plus 10 times 5"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+10)*5=33"",
    resulting_state=(3, 33),
    comment='""10 plus 10 times 5"" participant calculates incorrectly',
    result_calc_error=True,
)

# ""10 minus 5, times 3, plus 10, that's 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-5)*3+10=25"",
    resulting_state=(25,),
    comment='""10 minus 5, times 3, plus 10, that\'s 25""',
)

# ""10 minus 3"" participant starts but doesn't complete calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 10),
    comment='""10 minus 3""',
)
```"
2429,"[1,4,5,8]",(8-4)x(5+1),83," Twenty-four. Eight times five is twenty. No. Eight plus five. Thirteen. Eight times five is thirteen. Four. No, let me see. gastronomy how many five nine no they take three twenty seven let me see four so I got eight times three six times four you know four wait eight take away four is four okay guys okay so eight take away four times five plus one","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Eight times five is twenty""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=20"",
    resulting_state=(1, 4, 20),
    result_calc_error=True,
    comment='""Eight times five is twenty"" - calculation error, should be 40',
)

# ""Eight plus five. Thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(1, 4, 13),
    comment='""Eight plus five. Thirteen""',
)

# ""Eight times five is thirteen"" seems to be a mistake/confusion, as they just did both calculations correctly

# There's some unclear/garbled speech that doesn't seem to represent operations

# ""eight take away four is four""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(1, 4, 5),
    comment='""eight take away four is four""',
)

# ""eight take away four times five plus one"" 
# Based on their submitted answer (8-4)x(5+1), they are computing (8-4)x(5+1)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*(5+1)=24"",
    resulting_state=(24,),
    comment='""eight take away four times five plus one""',
)
```"
2430,"[2,8,9,12]",,180," 25. Okay. 12 times 2, no, we can't do that. Now I take away 12 is times 3. 3 times 3 is 24. 24. 12 plus 9 is 24. 8 times 2 is 16. 16, 12 take away 9 is 3. 18. 2 times 9 is 18. Can't do 2 times 12. See, 10. 12 take away 2 is 10. Plus 8 is 18. No. 18. 27. That was a hard one. Man, this one's hard. 2 plus 8. 6, no. So remember, 8 times 3 is 24. 6 times 4 is 24. 12 times 2 is 24. 21. 22. So I got to add up to one of those. So 8 take away 2 is 6. 9. Or I could do 9 take away 2 is, no, 7 times 4 is 28. 12 take away 8 is 4. 4. 4. 9 take away 2 is 7. It's 10. 19. No. 12. 6. Let me see. 12 plus 6 is 18. 12 plus 6. Wait, what did I do to 6? 6. 16. No. Okay, I got it. 12. 12.","```python
start_state = (2, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(8, 9, 24),
    comment='""12 times 2""',
)

# ""12 plus 9 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=24"",
    resulting_state=(2, 8, 24),
    comment='""12 plus 9 is 24""',
    result_calc_error=True,
)

# ""8 times 2 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(9, 12, 16),
    comment='""8 times 2 is 16""',
)

# ""12 take away 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(2, 3, 8),
    comment='""12 take away 9 is 3""',
)

# ""2 times 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(8, 12, 18),
    comment='""2 times 9 is 18""',
)

# ""12 take away 2 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-2=10"",
    resulting_state=(8, 9, 10),
    comment='""12 take away 2 is 10""',
)

# ""Plus 8 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(9, 18),
    comment='""Plus 8 is 18""',
)

# ""8 times 3 is 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""6 times 4 is 24"" - another subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24""',
)

# ""12 times 2 is 24"" - another subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""12 times 2 is 24""',
)

# ""8 take away 2 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(6, 9, 12),
    comment='""8 take away 2 is 6""',
)

# ""9 take away 2 is, no, 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(7, 8, 12),
    comment='""9 take away 2 is, no, 7""',
)

# ""times 4 is 28"" - participant seems to be setting another subgoal
graph.set_subgoal(
    (7, 4),
    state_after_subgoal=(28,),
    comment='""times 4 is 28""',
)

# ""12 take away 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(2, 4, 9),
    comment='""12 take away 8 is 4""',
)

# ""12 plus 6 is 18"" - participant seems to be setting another subgoal
graph.set_subgoal(
    (12, 6),
    state_after_subgoal=(18,),
    comment='""12 plus 6 is 18""',
)
```"
2432,"[3,5,9,9]",,180," Three times five is snow. Four. Nine times five is four to five. Nine times five is forty-five. I'm going to take away... Three times five is fifteen. Fifteen. No. You've got to eliminate these nines. Nine, take away five is four. Four. I've got to find an eight. Six. Nine. Five. Six. Seven. Eight. Nine plus nine is eighteen. Eighteen. Eighteen plus eight. Nine. Five. Six. Seven. Eight. Nope. Not that one. Nine. Nine. Twenty-seven. Five times nine. Six. Seven. Eight. Nine. Four. Twenty-one. Nine times nine is twenty-seven. Twenty-seven. Twenty-seven. Twenty-seven. Twenty-seven. Seven. Take away nine. Eighteen plus five. Shit. That was a hard one. Ninety-one by three is three. Three. Three. Three. Three. Three. Three. Three. Three. Three.","```python
start_state = (3, 5, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Three times five is"" followed by ""fifteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(9, 9, 15),
    comment='""Three times five is fifteen""',
)

# ""Nine times five is forty-five""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(3, 9, 45),
    comment='""Nine times five is forty-five""',
)

# ""Nine, take away five is four""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(3, 4, 9),
    comment='""Nine, take away five is four""',
)

# ""Nine plus nine is eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(3, 5, 18),
    comment='""Nine plus nine is eighteen""',
)

# ""Nine times nine is twenty-seven"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=27"",
    resulting_state=(3, 5, 27),
    comment='""Nine times nine is twenty-seven"" - calculation error',
    result_calc_error=True,
)

# ""Eighteen plus five""
curr_state = graph.move_to_node((3, 5, 18))  # moving back to the state with 18
new_state = graph.explore_operation(
    curr_state,
    operation=""18+5=23"",
    resulting_state=(3, 23),
    comment='""Eighteen plus five""',
)

# ""Ninety-one by three is three"" seems to be a transcription error or unclear speech
# The rest appears to be the participant repeating ""three"" without performing operations

```"
2433,"[4,4,8,11]",,180," 4 plus 4 is 8, 4 plus 4 is 8, 4 plus 4 is 8, 8 plus 11, 4 plus 4 is 8, 8 plus 11, 88, 9 we have 9 10 11 which is 4, 8 minus 2 is 8, 3 plus 4 is 4, 9 plus 11, 18 minus 3 is 4, 8 minus 4 is 4, 2 plus 3 is 4, 11 minus 2 is 4, 11 x 2 is 4, 11 take away is 4, 11 minus 4 is 4, 11 plus 4 is 46 is 47, something like that. I'm gonna take away four and seven. Oh no, four plus eight, no, it's 12. Eight, shoot, eight take away. Eight divided by four. Four, four, 11 taken away, four. Four, let me see, 11 taken away, eight is three. Three, yeah, eight times three is 12. 14, 32, eight times four, 32, taking away 11 is 22. 21 plus four, 22, five. Um. Uh. Four plus eight, no, four plus four is eight. Eight plus eight is 16, no. Four taken away. Four is eight. Uh, no. It's two. Two taken away. Two, two.","```python
start_state = (4, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(8, 8, 11),
    comment='""4 plus 4 is 8""',
)

# ""8 plus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(8, 19),
    comment='""8 plus 11""',
)

# Many of the subsequent operations seem to be calculation errors or unclear
# ""11 plus 4 is 46 is 47""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4=47"",
    resulting_state=(4, 8, 47),
    comment='""11 plus 4 is 46 is 47""',
    result_calc_error=True,
)

# ""four plus eight, no, it's 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(4, 11, 12),
    comment='""four plus eight, no, it\'s 12""',
)

# ""eight times four, 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(4, 11, 32),
    comment='""eight times four, 32""',
)

# ""taking away 11 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-11=22"",
    resulting_state=(4, 22),
    comment='""taking away 11 is 22""',
    result_calc_error=True,
)

# ""four plus four is eight. Eight plus eight is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(8, 8, 11),
    comment='""four plus four is eight""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(11, 16),
    comment='""Eight plus eight is 16""',
)
```"
2438,"[3,4,8,12]",,180," All right, so, 96. Okay, 8 times 12. All right, so 8 times 12 is 96. Divided by 5. 4 would be. All right. Okay, so. All right, so 8 times 12 is 96. Divided by 4 would be 24. But 8 times 4, 8 times, 12 times. Okay, so 3 plus. Hmm. 3 plus 4. All right, so 32 minus 12 is 20. So 12 times 4 is 48. Divided by 8 is 12. Okay. 12 times 4 is 48. Divided by 8 would be 6. 6 times 6 is 18. No. 3 times. Okay, 3 times 4 is 12. Times 12 is 144. Which divided by 8 is 18. Damn it. All right, so 12 plus 4 is 16. 12 plus. 12 plus 8 is 20 plus 4. Hmm. Okay, so 12. 4 is 16 times 3. 12 plus 4 is 16 times 6 is 3. Hmm. 12 times. Okay. 8 minus 4 is 4. 4 times 3 is 12 plus 12. Okay. 8 minus 4 minus parenthesis 12 times 3. Wait, no. Uh, hang on. 12 times 36. Oh, no. No, that's not what I was thinking. I just had to write it in. 8 minus 4 is 6.","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 12 is 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(3, 4, 96),
    comment='""8 times 12 is 96""',
)

# ""Divided by 4 would be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/4=24"",
    resulting_state=(3, 24),
    comment='""Divided by 4 would be 24""',
)

# ""3 plus 4"" participant goes back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4=7"",
    resulting_state=(7, 8, 12),
    comment='""3 plus 4""',
)

# ""12 times 4 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(3, 8, 48),
    comment='""12 times 4 is 48""',
)

# ""Divided by 8 is 12"" - participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/8=6"",
    resulting_state=(3, 6),
    comment='""Divided by 8 would be 6""',
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 12, 12),
    comment='""3 times 4 is 12""',
)

# ""Times 12 is 144""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(8, 144),
    comment='""Times 12 is 144""',
)

# ""Which divided by 8 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/8=18"",
    resulting_state=(18,),
    comment='""Which divided by 8 is 18""',
)

# ""12 plus 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4=16"",
    resulting_state=(3, 8, 16),
    comment='""12 plus 4 is 16""',
)

# ""12 plus 8 is 20 plus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8+4=24"",
    resulting_state=(3, 24),
    comment='""12 plus 8 is 20 plus 4""',
)

# ""8 minus 4 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(3, 4, 12),
    comment='""8 minus 4 is 4""',
)

# ""4 times 3 is 12 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3+12=24"",
    resulting_state=(24,),
    comment='""4 times 3 is 12 plus 12""',
)

# ""8 minus 4 is 6"" appears to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=6"",
    resulting_state=(3, 6, 12),
    comment='""8 minus 4 is 6"" appears to be a calculation error',
    result_calc_error=True,
)
```"
2449,"[6,8,12,12]",(12-8)x(12-6),70," 12, 12, 6, 8, 12, 12, 12, divided by 2, minus 8, bracket clause, times 6, let's see, nope, I'm wrong, 4, 12, minus 8, times 6, minus 12.","```python
start_state = (6, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 divided by 2, minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2-8=(-2)"",
    resulting_state=(-2, 6, 12, 12),
    comment='""12 divided by 2, minus 8""',
)

# ""times 6"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(-2)*6=-12"",
    resulting_state=(-12, 12, 12),
    comment='""times 6""',
)

# ""nope, I'm wrong"" participant backtracks

# ""4, 12, minus 8"" participant seems to be computing 12-8=4
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 12, 12),
    comment='""12, minus 8""',
)

# ""times 6"" participant seems to be computing (12-8)*(12-6)=24 based on their final response
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*(12-6)=24"",
    resulting_state=(24,),
    comment='Based on final response ""(12-8)x(12-6)"", participant computes 4*(12-6)',
)

```"
2451,"[3,4,8,12]",,180," 12 plus 12, okay. 12 plus 12. So, this is how you're going to do it. 12 times 3. Let's go to 12, alright. 12 times 3 is going to be 12 plus 12. 12 divided by 3 is 4. 4 plus 4 is 8. Okay, so let's see some chart again. 24. The other right 3 is 8. 12 minus 4. 12 minus 4. 8. 8 plus 4 plus 3. Let's try again, Croc. 3, 4, 8, 12. 3, 4, 8, 12. 1. Oh They started awake Try your means Try your means That's Place","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12"" - participant seems to be thinking about getting to 24
graph.set_subgoal((12, 12), state_after_subgoal=(24,), comment='""12 plus 12""')

# ""12 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(4, 8, 36),
    comment='""12 times 3""',
)

# ""12 divided by 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 4, 8),
    comment='""12 divided by 3 is 4""',
)

# ""4 plus 4 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(8, 8),
    comment='""4 plus 4 is 8""',
)

# ""12 minus 4. 12 minus 4. 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(3, 8, 8),
    comment='""12 minus 4. 12 minus 4. 8""',
)

# ""8 plus 4 plus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4+3=15"",
    resulting_state=(12, 15),
    comment='""8 plus 4 plus 3""',
)

# The rest appears to be the participant restarting and then some transcription errors
```"
2453,"[1,3,6,9]",(9-6)x(3x1),180," okay so number is 1 3 6 9 so I can do that by was it 9 6 times 9 so there's 18 so I can do that maybe left parenthesis 6 minus left parenthesis 1 divided by 3 and then times that by 9 so it's 1 over 3 that's that's 6 no 6 and 3 is 18 18 19 20 21 22 23 24 25 26 what 9 times 6 it's 36 36 no that's too much okay 6 and 3 is 18 6 times 4 is 24 24 it's 24 wait 3 4 no so those are 1 4 9 i y 3 3... let's see maybe if i do... now left parenthesis... 9,6 that's 3 if i times that lefth prophethy says 3... minus 6 but i did that is 18 3 times 1 that should work no that's 9 minus 6 times 3 9 6 times 3 it's 9 right this this one's 3 how about","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 9 so there's 18"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=18"",
    resulting_state=(1, 3, 18),
    comment='""6 times 9 so there\'s 18""',
    result_calc_error=True,
)

# ""left parenthesis 6 minus left parenthesis 1 divided by 3 and then times that by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-(1/3))*9=51"",
    resulting_state=(51,),
    comment='""left parenthesis 6 minus left parenthesis 1 divided by 3 and then times that by 9""',
)

# ""6 and 3 is 18"" - participant likely means 6*3
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 9, 18),
    comment='""6 and 3 is 18""',
)

# ""9 times 6 it's 36"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=36"",
    resulting_state=(1, 3, 36),
    comment='""9 times 6 it\'s 36""',
    result_calc_error=True
)

# ""9,6 that's 3"" - participant is subtracting
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(1, 3, 3),
    comment='""9,6 that\'s 3"" - participant is subtracting',
)

# ""3 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*1=3"",
    resulting_state=(3, 3),
    comment='""3 times 1""',
)

# Based on their final response (9-6)x(3x1), they must have then multiplied (9-6)*(3*1)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-6)*(3*1)=9"",
    resulting_state=(9,),
    comment='Based on their final response ""(9-6)x(3x1)""',
)
```"
2462,"[2,8,10,12]",10x12,180," So the numbers are 2, 8, 10, and 12. So how can I... I mean I can try what 12, divide that by 2, that equals 6. No, that's not gonna work. If I add them all, 8 and 16, 16, that's too much. It's gonna pass 24. But if I... 10 plus 8, 18. No, so 16, right? If I... What if 80... Sorry, 10 times 8, 80. Divide that by 12. Is that possible? 80, is that... 80 divided by 12, what does that equal to? 80 divided by 12. No, that's not gonna equal anything, or a whole number. It's got some decimal points. Yeah, this is not possible as well, too. Because I... The numbers are too high. This is impossible. 8 times 2, plus 10, 16, 26. Divide it by 12. Times 2. 24. That's 24. Yeah, there's no way I can continue this. So 8 divided by... 8 times 2. 8 times 2. 10 times... No, it's 120. Divide that by 16. Is that really possible?","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12, divide that by 2, that equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(6, 8, 10),
    comment='""12, divide that by 2, that equals 6""',
)

# ""If I add them all, 8 and 16, 16, that's too much""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+8+10+12=32"",
    resulting_state=(32,),
    comment='""If I add them all...that\'s too much""',
)

# ""10 plus 8, 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(2, 12, 18),
    comment='""10 plus 8, 18""',
)

# ""10 times 8, 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(2, 12, 80),
    comment='""10 times 8, 80""',
)

# ""Divide that by 12"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80/12=6.67"",
    resulting_state=(2, 6.67),
    comment='""Divide that by 12""',
)

# ""8 times 2, plus 10, 16, 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2+10=26"",
    resulting_state=(12, 26),
    comment='""8 times 2, plus 10, 16, 26""',
)

# ""Divide it by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26/12=2.17"",
    resulting_state=(2.17,),
    comment='""Divide it by 12""',
)

# ""Times 2. 24"" - not clear what numbers they're using

# ""8 times 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(10, 12, 16),
    comment='""8 times 2""',
)

# ""10 times... No, it's 120"" - participant likely means 10*12
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(2, 8, 120),
    comment='""10 times... No, it\'s 120""',
)

```"
2463,"[3,3,3,9]",(9-3/3)x3,178," Target number 24, we have 3, 3, 3, and 9. I do know that, okay, we're going to do 3 plus 3 minus, okay, we're going to do 9 minus 3, which is 6. No, that's not going to, that's not going to work. Okay, 3 times 3 is 6, 9 minus 3 is 6, 6 times 6 is 9 is 24. Okay, this is harder than I thought it was going to be. We have 3 times 3 is 9, that does not, 3 plus 3 minus 3 is 3, that doesn't help. 9 minus 3, 9 divided by, 3 times 9 divided by 3 is 3 plus okay, 9 divided by 3 is 3. Okay, put those in parentheses. Okay, let me go back, go back. 9 divided by 3 is 3 times 9 to 6, 3 times 3 times 3, that's not 24. How in the world? Okay, let me delete and start over. 9 minus 3, no, 12 times 2, 12, 9, 3, 3 times 3 plus 3 plus 3 is 12, that doesn't work. This is ridiculous. Ugh. So we need 8 times 3, that's not going to work. 3 divided, okay, 9 minus 3 divided by 3, and then that, 9 minus 3 divided by 3, and then we're going to multiply it by 3. Not all numbers are used. Yeah, they were. Okay, 9 minus 3 divided by 3, 9 minus 1, times 3. Submit.","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 3, which is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 3, 6),
    comment='""9 minus 3, which is 6""',
)

# ""3 times 3 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=6"",
    resulting_state=(3, 6, 9),
    comment='""3 times 3 is 6"" - calculation error',
    result_calc_error=True,
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 9, 9),
    comment='""3 times 3 is 9""',
)

# ""3 plus 3 minus 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3-3=3"",
    resulting_state=(3, 9),
    comment='""3 plus 3 minus 3 is 3""',
)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 3, 3),
    comment='""9 divided by 3 is 3""',
)

# ""3 times 3 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3=27"",
    resulting_state=(9, 27),
    comment='""3 times 3 times 3""',
)

# ""3 times 3 plus 3 plus 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3+3+3=15"",
    resulting_state=(9, 15),
    comment='""3 times 3 plus 3 plus 3 is 12"" - calculation error',
    result_calc_error=True,
)

# Finally, the participant tries ""9 minus 3 divided by 3"" and then multiplies by 3
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-3/3)*3=24"",
    resulting_state=(24,),
    comment='""9 minus 3 divided by 3, and then we\'re going to multiply it by 3""',
)

```"
2464,"[2,3,6,6]",(6/3)x(6x2),45," Okay, 6 and 6 is 12. 2 times 3 is 6. 6 times 6 divided by 6, nope. All right, we're going to do 2 times 6 is 12. 6 divided by 3. Okay, 6. We're going to do 6 divided by 3 times, which 6 divided by 3 is 2, times 6 times 2.","```python
start_state = (2, 3, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 and 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(2, 3, 12),
    comment='""6 and 6 is 12""',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 6, 6),
    comment='""2 times 3 is 6""',
)

# ""6 times 6 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6/6=6"",
    resulting_state=(2, 3, 6),
    comment='""6 times 6 divided by 6""',
)

# ""nope"" indicates this didn't work

# ""2 times 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(3, 6, 12),
    comment='""2 times 6 is 12""',
)

# ""6 divided by 3"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 6, 2),
    comment='""6 divided by 3""',
)

# ""6 divided by 3 times 6 times 2""
# Based on their response (6/3)x(6x2), they are computing (6/3)x12
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*(6*2)=24"",
    resulting_state=(24,),
    comment='""6 divided by 3 times 6 times 2"" - based on their response (6/3)x(6x2)',
)
```"
2465,"[3,3,3,4]",4x(,180," 3 x 4 is 12. No, see, this should be easy. 12 x 2, which we don't. 3 x 3 is 6. No, 24. So we have 12 and 2. We have 6 and 4. Ooh, 4-3 is 3. 3 x 3 is 9. No, that's not going to work. 4-3 is 2? No, 4-3 is 1. Ooh, I'm going to do 3-4, but that's not going to work. 3 plus 3 is 6 times 3. 3 plus 3 is 6 times 3. Okay, this is easier than I thought. 4 times 4. 4 times 3. 3 times 3. 3 divided by 3? Okay, okay, I got it. 3 divided by 3. Okay, let's see, we'll go back and... 12 times...okay, 4. Okay, we're going to do 4 times 3. 3 divided by 3 divided by 3 submit answer wait a minute I used all the numbers what you're talking about 3 divided by 3 is 1 4 times 3 is 12 nope that's wrong 4 times 3 is 12 I have to multiply it by 2 delete delete delete delete delete delete delete delete I had 4 times 3 times 2 4 times 3 is 12 4 times 6 is 24 so we're gonna do 4 times 3 nope 4 times 3 is 12 4 times 3 is 12","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 x 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(3, 3, 12),
    comment='""3 x 4 is 12""',
)

# ""3 x 3 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=6"",
    resulting_state=(3, 4, 6),
    comment='""3 x 3 is 6"" - calculation error',
    result_calc_error=True,
)

# ""4-3 is 3"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4-3=3"",
    resulting_state=(3, 3, 3),
    comment='""4-3 is 3"" - calculation error',
    result_calc_error=True,
)

# ""3 x 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 4, 9),
    comment='""3 x 3 is 9""',
)

# ""4-3 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-3=1"",
    resulting_state=(1, 3, 3),
    comment='""4-3 is 1""',
)

# ""3 plus 3 is 6 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*3=18"",
    resulting_state=(4, 18),
    comment='""3 plus 3 is 6 times 3""',
)

# ""3 divided by 3"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 4),
    comment='""3 divided by 3""',
)

# ""4 times 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(3, 3, 12),
    comment='""4 times 3 is 12""',
)

# Set subgoal of getting to 24 by doubling 12
graph.set_subgoal((12, 2), comment='""4 times 6 is 24"" - participant seems to be trying to get to 24 by doubling 12')

```"
2469,"[5,6,7,7]",,180," 14 plus 8 is not going to work. 13 plus 12 is not going to work. 7 minus 6 is 1. Nope, nope, nope. 6 times 7 is 42, by the way, plus 5 is 47. If I'm not saying that's not right. 7 times 7 is 49. Nope. 7 minus 5 is 2. 7 minus 5 is 2 times 6 is 1. 7 times 6 is 12. 7 times 5 is 35. So 7 times 6 is 42. My, sorry, that's not going to work. 49 minus 1. No. 49 minus 5 is 6. Nope. Golly! 7 times 6 is 42. 42 minus 7. No, that's not going to work. 42 minus 7. Hmm. 42 minus 7 is... Nope, that's not going to work. 49 minus 6 is 5. 6 times 5 is 30. 7 times 7 is minus 30. That's not going to work. No. 6 minus 5 is 1. 7 minus 6 is 1. 7 minus 7 is 0. 7 minus 5 is 2. 6 and 7 is 13. 13 plus 9. There's no way to make that. 35 minus... Nope. 49 minus 6. Nope. 30 minus 5. 30 minus 5 is 25. Nope, 30.","```python
start_state = (5, 6, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""14 plus 8 is not going to work"" - participant likely got 14 from 7+7
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(5, 6, 14),
    comment='""14 plus 8"" suggests participant first computed 7+7=14',
)

# ""13 plus 12"" - participant likely got 13 from 7+6
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(5, 7, 13),
    comment='""13 plus 12"" suggests participant first computed 7+6=13',
)

# ""7 minus 6 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 5, 7),
    comment='""7 minus 6 is 1""',
)

# ""6 times 7 is 42, by the way, plus 5 is 47""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(5, 7, 42),
    comment='""6 times 7 is 42""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42+5=47"",
    resulting_state=(7, 47),
    comment='""plus 5 is 47""',
)

# ""7 times 7 is 49""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(5, 6, 49),
    comment='""7 times 7 is 49""',
)

# ""7 minus 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 6, 7),
    comment='""7 minus 5 is 2""',
)

# ""times 6 is 1"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=1"",
    resulting_state=(1, 7),
    comment='""times 6 is 1"" seems to be a calculation error',
    result_calc_error=True,
)

# ""7 times 5 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(6, 7, 35),
    comment='""7 times 5 is 35""',
)

# ""7 times 6 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 7, 42),
    comment='""7 times 6 is 42""',
)

# ""42 minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-7=35"",
    resulting_state=(5, 35),
    comment='""42 minus 7""',
)

# ""6 times 5 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(7, 7, 30),
    comment='""6 times 5 is 30""',
)

# ""6 minus 5 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 7, 7),
    comment='""6 minus 5 is 1""',
)

# ""7 minus 7 is 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-7=0"",
    resulting_state=(0, 5, 6),
    comment='""7 minus 7 is 0""',
)

# ""6 and 7 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(5, 7, 13),
    comment='""6 and 7 is 13""',
)

```"
2470,"[1,3,6,9]",(9/3)+1,180," Okay, target number 24. Okay, 9. Oh, we got some big numbers in here. So probably not a lot of multiplying going on. 9 plus 6 is 15, plus 3 is 18, plus 1 is 19. So maybe, um, 6. 24 divided by 6 is 4. Well, I guess we could do some dividing, too. 9 times 6 is 52. Divided by 3 is 18. That's not going to be it. How about 3 times 9 is 27, minus 6 is 21, plus 1 is 22. That's not quite right. That's not quite right, either. Um, 3 times 6 is 18, plus 9 is 27, minus 1 is 26. Ugh, we're dancing all around it. Okay, 3 times, no, maybe we are doing times, but, uh, do some big numbers again. 6 times 9 is 54. 54 divided by 3 was 18. No, we did that one already. Mmm, 3 times 9, 27. Um, mmm, no. Minus 1, 26. Minus 6, nope. Okay. Let's start off with the answer. 24 minus 9 is going to be 15. Can I get 15 from a 6 and a 3 and a 1? 6 times 3 is 18. No. Okay. 24 divided by 9 is not an even number. 24 divided by 6 is 4. Can I get a 4 out of those remaining numbers? 9 divided by 3 is 3, plus 1 is 4. Okay. Okay. All right. Something's happening here. Okay. So. Oh, shoot. Talking out loud has made me forget what I started off with. Okay. I said. So, 9, 9 divided by 3.","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 6 is 15, plus 3 is 18, plus 1 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6+3+1=19"",
    resulting_state=(19,),
    comment='""9 plus 6 is 15, plus 3 is 18, plus 1 is 19""',
)

# ""24 divided by 6 is 4"" - participant seems to be working backward from 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 is 4"" - participant working backward',
)

# ""9 times 6 is 52""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=52"",
    resulting_state=(1, 3, 52),
    comment='""9 times 6 is 52""',
    result_calc_error=True,
)

# ""Divided by 3 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""52/3=18"",
    resulting_state=(1, 18),
    comment='""Divided by 3 is 18""',
    result_calc_error=True,
)

# ""3 times 9 is 27, minus 6 is 21, plus 1 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9-6+1=22"",
    resulting_state=(22,),
    comment='""3 times 9 is 27, minus 6 is 21, plus 1 is 22""',
)

# ""3 times 6 is 18, plus 9 is 27, minus 1 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6+9-1=26"",
    resulting_state=(26,),
    comment='""3 times 6 is 18, plus 9 is 27, minus 1 is 26""',
)

# ""6 times 9 is 54. 54 divided by 3 was 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9/3=18"",
    resulting_state=(1, 18),
    comment='""6 times 9 is 54. 54 divided by 3 was 18""',
)

# ""3 times 9, 27. Um, mmm, no. Minus 1, 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9-1=26"",
    resulting_state=(6, 26),
    comment='""3 times 9, 27. Um, mmm, no. Minus 1, 26""',
)

# ""24 minus 9 is going to be 15"" - working backward from 24 again
graph.set_subgoal(
    (15, 9),
    state_after_subgoal=(24,),
    comment='""24 minus 9 is going to be 15"" - working backward',
)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 9, 18),
    comment='""6 times 3 is 18""',
)

# ""24 divided by 9 is not an even number""
# ""24 divided by 6 is 4"" - working backward again
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 is 4"" - working backward',
)

# ""9 divided by 3 is 3, plus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3+1=4"",
    resulting_state=(4, 6),
    comment='""9 divided by 3 is 3, plus 1 is 4""',
)

```"
2471,"[2,8,10,12]",(,180," Okay, we're going to get better at this. I need to take some math lessons. I do a little bit of Spanish lessons every day. Let me add some math into this. 10 times 12. Okay. 120 divided by 8. 15 times 2 would be 30. No. Okay, start off with a 24 again. I think we almost got it the last time. 24 divided by 8 is 3. Can I get 3 from those other numbers? 10. 12 minus 10. You know what? Let me start writing stuff down. This is going to help. Okay. So I said 8 divided by. No, no. Just get the 8 out of there. Okay. 12 minus 10 is 2. 2 divided by 2. 1. So that's not going to be it. We need to get to a 3. About. Wait. 12 plus 12. No, we have that 8 still. Ah. The timer. I can sense it. Okay. Don't panic. Don't panic. This is fine. 12. 10. 20. 2. 22 plus 2. 24. Where does that 8 come into hand? 8. How about we do 8 times 10. Is that 800? Divided by 12. I was not going to get a nice number. 400. What's 400? Sorry. That would be a little bit louder. 400 divided by 12. No, 400. Sorry. Divided by 10. Wow. I'm not sure where any of these numbers are coming from. Okay. 24 divided by 12 is obviously 2. Can I get 2 out of 8, 10, and 2? So I need that 8 and that 10 to cancel each other out somehow. 10. 10 plus. 8 plus 2. 10. So that would get it down to 1. I don't want that. 18. Or get that to a 2 as well. So 2 times 2 is 4. No. Okay. Wait. Hey, hey, hey, hey, hey. Okay. Okay. So we.","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(2, 8, 120),
    comment='""10 times 12""',
)

# ""120 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""120/8=15"",
    resulting_state=(2, 15),
    comment='""120 divided by 8""',
)

# ""15 times 2 would be 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*2=30"",
    resulting_state=(30,),
    comment='""15 times 2 would be 30""',
)

# The participant then seems to start working backward from 24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 8 is 3""',
)

# ""12 minus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(2, 8, 2),
    comment='""12 minus 10""',
)

# ""2 divided by 2. 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2/2=1"",
    resulting_state=(1, 8),
    comment='""2 divided by 2. 1""',
)

# ""8 times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(2, 12, 80),
    comment='""8 times 10""',
)

# ""24 divided by 12 is obviously 2""
graph.set_subgoal(
    (2,),
    state_after_subgoal=(24,),
    comment='""24 divided by 12 is obviously 2""',
)

# ""8 plus 2. 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+2=10"",
    resulting_state=(10, 10, 12),
    comment='""8 plus 2. 10""',
)

```"
2472,"[3,4,8,11]",(11-3)x4-8,61," Okay, we're going to do better. Okay, 24. 24 divided by 3 is 8. Okay, so 8 times 3 will get us there. Can we get rid of that 4 and 11? 11 minus 3 is going to get us to 8. Okay, so let's just put that in. 11 minus 3 is going to get us to 8. Okay, 8 times 4 is 32. Minus 8, 24. Okay. Okay, what did I do? Okay, 8. Okay, now we want it times 4 minus 8. Is that right?","```python
start_state = (3, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 3 is 8"" - participant seems to be working backward from 24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 3 is 8"" - participant seems to be working backward from 24',
)

# ""8 times 3 will get us there"" - participant confirms this path could work

# ""11 minus 3 is going to get us to 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(4, 8, 8),
    comment='""11 minus 3 is going to get us to 8""',
)

# ""8 times 4 is 32. Minus 8, 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4-8=24"",
    resulting_state=(24,),
    comment='""8 times 4 is 32. Minus 8, 24""',
)

```"
2473,"[3,5,7,10]",(10-(7-5))x3,112," Okay, 24. Let's see if we can get another one. Okay, 24. Oh, let's figure out that 7 and a 3. That'll get us to 10. 10 times 10. 100. No, I'm going to go that way. 10. 7 minus 5 is 2. 7 minus 3 is 5. 5. No, we're going to get a 4 in there. Okay, 7 minus 5 is 2. 2 minus... Okay, wait, whoa, whoa, whoa. 7 minus 5 is 2. 2, and then we need to get that... No, that's going to give us a 10. Okay, wait. 2 times... Oh, I thought it was on to something here. No. 2. That's 8. Yes, yes, yes, yes. Okay, I need... Okay, a 10. Okay, I'm going to get the 10 minus the 7 minus 5. That's going to give us 8. And then I'm going to times that by 3. Ah, that's not it? Hang on. Okay, so... That'd be 8 times 3. 8 times 3 is 24. Do I need a... Okay, let's do some... Can I do more parentheses? So, 10 minus 7 minus 5. And then times 3.","```python
start_state = (3, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and a 3. That'll get us to 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(5, 10, 10),
    comment='""7 and a 3. That\'ll get us to 10""',
)

# ""10 times 10. 100""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 100),
    comment='""10 times 10. 100""',
)

# ""No, I'm going to go that way"" suggests backtracking
curr_state = graph.move_to_node(start_state)

# ""7 minus 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 3, 10),
    comment='""7 minus 5 is 2""',
)

# ""7 minus 3 is 5"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=5"",
    resulting_state=(5, 5, 10),
    comment='""7 minus 3 is 5"" - calculation error',
    result_calc_error=True,
)

# The participant seems to backtrack several times, trying different combinations

# ""10 minus the 7 minus 5. That's going to give us 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-(7-5)=8"",
    resulting_state=(3, 8),
    comment='""10 minus the 7 minus 5. That\'s going to give us 8""',
)

# ""And then I'm going to times that by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""And then I\'m going to times that by 3""',
)

```"
2474,"[1,2,2,6]",6x(2+2)x1,26," Okay, you guys are really testing me. All right, all these numbers seem like they would go well into 24. 24 divided by, okay, this one should be easy. Okay, so 6 times 4, so 6 times 2 plus 2 times just the 1 should be it.","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by"" suggests the participant is working backward from 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by"" suggests working backward from 24',
)

# ""6 times 2 plus 2 times just the 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*(2+2)*1=24"",
    resulting_state=(24,),
    comment='""6 times 2 plus 2 times just the 1""',
)
```"
2476,"[1,7,10,13]",,180," Okay, here we go again. Okay, another 13. Why are you doing this? Okay, 13 is 7. 13 minus 7 is 6. That's a nice number for this. Okay, 6. So let's just, let's just put that on here for a second. 13 minus 7 is 6. Okay, 6 plus, no, 6, no, that's not gonna, mm, mm-hmm, okay. Okay, so 6 plus 10 is always 16. The best I could do is 17. Nope, so not that. Okay, so 13 minus 1 is 12. 12 plus 7 is 19. Nope, that gets to 29. Okay, I think we, um, maybe... Times 7? Okay, 13, let's do 10. So 10 times 7 is 70. 70 divided by 13 is not an even number. Okay, uh, 70, 69, nice. Oh, sorry, 70 minus 1. Uh, 70 minus 1 is 69. Does that divide by 13? No, no, it doesn't. Not, um, 12, 13, sorry, 13 minus 1 is 12. Plus 17, which is the 10, plus 7 is 29. So not that. I'm really stuck on trying to get these odd numbers to be even numbers, and maybe that's not the thought process I need to be doing. Well, okay, so 24 minus... Minus, um, uh, 13 is 11, which is the 10 plus the 1, but where the heck is that 7 gonna go? That's, that's what's... God, I don't know how, any way to get rid of that 7. Okay, so minus 7 is 4, and I can't turn that 10 and that 1 into a 4. So how about 24 minus 10 is 14? And that'd be the... Once again, that 13 plus that 1 is gonna get us there, but that's 7. So let's figure out that 7. So 24 divided by 7 is not an even number. So 24 minus 7 is 17. Um, so that 13 minus... There's no way to evenly divide it. 17 is there. I don't... No, there's not gonna be. Ah, okay. 10.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(1, 6, 10),
    comment='""13 minus 7 is 6""',
)

# ""6 plus 10 is always 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10=16"",
    resulting_state=(1, 16),
    comment='""6 plus 10 is always 16""',
)

# ""13 minus 1 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(7, 10, 12),
    comment='""13 minus 1 is 12""',
)

# ""12 plus 7 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(10, 19),
    comment='""12 plus 7 is 19""',
)

# ""10 times 7 is 70""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7=70"",
    resulting_state=(1, 13, 70),
    comment='""10 times 7 is 70""',
)

# ""70 minus 1 is 69""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70-1=69"",
    resulting_state=(13, 69),
    comment='""70 minus 1 is 69""',
)

# ""13 minus 1 is 12. Plus 17, which is the 10, plus 7 is 29""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1+10+7=29"",
    resulting_state=(29,),
    comment='""13 minus 1 is 12. Plus 17, which is the 10, plus 7 is 29""',
)

# The participant then works backward from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus... Minus, um, uh, 13 is 11, which is the 10 plus the 1""',
)

# ""24 minus 10 is 14""
graph.set_subgoal(
    (10, 14),
    state_after_subgoal=(24,),
    comment='""24 minus 10 is 14""',
)

# ""24 divided by 7""
graph.set_subgoal(
    (7, 24/7),
    state_after_subgoal=(24,),
    comment='""24 divided by 7""',
)

# ""24 minus 7 is 17""
graph.set_subgoal(
    (7, 17),
    state_after_subgoal=(24,),
    comment='""24 minus 7 is 17""',
)
```"
2477,"[1,8,8,12]",(12-8-1)x8,109," Alright, okay, hey, hey, this is okay. Maybe. These are some even numbers. Maybe he's going to take pity on me because, okay, well, 24 divided by 2 is 12. So we can take out and subtract that 12. It's going to get us 12. Can we get an 8 and an 8 and a 1 to a 12 is the question because 8 plus 8 is 16. Minus 1 is going to be 15. That's not it. How about 12 minus 8 is going to be 4. 8 times 4. Oh, yep, there we go. That's it. 12 minus 8 is 4. And 4 times 8 is 24. And then just times by 1 to keep this answer the same. What? No. I was so confident too. Am I just doing this wrong? 8 is a 4 times 8.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 2 is 12"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""24 divided by 2 is 12"" - participant seems to be working backwards',
)

# ""8 plus 8 is 16. Minus 1 is going to be 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8-1=15"",
    resulting_state=(12, 15),
    comment='""8 plus 8 is 16. Minus 1 is going to be 15""',
)

# ""12 minus 8 is going to be 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 8),
    comment='""12 minus 8 is going to be 4""',
)

# ""4 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(1, 32),
    comment='""4 times 8 is 24"" - participant makes calculation error',
    result_calc_error=True,
)

# Based on their submitted response (12-8-1)*8, they must have eventually tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-8-1)*8=24"",
    resulting_state=(24,),
    comment=""Based on submitted response (12-8-1)*8"",
)
```"
2479,"[4,4,4,7]",(7-4)x(4+4),86," Okay, 24 minus 7 is 17. Can I get that from 4 fourths? I don't think so. We can get a 1 out of there, though. So that's good. So that would be 16, right? No, okay. Okay, so 24 minus 7 is 17. Minus 1 would be 16. Plus 4 is only 20. That's not right. Okay. So 7 plus 1 is 8. And then I would need a 3 not to times it, right? Okay, so that would only get rid of 3 of those numbers, not...that last one was a 4. That'll get us to that 32, because 8 times 4 is 32. I know that. Please don't think I don't know that. 7 minus 4 is going to be 3. Okay. Oh, 8 plus 8. Oh, yeah. Okay. Parentheses. 7 minus 4 is 3 times 4 plus 4 is 8. So 3 times 8.","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 7 is 17"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (7, 17),
    state_after_subgoal=(24,),
    comment='""24 minus 7 is 17"" - participant seems to be working backwards from 24',
)

# ""Can I get that from 4 fourths?"" participant considers using the three 4s

# ""We can get a 1 out of there"" - participant may be trying to subtract 4s
new_state = graph.explore_operation(
    curr_state,
    operation=""4-4=0"",
    resulting_state=(0, 4, 7),
    comment='""We can get a 1 out of there""',
)

# ""7 minus 4 is going to be 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 4, 4),
    comment='""7 minus 4 is going to be 3""',
)

# ""4 plus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(4, 7, 8),
    comment='""4 plus 4 is 8""',
)

# ""7 minus 4 is 3 times 4 plus 4 is 8. So 3 times 8."" - participant puts it all together
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4)*(4+4)=24"",
    resulting_state=(24,),
    comment='""7 minus 4 is 3 times 4 plus 4 is 8. So 3 times 8.""',
)
```"
2480,"[2,4,7,12]",,180," I'm ready. 24. 12 times 2. Okay. So we have to use all 4 numbers. That's interesting. So what I'm seeing here, what can I get to get the number, how about, 7 minus 4, which is 3. No. No, wait, that doesn't make sense. I need 3. Okay. What can I multiply to do blank plus blank is, okay, so 4 plus 7 is 11. 4 plus 7 is 11. 9 times is 12. No. Okay. How do I get 8 for these numbers? How about, okay, I think I can overdo it. So 12 times 4 is, okay, so 12 times 4 minus, 2 times 7, because that would be 28, 14, I think. Okay. So that's incorrect. What else? What else? What else? What else? So I need to get it, the end product being 8. So 4 times, hmm, 12 times 2 is 24. 4 times 7 is 28. How do we use 12, 7, 4? I do not know. So I'm thinking here, I need to get somehow the number 8. So, oh, okay. So you know what I'm thinking? Maybe. No, that's 9. So what I was thinking was, hmm, no. So can you do 7 plus 2? No. That doesn't get you 8. 4 plus 7, 2 plus 4 is 8. 2 plus 4 is...","```python
start_state = (2, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(4, 7, 24),
    comment='""12 times 2""',
)

# ""7 minus 4, which is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(2, 3, 12),
    comment='""7 minus 4, which is 3""',
)

# ""4 plus 7 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(2, 11, 12),
    comment='""4 plus 7 is 11""',
)

# ""12 times 4"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(2, 7, 48),
    comment='""12 times 4""',
)

# ""2 times 7, because that would be 28, 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(4, 12, 14),
    comment='""2 times 7, because that would be 28, 14""',
)

# ""12 times 2 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(4, 7, 24),
    comment='""12 times 2 is 24""',
)

# ""4 times 7 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(2, 12, 28),
    comment='""4 times 7 is 28""',
)

# The participant seems to set a subgoal of getting to 8
graph.set_subgoal((8,), comment='""I need to get it, the end product being 8""')

# ""2 plus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4=6"",
    resulting_state=(6, 7, 12),
    comment='""2 plus 4 is 8"" - participant makes calculation error',
    result_calc_error=True,
)

```"
2487,"[1,1,4,6]",4x6x1x1,11," Okay. Hmm. Okay, I got it. So 4 times 6 times 1 times 1.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6 times 1 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6*1*1=24"",
    resulting_state=(24,),
    comment='""4 times 6 times 1 times 1""',
)
```"
2490,"[4,7,8,13]",7-4+13+8,117," Okay, 4, 7, 8, 13. Let's see, did I get 24? Oh boy. 13 plus 8 is 24. 13 plus 8 is 24. 7 and 4, 7, 8, 9. 7, 8, 9, 10, 11 is 7 plus 4. Oh boy. 8 divided by 4 is 2. 2 times 7 is 14. Oh my gosh. I don't know what to do. I want to get rid of the 7 and 4, so I get, where do I, 13, 13 plus 8 is 21. Oh, 7 minus 4. Plus 13 plus 8. 7 minus 4 is 3. Um, 7 minus 4 is 3, plus 13 is 16, plus 8 is 24, so 7 minus 4, PEMDAS, um, parentheses, exponent, multiplication, division, addition, subtraction. Oh my gosh, maybe parentheses, 7 minus 4, let's try 7 minus 4 is 3, plus 13, plus 13, plus 8, submit.","```python
start_state = (4, 7, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 8 is 24"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=24"",
    resulting_state=(4, 7, 24),
    comment='""13 plus 8 is 24"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""7 and 4, 7, 8, 9. 7, 8, 9, 10, 11 is 7 plus 4"" - participant is counting up to add 7 and 4
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(8, 11, 13),
    comment='""7 and 4...11 is 7 plus 4"" - participant is counting up to add 7 and 4',
)

# ""8 divided by 4 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 7, 13),
    comment='""8 divided by 4 is 2""',
)

# ""2 times 7 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(13, 14),
    comment='""2 times 7 is 14""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""13 plus 8 is 21"" - correcting their earlier error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(4, 7, 21),
    comment='""13 plus 8 is 21"" - correcting their earlier error',
)

# ""7 minus 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 8, 13),
    comment='""7 minus 4 is 3""',
)

# ""plus 13 is 16, plus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+13+8=24"",
    resulting_state=(24,),
    comment='""plus 13 is 16, plus 8 is 24""',
)

```"
2491,"[6,9,9,12]",,180," Okay, let's see, 6, 9, 9, 12, um, 12, oh boy, um, 9 plus 6, 9 is 15, 15 plus 9 is 24, um, oh boy, 9 minus 9 is 0, 9 minus 9 is 0, times 6 is 0, plus, no, um, 6, how do I get 6 times 2 is 12, from 9 and 9, 12, 11, 10, 9, is 3, 9 times 6 is 27, no, 12, 9 minus 6 is 3, 9 times 3 is 27, 9 minus 6 is 3, um, 3, 9 divided by 3 is 3, damn it, how can I do, how can I take 6, 99, make it out 2 and then multiply it by 12? Um, how do I do that? Um, it's like impossible, 9 plus 9 is 18, 18 divided by 6 is 3, not 2, and I want 2 times 12 for 24, 6 divided by 12, I mean 12 divided by 6 is 2, 9 times 2 is 18, 18 plus 9 is 27, oh, this is difficult, um, oh boy, 12 minus 9 is 3, okay, 12 minus 9 is 3, 3 times 6 is 18, no, 12 minus 9 is 3, 9 times 2 is 27, no, that's 21, 9 divided by 9 is 1, 1 times 6 is 6, oh, let's see, what am I missing here? 12 divided by 9 is 1,","```python
start_state = (6, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 6, 9 is 15, 15 plus 9 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(9, 12, 15),
    comment='""9 plus 6, 9 is 15""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+9=24"",
    resulting_state=(12, 24),
    comment='""15 plus 9 is 24""',
)

# ""9 minus 9 is 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-9=0"",
    resulting_state=(0, 6, 12),
    comment='""9 minus 9 is 0""',
)

# ""times 6 is 0""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""0*6=0"",
    resulting_state=(0, 12),
    comment='""times 6 is 0""',
)

# ""6 times 2 is 12"" participant seems to be noting that 12 is 6*2
# ""12, 11, 10, 9, is 3"" participant seems to be counting down from 12 to 9 to get 3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 6, 9),
    comment='""12, 11, 10, 9, is 3"" participant seems to be counting down from 12 to 9',
)

# ""9 times 6 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(9, 12, 54),
    comment='""9 times 6 is 27"" - calculation error',
    result_calc_error=True,
)

# ""9 minus 6 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 9, 12),
    comment='""9 minus 6 is 3""',
)

# ""9 times 3 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(12, 27),
    comment='""9 times 3 is 27""',
)

# ""9 plus 9 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 12, 18),
    comment='""9 plus 9 is 18""',
)

# ""18 divided by 6 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18/6=3"",
    resulting_state=(3, 12),
    comment='""18 divided by 6 is 3""',
)

# ""12 divided by 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 9, 9),
    comment='""12 divided by 6 is 2""',
)

# ""9 times 2 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(9, 18),
    comment='""9 times 2 is 18""',
)

# ""18 plus 9 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+9=27"",
    resulting_state=(27,),
    comment='""18 plus 9 is 27""',
)

# ""12 minus 9 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 6, 9),
    comment='""12 minus 9 is 3""',
)

# ""3 times 6 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(9, 18),
    comment='""3 times 6 is 18""',
)

# ""9 divided by 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 6, 12),
    comment='""9 divided by 9 is 1""',
)

# ""1 times 6 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*6=6"",
    resulting_state=(6, 12),
    comment='""1 times 6 is 6""',
)

# ""12 divided by 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 6, 9),
    comment='""12 divided by 9 is 1""',
)
```"
2493,"[8,9,9,12]",,180," Okay, 12, is this what the same one I had before? Okay, 12, 9 and 8, 12, 12 plus 8 is 20, 9 and 9 is 18, 12 minus 9 is 3, 3 times 8 is 24, 9 times 9, 9 divided by 9 is 1, oh my god, how do I, how do I take the two 9s and get 9? Then I can do 12 minus 9 is 3 times 8 is 24, so two 9s, how do I take two 9s? 9 minus 9 is 0, 9 divided by 9 is 1, oh my gosh, I don't know how to do that. 9 plus 9 is 18, minus 8 is 10, no, 9 plus 9 is 12, is 20, 9 and 8 is 17, um, oh my gosh, 9 divided by 9, 0 is 1, 1 times 8 is 8, okay, oh so 8 times 3 is 24, so how do I, how do I get, how do I get 12, 9 and 9 and make it 3? Then I can multiply that 3 times 8 to get 24, um, so 12 minus 9 is 3, um, 12 minus 9 is 3, 9 divided by 3 is 3, times 8 is 24, 12 minus 9 is 3, so 9, oh my gosh, but the PEMDAS, um, order of operations, 12, oh, 12, oh, my brain, 9, I had it, 12, 12 minus 9, 9 is 3, 9 divided by 3 is 3, times 8 is 24, 12,","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(9, 9, 20),
    comment='""12 plus 8 is 20""',
)

# ""9 and 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(8, 12, 18),
    comment='""9 and 9 is 18""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""12 minus 9 is 3""',
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(9, 24),
    comment='""3 times 8 is 24""',
)

# ""9 divided by 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 8, 12),
    comment='""9 divided by 9 is 1""',
)

# ""9 plus 9 is 18, minus 8 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9-8=10"",
    resulting_state=(10, 12),
    comment='""9 plus 9 is 18, minus 8 is 10""',
)

# ""9 and 8 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(9, 12, 17),
    comment='""9 and 8 is 17""',
)

# ""9 divided by 9, 0 is 1, 1 times 8 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9*8=8"",
    resulting_state=(8, 12),
    comment='""9 divided by 9, 0 is 1, 1 times 8 is 8""',
)

# The participant seems to be trying to find a way to get 3 so they can multiply it by 8
# They set this as a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='The participant is trying to find a way to get 3 so they can multiply it by 8 to get 24',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""12 minus 9 is 3""',
)

# ""9 divided by 3 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 8),
    comment='""9 divided by 3 is 3""',
)

# ""times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""times 8 is 24""',
)
```"
2495,"[1,1,5,8]",(5-1-1)x8,65," Okay, 24. 8 plus 5 is 13. 13 minus 1 is 12. 1 plus 1 is 2. 2 times 5, 2 times 8 is 16. Well, that's 21. Okay, 8, since 8 times 3 is 24, and you have 8, you need to take these 3 numbers to get 3. 5 minus 1 is 4, minus 1 is 3, times 8 is 24. So 5, PEMDAS, multiplication, PEMDAS. So I need to do parentheses, and then parentheses. 5 minus 1 minus 1, close parentheses, times 8. So 5 minus 1 is 4, minus 1 is 3, times 8 is 24.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 5 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(1, 1, 13),
    comment='""8 plus 5 is 13""',
)

# ""13 minus 1 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(1, 12),
    comment='""13 minus 1 is 12""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)

# ""1 plus 1 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 5, 8),
    comment='""1 plus 1 is 2""',
)

# ""2 times 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(5, 16),
    comment='""2 times 8 is 16""',
)

# ""8 times 3 is 24"" - participant sets subgoal of getting to 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""since 8 times 3 is 24, and you have 8, you need to take these 3 numbers to get 3""',
)

# ""5 minus 1 is 4, minus 1 is 3, times 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-1-1)*8=24"",
    resulting_state=(24,),
    comment='""5 minus 1 is 4, minus 1 is 3, times 8 is 24""',
)
```"
2496,"[3,5,6,8]",(6-5x3)x8,180," Again, 8 times 3 is 24. Take the 3 numbers to get 3 so you can multiply it by 8. So, 6 minus 5 is 1. 1 times 3 is 3. Times 8 is 24. So 6 minus 5 is 1. 1 times 3 is 3. So do, let's see, PEMDAS, PEM, so parenthesis, 6 minus 5, 6 minus 5. Okay, 6 minus 5, close parenthesis, times 3 times 8, so let's see. 6 minus 5 is 1. Times 3 is 1, no. I need to put, oh my gosh, I need to do parenthesis first. I need to put the 3 and 8 in parenthesis. No, 6 minus 5 is 1. 1 times 3 is 3, so how do we do this? I need to put all of that in parenthesis and then only the 8 outside of the parenthesis. So, 6 minus 5. times 3, times 3, times 8, times 8, So, 6 minus 5 is 1, Oh, but order of operations, gosh darn it. 15, oh my gosh. 15 minus 6 is 9. Oh boy, how do I do this? The order of operations is messing me up. How do I get 3? 8 times 3 is 24. 6 minus 5, division, addition, subtraction, division, multiplication first. 6 minus 5 times 3. 6 minus 5. How do I do this? Oh, I don't know how to do, I don't know how to do with the parenthesis. 8 times 3. 8 times 3 is 24. 6 minus 5 is 1. 1 times 24 is 24.","```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24"" - participant sets this as a potential goal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""6 minus 5 is 1. 1 times 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 3, 8),
    comment='""6 minus 5 is 1""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*3=3"",
    resulting_state=(3, 8),
    comment='""1 times 3 is 3""',
)

# ""Times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""Times 8 is 24""',
)

# The participant then spends time thinking about order of operations (PEMDAS)

# ""15 minus 6 is 9"" - participant tries multiplying 5*3 first due to order of operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(6, 8, 15),
    comment='""15"" - participant multiplies 5*3 first',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-6=9"",
    resulting_state=(8, 9),
    comment='""15 minus 6 is 9""',
)

# The participant continues to struggle with order of operations
# They keep mentioning ""8 times 3 is 24"" but can't figure out how to get 3 using order of operations correctly

# Finally they seem to understand that 5*3 needs to happen first, then subtract from 6, then multiply by 8
# This matches their submitted answer of (6-5x3)x8

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(6, 8, 15),
    comment='Participant finally understands order of operations for their solution (6-5*3)*8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-15=-9"",
    resulting_state=(8, -9),
    comment='Continuing the solution (6-5*3)*8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""-9*8=-72"",
    resulting_state=(-72,),
    comment='Completing the solution (6-5*3)*8',
)

```"
2501,"[6,10,10,13]",,180," Seriously? Oh shit, I did forget. Ten times ten is a hundred. Ten times ten is a hundred. Ten times thirteen is one-thirty. Ten times six is sixty. Thirteen plus ten is twenty-three. Ten plus ten is twenty. Twenty-four times twenty is like four-eighty. Thirteen times six is seventy-eight. We have sixteen and thirteen. Ten plus ten is twenty. Ten plus thirteen is twenty-three. I gotta get to one. What about ten divided by ten is one? Wait. Oh, that's not, that doesn't make sense. That's nineteen. Ten plus ten is twenty. Thirteen minus six is seven. Ten plus six is sixteen. Three. That's not enough. Twenty. What about ten divided by ten is one. One plus six is seven. Seven plus three is twenty. What about one-thirty divided by ten? It's just thirteen. Then... Ten times ten is a hundred divided by six. It's not a perfect number. I really need like... One-forty-four. No. Can I make one-forty-four from that? Ten times ten is a hundred. What's twenty times thirteen? Two-sixty. Divided by six. No. I'm getting to think these shits are unsolvable. Oh, what if I did negative? What if I did twenty plus negative seven? I don't know.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Ten times ten is a hundred""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(6, 13, 100),
    comment='""Ten times ten is a hundred""',
)

# ""Ten times thirteen is one-thirty""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(6, 10, 130),
    comment='""Ten times thirteen is one-thirty""',
)

# ""Ten times six is sixty""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6=60"",
    resulting_state=(10, 13, 60),
    comment='""Ten times six is sixty""',
)

# ""Thirteen plus ten is twenty-three""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(6, 10, 23),
    comment='""Thirteen plus ten is twenty-three""',
)

# ""Ten plus ten is twenty""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(6, 13, 20),
    comment='""Ten plus ten is twenty""',
)

# ""Twenty-four times twenty is like four-eighty"" - not clear where 24 came from

# ""Thirteen times six is seventy-eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(10, 10, 78),
    comment='""Thirteen times six is seventy-eight""',
)

# ""Ten divided by ten is one""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 6, 13),
    comment='""Ten divided by ten is one""',
)

# ""Thirteen minus six is seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(7, 10, 10),
    comment='""Thirteen minus six is seven""',
)

# ""Ten plus six is sixteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6=16"",
    resulting_state=(10, 13, 16),
    comment='""Ten plus six is sixteen""',
)

# ""Ten times ten is a hundred divided by six""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*10)/6=16.67"",
    resulting_state=(13, 16.67),
    comment='""Ten times ten is a hundred divided by six""',
)

# For the remaining operations, we need to first compute intermediate values
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(6, 13, 20),
    comment='""What\'s twenty times thirteen?"" First computing 20',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20*13=260"",
    resulting_state=(6, 260),
    comment='""Two-sixty""',
)

```"
2508,"[4,5,5,8]",(4-(5/5))x8,151," Oh, this one's easy. 4 times 4 is 20. Oh, dang it. No, I miscalculated. 8. 5 times 5 is 25 minus 4. 8 minus 5. 8 times 5 is 40. 5 times 4 is 20. 5 plus 5 is 14 plus 8 is 22. 8, 10. 4 minus 10 is negative 6. 10 plus 4 is 14. 8 plus 10 is 18 plus 4 is 22. 5 times 5 is 25. 8 times 4 is 20. 8 times 4 is 32. 24 times 2 is 48. 48. 10, 8. 5. Wait. 5 minus 1. Wait, no. 5 minus 4 is 1. 1 plus 5. You've got 4 times 6. 6. 20 times two eight minus no 20 oh wait i got it no i don't five times five is 25 not 20. i wish there was like exponents okay oh wait i could do five i forgot i could do this five times or no no no four times five divided by five three can i get three from five five and four yes i can eight times five minus five equals one wait no no no let me do this okay it's gonna be four minus one which is five divided by five then times eight","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 20"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 8, 20),
    comment='""4 times 4 is 20"" - calculation error',
    result_calc_error=True,
)

# ""5 times 5 is 25 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5-4=21"",
    resulting_state=(8, 21),
    comment='""5 times 5 is 25 minus 4""',
)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(4, 5, 40),
    comment='""8 times 5 is 40""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(5, 8, 20),
    comment='""5 times 4 is 20""',
)

# ""5 plus 5 is 14 plus 8 is 22"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+8=22"",
    resulting_state=(4, 22),
    comment='""5 plus 5 is 14 plus 8 is 22"" - calculation error',
    result_calc_error=True,
)

# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(5, 5, 32),
    comment='""8 times 4 is 32""',
)

# ""5 minus 4 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 5, 8),
    comment='""5 minus 4 is 1""',
)

# ""eight times five minus five equals one"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5-5=35"",
    resulting_state=(4, 35),
    comment='""eight times five minus five equals one""',
)

# Finally, the participant finds the solution: ""four minus one which is five divided by five then times eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4-(5/5))*8=24"",
    resulting_state=(24,),
    comment='""four minus one which is five divided by five then times eight""',
)
```"
2519,"[2,3,6,7]",(3x7)+(6/2),143," Okay, so 2 times 3 is 6, plus 6 is 12, plus 7 would be 19. Or you could do 2 times 3 is 6, plus 6 is 12, plus 7. 2 times 6 is 12, plus 10, that's 22, nope. 2 times 7 is 14, plus 6, plus 3, only gets to 23, okay. 2 times 6 is 12, plus 10, that's 22, nope. 2 times 7 is 14, plus 6, plus 3, only gets to 23, okay. 2 times 7 times 3 would be 21. 3 times 6 is 18. Plus 7 would be 25, minus 2 would be 23. So again, 2 times 6 is 18, plus 7 is 18, minus 2 would be 23, so again, can't get there. 3 times 7 is 21, plus 6, minus 2 is 25, not there. 3 times 7 is 21, plus 6 divided by 2 would be 3, which is 24. 3, oops, parentheses, 3 times 7 plus parentheses, 6 divided by 2.","```python
start_state = (2, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 3 is 6, plus 6 is 12, plus 7 would be 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 6, 7),
    comment='""2 times 3 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6+7=19"",
    resulting_state=(19,),
    comment='""plus 6 is 12, plus 7 would be 19""',
)

# ""2 times 6 is 12, plus 10, that's 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(3, 7, 12),
    comment='""2 times 6 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+3+7=22"",
    resulting_state=(22,),
    comment='""plus 10, that\'s 22"" - participant combines 3 and 7 to make 10',
)

# ""2 times 7 is 14, plus 6, plus 3, only gets to 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 6, 14),
    comment='""2 times 7 is 14""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+6+3=23"",
    resulting_state=(23,),
    comment='""plus 6, plus 3, only gets to 23""',
)

# ""2 times 7 times 3 would be 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7*3=21"",
    resulting_state=(6, 21),
    comment='""2 times 7 times 3 would be 21""',
    result_calc_error=True,
)

# ""3 times 6 is 18. Plus 7 would be 25, minus 2 would be 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(2, 7, 18),
    comment='""3 times 6 is 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7-2=23"",
    resulting_state=(23,),
    comment='""Plus 7 would be 25, minus 2 would be 23""',
)

# ""3 times 7 is 21, plus 6, minus 2 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 6, 21),
    comment='""3 times 7 is 21""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+6-2=25"",
    resulting_state=(25,),
    comment='""plus 6, minus 2 is 25""',
)

# ""3 times 7 is 21, plus 6 divided by 2 would be 3, which is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 6, 21),
    comment='""3 times 7 is 21""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+(6/2)=24"",
    resulting_state=(24,),
    comment='""plus 6 divided by 2 would be 3, which is 24""',
)
```"
2520,"[5,8,9,11]",,180," Okay, 5, 8, 9, 11. 11 plus 9 is 20. That's too much to add the others. 9 times 8 is 72. Way too much. 5 times 8 is 40. Huh. 5 times 11 is 55. Minus... 9 minus 8 would be 38. Huh. 5 plus 8 is 13. Times 9 is 117. Divided by 11. It's like 11-ish. 5 times 8 is 40. Times 9. Divided by 11. Nope, that would be too high. 11 times 5. Divided by 17? Nope. 8 plus 11 is 19. Minus 9. Nope. 8 plus 11 is 19. Plus 9, minus 5? No. Plus 9, minus 5?","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 9 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(5, 8, 20),
    comment='""11 plus 9 is 20""',
)

# ""9 times 8 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(5, 11, 72),
    comment='""9 times 8 is 72""',
)

# ""5 times 8 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(9, 11, 40),
    comment='""5 times 8 is 40""',
)

# ""5 times 11 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*11=55"",
    resulting_state=(8, 9, 55),
    comment='""5 times 11 is 55""',
)

# ""Minus... 9 minus 8 would be 38"" seems to be subtracting from 55
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""55-(9-8)=38"",
    resulting_state=(38,),
    comment='""Minus... 9 minus 8 would be 38""',
    result_calc_error=True,
)

# ""5 plus 8 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(9, 11, 13),
    comment='""5 plus 8 is 13""',
)

# ""Times 9 is 117""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9=117"",
    resulting_state=(11, 117),
    comment='""Times 9 is 117""',
)

# ""Divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""117/11=11"",
    resulting_state=(11,),
    comment='""Divided by 11. It\'s like 11-ish""',
    result_calc_error=True,
)

# ""5 times 8 is 40. Times 9. Divided by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8*9/11=32.73"",
    resulting_state=(32.73,),
    comment='""5 times 8 is 40. Times 9. Divided by 11""',
)

# ""11 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(8, 9, 55),
    comment='""11 times 5""',
)

# ""8 plus 11 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(5, 9, 19),
    comment='""8 plus 11 is 19""',
)

# ""Minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19-9=10"",
    resulting_state=(5, 10),
    comment='""Minus 9""',
)

# ""8 plus 11 is 19. Plus 9, minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11+9-5=23"",
    resulting_state=(23,),
    comment='""8 plus 11 is 19. Plus 9, minus 5""',
)
```"
2521,"[8,9,12,12]",,180," Okay, 8 times 12 is 96, divided by 9. and divided by 12 times 12 is 144 no and divided by those 17 would be 8 plus 9 12 plus 9 would be 21 8 plus 12 is 20 nope 8 or 9 minus 8 is 1 it's plus 9 plus 12 no that would be too much 12 minus 9 would be 3 8 times 3 is 24 but then we have this 12 It doesn't work It'd be 12 minus 9 8 times 12, 2, 6, no 96 Mm-hmm, that doesn't make sense You","```python
start_state = (8, 9, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 12 is 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(9, 12, 96),
    comment='""8 times 12 is 96""',
)

# ""divided by 9"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/9=10.67"",
    resulting_state=(12, 10.67),
    comment='""divided by 9""',
)

# ""12 times 12 is 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(8, 9, 144),
    comment='""12 times 12 is 144""',
)

# ""8 plus 9"" trying addition instead
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(12, 12, 17),
    comment='""8 plus 9""',
)

# ""12 plus 9 would be 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 12, 21),
    comment='""12 plus 9 would be 21""',
)

# ""8 plus 12 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(9, 12, 20),
    comment='""8 plus 12 is 20""',
)

# ""9 minus 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 12, 12),
    comment='""9 minus 8 is 1""',
)

# ""12 minus 9 would be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 12),
    comment='""12 minus 9 would be 3""',
)

# ""8 times 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(12, 24),
    comment='""8 times 3 is 24""',
)

# ""but then we have this 12"" participant realizes this won't work because they still need to use the 12

# ""8 times 12"" participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(9, 12, 96),
    comment='""8 times 12""',
)
```"
2524,"[2,3,5,13]",,180," Okay, so we have 2, 3, 5, 13. 2 times 3 is 6. Times 5 is 30. Minus 13, no. 2 plus 5 is 7. Plus 3 is 10. Plus 13, nope, 23. Too low. 13 minus 2 is 11. Times 5 is 55. Nope. 2 times 5 is 10. Times 3 is 30. Nope. Too low. 2 times 5. Minus 2 is 3. 3 times 3 is 6. No, it's 9. So then it would be, nope, still not high enough. 3 times, no, 3 times 2 is definitely 6. 2, 6. Times 5 is 30. No. Times 5 is 30. No. Yeah, 3 times 3 is 9. Yeah, 3 times 3 is 9. Plus 13 is 22. Doesn't work. Plus 13 is 22. Doesn't work. Hmm. 3 times 5 is 15. 3 times 5 is 15. 3 times 5 is 15. Plus 2 plus 13 is 30. It's too high. Plus 2 plus 13 is 30. It's too high. 3 plus 13 is 16. 3 plus 13 is 16. 3 plus 13 is 16. If you multiply 2 by 5, that doesn't work. If you multiply 2 by 5, that doesn't work. 2 plus 3 is 5. 2 plus 3 is 5. 3 plus 3 is 5. No. 3 plus 3 is 5. 3 plus 3 is 5. 5 times 2 is 10. 5 times 2 is 10. 5 times 2 is 10. 10. Plus 3 is 13. Plus 3 is 13. Plus 13 is 26. Plus 13 is 26. That doesn't work. Why is this so hard? It's 13 plus 5 is 18.","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 3 is 6. Times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3*5=30"",
    resulting_state=(13, 30),
    comment='""2 times 3 is 6. Times 5 is 30""',
)

# ""2 plus 5 is 7. Plus 3 is 10. Plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+5+3+13=23"",
    resulting_state=(23,),
    comment='""2 plus 5 is 7. Plus 3 is 10. Plus 13""',
)

# ""13 minus 2 is 11. Times 5 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-2)*5=55"",
    resulting_state=(3, 55),
    comment='""13 minus 2 is 11. Times 5 is 55""',
)

# ""2 times 5 is 10. Times 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5*3=30"",
    resulting_state=(13, 30),
    comment='""2 times 5 is 10. Times 3 is 30""',
)

# ""3 times 3 is 9. Plus 13 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3+13=22"",
    resulting_state=(2, 5, 22),
    comment='""3 times 3 is 9. Plus 13 is 22""',
)

# ""3 times 5 is 15. Plus 2 plus 13 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5+2+13=30"",
    resulting_state=(30,),
    comment='""3 times 5 is 15. Plus 2 plus 13 is 30""',
)

# ""3 plus 13 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+13=16"",
    resulting_state=(2, 5, 16),
    comment='""3 plus 13 is 16""',
)

# ""2 plus 3 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3=5"",
    resulting_state=(5, 5, 13),
    comment='""2 plus 3 is 5""',
)

# ""5 times 2 is 10. Plus 3 is 13. Plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2+3+13=26"",
    resulting_state=(26,),
    comment='""5 times 2 is 10. Plus 3 is 13. Plus 13 is 26""',
)

# ""13 plus 5 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=18"",
    resulting_state=(2, 3, 18),
    comment='""13 plus 5 is 18""',
)
```"
2525,"[1,11,13,13]",,180," Okay, 1, 11, 13, 13. I'm not good at this. Okay, 1 plus 11 is 12. Nope, 13. Plus 13 is 26. Plus 1 is 27. Nope. 11 times 13 is 143. Doesn't help. 13 minus 11 is 2. Times 13 is 26. Last one. Nope. 13 times 13 is 169. Divided by 11. It's 15.3, but no. Hmm. 13 is 20. Oh! 13. Okay. Okay. Close one. Close 1 is 360. Close 2 is... What is that? Close 3 is 150. Close 5, 4 is 360. plus 13 that's too much, 26 11 times 2 is 22 that's too much 13 no","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 plus 11 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 13, 13),
    comment='""1 plus 11 is 12""',
)

# ""Plus 13 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(13, 25),
    comment='""Plus 13 is 26"" - participant made calculation error',
    result_calc_error=True
)

# ""11 times 13 is 143""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13=143"",
    resulting_state=(1, 13, 143),
    comment='""11 times 13 is 143""',
)

# ""13 minus 11 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 13),
    comment='""13 minus 11 is 2""',
)

# ""Times 13 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=26"",
    resulting_state=(1, 26),
    comment='""Times 13 is 26""',
)

# ""13 times 13 is 169""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(1, 11, 169),
    comment='""13 times 13 is 169""',
)

# ""Divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169/11=15.3"",
    resulting_state=(1, 15.3),
    result_calc_error=True,
    comment='""Divided by 11. It\'s 15.3""',
)
```"
2530,"[4,8,8,11]",,180," 8 divided by 4 is 2, 22, 11 plus 2 is 14. 8 divided by 4 is 2, 14, wait, 13 times 2, 8 divided by 4 times, oh wait, that doesn't make sense. 7 divided by 4 is 2, 23 times 8, 24-3-3-4-3 plus 8, and 4 times 8-4, so 2-3-3-4-3-3. twenty, twenty-one, twenty-two, twenty-three, eleven times eight, and divided by four, all that plus eight, oh, what, I use all the numbers, I don't get it, oh, incorrect answer, okay.","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 4 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 8, 11),
    comment='""8 divided by 4 is 2""',
)

# ""11 plus 2 is 14"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+2=14"",
    resulting_state=(8, 14),
    comment='""11 plus 2 is 14"" - calculation error',
    result_calc_error=True,
)

# Return to start state for final operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8/4=22"",
    resulting_state=(8, 22),
    comment='""eleven times eight, and divided by four""',
)
```"
2532,"[4,4,5,10]",4-4x(5-10),25," 4, 4, 5, and 10. So 4 times 4 is 12. So, wait, 4 minus 4, that's 1, times 5 minus 10, that's 5.","```python
start_state = (4, 4, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 12"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=12"",
    resulting_state=(5, 10, 12),
    comment='""4 times 4 is 12"" - calculation error',
    result_calc_error=True
)

# ""4 minus 4, that's 1"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4-4=1"",
    resulting_state=(1, 5, 10),
    comment='""4 minus 4, that\'s 1"" - calculation error',
    result_calc_error=True
)

# ""times 5 minus 10, that's 5"" - participant seems to be computing 4-4*(5-10)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-4*(5-10)=24"",
    resulting_state=(24,),
    comment='""times 5 minus 10, that\'s 5"" - participant seems to be computing 4-4*(5-10)',
)
```"
2538,"[3,3,9,11]",(9/3)x(11-3),44," Target number is 24. We have 3, 3, 9, 11. I feel like we're going to get 8 times 3 from this somehow, so we have 9 divided by 3 is 3. To get 8, we have 11 minus 3, which is 8. So, 9 divided by 3 times the quantity 11 minus 3.","```python
start_state = (3, 3, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I feel like we're going to get 8 times 3 from this somehow"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I feel like we\'re going to get 8 times 3 from this somehow""',
)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 3, 11),
    comment='""9 divided by 3 is 3""',
)

# ""To get 8, we have 11 minus 3, which is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(3, 8),
    comment='""To get 8, we have 11 minus 3, which is 8""',
)

# Then the participant has achieved their subgoal of getting 3 and 8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment=""The participant has achieved their subgoal of getting 3 and 8"",
)
```"
2539,"[1,8,9,12]",(12-9)x(8x1),55," Target number 21 again. I think this is going to be another 8 times 3 variant. So 1, 8, 9, and 12. How do we get 3 and 8? 12 minus 9 is 3. So 12 minus 9 and then times 8. Oops. Times 8 times 1. We forgot to use the other one.","```python
start_state = (1, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I think this is going to be another 8 times 3 variant"" suggests they are setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I think this is going to be another 8 times 3 variant""'
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(1, 3, 8),
    comment='""12 minus 9 is 3""'
)

# ""So 12 minus 9 and then times 8"" participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(1, 24),
    comment='""So 12 minus 9 and then times 8""'
)

# ""Times 8 times 1"" participant realizes they need to use the 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1=24"",
    resulting_state=(24,),
    comment='""Times 8 times 1""'
)

```"
2542,"[1,5,7,11]",(1+5)x(11-7),60," Target number 24 again. This time though we have 1, 5, 7, 1, 5, 7, and 11. Let's see, so how do those combine to make 24? We've got 5 plus 1 is 6. To make 24 we need to get 6, 12, 18, 24, 4. And we can do that by subtracting 11 minus 7. So quantity 1 plus, oops, 1 plus 5 times 11 minus 7, close parenthesis.","```python
start_state = (1, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 7, 11),
    comment='""5 plus 1 is 6""',
)

# ""To make 24 we need to get 6, 12, 18, 24, 4"" - participant is setting a subgoal, they need to multiply their 6 by 4
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""To make 24 we need to get 6, 12, 18, 24, 4"" - participant realizes they need to multiply 6 by 4',
)

# ""And we can do that by subtracting 11 minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(1, 4, 5),
    comment='""And we can do that by subtracting 11 minus 7""',
)

# Finally, the participant combines these operations: (1+5)*(11-7)
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+5)*(11-7)=24"",
    resulting_state=(24,),
    comment='The participant combines the operations to get ""(1+5)*(11-7)""',
)
```"
2543,"[2,4,6,9]",(2x4)x(9-6),38," Target number 24 again. We've got 2, 4, 6, 9. So 2 times 4 is 8. And then we need to get 8, 16, 24 for 8. So we need to multiply that by 3 somehow. 9 minus 6 is 3, so we'll multiply by the quantity 9 minus 6.","```python
start_state = (2, 4, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(6, 8, 9),
    comment='""2 times 4 is 8""',
)

# ""And then we need to get 8, 16, 24 for 8"" suggests they are setting a subgoal to multiply by 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""And then we need to get 8, 16, 24 for 8"" suggests they need to multiply by 3',
)

# ""9 minus 6 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 8),
    comment='""9 minus 6 is 3""',
)

# ""so we'll multiply by the quantity 9 minus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""so we\'ll multiply by the quantity 9 minus 6""',
)
```"
2545,"[6,6,11,12]",((6/6)+11)+12,50," Okay, we've got another target number 24 with 6, 6, 11, and 12. I know that 12 and 12 is 24, and we've got two 12s there, but that extra 11 makes it weird. But if we divide 6 by 6, we get 1. 1 plus 11 is 12, and then we overall have 12 plus 12. So let's do parenthesis 6 divided by 6 to get 1, close parenthesis, plus 11, close, and then plus that extra 12. 12 plus 12. Thank you for watching.","```python
start_state = (6, 6, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I know that 12 and 12 is 24"" - participant seems to be setting a subgoal of getting another 12
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""I know that 12 and 12 is 24""',
)

# ""if we divide 6 by 6, we get 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/6=1"",
    resulting_state=(1, 11, 12),
    comment='""if we divide 6 by 6, we get 1""',
)

# ""1 plus 11 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 12),
    comment='""1 plus 11 is 12""',
)

# ""and then we overall have 12 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(24,),
    comment='""and then we overall have 12 plus 12""',
)

```"
2548,"[1,8,10,12]",12x((10-8)x1),149," If I do 10 plus, so it's 22, that's 30, okay, 30, 18, 18, 18, 18, 10, 80, 80, divided by 12, no, that's not. No, for sure not. What about 12 plus 8 is 20, no. Gosh, I don't have any thoughts. Divided by, no. Okay. 10 divided by 1 plus, no. I don't know. I really have no idea. I'm really not good at math. Is there a way to make those numbers? No. Wait, oh my god, yes. Oh my goodness. Am I an idiot? Don't answer that. So 8 plus, or, not 8, 10 minus 8 times 1 divided. Alright. Do I have to write the X? Ten minus, oh, wait. Double parentheses. times 1 equals 24. What? How is this on... How is this... Hmm? Oh, I did an extra...","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I do 10 plus, so it's 22"" seems to be adding 10+12
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(1, 8, 22),
    comment='""If I do 10 plus, so it\'s 22"" seems to be adding 10+12',
)

# ""that's 30"" seems to add 8 to 22
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+8=30"",
    resulting_state=(1, 30),
    comment='""that\'s 30"" seems to add 8 to 22',
)

# Several mentions of ""18"" but unclear what operations led there

# ""80"" might be 10*8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(1, 12, 80),
    comment='""80"" might be 10*8',
)

# ""divided by 12, no""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80/12=6.67"",
    resulting_state=(1, 6.67),
    comment='""divided by 12, no""',
)

# ""12 plus 8 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(1, 10, 20),
    comment='""12 plus 8 is 20""',
)

# ""10 minus 8 times 1"" participant finds part of the solution
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(1, 2, 12),
    comment='""10 minus 8""',
)

# Then multiply by 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*1=2"",
    resulting_state=(2, 12),
    comment='""times 1""',
)

# Finally multiply by 12 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment=""Based on final answer submitted"",
)
```"
2549,"[2,8,10,12]",((8/2)+10)+12,180," This is almost the same as before. I could do... I could do 8 plus... No, that's not it. I could do... Let me see. If I did 8... Okay, 10. 10 minus 8 is 2. 2. That leaves me with an extra... What about 8? Okay, so 8 times 3 is 24. There's nothing here that I could get down to 3, is there? Okay. Um... 8 plus 2 is 10. 10 plus 10 is 20. No. 10 plus 12 is 22. 10 plus 12 is 22. Um... 10 plus 12 minus... Okay. Plus 2 is 24. But then there's still... Okay. Plus 2 is 24. But then there's still... But then there's still that 8. So how do I work with that 8? Um... 10... Okay. 8 plus 2... No. Okay, so that's 22. Okay. 8 times 2 is 16. Okay. 8 times 2 is 16. Plus 10 is 26. Plus 10 is 26... Ah, 12. 26... Ah... 20... Ah... Okay. Okay, 10 times... 10 times... Thank you. Thank you. Thank you. Thank you. Thank you. Um... Thank you. I have no idea. I have no idea. I feel like it should be easy, but it's not so easy. I want 12 plus 10, 22. OK. I want to do 8 divided by 2 to get that 4. I don't know why. And then 4, 4 plus 10 plus 12, no, because that's 4, 14, wait, 8 divided by 2, 4, 4 plus 10, 10.","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 2, 12),
    comment='""10 minus 8 is 2""',
)

# ""8 times 3 is 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""8 plus 2 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+2=10"",
    resulting_state=(10, 10, 12),
    comment='""8 plus 2 is 10""',
)

# ""10 plus 10 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(12, 20),
    comment='""10 plus 10 is 20""',
)

# ""10 plus 12 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(2, 8, 22),
    comment='""10 plus 12 is 22""',
)

# ""Plus 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+2=24"",
    resulting_state=(8, 24),
    comment='""Plus 2 is 24""',
)

# ""8 times 2 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(10, 12, 16),
    comment='""8 times 2 is 16""',
)

# ""Plus 10 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+10=26"",
    resulting_state=(12, 26),
    comment='""Plus 10 is 26""',
)

# ""12 plus 10, 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10=22"",
    resulting_state=(2, 8, 22),
    comment='""12 plus 10, 22""',
)

# ""8 divided by 2 to get that 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/2=4"",
    resulting_state=(4, 10, 12),
    comment='""8 divided by 2 to get that 4""',
)

# ""4 plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+10=14"",
    resulting_state=(12, 14),
    comment='""4 plus 10""',
)

```"
2551,"[1,8,8,12]",((12-1)-8)x8,92," Okay, 8 times 8, 8 times 8 is 64, 64 divided by 12 is 5.3. Okay, 8 plus 8, no, 8 times 12, 8 times 12 is 96, um, and then, no, that doesn't work either. 8, that's 20, 8, 12, minus 1, times 8 is 88, no, 8 times 7 is 56, minus 12, no. 8, um, if I do 11 minus 8, oh, okay, so, 12 minus 1, um, 11 minus 8, times 8.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(1, 12, 64),
    comment='""8 times 8 is 64""',
)

# ""64 divided by 12 is 5.3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/12=5.3"",
    resulting_state=(1, 5.33),
    comment='""64 divided by 12 is 5.3""',
)

# ""8 times 12 is 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(1, 8, 96),
    comment='""8 times 12 is 96""',
)

# ""12 minus 1, times 8 is 88"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-1)*8=88"",
    resulting_state=(8, 88),
    comment='""12 minus 1, times 8 is 88""',
    result_calc_error=True,
)

# ""12 minus 1, um, 11 minus 8, times 8"" - this is their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((12-1)-8)*8=24"",
    resulting_state=(24,),
    comment='""12 minus 1, um, 11 minus 8, times 8"" - this is their final answer',
)
```"
2553,"[1,7,10,13]",(7+1)x(13-10),97," 70 divided by 30, no, 13, definitely not a, um, what's 7 times 13? 7 times 13 is 91, 91 minus, no, okay, 70, no, that's not it. Okay, um, 130 divided by 7 is 18, no, okay. Um, so that's 13. So the 13 and the 1, that makes 14. 14, but I feel like it's not, it's definitely not that simple because there's still that 7. Okay, so 7 plus... 10 is 17, and that's 30, no, 7 plus 1 is 8. Oh, okay, um, 7 plus 1 is 8, and then times 13 minus 10.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""what's 7 times 13?""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13=91"",
    resulting_state=(1, 10, 91),
    comment='""what\'s 7 times 13? 7 times 13 is 91""',
)

# ""130 divided by 7 is 18"" - participant likely meant 13 not 130
new_state = graph.explore_operation(
    curr_state,
    operation=""13/7=18"",
    resulting_state=(1, 10, 18),
    comment='""130 divided by 7 is 18"" - participant likely meant 13 not 130',
    result_calc_error=True,
)

# ""13 and the 1, that makes 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(7, 10, 14),
    comment='""13 and the 1, that makes 14""',
)

# ""7 plus... 10 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(1, 13, 17),
    comment='""7 plus... 10 is 17""',
)

# ""7 plus 1 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(8, 10, 13),
    comment='""7 plus 1 is 8""',
)

# ""and then times 13 minus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(13-10)=24"",
    resulting_state=(24,),
    comment='""and then times 13 minus 10""',
)
```"
2558,"[1,11,11,12]",,180," Okay, 1, 11, 11, and 12. So, again, the obvious thing is to do... Oh, okay, so 12 times 2, again, would get us to 24. So, or, let's see, 11 plus 1 is 12, but then I have an extra 11. Hmm. Ugh, I could do 11 times 1 would give me 11, but then I have to add the 1 back in. 11 plus 1. 12 plus 1 is 12. What do I do with the other 11? Or do I say 12 minus 1 is 11? Yeah, how do you do this? Um, let's see, 11 and 1 is 12. Ugh, 12 minus 11 is 1. That still doesn't get me to... Okay, 12 minus 11 is 1, 11, is there anything I can do to say 11? There's no equals. Oh, god. Um, 1, 11, minus 1 is 10. Okay, so 11 minus 11 is 1. Okay, so 11 minus 11 is 1. That doesn't do anything for me, does it? Oh, it's almost there, it's almost there. 11 minus 1 is 10. 11 plus 1 is 12. That extra 11 is just killing me. Um, 11 minus 1 is 10. 12, no, I'd have to add the 1 back in. Man, I need like two, I need another 1 to make this work. Um, I just don't know what to do with this, I just don't know, let's see, I wish I could scramble the numbers, because those two 11s in the middle are screwing with me. Um, 11 minus 1 is 10, 10, plus 11 is 22. Ugh. And then there's a 12, for no reason. 12 minus 1 is 11, plus 11 is 22. Again, that stupid 22 number. 11 minus 1 is 10, 11 plus 1 is 13.","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2, again, would get us to 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2, again, would get us to 24""',
)

# ""11 plus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(11, 12, 12),
    comment='""11 plus 1 is 12""',
)

# ""11 times 1 would give me 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*1=11"",
    resulting_state=(11, 11, 12),
    comment='""11 times 1 would give me 11""',
)

# ""12 minus 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(11, 11, 11),
    comment='""12 minus 1 is 11""',
)

# ""12 minus 11 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 11),
    comment='""12 minus 11 is 1""',
)

# ""11 minus 1 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(10, 11, 12),
    comment='""11 minus 1 is 10""',
)

# ""11 minus 11 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-11=0"",
    resulting_state=(0, 1, 12),
    comment='""11 minus 11 is 1"" - participant made calculation error',
    result_calc_error=True,
)

# ""11 minus 1 is 10... plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1+11=21"",
    resulting_state=(12, 21),
    comment='""11 minus 1 is 10... plus 11 is 22"" - participant made calculation error',
    result_calc_error=True,
)

# ""12 minus 1 is 11, plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1+11=22"",
    resulting_state=(11, 22),
    comment='""12 minus 1 is 11, plus 11 is 22""',
)

# ""11 minus 1 is 10, 11 plus 1 is 13"" - participant made calculation error on second part
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=13"",
    resulting_state=(11, 12, 13),
    comment='""11 plus 1 is 13"" - participant made calculation error',
    result_calc_error=True,
)
```"
2562,"[2,3,7,10]",(10x2)+(7-3),109," Okay, so 2, what do we do here? 7, what do I do with that 7? Oh, there it is. 7 minus 3 is 4. Wait. I almost had it for a second there, and then the numbers went all weird on me. It's like this math. It's too much math for my brain in a row. Okay, I almost had it. So 4, but 10, what does 10 have to do with 2? Oh, 4, 8. No, that's the wrong thing. 2 times 3 is 6. No, but then 10 minus 7 is 6. 7 reduces to 3. So again, we've only got, we're like a digit off. Okay. 2 times 7 is 14. 10 plus 3, nope, we need a 1. Still, it comes down to 1. 3 plus 7 is 10, 20, and that's 22. 10 times 2 is 20. Ah, there it is. 10 times 2 is 20, plus 7 minus 3. Okay, 10 times 2 is 20. 10 times 2 minus 3, I mean 20 is definitely going to be 10. 10 times 2 is 20. 10 times 2 is 20. Wait. Yeah, 7. Yeah, okay. So all the... Ah, my brain is starting to get fried after all this math in a row. Okay. 10 times 2 is 20. 7 minus 3 is 4. 20 plus plus four is 24. I am right.","```python
start_state = (2, 3, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(2, 4, 10),
    comment='""7 minus 3 is 4""',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 7, 10),
    comment='""2 times 3 is 6""',
)

# ""10 minus 7 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=6"",
    resulting_state=(2, 3, 6),
    comment='""10 minus 7 is 6"" - calculation error',
    result_calc_error=True,
)

# ""2 times 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 10, 14),
    comment='""2 times 7 is 14""',
)

# ""3 plus 7 is 10, 20"" participant adds numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7=10"",
    resulting_state=(2, 10, 10),
    comment='""3 plus 7 is 10""',
)

# ""10 times 2 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 7, 20),
    comment='""10 times 2 is 20""',
)

# Then the participant seems to have found their solution path
# They compute ""7 minus 3 is 4"" again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(2, 4, 10),
    comment='""7 minus 3 is 4""',
)

# And ""10 times 2 is 20"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 7, 20),
    comment='""10 times 2 is 20""',
)

# Finally they combine both operations into one
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*2)+(7-3)=24"",
    resulting_state=(24,),
    comment='""20 plus four is 24""',
)
```"
2567,"[2,6,8,13]",(13x6,196," target 24, 13, okay 13 minus 8 equals 13 minus 8 is 5 5 minus 5 times 5 times 6 is 30 8 times 6 is 13 minus 2 equals 11 times 8 8 times 13 divided by 6 divided by 6 divided by 6 minus 2 That's the fifth answer. I'm not all numbers are used, it's used. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. I delete. 6 6 times 3 is 18 6 times 1 is 6 plus 13 73 minus 16 8 times 2 is 16 73 minus 16 7 times 2 is 16 7 times 3 is 16 7 times 2 is 16","```python
start_state = (2, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 8 equals... 13 minus 8 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(2, 5, 6),
    comment='""13 minus 8 equals... 13 minus 8 is 5""',
)

# ""5 times 6 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(2, 30),
    comment='""5 times 6 is 30""',
)

# ""8 times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(2, 13, 48),
    comment='""8 times 6""',
)

# ""13 minus 2 equals 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(6, 8, 11),
    comment='""13 minus 2 equals 11""',
)

# ""times 8"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(6, 88),
    comment='""times 8""',
)

# ""8 times 13 divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*13/6=17.33"",
    resulting_state=(2, 17.33),
    comment='""8 times 13 divided by 6""',
)

# A lot of ""I delete"" suggesting participant is erasing work

# ""8 times 2 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(6, 13, 16),
    comment='""8 times 2 is 16""',
)

# The participant submitted ""(13x6"" suggesting they were trying to multiply 13 and 6 but ran out of time
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(2, 8, 78),
    comment='The participant submitted ""(13x6"" suggesting they were trying this operation',
)
```"
2568,"[1,6,8,13]",8x(6-13,180," Thirteen times six is seventy-three. Thirteen plus eight is twenty-one. Eight times six is forty-eight minus twenty-four. Eight. Eight. Times six. Tilit-tilit. Eight. Divided by six. Six. Plus. Thirteen. Ang hirap naman ito. Times 6 divided by 8. 8 times 1 equals... Wala, hindi ko magawa. Okay. Napapagod. Nagun lang ako mag-isip. Dalawa lang naging tama ako. 8 times 1 is 8. 6 minus 13. Wala. Tanturi wate. Tanturi naman ka. Tantsuri kata. Wala.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Thirteen times six is seventy-three"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=73"",
    resulting_state=(1, 8, 73),
    comment='""Thirteen times six is seventy-three""',
    result_calc_error=True,
)

# ""Thirteen plus eight is twenty-one""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(1, 6, 21),
    comment='""Thirteen plus eight is twenty-one""',
)

# ""Eight times six is forty-eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(1, 13, 48),
    comment='""Eight times six is forty-eight""',
)

# ""Eight. Times six."" participant tries the same operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(1, 13, 48),
    comment='""Eight. Times six.""',
)

# ""Eight. Divided by six.""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/6=1.33"",
    resulting_state=(1, 1.33, 13),
    comment='""Eight. Divided by six.""',
)

# ""Times 6 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/8=0.75"",
    resulting_state=(0.75, 1, 13),
    comment='""Times 6 divided by 8""',
)

# ""8 times 1 equals...""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*1=8"",
    resulting_state=(6, 8, 13),
    comment='""8 times 1 equals...""',
)

# ""6 minus 13"" - this matches their final response of ""8x(6-13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-13=-7"",
    resulting_state=(-7, 1, 8),
    comment='""6 minus 13""',
)

# The rest appears to be expressions of frustration in another language

```"
2570,"[3,7,7,9]",(7x3,180, 7 times 7 is 49 divided by 3 divided by 9 plus 3. Let's see. 9 plus 3. Incorrect answer all numbers and keys. 9 9 9 divided by 3 7 times 7 is 49 divided by 9 minus 7 is 2. I need 222. 7 times 3 is 6. 7 plus 7 is 14. 7 plus 7 is 14. 7 plus 9 is 16. 24 minus 16 is 8. 7 minus 5 is 7. 9. Incorrect answer. 9. 9 plus 7. 9 plus 14. 16 plus 19. 9 plus 7 plus 7. 7. 9 plus 7 plus 7 is 14. 23. 24. 9.,"```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7 is 49""',
)

# ""divided by 3 divided by 9 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/9=5.44"",
    resulting_state=(3, 5.44),
    comment='""divided by 9""',
)

# ""9 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 7, 7),
    comment='""9 divided by 3""',
)

# ""7 times 3 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=6"",
    resulting_state=(6, 7, 9),
    comment='""7 times 3 is 6"" - calculation error',
    result_calc_error=True,
)

# ""7 plus 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(3, 9, 14),
    comment='""7 plus 7 is 14""',
)

# ""7 plus 9 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(3, 7, 16),
    comment='""7 plus 9 is 16""',
)

# ""9 plus 7 plus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+7=23"",
    resulting_state=(3, 23),
    comment='""9 plus 7 plus 7 is 23""',
)

# The participant submitted ""(7x3"" which suggests they were trying to multiply 7 and 3 but ran out of time
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(7, 9, 21),
    comment=""Based on submitted response (7x3"",
)
```"
2571,"[7,9,13,13]",(13+13)+(7-9),47, 13 plus 13 is 26. 26 plus 7 is 13. 13 plus 13 is 26 plus 9. 14 plus 9 is 9. I'm wrong. 10 plus 7 is minus 9.,"```python
start_state = (7, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(7, 9, 26),
    comment='""13 plus 13 is 26""',
)

# ""26 plus 7 is 13"" - this is a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+7=13"",
    resulting_state=(9, 13),
    comment='""26 plus 7 is 13"" - calculation error',
    result_calc_error=True,
)

# ""13 plus 13 is 26 plus 9"" - participant starts over
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13+9=35"",
    resulting_state=(7, 35),
    comment='""13 plus 13 is 26 plus 9""',
)

# ""14 plus 9 is 9"" seems to be a transcription error or calculation error

# ""10 plus 7 is minus 9"" seems to be the participant finding their solution
# Based on their submitted answer (13+13)+(7-9), they found that adding 7-9 to 26 gives 24
curr_state = graph.move_to_node((7, 9, 26))
new_state = graph.explore_operation(
    curr_state,
    operation=""26+(7-9)=24"",
    resulting_state=(24,),
    comment='Based on submitted answer ""(13+13)+(7-9)"", participant adds 7-9 to 26 to get 24',
)
```"
2576,"[1,5,6,11]",,180," Uh, oh good, okay, eleven, and six is seventeen, twenty-two, twenty-three, five plus six is thirty, nope, thirty minus eleven, nope, eleven plus eleven, nope, uh, five and six is eleven, okay, nope, twelve, no, No. 11 minus 6 is 5. Nope. 11 minus 5. 11 minus 5. I really don't know. What is 11 minus 5? Oh, 6. Nope. Nope. 11 plus 5 is 16. Plus 16 and 6 is 22. That's 23. 11 plus 6 is 17. No. 17 plus 5 is 22. 23. Gosh. 11, 22. No. Okay. 6 times 5 is 16. 22. 11 minus 5. Oh, liquid. 11 minus 6. Mm-mm-mm-mm-mm. 11. Okay. 10. Plus 6. 16. Oh, that's 5. 10. Uh, 11 minus 1 is 10. Um, 10 plus, 10 plus 10. You're still not right. 11 divided by, nope. 6 times 5 is, oh, 6 times 5. Don't we need, yeah, wait. 6 times 5. Don't we need, yeah, wait. 6 times 5. Yeah, 6 times 5 is 30. No. Uh, one time, one, uh, 6, 7, 7, uh, 18. Oh, Lord. What is I, 7? 7. 7 plus 16 is 23. 11, 12, 12. . .","```python
start_state = (1, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""eleven, and six is seventeen""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(1, 5, 17),
    comment='""eleven, and six is seventeen""',
)

# ""five plus six is thirty"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=30"",
    resulting_state=(1, 11, 30),
    comment='""five plus six is thirty""',
    result_calc_error=True,
)

# ""five and six is eleven""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(1, 11, 11),
    comment='""five and six is eleven""',
)

# ""11 minus 6 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(1, 5, 5),
    comment='""11 minus 6 is 5""',
)

# ""11 minus 5... Oh, 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(1, 6, 6),
    comment='""11 minus 5... Oh, 6""',
)

# ""11 plus 5 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(1, 6, 16),
    comment='""11 plus 5 is 16""',
)

# ""Plus 16 and 6 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(1, 22),
    comment='""Plus 16 and 6 is 22""',
)

# ""11 plus 6 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(1, 5, 17),
    comment='""11 plus 6 is 17""',
)

# ""17 plus 5 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+5=22"",
    resulting_state=(1, 22),
    comment='""17 plus 5 is 22""',
)

# ""6 times 5 is 16"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=16"",
    resulting_state=(1, 11, 16),
    comment='""6 times 5 is 16""',
    result_calc_error=True,
)

# ""11 minus 1 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(5, 6, 10),
    comment='""11 minus 1 is 10""',
)

# ""6 times 5 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 11, 30),
    comment='""6 times 5 is 30""',
)

# The rest of the transcript contains fragments and unclear operations
```"
2578,"[2,4,6,13]",13x2+4-6,106," My numbers. 13 plus 6 is 19. 20, 21. 2 times 4 is 8. 8 plus 13 is 21. No. Okay, 13 times 2 is 26. That's 4. 13 times 2 is 26. No. 13 times 2 is 26. No. Okay, 13 and 6 is 19. 2 times 6 is 12. 6 times 4 is 8. 8 plus 6 is 12. And it's going to be 25. 25. 13 minus 6 is, what is it, 7? 10. 2, okay. 6, okay. All right, hang on. 10 times 2, that's 26. It's 26. Plus 4. 28 minus 6? No.","```python
start_state = (2, 4, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 6 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(2, 4, 19),
    comment='""13 plus 6 is 19""',
)

# ""2 times 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(6, 8, 13),
    comment='""2 times 4 is 8""',
)

# ""8 plus 13 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+13=21"",
    resulting_state=(6, 21),
    comment='""8 plus 13 is 21""',
)

# ""13 times 2 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(4, 6, 26),
    comment='""13 times 2 is 26""',
)

# ""13 and 6 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(2, 4, 19),
    comment='""13 and 6 is 19""',
)

# ""2 times 6 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(4, 12, 13),
    comment='""2 times 6 is 12""',
)

# ""6 times 4 is 8"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=8"",
    resulting_state=(2, 8, 13),
    comment='""6 times 4 is 8"" - calculation error',
    result_calc_error=True,
)

# ""13 minus 6 is, what is it, 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(2, 4, 7),
    comment='""13 minus 6 is, what is it, 7""',
)

# The participant then tries 13*2=26, +4, -6 to get 24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(4, 6, 26),
    comment='""10 times 2, that\'s 26"" - participant actually uses 13*2',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+4-6=24"",
    resulting_state=(24,),
    comment='""Plus 4. 28 minus 6""',
)
```"
2581,"[3,5,12,12]",12,180," Little, little difficult. I don't know how to go about it. Five times 12, that is 16. I don't know how I'm going to do this. Thinking, thinking out loud. It's difficult, difficult, difficult. This is difficult, this is difficult, very difficult. Think, thinking out loud. Six. Seven. Eight. Nine. Ten. 11. 12. 13. 16. 17. 20. 21. 22. 23. 24. 25. 29. 30. 32. 34. 36. 37. 38.","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Five times 12, that is 16"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*12=16"",
    resulting_state=(3, 12, 16),
    comment='""Five times 12, that is 16"" - participant makes a calculation error',
    result_calc_error=True,
)

# The rest of the transcript appears to be the participant counting numbers out loud
# without performing any specific operations on the starting numbers.
# The participant submitted just ""12"" as their response, which is not a valid solution.

```"
2582,"[1,6,12,13]",,180," A little difficult, a little difficult, I can't comprehend this, I can't comprehend this. 6 plus 13. No, no, no, no. 7 plus 13. 12 divided by 12, 12 divided by 12 is 12. 7 plus 13. I can't comprehend this, I can't comprehend this. 8 plus 13. It's difficult, it's difficult, it's difficult, I don't know, I don't know how to treat this. 9 plus 13. 9 plus 13. 9 plus 13. 9 plus 13. One plus six, that is seven. I don't know, I don't understand this, I don't know, I don't know, I don't know, I don't know, I don't comprehend this. I don't know, I don't know, I don't know... I don't know how to do this, I can't comprehend how to do this. Oh, six times one, six times one, six times one.","```python
start_state = (1, 6, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(1, 12, 19),
    comment='""6 plus 13""',
)

# ""12 divided by 12 is 12"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=12"",
    resulting_state=(1, 6, 12, 13),
    comment='""12 divided by 12 is 12"" seems to be a calculation error',
    result_calc_error=True,
)

# ""One plus six, that is seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(7, 12, 13),
    comment='""One plus six, that is seven""',
)

# ""six times one""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1=6"",
    resulting_state=(6, 12, 13),
    comment='""six times one""',
)

```"
2592,"[3,3,6,13]",(13-6)x3+3,129," Okay. So 13 times 3 is 39. No. Times 6 is 78. If you divide 78 by 3, you get 2. You get 28. 26. Nope. 13 is the hard one here. 13 times 3 is 39. Minus 9. Nope. Let's see. 18 is 78. Nope. 9 times 3 is 27. Nope. Boy. Okay. So 6 times 3. What's 9 times 6? 54. Divide by 13. Nope. No. Darn it. 18. 12.","```python
start_state = (3, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 3 is 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 6, 39),
    comment='""13 times 3 is 39""',
)

# ""Times 6 is 78"" - participant seems to be multiplying 13*6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(3, 3, 78),
    comment='""Times 6 is 78""',
)

# ""If you divide 78 by 3, you get 2. You get 28. 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""78/3=26"",
    resulting_state=(3, 26),
    comment='""If you divide 78 by 3, you get... 26""',
)

# ""13 times 3 is 39. Minus 9"" - participant seems to be using the 3*3=9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 13, 9),
    comment='""13 times 3 is 39. Minus 9"" - first computing 3*3=9',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39-9=30"",
    resulting_state=(6, 30),
    comment='""13 times 3 is 39. Minus 9"" - then subtracting from 39',
)

# ""6 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 13, 18),
    comment='""6 times 3""',
)

# ""What's 9 times 6? 54"" - first computing 3*3=9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 13, 9),
    comment='""What\'s 9 times 6? 54"" - first computing 3*3=9',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(13, 54),
    comment='""What\'s 9 times 6? 54"" - then multiplying by 6',
)

# ""Divide by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54/13=4.15"",
    resulting_state=(4.15,),
    comment='""Divide by 13""',
)

# Based on their submitted response (13-6)x3+3, they must have eventually tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(3, 3, 7),
    comment=""Based on submitted response, participant computed 13-6"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+3=24"",
    resulting_state=(24,),
    comment=""Based on submitted response, participant computed (13-6)*3+3"",
)
```"
2593,"[5,9,10,11]",,180," So, if you add all these together, you get 15, 24, 14, 10, 9 times 5 is 45. This is a lot harder than I thought it would be. 19, 20. The first 3 numbers total up to 24, but then you've got the 11 to deal with. 26, nope. 21, 30, nope. That gives you 25. Boy, oh boy, this is tough. 11 times 9 is 99. No, that doesn't help me at all. Minus 5, no, okay. 90, no. Oof, this is tough. 20...no, that's 25 still...9 plus 5 is 14. 10 is 24. 11 is a problem. 11 times 9 is 95. plus five is fourteen, plus ten is twenty-four. Eleven is a problem. Will we ever know why the hole has numbers like that? eleven times nine is ninety-nine. three hundred plus 19 is fourteen, minus ten is eighty-nine. Yeah, it doesn't help us. Minus 5 is 94. It doesn't help us. OK, 9 times 5 is 45. 9 times 5 is 90. So do we need to divide something? So 50 times 9 is 450 divided by 11. It doesn't get me anywhere. Wait, 9 times 11 is 99. No, 9 times 5 is. Oh, gosh, this is tough. 10 times 5 is 50 minus, no, 19, or minus 20 is 30, no. Gosh, I feel like I'm going to run out of time on this one. 9 minus 5 is 4, 14, 25.","```python
start_state = (5, 9, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if you add all these together"" - participant seems to be adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9+10+11=35"",
    resulting_state=(35,),
    comment='""if you add all these together""',
)

# ""9 times 5 is 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(10, 11, 45),
    comment='""9 times 5 is 45""',
)

# ""The first 3 numbers total up to 24"" - participant is adding 5+9+10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9+10=24"",
    resulting_state=(11, 24),
    comment='""The first 3 numbers total up to 24""',
)

# ""11 times 9 is 99""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*9=99"",
    resulting_state=(5, 10, 99),
    comment='""11 times 9 is 99""',
)

# ""9 plus 5 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(10, 11, 14),
    comment='""9 plus 5 is 14""',
)

# ""plus ten is twenty-four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(11, 24),
    comment='""plus ten is twenty-four""',
)

# ""eleven times nine is ninety-nine"" - participant tries this calculation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*9=99"",
    resulting_state=(5, 10, 99),
    comment='""eleven times nine is ninety-nine""',
)

# ""Minus 5 is 94""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""99-5=94"",
    resulting_state=(10, 94),
    comment='""Minus 5 is 94""',
)

# ""9 times 5 is 45"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(10, 11, 45),
    comment='""9 times 5 is 45""',
)

# ""9 times 5 is 90"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=90"",
    resulting_state=(10, 11, 90),
    comment='""9 times 5 is 90""',
    result_calc_error=True,
)

# ""10 times 5 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(9, 11, 50),
    comment='""10 times 5 is 50""',
)

# ""9 minus 5 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 10, 11),
    comment='""9 minus 5 is 4""',
)
```"
2595,"[8,9,9,12]",,180," 12 times 8 is 96 divided by 9. Doesn't work. Divided by 18 doesn't work. 12 minus 8 is 4, times 9 is 36. No, that doesn't help. 12 times 9 is 108. Divided by 9 is 12, so plus 10 is still 20. 18 plus 8 is 36. Wait, no, it's 26. Never mind. If I could just get 9, 9, and 8 to somehow equal to 2 and then multiply that by 12. 17 minus 9 is 8. 12 minus 9 is 3, times 8 is 24. What do you do with a 9? 9, oh, no. Gosh, I thought I was good at math, and I am not, apparently. Okay, 9 plus 12 is 21. 9 plus 8 is 17. If I could add the 9 and, no, take away the 9, that doesn't work. 17, 26, 38, 21, 30, no. 30 minus 8 is 22. 29 minus 9 is 20. 20. 8 times 9 is 56, which you can't divide by 12. 9 times 9 is 81, not divisible by 12 either. 9 minus 9 is 0, plus, no, okay. Yeah, 12 minus 9 is 3, times 8 is 24, but you still have a 9.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 8 is 96 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8/9=10.67"",
    resulting_state=(9, 10.67),
    comment='""12 times 8 is 96 divided by 9""',
)

# ""12 minus 8 is 4, times 9 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-8)*9=36"",
    resulting_state=(9, 36),
    comment='""12 minus 8 is 4, times 9 is 36""',
)

# ""12 times 9 is 108. Divided by 9 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9/9=12"",
    resulting_state=(8, 12),
    comment='""12 times 9 is 108. Divided by 9 is 12""',
)

# ""12 minus 9 is 3, times 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(9, 24),
    comment='""12 minus 9 is 3, times 8 is 24""',
)

# ""9 plus 12 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12=21"",
    resulting_state=(8, 9, 21),
    comment='""9 plus 12 is 21""',
)

# ""9 plus 8 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(9, 12, 17),
    comment='""9 plus 8 is 17""',
)

# ""8 times 9 is 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=56"",
    resulting_state=(9, 12, 56),
    result_calc_error=True,
    comment='""8 times 9 is 56""',
)

# ""9 times 9 is 81""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(8, 12, 81),
    comment='""9 times 9 is 81""',
)

# ""9 minus 9 is 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-9=0"",
    resulting_state=(0, 8, 12),
    comment='""9 minus 9 is 0""',
)

# ""12 minus 9 is 3, times 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(9, 24),
    comment='""12 minus 9 is 3, times 8 is 24""',
)
```"
2601,"[5,6,7,13]",(7x6)-(13+5),81," So I have 22 plus 7. That's a new 20. 7 times 3. 7 times 5 is 85. 5 times 6 is 80. 7 times 6 is 80. 7 times 6 is 80. 42 Okay Phew, really? Uh oh Oh","```python
start_state = (5, 6, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""22 plus 7"" - participant may have added 13+9, but we don't see where 9 came from
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(5, 6, 20),
    comment='""So I have 22 plus 7. That\'s a new 20"" - participant seems to be adding 13+7 but miscalculates',
    result_calc_error=True,
)

# ""7 times 5 is 85"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=85"",
    resulting_state=(6, 13, 85),
    comment='""7 times 5 is 85"" - calculation error',
    result_calc_error=True,
)

# ""5 times 6 is 80"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=80"",
    resulting_state=(7, 13, 80),
    comment='""5 times 6 is 80"" - calculation error',
    result_calc_error=True,
)

# ""7 times 6 is 80"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=80"",
    resulting_state=(5, 13, 80),
    comment='""7 times 6 is 80"" - calculation error',
    result_calc_error=True,
)

# ""42"" - participant likely correctly calculated 7*6
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 13, 42),
    comment='""42"" - participant likely correctly calculated 7*6',
)

# Based on their response (7x6)-(13+5), they must have then subtracted 13+5 from 42
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-(13+5)=24"",
    resulting_state=(24,),
    comment=""Based on their response, they subtracted 13+5 from 42"",
)
```"
2603,"[6,7,9,9]",(9x9)-(7x,180," Target number is 24. 9 plus 9 is 18. 18 plus 7 is 25. 25 plus 6 is 31. 21, 18, 18 plus, so you have 9 times 6 is 51. 9 times 6 is 51. 9 times 7 is 63. Oh, okay, 54, 63. Oh, okay. Okay, 9 times 7. Okay, 54 minus 63. 54 minus 63. 9 times 9 is 81. Okay, 81. Okay, yeah, I think so. Okay, 9 times 9 minus... 7 times 6. Oh, it's not correct. 81 minus 42. Oh, okay, okay, okay. I don't know. So, 9 times 7, bracket close, minus 9 times 6. Bracket close. Bracket close. Okay. Okay. Mm-hmm. 9 times 7 is 63. Minus 9 plus 6. I think so. Oh. So, 9 times 6. Bracket close. Minus 9 plus 7. Oh, that's the one, correct? 54. Mm-hmm. This is a tough one. Very, very tough one. 9 times 9 is 81. Minus... Minus... Oh, gosh. Minus 9. Minus 7. Oh, 7 times...","```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 7, 18),
    comment='""9 plus 9 is 18""',
)

# ""18 plus 7 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(6, 25),
    comment='""18 plus 7 is 25""',
)

# ""25 plus 6 is 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+6=31"",
    resulting_state=(31,),
    comment='""25 plus 6 is 31""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""9 times 6 is 51"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=51"",
    resulting_state=(7, 9, 51),
    comment='""9 times 6 is 51"" (calculation error)',
    result_calc_error=True,
)

# ""9 times 7 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(6, 9, 63),
    comment='""9 times 7 is 63""',
)

# ""9 times 9 is 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 7, 81),
    comment='""9 times 9 is 81""',
)

# ""9 times 7, bracket close, minus 9 times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7-9*6=9"",
    resulting_state=(9,),
    comment='""9 times 7, bracket close, minus 9 times 6""',
)

# ""9 times 9 minus..."" - this appears to be the final attempt before time ran out
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 7, 81),
    comment='""9 times 9 minus..."" - this appears to be the final attempt before time ran out',
)
```"
2605,"[12,12,13,13]",(12+12)/(13/13),136," So, this is 12 plus 12 is 144. Okay, okay, okay, yes, I think this will go. This should be, this should be, this should be, I hope this goes, 12 times, 13 times 13, 13 times 13. It will give you 169 minus 12 by 12. Oh, so correct. Oh, I thought that would have worked. Okay, okay, okay, that didn't work. That didn't work. So, if that didn't work, how do we get our target number? How do we get our target number? We can see 13, okay, open our bracket and see 13 times 13, bracket close. I can divide it by 12 plus 12. I'm still not going to be correct. 13 plus 13 is 26. Plus 12, plus 12. Whew. Hmm. 12 divided by 12. Oh, I got it. Okay, okay, okay. So, it's supposed to be 12 plus 12, bracket close, divided by, bracket open 13, divided by 13.","```python
start_state = (12, 12, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 144"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=144"",
    resulting_state=(13, 13, 144),
    comment='""12 plus 12 is 144"" - calculation error',
    result_calc_error=True,
)

# ""13 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(12, 12, 169),
    comment='""13 times 13""',
)

# ""minus 12 by 12"" - not clear what operation they're trying

# ""13 times 13, bracket close. I can divide it by 12 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*13)/(12+12)=7.04"",
    resulting_state=(7.04,),
    comment='""13 times 13, bracket close. I can divide it by 12 plus 12""',
)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(12, 12, 26),
    comment='""13 plus 13 is 26""',
)

# ""Plus 12, plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+12+12=50"",
    resulting_state=(50,),
    comment='""Plus 12, plus 12""',
)

# ""12 divided by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 26),
    comment='""12 divided by 12""',
)

# Finally they figure it out: ""12 plus 12, bracket close, divided by, bracket open 13, divided by 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+12)/(13/13)=24"",
    resulting_state=(24,),
    comment='""12 plus 12, bracket close, divided by, bracket open 13, divided by 13""',
)
```"
2606,"[6,10,10,13]",13x,180," Target number is 24, so you have 10 plus 10, so 4, 3. 10, 13. 10 minus 13 is 3, so you will get 6 plus 10 is 26. 6 plus 10 plus 10 is 26. 10 plus 10 plus 10 is 33 minus 6. You don't get it. So, if you say 10 plus 6 plus 13, you will get 29. You will not still get it. So, if you say 10 times 10 is 100. 100. 13 times 6 is what? 13 times 6, you will get what? 13 times 6 is ok. 13 times 6 is 78. 10 times 10 is 100. 10 times 6 is 100. 10 times 6 is 6. 10 times 6. So, if you add these two together, 10 times 6 is 60, 130, doesn't go, 6 times 13, or 13 13 divided by 6, 13 divided by 6, 13 divided by 6 is 2, doesn't go, so what do we do, what do we do, what do we do, what do we do, what magic do we do, do we say 10 plus 10, or do we say 10 times 6, 10 times 6, oh, 10 times this, oh no, doesn't go, 10 times 10 is 100, 10 times 7 is 78, so you have 22, doesn't go, doesn't go, so I see, as we'll see, 10, 10, okay, 10 times 10,","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 10, so 4, 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(6, 13, 20),
    comment='""10 plus 10""',
)

# ""10 minus 13 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 6, 10),
    comment='""10 minus 13 is 3""',
)

# ""6 plus 10 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10+10=26"",
    resulting_state=(13, 26),
    comment='""6 plus 10 is 26""',
)

# ""10 plus 6 plus 13, you will get 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6+13=29"",
    resulting_state=(10, 29),
    comment='""10 plus 6 plus 13, you will get 29""',
)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(6, 13, 100),
    comment='""10 times 10 is 100""',
)

# ""13 times 6 is 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(10, 10, 78),
    comment='""13 times 6 is 78""',
)

# ""10 times 6 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6=60"",
    resulting_state=(10, 13, 60),
    comment='""10 times 6 is 60""',
)

# ""13 divided by 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/6=2"",
    resulting_state=(2, 10, 10),
    comment='""13 divided by 6 is 2""',
    result_calc_error=True,
)

```"
2610,"[3,7,7,9]",(9x7)-,180," 9 times 7 is 63. 9 plus 7 plus 7 plus 9 plus 7 is 16. 24 minus 16 is 8. 9 plus 3 is 12. 9 plus 3 is 12. 9 minus 3 is 6. 9 minus 3 is 6. 9 minus 3 is 6. 9 minus 3 is 6. 9 minus 3 is 6. 9 minus 3 is 6. 9 minus 7 is 2. 9 minus 7 is 2. Times 14. Times 14. 9 minus 3 is 6, 9 times 7 is 56, 9 times 7 is 63. 63 minus 21, 9 times 7 is 63, divided by 7, 9 times 7 is 63, minus,","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 7 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 7, 63),
    comment='""9 times 7 is 63""',
)

# ""9 plus 7 plus 7 plus 9 plus 7 is 16"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+7=23"",
    resulting_state=(3, 23),
    comment='""9 plus 7 plus 7"" - participant seems to have made a calculation error with the full sum',
)

# ""9 plus 3 is 12"" repeated several times
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(7, 7, 12),
    comment='""9 plus 3 is 12""',
)

# ""9 minus 3 is 6"" repeated several times
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 7, 7),
    comment='""9 minus 3 is 6""',
)

# ""9 minus 7 is 2"" repeated
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""9 minus 7 is 2""',
)

# ""Times 14"" seems to be multiplying something by 14 but it's not clear what

# ""9 times 7 is 56"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=56"",
    resulting_state=(3, 7, 56),
    comment='""9 times 7 is 56"" - calculation error',
    result_calc_error=True,
)

# ""9 times 7 is 63""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 7, 63),
    comment='""9 times 7 is 63""',
)

# ""63 divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63/7=9"",
    resulting_state=(3, 9),
    comment='""63 divided by 7""',
)
```"
2612,"[2,5,8,10]",(10+2),180," 10 plus 8 is 18, minus 2 plus 5, 5 times 2 is 10. 10 plus 8 is 18, plus 5, 10 times 2 is 6, 7 times 2 is 7. Okay, 10 plus 8, 18, 18 times 2, 36, divided by 2, 10 plus 2 is 12, 12 times 5, 16, divided by 8, 12 times 5, 16, divided by 8, 12 times 8, 26, divided by 5, 12, 12 plus 8 plus 5, that's 25. 65, 60, divided by 8, 12 times 5, 12 times 5, 16, divided by 8, 12 times 8 is 96.","```python
start_state = (2, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 8 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(2, 5, 18),
    comment='""10 plus 8 is 18""',
)

# ""minus 2 plus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-2+5=21"",
    resulting_state=(21,),
    comment='""minus 2 plus 5""',
)

# ""5 times 2 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(8, 10, 10),
    comment='""5 times 2 is 10""',
)

# ""10 plus 8 is 18, plus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8+5=23"",
    resulting_state=(2, 23),
    comment='""10 plus 8 is 18, plus 5""',
)

# ""10 times 2 is 6"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=6"",
    resulting_state=(5, 6, 8),
    comment='""10 times 2 is 6"" seems to be a calculation error',
    result_calc_error=True,
)

# ""10 plus 2 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2=12"",
    resulting_state=(5, 8, 12),
    comment='""10 plus 2 is 12""',
)

# ""12 times 5, 16"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=16"",
    resulting_state=(8, 16),
    comment='""12 times 5, 16"" seems to be a calculation error',
    result_calc_error=True,
)

# ""divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16/8=2"",
    resulting_state=(2,),
    comment='""divided by 8""',
)

# ""12 times 8, 26"" seems to be a calculation error
curr_state = graph.move_to_node((5, 8, 12))  # moving back to state with 12
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=26"",
    resulting_state=(5, 26),
    comment='""12 times 8, 26"" seems to be a calculation error',
    result_calc_error=True,
)

# ""divided by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26/5=12"",
    resulting_state=(12,),
    comment='""divided by 5""',
    result_calc_error=True,
)

# ""12 plus 8 plus 5, that's 25""
curr_state = graph.move_to_node((5, 8, 12))  # moving back to state with 12
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8+5=25"",
    resulting_state=(25,),
    comment='""12 plus 8 plus 5, that\'s 25""',
)

# ""12 times 8 is 96""
curr_state = graph.move_to_node((5, 8, 12))
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(5, 96),
    comment='""12 times 8 is 96""',
)
```"
2613,"[2,6,8,13]",13-2,180," 13 plus 8 is 21, plus 6, minus 2. 13 plus 8 is 21, minus 2, plus 6. 13 plus 6 is 19. 2 times 8 is 16. 2 times 8 is 16. 16, 13 minus six is seven, 16 plus seven is 23, damn it, 16. Okay, two times six is 12, 13 minus eight is five, 12 minus five is eight, 13, eight minus 13, six times eight is 48, six times eight is 48, 13 times two is 26, six times eight is 26, 13 minus two is 11, it's 11, 13 minus two is 11, six plus eight is 14.","```python
start_state = (2, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 8 is 21, plus 6, minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8+6-2=27"",
    resulting_state=(27,),
    result_calc_error=True,
    comment='""13 plus 8 is 21, plus 6, minus 2""',
)

# ""13 plus 8 is 21, minus 2, plus 6"" - trying different order
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8-2+6=25"",
    resulting_state=(25,),
    comment='""13 plus 8 is 21, minus 2, plus 6""',
)

# ""13 plus 6 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(2, 8, 19),
    comment='""13 plus 6 is 19""',
)

# ""2 times 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(6, 13, 16),
    comment='""2 times 8 is 16""',
)

# ""13 minus six is seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(2, 7, 8),
    comment='""13 minus six is seven""',
)

# ""two times six is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(8, 12, 13),
    comment='""two times six is 12""',
)

# ""13 minus eight is five""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(2, 5, 6),
    comment='""13 minus eight is five""',
)

# ""six times eight is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(2, 13, 48),
    comment='""six times eight is 48""',
)

# ""13 times two is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(6, 8, 26),
    comment='""13 times two is 26""',
)

# ""13 minus two is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(6, 8, 11),
    comment='""13 minus two is 11""',
)

# ""six plus eight is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(2, 13, 14),
    comment='""six plus eight is 14""',
)
```"
2614,"[3,3,12,12]",(3/3)x(12+12),48," Okay, so we're at number 24. I didn't realize that prior that that was just a trial run. So now I'm assuming things are going to get really, really hard. And I'm a little bit worried. But I'm going to try to come up with something here. So to get to 24, 12 and 12, 24. And then that well, that already makes 24. So obviously, I can't do that. So I'm going to try to do here is I'm going to try to get myself to a maybe a one. So using what I know, so let's try to get a one. So three divided by three should give me one. Alright, so I have a one. Now to get to 24, all I would have to do for this one is multiply it by 12 plus 12.","```python
start_state = (3, 3, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12, 24"" - participant notices they can add the 12s
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 3, 24),
    comment='""12 and 12, 24""',
)

# ""So I'm going to try to get myself to a maybe a one"" - participant sets a subgoal of getting to 1
graph.set_subgoal(
    (1,),
    state_after_subgoal=(24,),
    comment='""So I\'m going to try to get myself to a maybe a one""',
)

# ""three divided by three should give me one""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 12, 12),
    comment='""three divided by three should give me one""',
)

# ""Now to get to 24, all I would have to do for this one is multiply it by 12 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*(12+12)=24"",
    resulting_state=(24,),
    comment='""Now to get to 24, all I would have to do for this one is multiply it by 12 plus 12""',
)
```"
2615,"[2,2,5,11]",(2x2)x(11-5),108," All right, now we have 2, 2, 5, and 11. 2, 5, and 11, I don't... So for 2, 2, 5, and 11, I'm trying to think here. 24. So if we have 2 and 2 is 4, if we take 4 and we add it to 14, that's 15, plus 5 is only 20. 2 divided by 2 is 1. 1 times... 5 is 5 times 11 is 15. No, so that wouldn't be it. 11, we can't divide 11 into 5. That's going to create a decimal. I don't think that's going to be right. 2 divided by, I don't think we're going to use division into 11 or 5. They're just, it's weird numbers into 11. And then 2 and 2 into itself, I don't think we would do. So what if we... So let's start with this. 2 times 5 is 10. That would give us 10. 11, 10 and 11 would be... No, so that can't be, that can't be it. All right, so 2 times 2 is 4. Okay, so we have 4. And this would be 16. 4, 8, 12, 6, that's only 4. So 2 times 2 is 4. This is, once again, that'd be 16. What if we went 11, 10, 9, 8, 7, 6? So that'd be 6. So it's 2 times 2 is 4. 2 times 2 is 4. 4 times 6. So yeah, so that would be it. Because 2 times 2 is 4. This is 6. 4 times 6 would... 6, 12, 18, 24. So that's what I would have to do. I would have to go 2 times 2 and then multiply that by 11 minus 5.","```python
start_state = (2, 2, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 and 2 is 4, if we take 4 and we add it to 14, that's 15, plus 5 is only 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 5, 11),
    comment='""2 and 2 is 4""',
)

# ""2 divided by 2 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2/2=1"",
    resulting_state=(1, 5, 11),
    comment='""2 divided by 2 is 1""',
)

# ""5 times 11 is 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*11=15"",
    resulting_state=(2, 2, 15),
    comment='""5 times 11 is 15"" - calculation error',
    result_calc_error=True,
)

# ""2 times 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(2, 10, 11),
    comment='""2 times 5 is 10""',
)

# ""2 times 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 5, 11),
    comment='""2 times 2 is 4""',
)

# ""11 minus 5"" to get 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(4, 6),
    comment='""11 minus 5"" to get 6',
)

# ""4 times 6 would... 6, 12, 18, 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""4 times 6 would... 6, 12, 18, 24""',
)
```"
2622,"[1,3,3,7]",(1x(3x7))+3,86," 1, 3, 3, 7. Okay, so we're going to try this now with a 1. 1, 3, 3, 7. 7, um, 7 times 3, 24. Immediately. And then, yeah, immediately. 7 times 3, which would give me 24. And then after getting 24, we can multiply, no, 7 times 3 is 24, yeah, no. No, no, no, no, no, no, no. That ain't right. 7 times 3, 3 times 3, we could probably go the 6 angle. I kind of want to eliminate the, I don't want to eliminate the 1, because I can just multiply something into itself. So maybe 7 times 3, which is 24. 24, 7 times 3 is 7, 14, no, 7 times 3 is 21. 7 times 3 is 21. So what if I were to parentheses, use the 1. To multiply 3 times 7. Use the 1 times 7. Close the parentheses and then add the 3. 7, 14, 21. Yeah, so 21 times itself is 21 plus 3 is 24.","```python
start_state = (1, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 3, 24. Immediately."" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=24"",
    resulting_state=(1, 3, 24),
    comment='""7 times 3, 24"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""3 times 3, we could probably go the 6 angle""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 7, 9),
    comment='""3 times 3, we could probably go the 6 angle""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 3, 21),
    comment='""7 times 3 is 21""',
)

# ""Use the 1 times 7. Close the parentheses and then add the 3""
# Based on their final answer (1x(3x7))+3, they are computing 1*(3*7) first
new_state = graph.explore_operation(
    curr_state,
    operation=""1*(3*7)=21"",
    resulting_state=(3, 21),
    comment='""Use the 1 times 7""',
)

# ""21 plus 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+3=24"",
    resulting_state=(24,),
    comment='""21 plus 3 is 24""',
)
```"
2624,"[4,7,8,11]",7,181," 4 plus 7, that is 11. No, 7 plus 8. 7 plus 8 is 15. 15 plus. No. 11 minus 4 is 7. 11 minus 8 is 3. Okay, 11 minus 8, that's 3. 3 times 7, that is 21. Then, no. 3 times 7 is 21. That's 8. 11, 7 times 8, 56. 4, 7, 15. 15 minus, 15 plus 8. That's 25. No, that's 23. 11, 7 times 8, 56. 11, 7 times 8, 56. 4, 7, 15. 15 minus, 15 plus 8. That's 25. No, that's 23. 11, 7 times minus seven times four. Eight times four. 11 minus seven is four, plus four is eight, no. 11 minus eight is eight. Using the same. 11, seven plus eight, 13. Two, 11, seven plus eight, 15, 15. Seven plus four, seven plus 11, that's 18. 18 plus eight, 26. 18 plus eight, 26. No, four plus 11, 15. Seven plus eight is 15. 15. Seven plus eight, seven. No.","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 7, that is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(8, 11, 11),
    comment='""4 plus 7, that is 11""',
)

# ""7 plus 8 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(4, 11, 15),
    comment='""7 plus 8 is 15""',
)

# ""11 minus 4 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(7, 7, 8),
    comment='""11 minus 4 is 7""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 7),
    comment='""11 minus 8 is 3""',
)

# ""3 times 7, that is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(4, 21),
    comment='""3 times 7, that is 21""',
)

# ""7 times 8, 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 11, 56),
    comment='""7 times 8, 56""',
)

# ""15 plus 8. That's 25. No, that's 23"" - participant seems to be using 15 from 7+8
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8+8=23"",
    resulting_state=(4, 11, 23),
    comment='""15 plus 8. That\'s 25. No, that\'s 23""',
)

# ""11 minus seven is four""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 4, 8),
    comment='""11 minus seven is four""',
)

# ""seven plus eight, 13"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=13"",
    resulting_state=(4, 11, 13),
    comment='""seven plus eight, 13"" - calculation error',
    result_calc_error=True,
)

# ""seven plus 11, that's 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(4, 8, 18),
    comment='""seven plus 11, that\'s 18""',
)

# ""18 plus eight, 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8=26"",
    resulting_state=(4, 26),
    comment='""18 plus eight, 26""',
)

# ""four plus 11, 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+11=15"",
    resulting_state=(7, 8, 15),
    comment='""four plus 11, 15""',
)

# ""Seven plus eight is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(4, 11, 15),
    comment='""Seven plus eight is 15""',
)

```"
2628,"[6,6,7,10]",,180," 6 plus 4 is 13. 6 times 6 is 36. 26. No. And plus 7 is 17. 42. No. 10. 6 plus 6 is 12. No. 10 plus 7. 6 plus 6 is 12. 12 plus 7. That's 29. That's, no. 10. 7 times 10. 70. 6 times 6. 36. 70 minus 36. 70. Minus 36. That's 24. Okay. 7 times 10 minus 6 times 6. Okay. Minus 6 times 6. Incorrect answer. 70 minus 36. That's, is it? 70 minus 36 is, um, oh, that's 34. Okay. 6 plus 6 is 12. 12. Okay. 10 plus 6 is 16. 16. No. 10 plus 6 is 16. 42 minus 16. That's 26. 46. 40. No. 60. 36 plus 7. 36 plus 7 is 43. 10 plus 7 is 17. 17 plus 12. 29. 29. 6. 6 plus 6. 6. 6.","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 4 is 13"" seems to be a calculation error, possibly meant 6+7
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(6, 10, 13),
    comment='""6 plus 4 is 13"" seems to be a calculation error, possibly meant 6+7',
)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(7, 10, 36),
    comment='""6 times 6 is 36""',
)

# ""6 plus 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(7, 10, 12),
    comment='""6 plus 6 is 12""',
)

# ""12 plus 7. That's 29"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=29"",
    resulting_state=(10, 29),
    comment='""12 plus 7. That\'s 29"" - calculation error',
    result_calc_error=True,
)

# ""7 times 10. 70""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(6, 6, 70),
    comment='""7 times 10. 70""',
)

# The participant needs to compute 6*6=36 again to subtract it from 70
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(7, 10, 36),
    comment='""6 times 6. 36""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(6, 6, 70),
    comment='""7 times 10. 70""',
)

# ""10 plus 6 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6=16"",
    resulting_state=(6, 7, 16),
    comment='""10 plus 6 is 16""',
)

# ""10 plus 7 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(6, 6, 17),
    comment='""10 plus 7 is 17""',
)

```"
2630,"[8,9,11,11]",,180," 11 plus 11, 22. 11, 9, 8 times 9. 8 times 9 is 56. 8 times 9 is 56. 56, no, no, 8 times 9 is 17. 72, yeah. 72. Then 11 times 11 is 121. Then minus 72. No, it's not correct. 11 minus 9 is 2. 11 minus 9 is 2. 11 times 8 is 88. 88 divided by 11. 88 divided by 11 is 8. No. 11 minus 8 is 3. 3 times 9 is... 3 plus 9, 12 plus 11, 32. No, 22 more. 9 minus 8 is 1. 11 plus 11, 22. 11 minus 8. 9 minus 9, 9 minus 8, 3. 9 plus 9. That's 9 plus 3, 12. That's 23. 22 minus 8. 22 minus 8 is 13. 9 plus 8, 17. 9 plus 8, 17. 17 minus 17, 22. Level 10 is 9, 99. 99. No, 10 times 8, it's 8. It's 9 plus 9, 20.","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 11, 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(8, 9, 22),
    comment='""11 plus 11, 22""',
)

# ""8 times 9 is 56"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=56"",
    resulting_state=(11, 11, 56),
    comment='""8 times 9 is 56"" - calculation error',
    result_calc_error=True,
)

# ""8 times 9 is 72"" - participant corrects calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(11, 11, 72),
    comment='""8 times 9 is 72"" - participant corrects calculation',
)

# ""11 times 11 is 121""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=121"",
    resulting_state=(8, 9, 121),
    comment='""11 times 11 is 121""',
)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 8, 11),
    comment='""11 minus 9 is 2""',
)

# ""11 times 8 is 88""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(9, 11, 88),
    comment='""11 times 8 is 88""',
)

# ""88 divided by 11 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88/11=8"",
    resulting_state=(8, 9),
    comment='""88 divided by 11 is 8""',
)

# ""11 minus 8 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 9, 11),
    comment='""11 minus 8 is 3""',
)

# ""3 plus 9, 12 plus 11, 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+9+11=32"",
    resulting_state=(32,),
    comment='""3 plus 9, 12 plus 11, 32""',
    result_calc_error=True,
)

# ""9 minus 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 11, 11),
    comment='""9 minus 8 is 1""',
)

# ""11 plus 11, 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(8, 9, 22),
    comment='""11 plus 11, 22""',
)

# ""9 minus 8, 3"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=3"",
    resulting_state=(3, 11, 11),
    comment='""9 minus 8, 3"" - calculation error',
    result_calc_error=True,
)

# ""9 plus 8, 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(11, 11, 17),
    comment='""9 plus 8, 17""',
)

```"
2632,"[3,9,10,13]",13-10,180," Ah, god. This is a lot harder than the trials, huh? Okay, so... Let me see... Um... Oh god. Okay. Ugh, this is a lot harder. So... Um... What's 13 minus 9? That's 4. Um... Okay, so 14 minus 9 is 4. Then I have 3, 4, 10. Um... 4... What's 4 times 7? Times 7 is 28. Uh... Damn it. 4... I can only use the numbers at once. Damn, that would have been the answer, but that's 28. Yeah, because that's 4. 4... What about that? That's 10. No, that would not work. Um... Hmm... 10... Let's see, what's 9 minus 3? 3... That's 6. 6... Times... 3. That's not it. 6 times 3 is 18. Am I thinking too hard? Because this is 3. That's 4. How do you get to 24? Even though I love me a good puzzle. Okay, so I could also... Maybe I should just do numbers. So let's see. If it's this, that's 4. And then if I do 10 minus 3, that's 7. That gets me 28, which is not the answer. If I were to do 13 minus 10, that gives me 3. And if I were to do... Um... 3 minus... That's 6. That still doesn't give me the answer.","```python
start_state = (3, 9, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What's 13 minus 9? That's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 10),
    comment='""What\'s 13 minus 9? That\'s 4""',
)

# ""14 minus 9 is 4"" seems to be a restatement/error of the previous calculation
# ""Then I have 3, 4, 10"" participant is looking at the current state

# ""What's 4 times 7? Times 7 is 28"" - participant seems to be setting a subgoal
curr_state = graph.move_to_node(new_state)
graph.set_subgoal(
    subgoal_state=(7,),
    comment='""What\'s 4 times 7? Times 7 is 28"" - participant seems to be looking for a way to make 7'
)

# ""what's 9 minus 3?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 10, 13),
    comment='""what\'s 9 minus 3?""',
)

# ""6 times 3"" participant realizes they can't do this operation since they already used 3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(7, 9, 13),
    comment='""10 minus 3, that\'s 7""',
)

# ""13 minus 10, that gives me 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 3, 9),
    comment='""13 minus 10, that gives me 3""',
)
```"
2636,"[1,3,6,13]",,180," 13 minus 6 is 7, which doesn't fit evenly. 13, we can't divide 13 by 3. 10 doesn't really help us. Maybe if we do, what's 13 times 3, which is 36. Oh, but 36 divided by 6 is 6. But 6 is 7. I would need another number because all that's left. Wait, what? So 13 times 3, which I don't know. Divide it by 6. That's 6. I need more numbers. So that's not going to work. Or we could do maybe 6 times 3, which is 18. No, that doesn't work either. Oh, interesting. This 13 number is quite difficult, no? Because even 13, 13 minus 6 is 7. 7 times 3 is 21, and then plus 1, which doesn't really work. Or, uh, yeah, that doesn't work. Um, maybe it's like 13. No, that doesn't work either. I can't multiply by 13. Um, it has to be like a number. If I do 24 plus 13, it's 27, or 37. And is there any way I can get to 37 with the rest of the three numbers? No. Ugh. Um, ooh, ooh, ooh, ooh, ooh, ooh, ooh. Maybe it's, um, 6 divided by 3, which is 2 times 13. Ah, and I was thinking minus 1, but that's 25. Damn it. Um, because, yeah, 6 divided by 3 is 2, and you times it by 13, and then, yeah, minus that 1, that's 30. That's 25. Fuck.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 6 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 6 is 7""',
)

# ""13 times 3, which is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=36"",
    resulting_state=(1, 6, 36),
    result_calc_error=True,
    comment='""13 times 3, which is 36""',
)

# ""36 divided by 6 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/6=6"",
    resulting_state=(1, 6),
    comment='""36 divided by 6 is 6""',
)

# ""6 times 3, which is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 13, 18),
    comment='""6 times 3, which is 18""',
)

# ""13 minus 6 is 7. 7 times 3 is 21, and then plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-6)*3+1=22"",
    resulting_state=(22,),
    comment='""13 minus 6 is 7. 7 times 3 is 21, and then plus 1""',
)

# ""6 divided by 3, which is 2 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6/3)*13=26"",
    resulting_state=(1, 26),
    comment='""6 divided by 3, which is 2 times 13""',
)

# ""minus that 1, that's 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-1=25"",
    resulting_state=(25,),
    comment='""minus that 1, that\'s 25""',
)
```"
2638,"[5,7,13,13]",,180," Oh my god, with this stupid 13, bro. Brutal. Um, so this is 2. That's, I don't know, I'm really curious what the answers are. Um, because if this is 13 minus 7 again, that's 6. But then 13 times 5 is 30. Ooh, but could it be 13 times 7 minus 13 times 5? Uh, no, because that's 26. Mmm. Yeah, so close but so far away. Um, because 13 doesn't fit into anything, so it can't be divide. Um, or could it be, what's 7 times 5? That's 35 minus 13. That's already below. Um, maybe it's 3. Uh, it can be times plus 7? That's 20, 27 times, or plus 13. And then if I do plus 5, that also doesn't make sense. I feel like it has to be at least 13 times 5, which is 65. Mmm. Um, could it be divided by 5? No, that doesn't make sense. Ugh. Mmm. I'm thinking. I'm not, I'm like, I'm thinking, but I'm not thinking. I feel like it has to be times and then like divided by for some reason. But we already said that you can't really divide it. Mmm. Again, so 5 times 13, that's 36. 36. Or, 36, wow, 65 divided by 7 maybe? Ugh, no. Um, 13, 13 minus 7 is 6. Could it be times 5, which is 30? Mmm. Then it's even minus 13 is 17. Uh, this could be 6. Uh, times 13? No. Um.","```python
start_state = (5, 7, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 7 again, that's 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(5, 6, 13),
    comment='""13 minus 7 again, that\'s 6""',
)

# ""13 times 5 is 30"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*5=30"",
    resulting_state=(7, 13, 30),
    comment='""13 times 5 is 30"" - calculation error',
    result_calc_error=True,
)

# ""13 times 7 minus 13 times 5"" participant realizes this would be 26
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7-13*5=26"",
    resulting_state=(26,),
    comment='""13 times 7 minus 13 times 5""',
)

# ""what's 7 times 5? That's 35 minus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5-13=22"",
    resulting_state=(13, 22),
    comment='""what\'s 7 times 5? That\'s 35 minus 13""',
)

# ""13 times 5, which is 65""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*5=65"",
    resulting_state=(7, 13, 65),
    comment='""13 times 5, which is 65""',
)

# ""5 times 13, that's 36"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*13=36"",
    resulting_state=(7, 13, 36),
    comment='""5 times 13, that\'s 36"" - calculation error',
    result_calc_error=True,
)

# ""13, 13 minus 7 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(5, 6, 13),
    comment='""13, 13 minus 7 is 6""',
)

# ""Could it be times 5, which is 30?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(13, 30),
    comment='""Could it be times 5, which is 30?""',
)

# ""Then it's even minus 13 is 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-13=17"",
    resulting_state=(17,),
    comment='""Then it\'s even minus 13 is 17""',
)
```"
2640,"[1,7,8,10]",((10-7)x8)x1,146," The number 8 is 56. It's because with 1 to 10 it's difficult. Because maybe it's like a 10 minus 8, which is 2, times 7, which is 14. All that's left is 1. So I feel like it has to be like 10 minus something. 10 minus 1 is 9, times 8, which is 72, divided by 7? No. 10 minus 1 is 9, divided by 7. Times 8? No. 10 minus 1 is 9. I'm thinking, because even like 8 minus 7 is 1. Oy. Hmmm. Or like 10 minus 7, I guess, is 3, times 8. That's 24 times 1. Oh, thank god. 10 minus 7. That's times 8, plus 1. No. 10 minus 7, which is 3, times 8, and then you add the 1. Ugh, brutal. That's not it. 10 minus 7. Oh no, plus 1, times 1.","```python
start_state = (1, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 8, which is 2, times 7, which is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-8)*7=14"",
    resulting_state=(1, 14),
    comment='""10 minus 8, which is 2, times 7, which is 14""',
)

# ""10 minus 1 is 9, times 8, which is 72, divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-1)*8/7=10.29"",
    resulting_state=(10.29,),
    comment='""10 minus 1 is 9, times 8, which is 72, divided by 7""',
)

# ""8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 1, 10),
    comment='""8 minus 7 is 1""',
)

# ""10 minus 7, I guess, is 3, times 8. That's 24 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-7)*8*1=24"",
    resulting_state=(24,),
    comment='""10 minus 7, I guess, is 3, times 8. That\'s 24 times 1""',
)

# ""10 minus 7. That's times 8, plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-7)*8+1=25"",
    resulting_state=(25,),
    comment='""10 minus 7. That\'s times 8, plus 1""',
)

# The participant then says ""No"" and tries again with the successful solution they found earlier
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-7)*8*1=24"",
    resulting_state=(24,),
    comment='The participant returns to their successful solution',
)
```"
2645,"[5,6,7,13]",((13-7)x5)-6,128," Okay, 24. What is this if I add everything together? It's 20, 31, 31, 21. If I take 6 minus 5, okay, what's, uh, if I do 6, 7 times 6, 7 times 6, it's 42. And then if I multiply it by 13 divided by 5, it's 109. Okay, so then next up would be 7. 16, that's 19. So if I could do, what if I do 13? If I do 13 minus 7, that's 6. If I get to 30. Oops, and I get to 30, and then parentheses, and minus 6. Uh-oh, I have to delete everything. I did get, I did get the answer though, so 13 minus 7. 7 times 5, and then I subtract 6. Okay, so I'm going to do 13 minus 7, and then I subtract 6. Okay, so I'm going to do 13 minus 7, and then I subtract 6.","```python
start_state = (5, 6, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What is this if I add everything together? It's 20, 31, 31, 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6+7+13=31"",
    resulting_state=(31,),
    comment='""What is this if I add everything together? It\'s 20, 31, 31, 21""',
)

# ""If I take 6 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 7, 13),
    comment='""If I take 6 minus 5""',
)

# ""7 times 6, it's 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 13, 42),
    comment='""7 times 6, it\'s 42""',
)

# ""And then if I multiply it by 13 divided by 5, it's 109""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42*(13/5)=109"",
    resulting_state=(109,),
    comment='""And then if I multiply it by 13 divided by 5, it\'s 109""',
)

# ""13 minus 7, that's 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(5, 6, 6),
    comment='""13 minus 7, that\'s 6""',
)

# Based on their final answer ((13-7)x5)-6, they then multiply by 5 and subtract 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5-6=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they multiply by 5 and subtract 6"",
)
```"
2649,"[4,5,5,8]",8x(4-5/5),57," Alright, this is... Oh, I got it. Uh, 8 times 3 is 24. So, 5... Wait, how do I get to 3 from here? I knew how to get to 3. 8 times 3... Oh, it's 4 minus 1. Times 4... Wait. Okay, it's 8 times 3. So it's 4, 8 times, and then 4, and then minus 1. Minus 5 divided by 5. They're saying I missed something.","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24"" - participant seems to be setting a subgoal of getting 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24"" - participant seems to be setting a subgoal of getting 3',
)

# ""Wait, how do I get to 3 from here?"" confirms they are trying to get 3
# ""Oh, it's 4 minus 1"" participant realizes they can get 3 by doing 4-1, and they can get 1 from 5/5
new_state = graph.explore_operation(
    curr_state,
    operation=""5/5=1"",
    resulting_state=(1, 4, 5, 8),
    comment='""Oh, it\'s 4 minus 1"" participant realizes they can get 3 by doing 4-1, and they can get 1 from 5/5',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 5, 8),
    comment='""4 minus 1""',
)

# Finally they multiply by 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(5, 24),
    comment='Finally they multiply by 8 to get 24',
)
```"
2650,"[6,10,10,13]",((13-10)x10)-6,110," Um, I'm not sure. 7 times 4. What about 8? Is there 8 anywhere? 7. 7. Wait. 7 and 20. No, that's 27. 7. 10 and 16 and 23. What's, uh, 100 divided by 6? Okay, so if we do, if we can get to 30, which we can, we'll get to 24. Okay, so if we do this, do 30, add that and subtract 6. Subtract 6. Ugh. Can you not hear me? Because I'm subtracting 6.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 4"" - participant might be trying to get to 28 (close to 30)
# The 7 likely comes from 13-6
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(7, 10, 10),
    comment='""7 times 4"" - participant seems to be computing 13-6=7',
)

# ""7 and 20"" participant might be adding 10+10
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(7, 20),
    comment='""7 and 20"" participant adds the two 10s',
)

# ""No, that's 27"" participant adds 7+20
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+20=27"",
    resulting_state=(27,),
    comment='""No, that\'s 27"" participant adds 7+20',
)

# ""10 and 16 and 23"" participant might be trying 13+10=23
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(6, 10, 23),
    comment='""10 and 16 and 23"" participant adds 13+10',
)

# ""What's, uh, 100 divided by 6?"" - not clear how this relates to their search

# ""if we can get to 30, which we can, we'll get to 24"" - participant sets a subgoal of 30
graph.set_subgoal(
    (30,),
    state_after_subgoal=(24,),
    comment='""if we can get to 30, which we can, we\'ll get to 24""',
)

# Based on their final answer ((13-10)x10)-6, they found a way to get to 30 by doing (13-10)x10=30
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-10)*10=30"",
    resulting_state=(6, 30),
    comment=""Based on final answer, participant computed (13-10)*10=30"",
)

# Then they subtract 6 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-6=24"",
    resulting_state=(24,),
    comment='""subtract 6""',
)
```"
2653,"[2,6,10,10]",(10+10)+(6-2),52," 10 minus 2 will give me 8. I need the rest from somewhere. 6 times 4 will give me 24. But I don't know how to make a 4 having 10 and 2. So maybe that cannot work. 6 times 2 is 12 and I have another 10, 10. Maybe, yeah, I know what to do. So I add 10 plus 10 which gives me 20. Then on top of that I add 6 minus 2 which will give me 24.","```python
start_state = (2, 6, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 2 will give me 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(6, 8, 10),
    comment='""10 minus 2 will give me 8""',
)

# ""6 times 4 will give me 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 will give me 24""',
)

# ""6 times 2 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(10, 10, 12),
    comment='""6 times 2 is 12""',
)

# ""10 plus 10 which gives me 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(2, 6, 20),
    comment='""10 plus 10 which gives me 20""',
)

# ""Then on top of that I add 6 minus 2 which will give me 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+(6-2)=24"",
    resulting_state=(24,),
    comment='""Then on top of that I add 6 minus 2 which will give me 24""',
)
```"
2654,"[6,8,8,10]",(6x8)/(10-8),80," So having 24 and I've been given 8, 8, 6 and 10, maybe on the 8th, on combination of 8, I need 8 times 3. 8 times 3 which will give me 24. And I know right away that I can, no, no, I don't really think I have a way to come up with that. 6 times 4 will give me 24. So maybe 16, 16 minus 6 is 10, 10 plus 10, 20. 10 plus 8 is 18. 18 plus 8 is 26. 26, you cannot subtract 6 to give you 24. You cannot do anything to it to give you 24. Maybe I can try, I can try 8 plus 10, then 48 divided by 2. Yeah, 48 divided by 2. Gives me 24. So I should probably start with 6 multiplied by 8, which will give us 48. Then I divide this, the result, with 10 minus 8, which is a 2. So that will give me...","```python
start_state = (6, 8, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 which will give me 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 which will give me 24""',
)

# ""6 times 4 will give me 24"" - participant sets another subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 times 4 will give me 24""',
)

# ""16 minus 6 is 10"" - participant likely got 16 from 8+8
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(6, 10, 16),
    comment='""16"" - participant likely adding 8+8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16-6=10"",
    resulting_state=(10, 10),
    comment='""16 minus 6 is 10""',
)

# ""10 plus 10, 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(20,),
    comment='""10 plus 10, 20""',
)

# Going back to start state for ""10 plus 8 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(6, 8, 18),
    comment='""10 plus 8 is 18""',
)

# ""18 plus 8 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8=26"",
    resulting_state=(6, 26),
    comment='""18 plus 8 is 26""',
)

# ""6 multiplied by 8, which will give us 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(8, 10, 48),
    comment='""6 multiplied by 8, which will give us 48""',
)

# ""Then I divide this, the result, with 10 minus 8, which is a 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/(10-8)=24"",
    resulting_state=(24,),
    comment='""Then I divide this, the result, with 10 minus 8, which is a 2""',
)
```"
2658,"[6,8,10,12]",(10+12)+(8-6),38," The target number is 24. I have 6, 8, 10 and 12. 8 times 3 gives me 24. 6 times 4 gives me 24 still. So I need to get a work out with this. So maybe 10 plus 12 is 22. 22 plus 2 is 24. So I'll begin with 10 plus 12 which gives us 22. Then I continue adding. I add 8 minus 6 which is 2 to the resulting answer.","```python
start_state = (6, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 gives me 24"" - participant seems to be noting that they need to get 3 somehow
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 gives me 24"" - participant seems to be noting that they need to get 3 somehow',
)

# ""6 times 4 gives me 24"" - participant seems to be noting that they need to get 4 somehow
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 gives me 24"" - participant seems to be noting that they need to get 4 somehow',
)

# ""10 plus 12 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(6, 8, 22),
    comment='""10 plus 12 is 22""',
)

# ""8 minus 6 which is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 10, 12),
    comment='""8 minus 6 which is 2""',
)

# Then the participant combines these operations: ""Then I continue adding. I add 8 minus 6 which is 2 to the resulting answer.""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+12)+(8-6)=24"",
    resulting_state=(24,),
    comment='""Then I continue adding. I add 8 minus 6 which is 2 to the resulting answer.""',
)
```"
2662,"[2,5,8,10]",,180," Shit, you told me I didn't get it. Target number is 24. 2 5 8 10. 2 5 8 10. So what can we do? We can do 20? We can do... Jesus Christ. We can do... 2 times 5 is what? 10. That's 10. That's 10. 2 times... Oh my days. 5 divided by 10 is what? 5 divided by 10 is 4? Yeah? No? Oh, come on. 5 divided by 10 is 2. 2... So this 2 is 4. Yeah, this is... Cook! 2 times 5 is 10. Okay, what can we do? Let's just... Okay, think, think, think. Think, think, think, think, think, think, think. 24. Come on. 2 times 4 is what? 48. Oh, this is hard. This is hard. 8 times 10 is 80. 8 times 10 is 80. 5 divided by 80 is what? 16 something. Fuck, this is hard. This is hard. 5 divided by... 5 minus 8 is what? Okay, that's not working. 2 times 10? 20. 5 minus 8? 3. 23. Fuck, not close at all. 5 minus 2? 3. 3 times 8. 3 times 8 is what? 27. 7. Oh, this is hard, man. Oh, this is hard. This is hard. This is hard. 5 times 8 is what? 40? Yeah. 2... Hey, I always had this question. If you need to shit mid-match, can you leave the pitch? Like, how does that work? 2... Sometimes you're saying mid-Barcelona match one time. Sometimes you're saying mid-Barcelona match one time. What's up, dude? It's already been 20 minutes, dude. Huh? I'm constantly calling. It's already been 20 minutes. Nah, no problem. I need to do something else. I'm going back. Thank you. God bless you. Target number 24. Oh, Jesus. My arm is...","```python
start_state = (2, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 5 is what? 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(8, 10, 10),
    comment='""2 times 5 is what? 10""',
)

# ""5 divided by 10 is 2"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5/10=2"",
    resulting_state=(2, 2, 8),
    comment='""5 divided by 10 is 2"" - participant makes calculation error',
    result_calc_error=True,
)

# ""8 times 10 is 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(2, 5, 80),
    comment='""8 times 10 is 80""',
)

# ""2 times 10? 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(5, 8, 20),
    comment='""2 times 10? 20""',
)

# ""5 minus 8? 3"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5-8=3"",
    resulting_state=(2, 3, 10),
    comment='""5 minus 8? 3"" - participant makes calculation error',
    result_calc_error=True,
)

# ""5 minus 2? 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 8, 10),
    comment='""5 minus 2? 3""',
)

# ""3 times 8 is what? 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=27"",
    resulting_state=(10, 27),
    comment='""3 times 8 is what? 27"" - participant makes calculation error',
    result_calc_error=True,
)

# ""5 times 8 is what? 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(2, 10, 40),
    comment='""5 times 8 is what? 40""',
)

# The rest of the transcript contains off-topic conversation and no more mathematical operations

```"
2663,"[3,7,7,9]",,180," Okay, 24. That is a hard one. 7 times 7 is what? 7 times 7 is what? 7 times 7 is 49. We're looking for 24. 3 times 24 is what? 6, 7. No, okay, it doesn't work that way. 7 times 9 is what? Let me bust out that calculator. Okay, 7 times 9 is 63. 63. 63. 63. Okay, that doesn't work either. Wait, chat, chat. Okay, no, that's 2. 3 times 7 is 21. But 7 minus 9 is 2 and that's not going to work. Oh, come on. 6 times 6. Okay. Okay. 7 minus 3 minus 7 is what? 4. Wait, 3 times 9 is what? 27. Okay, it doesn't work either. I'm not onto anything. Okay, let's try this. Let's try this. 7 times 7 is 49. Wait, wait, hold up. I think I just got it. 7 times 7 is 49. Minus 27. No. 3 times 9 is 27, right? Yeah. Doesn't go anywhere either. 3 times 7 is what? 21. Okay. This isn't working. Oh, I can divide. Come on. How did I forget that? Divided by 9 is what? 3. Doesn't go anywhere either. Okay, fucking hell, man. Wait. 7. No, no, no. Okay. 7 times 7 is 49 times 3. Divided by 9. No. So, okay, let's try this way. Okay. 7 times 7 is 49 times 3. No. So, okay, let's try this way. 7 times 7 is 49 times 3. No. So, okay, let's try this way. 8 times 9 times 3. Divided by 7. 27. Oh, this is fucked up. So, 3. Oh, 1, 1, 1, 1, 1, 1, 1, 1, 1. 7 times 9 is what? 64. 7 times 9. 63. 66. three sixty three okay so sixty three","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7 is 49""',
)

# ""7 times 9 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(3, 7, 63),
    comment='""7 times 9 is 63""',
)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 9, 21),
    comment='""3 times 7 is 21""',
)

# ""7 minus 3 minus 7 is what? 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3-7=-3"",
    resulting_state=(-3, 9),
    comment='""7 minus 3 minus 7 is what? 4"" - participant made calculation error',
    result_calc_error=True,
)

# ""3 times 9 is what? 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(7, 7, 27),
    comment='""3 times 9 is what? 27""',
)

# ""7 times 7 is 49"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7 is 49"" - participant tries this again',
)

# ""3 times 7 is what? 21"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 9, 21),
    comment='""3 times 7 is what? 21"" - participant tries this again',
)

# ""Divided by 9 is what? 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21/9=3"",
    resulting_state=(7, 3),
    comment='""Divided by 9 is what? 3""',
    result_calc_error=True,
)

# ""7 times 7 is 49 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7*3=147"",
    resulting_state=(9, 147),
    comment='""7 times 7 is 49 times 3""',
)

# ""8 times 9 times 3. Divided by 7"" - participant seems to be making calculation errors
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3/7=3.86"",
    resulting_state=(3.86, 7),
    comment='""8 times 9 times 3. Divided by 7"" - participant seems to be making calculation errors',
)

# ""7 times 9 is what? 64. 7 times 9. 63"" - participant corrects their calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(3, 7, 63),
    comment='""7 times 9 is what? 64. 7 times 9. 63"" - participant corrects their calculation',
)
```"
2670,"[1,5,10,12]",(10/5)x(12x1),128," Okay, so 10 plus 12 is 22, 23, 24, so we would need 2 more, or we want to get to, we could get to 12 plus 12, that would give us 6. Let's just start messing around, so 12 plus 10 is 22, oh, plus 5 minus 1. Oh. Okay. So 12 plus 10 is 22. Oh, wait, that's not right. So 12 plus 10 is 22, oh yeah, plus, that would be 27, oh my goodness. 12 plus 10 plus 5, that's too many. And we can do this. We can do, we can make 6. But we would need 6 times 3. Oh, this one seems harder than the others. And we could have 6 here. 6 plus 12 is 18. But 10 doesn't fit into that. What about 10 divided by 5 is 2. 12 times 2 is 24 times 1, okay. So 10 divided by 5 is going to give us 2 on that. And then times 12, wait, we need a parenthesis, 12 times 1.","```python
start_state = (1, 5, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 12 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(1, 5, 22),
    comment='""10 plus 12 is 22""',
)

# ""plus 5 minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+5-1=26"",
    resulting_state=(26,),
    comment='""plus 5 minus 1""',
)

# ""12 plus 10 plus 5"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10+5=27"",
    resulting_state=(1, 27),
    comment='""12 plus 10 plus 5""',
)

# ""We can make 6"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""We can make 6""',
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(1, 2, 12),
    comment='""10 divided by 5 is 2""',
)

# ""12 times 2 is 24 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2*1=24"",
    resulting_state=(24,),
    comment='""12 times 2 is 24 times 1""',
)
```"
2671,"[1,2,4,4]",(4+2)x(4x1),49," 1, 2, 4, and 4. 24 divided by 4 is 6. Can I make 6 with these? 4 plus 2 is 6, times 4, yeah. So that gives us 4 plus 2 is 6, times… 6 times… wait, that'd be 6 times 3, we get 4 times 1. I think I need to put my multiplication sign in here. Wait, so 4 plus 2 is 6.","```python
start_state = (1, 2, 4, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 4 is 6"" - participant is working backward from goal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 4 is 6"" - participant is working backward from goal',
)

# ""Can I make 6 with these? 4 plus 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+2=6"",
    resulting_state=(1, 4, 6),
    comment='""Can I make 6 with these? 4 plus 2 is 6""',
)

# ""4 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*1=4"",
    resulting_state=(4, 6),
    comment='""4 times 1""',
)

# Finally, based on their response, they multiply 6 and 4
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment=""Based on their response, they multiply 6 and 4"",
)
```"
2672,"[4,4,5,6]",(6x4)x(5-4),28," 4, 4, 5, and 6. So, let's try to modify 5. 6 and 4 both go into 24. 6 times 4 times 1. So, 6 times 4 times 5 minus 4 times, wait, that's, yeah, 6 times 4.","```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 and 4 both go into 24"" suggests participant is working backward from 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 and 4 both go into 24""',
)

# ""6 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(4, 5, 24),
    comment='""6 times 4""',
)

# ""times 5 minus 4"" - participant realizes they need to multiply by 1, which they get from 5-4
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*(5-4)=24"",
    resulting_state=(24,),
    comment='""times 5 minus 4"" - participant realizes they need to multiply by 1',
)
```"
2677,"[1,2,8,10]",(10)+((8-1)x2),53," Okay, so 18, 19, 20, 21. So we need 3 more. Wait, 8 times 3 is 24. How can we get rid of the 10? 10 divided by 2 is 5. No, no, no, no, no. So we could do 10 on its own, plus, and then we need 14. 8, 7, 6. Oh, 7 times 2. 8 minus 1 is 7 times 2, in parentheses.","```python
start_state = (1, 2, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Okay, so 18, 19, 20, 21"" seems to be adding numbers but not clear which ones

# Set a subgoal of getting 24 by multiplying 8 by 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24"" - participant sets subgoal of multiplying 8 by 3',
)

# ""10 divided by 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(1, 5, 8),
    comment='""10 divided by 2 is 5""',
)

# ""So we could do 10 on its own, plus, and then we need 14"" 
# The participant seems to set a subgoal of getting 14 to add to 10
graph.set_subgoal(
    (10, 14),
    state_after_subgoal=(24,),
    comment='""So we could do 10 on its own, plus, and then we need 14""',
)

# ""8 minus 1 is 7 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-1)*2=14"",
    resulting_state=(10, 14),
    comment='""8 minus 1 is 7 times 2""',
)

# Then based on their response, they add 10 and 14
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+14=24"",
    resulting_state=(24,),
    comment=""Based on their response, they add 10 and 14"",
)
```"
2678,"[1,2,7,11]",((2x7)+11)-1,108," Okay, 7, 8, 9, 11, 10, 9, times 3, no, 11 times 2 is 22, 23, 24, 7, 7, 6, 5, 7, 6, 6 times 11, 10, 9, 6, 7, that'll be way too big. None of these are divisible by 2. So let's do 11 minus 7 is 5. What? 11, 10, 9, 8, 7, 6, 5 is 4 times . . . . . . . . . 2 times 1 now. 11 plus 7 is 18, and anything times 1 or plus 1 is going to be itself. . . . About 7 times 2 is 14, plus 11 would be 25 minus 1. Okay, what did I just say? 2 times 7 is 14. Oh wait, we need, oh my god, I can't have enough time. 2 times 7 plus 11 in parentheses minus 1 to the nth.","```python
start_state = (1, 2, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 2 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(1, 7, 22),
    comment='""11 times 2 is 22""',
)

# ""11 minus 7 is 5"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=5"",
    resulting_state=(1, 2, 5),
    comment='""11 minus 7 is 5"" - participant makes calculation error',
    result_calc_error=True,
)

# ""11 plus 7 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(1, 2, 18),
    comment='""11 plus 7 is 18""',
)

# ""7 times 2 is 14, plus 11 would be 25 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*7)+11-1=24"",
    resulting_state=(24,),
    comment='""7 times 2 is 14, plus 11 would be 25 minus 1""',
)
```"
2683,"[3,3,11,12]",12x3,180," Okay, let's see if I can get this one. 24. So, 12 looks like it's going to be a target number. I'm going to do the 3's. 13, 14. 11 times 3, that would be 33. 3 plus 3. 12. 3, 15. These are really stumping me. I need to brush up on my math skills, so let's go back to math. Let's try 12 times 11. That gives us 132. Divide that by 3. This is 44. I can't see any way that's working out. 12 plus 11 is 23. 5 times that. And I just can't make this work. So, 12 times by 3 gives us 36. 9 plus 11 equals 26. Minus 11 is 25. Gosh, no matter what I do. 12 plus 9 equals 21. Wish it would show me the answers. So, 12 minus 3 gives me 9. 9 plus 11 equals 13. 12 plus 9 gives me 10. That's the answer. Three times that. So, 11 plus 3 is 23, 11 minus 3 is 8, plus 12 plus 3 is still 23. 12 times 3.","```python
start_state = (3, 3, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 looks like it's going to be a target number""
# The participant seems to be setting a subgoal involving 12
graph.set_subgoal((12,), comment='""12 looks like it\'s going to be a target number""')

# ""I'm going to do the 3's"" followed by ""13, 14"" suggests they're adding 3+3
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 11, 12),
    comment='""I\'m going to do the 3\'s""',
)

# ""11 times 3, that would be 33""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(3, 12, 33),
    comment='""11 times 3, that would be 33""',
)

# ""12 times 11. That gives us 132. Divide that by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11/3=44"",
    resulting_state=(3, 44),
    comment='""12 times 11. That gives us 132. Divide that by 3""',
)

# ""12 plus 11 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(3, 3, 23),
    comment='""12 plus 11 is 23""',
)

# ""12 times by 3 gives us 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(3, 11, 36),
    comment='""12 times by 3 gives us 36""',
)

# ""12 minus 3 gives me 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(3, 9, 11),
    comment='""12 minus 3 gives me 9""',
)

# ""9 plus 11 equals 13"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=13"",
    resulting_state=(3, 13),
    comment='""9 plus 11 equals 13"" - calculation error',
    result_calc_error=True,
)

# Return to start state for final operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(3, 11, 36),
    comment='""12 times 3""',
)
```"
2685,"[6,9,9,11]",(9+9),180," So, let's see. The difference between 9 and 11 is 3. Let's just add this all up. 11 plus 9 plus 9 plus 6 equals 35, so I'm just going to put 11 off. So, the 9 plus 9 plus 6 equals the 24. So, how do I make the 11 disappear? 9 plus 9 plus 6 is 54. So, how do I make the 11 disappear? 9 plus 9 plus 6 is 54. No.... I can't figure these out! It's making me crazy. So, I'm going to go ahead and pick out the one that's missing. I did 11 times by 9, gives me 99, and if I divide it by 11, no, I can't use the 11 again. Okay, so let's try... Man, these are so... Hard. 9 plus 9, that gives me 18. 18, 6 plus 9 is 15.","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""The difference between 9 and 11 is 3"" - participant computes 11-9
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 6, 9),
    comment='""The difference between 9 and 11 is 3"" - participant computes 11-9, but makes calculation error',
    result_calc_error=True
)

# ""11 plus 9 plus 9 plus 6 equals 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9+9+6=35"",
    resulting_state=(35,),
    comment='""11 plus 9 plus 9 plus 6 equals 35""',
)

# ""9 plus 9 plus 6 equals the 24"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+6=24"",
    resulting_state=(11, 24),
    comment='""9 plus 9 plus 6 equals the 24""',
)

# ""9 plus 9 plus 6 is 54"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+6=54"",
    resulting_state=(11, 54),
    comment='""9 plus 9 plus 6 is 54"" - participant makes calculation error',
    result_calc_error=True
)

# ""11 times by 9, gives me 99""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*9=99"",
    resulting_state=(6, 9, 99),
    comment='""11 times by 9, gives me 99""',
)

# ""9 plus 9, that gives me 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 11, 18),
    comment='""9 plus 9, that gives me 18""',
)

# ""6 plus 9 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+9=15"",
    resulting_state=(9, 11, 15),
    comment='""6 plus 9 is 15""',
)
```"
2687,"[7,10,10,12]",,180," Okay, first thought is, 10% is easy, that's 20, 32, 39 is our total with all of those. If I, 7, 8, 9, 10, 11, 12, if I take those away, that leaves me with 25. That's still not quite right. If I do 10 minus 7, that gives me 3. 10 plus 12 is 25, which is still 1. 12 minus 7 is 5, that's 25, I already did that. 12 minus 1 is 2, 10 minus 12. 10 minus 1 is 2. 10 minus 2 is 7, 29. Oh man, this one's hard. So 10 times 10 is 100. Divide that by 7, which is 14. 100 minus 12, 8.3. 3. So, 27. And I can figure this out. 12. 12 times 5, 7 is 84. 84 divided by 10, 84. Yeah, I cannot get to the target number. Let's see. Two times 1. So 10 times 1. 2, 2, 1. 2 times 2, 3, 2, 1. 2 times 3, 2, 1. 2 times 3, 2, 3, 2. 2 times 3, 2. Yeah, I can't think this out. Yeah, I can't think this out.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10% is easy, that's 20"" - participant adds the two 10s
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(7, 12, 20),
    comment='""10% is easy, that\'s 20""',
)

# ""32, 39 is our total with all of those"" - participant adds all numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10+10+12=39"",
    resulting_state=(39,),
    comment='""39 is our total with all of those""',
)

# ""10 minus 7, that gives me 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 10, 12),
    comment='""10 minus 7, that gives me 3""',
)

# ""10 plus 12 is 25"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=25"",
    resulting_state=(7, 10, 25),
    comment='""10 plus 12 is 25"" - calculation error',
    result_calc_error=True,
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 10, 10),
    comment='""12 minus 7 is 5""',
)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(7, 12, 100),
    comment='""10 times 10 is 100""',
)

# ""Divide that by 7, which is 14"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""100/7=14"",
    resulting_state=(12, 14),
    comment='""Divide that by 7, which is 14"" - calculation error',
    result_calc_error=True,
)

# ""12 times 5, 7 is 84""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(10, 10, 84),
    comment='""12 times 5, 7 is 84""',
)

# ""84 divided by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""84/10=8.4"",
    resulting_state=(8.4, 10),
    comment='""84 divided by 10""',
)

# The rest of the transcript contains fragments that are hard to interpret as specific operations
```"
2697,"[1,6,8,13]",(13-6),180," Okay. Let's see. Trying to figure out the equation. 13 plus 8 plus 6 plus 1, that's 12. Hmm. 6. 6 times 8. Minus 13. 34. Okay. 13 minus 6. Plus 8. No, hold on. I think I got something. 13 minus 6. 6. 6.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 8 plus 6 plus 1, that's 12"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8+6+1=12"",
    resulting_state=(12,),
    comment='""13 plus 8 plus 6 plus 1, that\'s 12"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""6 times 8. Minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8-13=34"",
    resulting_state=(1, 34),
    comment='""6 times 8. Minus 13""',
    result_calc_error=True,
)

# ""13 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 7, 8),
    comment='""13 minus 6""',
)

# ""Plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(1, 15),
    comment='""Plus 8""',
)

# ""13 minus 6"" - participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 7, 8),
    comment='""13 minus 6"" - participant tries this operation again',
)

```"
2702,"[9,11,12,13]",(12-11),180," Okay, 9, 11, 12, and 13. Let's see here. 12 times 11 minus 9 would be 24, but that leaves 13 unaccounted for. I wonder, I think going negative would have helped the last one, so I wonder if we can do that with this one as well. Let's see here. 9 minus 11 is negative 2 plus, no, that won't work, 12 minus 13 is negative 1. We would need to add 25 to that. Nope, can't get 25 out of 9 and 11. 9 plus 11 is 20, 21, 22. Let's see, 9 plus 13. It's 22. We cannot get 2 out of 11 and 12. Let's see here. 2, 4, 6, 8 are the factors of 24. We have lots of ways to make 2 here. We have one way to make 4. We need, what, 4 times 6. That doesn't work. Let's see here. 12 minus 11 is one. That works. 1 minus 7 is 1.","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 11 minus 9 would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11-9=123"",
    resulting_state=(13, 123),
    comment='""12 times 11 minus 9 would be 24"" - participant makes calculation error',
    result_calc_error=True,
)

# ""9 minus 11 is negative 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-11=-2"",
    resulting_state=(-2, 12, 13),
    comment='""9 minus 11 is negative 2""',
)

# ""12 minus 13 is negative 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-13=-1"",
    resulting_state=(-1, 9, 11),
    comment='""12 minus 13 is negative 1""',
)

# ""9 plus 11 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(12, 13, 20),
    comment='""9 plus 11 is 20""',
)

# ""9 plus 13"" participant seems to be trying different additions
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(11, 12, 22),
    comment='""9 plus 13""',
)

# The participant then talks about factors of 24 and ways to make 2 and 4, which seems to be setting subgoals
graph.set_subgoal((2,), state_after_subgoal=(24,), comment=""participant mentions factors of 24 and ways to make 2"")
graph.set_subgoal((4,), state_after_subgoal=(24,), comment=""participant mentions factors of 24 and ways to make 4"")

# ""12 minus 11 is one""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 9, 13),
    comment='""12 minus 11 is one""',
)

```"
2706,"[7,8,8,12]",8x(7+8-12),50," 7, 8, 8, and 12. Let's see here. 12 minus 8 is 4, but we cannot get a 6 out of 7 and 8. Can we get an 8? Can we get a 3 out of the rest of those? 7 plus 8 is, yes we can. 8 times 7 plus 8 is 15 minus 12 is 3.","```python
start_state = (7, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 7, 8),
    comment='""12 minus 8 is 4""',
)

# ""Can we get a 3 out of the rest of those?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""Can we get a 3 out of the rest of those?""',
)

# ""7 plus 8 is 15 minus 12 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8-12=3"",
    resulting_state=(3, 8),
    comment='""7 plus 8 is 15 minus 12 is 3""',
)

# Then the participant must multiply 8 by 3 to get 24, based on their response
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment=""Based on the submitted response, participant multiplies 8 by 3"",
)
```"
2707,"[1,1,5,6]",6x(5-1x1),19," 1, 1, 5, and 6. 6 times 4 is 24. We can make 4 with 5 minus 1 times 1","```python
start_state = (1, 1, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24"" - participant is setting a subgoal to make 4
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24"" - participant is setting a subgoal to make 4',
)

# ""We can make 4 with 5 minus 1 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1*1=4"",
    resulting_state=(4, 6),
    comment='""We can make 4 with 5 minus 1 times 1""',
)

# Then multiply by 6 to reach the goal
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment=""Multiply by 6 to reach the goal"",
)
```"
2713,"[4,5,5,8]",(4-(5/5))x8,88," 40 minus 20, 20 times 8 is 160, divided by 5 is not anywhere close. 25 times 8 is 200 divided by 4, no. 40 divided by 5, 40 divided by 4 is 10 times 5, no. 20, I need to get a 3 somehow. 4 minus 5, 5 minus 5, 5 divided by 5 is 1. Okay, 4, let's go back here. 4 minus 5 divided by 5 is 3 times 8. That's not. 5 divided by 5 is 1. Oh, I need an extra closed parentheses in there. times eight","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need to get a 3 somehow""
# The participant seems to set a subgoal of getting 3
graph.set_subgoal((3, 8), state_after_subgoal=(24,), comment='""I need to get a 3 somehow""')

# ""5 divided by 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5/5=1"",
    resulting_state=(1, 4, 8),
    comment='""5 divided by 5 is 1""',
)

# ""4 minus 5 divided by 5 is 3"" - participant finds a way to get 3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-(5/5)=3"",
    resulting_state=(3, 8),
    comment='""4 minus 5 divided by 5 is 3""',
)

# ""times eight"" - participant multiplies by 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""times eight""',
)
```"
2726,"[3,4,8,10]",3x4x(10-8),26," Okay, 12 times 2, so 3 times 4 times parenthesis 10 minus 8.","```python
start_state = (3, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 4 times parenthesis 10 minus 8""
# The participant first says ""12 times 2"" suggesting they are thinking about the subgoal of getting 12 from 3*4
graph.set_subgoal((12, 2), state_after_subgoal=(24,), comment='""12 times 2""')

# Then they execute their plan: ""3 times 4 times parenthesis 10 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4*(10-8)=24"",
    resulting_state=(24,),
    comment='""3 times 4 times parenthesis 10 minus 8""',
)
```"
2728,"[2,4,6,9]",(9-6)x4x2,137," 6 times 9 is 63... divided by... 6 times 6... 2, 12, 3, 5, 16, 17, 18, 19, 20. 6 times 18, 24 is 4 and 6. 24 divided by 2 is 17, 27. 4 for 16... 25... 7... 28... 8 divided by 4 is 7... 8 divided by 4... 7... 8... 9... 3... 4, 8, 12, 24, 3. So 9 minus 6 times 4 times 3. Parentheses that. 9 minus 6.","```python
start_state = (2, 4, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 9 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=63"",
    resulting_state=(2, 4, 63),
    comment='""6 times 9 is 63""',
    result_calc_error=True,
)

# Move back to start state
curr_state = graph.move_to_node(start_state)

# ""9 minus 6 times 4 times 3"" - they meant to multiply by 2, not 3, based on their response
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-6)*4*2=24"",
    resulting_state=(24,),
    comment='""9 minus 6 times 4 times"" 2 (based on their response)',
)
```"
2731,"[3,3,9,11]",,180," Minus nine would be 25. 20, 21, 20, 23, 24, 19, 20, 27, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, three three times three nine nine six times three will be 18 11 minus 2 11 minus 9 would be 2 so nine time nine plus three with 12 plus nine time nine plus three with 12 plus nine time nine plus three with 12 plus 17 824 three times three will be 920 33 33 33 plus 30 plus 30 okay wonder 6 6 or 18 21 and 29 6 or 18 11ting plusia What's going on here?","```python
start_state = (3, 3, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""three times three nine"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 9, 11),
    comment='""three times three nine""',
)

# ""nine times three will be 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 11, 27),
    comment='""nine times three will be 18"" - participant says 18 but likely means 27',
    result_calc_error=True,
)

# ""11 minus 9 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 3, 3),
    comment='""11 minus 9 would be 2""',
)

# ""nine time nine plus three with 12"" seems to be computing 9*9=81+3
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9+3=84"",
    resulting_state=(3, 11, 84),
    comment='""nine time nine plus three with 12""',
)

# The rest of the transcript is unclear or seems to contain transcription errors
# Numbers like ""33 33 33"" and ""6 6 or 18 21 and 29"" don't clearly correspond to operations
# with the starting numbers

```"
2735,"[2,3,3,7]",(2+7)x3-3,108," So, the numbers are 2, 3, 3, and 7. I think that 8 times 3 here would make 24, but I'm trying to see how I can make an 8 here, or even 12 times 2 makes 24. I think, actually, I can make a 3 plus 3, which is 6. 6 times 7 is 42. Well, 42 divided by 2, that would not be 24, actually. So, 9 minus 2 is 7. See, 3 times 3 is 9. 3 times 7 is 21. 9 plus 3. So, 7 minus 2 is 5. 21 plus 3. So, 2 plus... Okay, I think I found a way. So, 2 plus 7 is 9. 9 times 3 makes 27. Minus 3 would be 24, I think. So, let me just put that in. 2 plus 7 times 3 minus 3. So, 9 times 3 is 27 minus 3. That would be 24.","```python
start_state = (2, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 here would make 24"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 here would make 24""',
)

# ""12 times 2 makes 24"" - participant sets another subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 makes 24""',
)

# ""3 plus 3, which is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(2, 6, 7),
    comment='""3 plus 3, which is 6""',
)

# ""6 times 7 is 42""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(2, 42),
    comment='""6 times 7 is 42""',
)

# ""42 divided by 2"" participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42/2=21"",
    resulting_state=(21,),
    comment='""42 divided by 2""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(2, 7, 9),
    comment='""3 times 3 is 9""',
)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 3, 21),
    comment='""3 times 7 is 21""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(3, 3, 5),
    comment='""7 minus 2 is 5""',
)

# ""2 plus 7 is 9. 9 times 3 makes 27. Minus 3 would be 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+7)*3-3=24"",
    resulting_state=(24,),
    comment='""2 plus 7 is 9. 9 times 3 makes 27. Minus 3 would be 24""',
)
```"
2736,"[4,4,9,11]",4x(4+11-9),160," Okay, let's click continue. So the numbers are 4, 4, 9, and 11. I think 8 times 3, but 11 minus 9 is not 3, so that doesn't work. Let's see here. 4 minus 4 is 0. Nope, 4 times... Okay, so... 6 minus 11... 9 times 3... 20 plus 4... Um... 44 minus 36... Nope, 34 minus 13... Nope, that doesn't work. Uh, 36... Minus 15... So, 2 times 12... 16 plus 11 is 27 minus 9. Um, no, that wouldn't make 24. Um... 8... So, 11 minus 4 is 7. 7... times... I think... 11 minus 9 is 2. 2 times 4 is 8. 8 times 4... Nope. Um... 2 plus 4 is 6. 6 times 4 is... Okay, so I think I got it. So, 4 times, um... Uh, 11 minus 9, which is 2... Plus 4. Okay, let me just delete the parentheses. Plus the 4. And delete this. So, 4 plus 11 minus 9. So, 4 plus 11 is 15 minus 9 is... 6 times 4 is 24. Submit.","```python
start_state = (4, 4, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I think 8 times 3, but 11 minus 9 is not 3"" - participant seems to be looking for a way to get 24 by multiplying 8 and 3
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""I think 8 times 3""',
)

# ""11 minus 9 is not 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 4, 4),
    comment='""11 minus 9 is not 3""',
)

# ""4 minus 4 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-4=0"",
    resulting_state=(0, 9, 11),
    comment='""4 minus 4 is 0""',
)

# ""11 minus 4 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(4, 7, 9),
    comment='""11 minus 4 is 7""',
)

# ""11 minus 9 is 2. 2 times 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-9)*4=8"",
    resulting_state=(4, 8),
    comment='""11 minus 9 is 2. 2 times 4 is 8""',
)

# Finally, the participant finds the solution:
# ""4 times, um... Uh, 11 minus 9, which is 2... Plus 4""
# ""4 plus 11 minus 9. So, 4 plus 11 is 15 minus 9 is... 6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*(4+11-9)=24"",
    resulting_state=(24,),
    comment='""4 plus 11 minus 9. So, 4 plus 11 is 15 minus 9 is... 6 times 4 is 24""',
)
```"
2738,"[1,3,3,7]",3/1+3x7,89," Okay, so target number is 24. The numbers are 1, 3, 3, and 7. Uh, so I think 4 times 6 could make 24. 2 times 12 or, um, 24 times 1. So, 3 times 8. 3 times 8. Hmm. Okay, 6 times 4. Okay, 6 times 4. Hmm. So, 2 times 12. 21 plus 2. 21 plus 3. Actually, I think 21 plus 3 makes 24. So, um, and 3 divided by 3 minus 1 is a... 21 plus 3. 3 divided by 1 would make a 3. So, let's do... 3 divided by 1 plus, um... 3 times 7. So, 3 divided by 1 is 3. 3 times 7 is 21. And 3 plus 21 is 24.","```python
start_state = (1, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first lists some ways to make 24 in general:
# ""4 times 6 could make 24""
# ""2 times 12""
# ""24 times 1""
# ""3 times 8""
# These aren't operations on the current numbers, just general observations

# ""21 plus 3"" participant seems to set a subgoal of getting to 21
graph.set_subgoal(
    (3, 21),
    state_after_subgoal=(24,),
    comment='""21 plus 3"" participant seems to want to get to 21 and add 3',
)

# ""3 divided by 3 minus 1"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3-1=0"",
    resulting_state=(0, 3, 7),
    comment='""3 divided by 3 minus 1""',
)

# ""3 divided by 1 would make a 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/1=3"",
    resulting_state=(3, 3, 7),
    comment='""3 divided by 1 would make a 3""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(3, 21),
    comment='""3 times 7 is 21""',
)

# ""And 3 plus 21 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+21=24"",
    resulting_state=(24,),
    comment='""And 3 plus 21 is 24""',
)
```"
2744,"[8,9,12,12]",12x(8+9-12),180," Oh, jeez. Okay, we got another one. 8, 9, 12, and 12. 8, 9, 12, and 12. Oh, jeez. Okay. Okay, I got this. 12 plus 12, parentheses, x, plus 12. Oh, must be followed by a number of bracket. And then a bracket. 12 plus 12, 9 minus 8, bracket. It has to be 24. 24. Okay. 12 times 12. 12 times 12. 12x. 12 times 24. Multiplied by 12. Plus 9. Divided by 8. Oh, not all numbers need to be used. No, we probably just didn't correct the answer. Because I was guessing again. 12 plus 8. Divided by 9. Maybe. No. Oh, 24. Let's see. 8x times. Times. 9 times. 9. 8x times. 9. Plus 12. Plus 12. Plus 12. Okay. 9. Plus 12. 9 plus 12. Plus 12. No. I still don't know what I'm doing wrong here. Let's do 12x and then do something in plus 9 minus 12. No. Okay. Oh, I wish there was a way for me to go back and see what the right answers were before. So I kind of knew what I was still doing.","```python
start_state = (8, 9, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(8, 9, 24),
    comment='""12 plus 12""',
)

# ""9 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 12, 12),
    comment='""9 minus 8""',
)

# ""12 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(8, 9, 144),
    comment='""12 times 12""',
)

# ""Plus 9. Divided by 8"" seems to continue from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(144+9)/8=19.12"",
    resulting_state=(19.12,),
    comment='""Plus 9. Divided by 8""',
)

# ""12 plus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(9, 12, 20),
    comment='""12 plus 8""',
)

# ""Divided by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20/9=2.22"",
    resulting_state=(2.22, 12),
    comment='""Divided by 9""',
)

# ""8x times. Times. 9 times. 9.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(12, 12, 72),
    comment='""8x times. Times. 9 times. 9.""',
)

# ""Plus 12. Plus 12.""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72+12+12=96"",
    resulting_state=(96,),
    comment='""Plus 12. Plus 12.""',
)

# ""9 plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12=21"",
    resulting_state=(8, 12, 21),
    comment='""9 plus 12""',
)

# ""12x and then do something in plus 9 minus 12""
# Based on their submitted answer of 12x(8+9-12), they eventually found the solution
new_state = graph.explore_operation(
    curr_state,
    operation=""12*(8+9-12)=60"",
    resulting_state=(60,),
    comment='""12x and then do something in plus 9 minus 12"" - this matches their submitted answer',
)
```"
2749,"[7,10,11,13]",11x(,180," Oh, here we go again. 7, 10, 11, 13. 7, 10, 11, 13. Okay, so an x. 10 plus 11 minus 13. Totally guessing now. 21 minus 13 equals 11 minus 3 is 8. So that would be 56. Never mind. 70. Gosh, I feel like this is gonna be a big number on both sides. Maybe subtracting one from the other. 70. What's 13 times 11? That's 1, 0, 3. Oh, that's not it. 70. I can't. 13 times 11 is 143 minus 70. So that's not, that's way off. 70. 13 times 11. 70. 10 times 11 is 110. 70. 13 times 7. 70. Oh my gosh, 13 times 7. 91. 70. Oh, what's 110 minus 91? 71. That's not right. It's 19. Oh, I thought I had a chance there. Oh, boy. Oh, boy. 13x multiplied by 11 minus 10 parentheses 7. No. Okay. Just guessing now. Plus 7? 11? No. Does anything equal 24? Yes. 11. 11x. Oh, no. Sorry. 11x.","```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 11 minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11-13=8"",
    resulting_state=(7, 8),
    comment='""10 plus 11 minus 13""',
)

# ""that would be 56"" - not clear what operation this refers to
# ""70"" - participant seems to be computing 7*10
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(11, 13, 70),
    comment='""70"" - participant seems to be computing 7*10',
)

# ""13 times 11? That's 1, 0, 3"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=103"",
    resulting_state=(7, 10, 103),
    comment='""13 times 11? That\'s 1, 0, 3"" - participant makes calculation error',
    result_calc_error=True,
)

# ""13 times 11 is 143""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=143"",
    resulting_state=(7, 10, 143),
    comment='""13 times 11 is 143""',
)

# ""10 times 11 is 110""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*11=110"",
    resulting_state=(7, 13, 110),
    comment='""10 times 11 is 110""',
)

# ""13 times 7. 91""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(10, 11, 91),
    comment='""13 times 7. 91""',
)

# Move back to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""13x multiplied by 11 minus 10 parentheses 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*(11-10)*7=91"",
    resulting_state=(91,),
    comment='""13x multiplied by 11 minus 10 parentheses 7""',
)
```"
2752,"[2,2,10,11]",,180," Alright, 24, and now we're going to have to do some dividing and minus subtraction, okay. 22, whoops, 24, 40, oh god, terrible. 11 plus 2, so that's 13, times 20, and 10 plus 3, oh. Yep, I got it, minus 3. That's 13, no. So, what do we want to do, 40 minus 15? Oh, god, 40 minus 15, 20. Um, so, what about 10 gets us 35? Um, minus 11, 10, 40, 10, wait. Ugh, I'm such an idiot. Um. 10 times 2, so that's 4. That'll be 40, and that'll be 29. And, whoops, 10 times, say, 10, say aloud. 23, and 4, and 5, and 5, and 7, and 9, and 10. 11 plus 21, and 2 plus 3. Nope, I'm such an idiot. 11 times 10, divided by. 11 times 10, divided by 2 plus 3. 11 times 10, divided by 2 plus 3. Let me try that. 11 times 10, divided by 2. 1 plus 2. Ugh. Damn it, man. 9, 11 times 3, so that'd be 22.","```python
start_state = (2, 2, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 2, so that's 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+2=13"",
    resulting_state=(2, 10, 13),
    comment='""11 plus 2, so that\'s 13""',
)

# ""10 times 2, so that's 4"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=4"",
    resulting_state=(2, 4, 11),
    comment='""10 times 2, so that\'s 4"" seems to be a calculation error',
    result_calc_error=True,
)

# ""That'll be 40"" participant corrects their calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(2, 11, 20),
    comment='""That\'ll be 40"" participant seems to be correcting their calculation',
)

# ""11 times 10, divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*10/2=55"",
    resulting_state=(2, 55),
    comment='""11 times 10, divided by 2""',
)

# ""11 times 3"" - participant seems to be setting a subgoal to make 3 first
graph.set_subgoal(
    subgoal_state=(3,),
    comment='""11 times 3, so that\'d be 22"" participant seems to want to multiply by 3 but needs to make it first'
)
```"
2753,"[1,1,7,10]",,180," Let me see here. So how can I do this? 7, 14, 21. 10 divided by 5, 7, 14, 21, 28. Nope. Let me see here. 70. 7 times 1. 7 times 1. 10 divided by 7. No. Oh my god. 10 minus 2, 8, 15. No. So that's going to be. Okay. Let me see. 10 times 1. That'd be 10. Obviously. Plus 1. That'd be 11. Um. Times 7. No. That's not going to work. Um. 1 minus. No. 7 minus 1. That'd be 6. 6. No. I think it's 18. Um. 7 plus 1. That'd be 8. 18. No. 6. 10 times. Oh my god. This is so hard. 10. No. 8. 10. No. Plus 1. Um. 11. Plus. No. That's not going to work. 7 times 1. That's not going to work. Alright. So now we're going to divide. Yes. I'm speaking. I'm speaking. I'm speaking. I'm speaking. Um. 7d divided by 2 would be 35. Um. Times. Can I get to 48? 10, 14, 21, 28, 35, 42, 49 minus 1. 48 divided by 2. No. I can't. That's not going to work with this. Um. 48 divided by 2. Can I get to 48? It means 7 times.","```python
start_state = (1, 1, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*1=7"",
    resulting_state=(1, 7, 10),
    comment='""7 times 1""',
)

# ""10 divided by 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/7=1.43"",
    resulting_state=(1, 1, 1.43),
    comment='""10 divided by 7""',
)

# ""10 minus 2, 8, 15"" - not clear where 2 comes from, might be 1+1
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 7, 10),
    comment='""10 minus 2"" - first making 2 from 1+1',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(7, 8),
    comment='""10 minus 2, 8""',
)

# ""10 times 1. That'd be 10. Obviously. Plus 1. That'd be 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*1=10"",
    resulting_state=(1, 7, 10),
    comment='""10 times 1""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+1=11"",
    resulting_state=(7, 11),
    comment='""Plus 1. That\'d be 11""',
)

# ""7 minus 1. That'd be 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(1, 6, 10),
    comment='""7 minus 1. That\'d be 6""',
)

# ""7 plus 1. That'd be 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(1, 8, 10),
    comment='""7 plus 1. That\'d be 8""',
)

```"
2754,"[7,10,10,12]",(10x,180," and these just keep getting bigger and bigger 10 20 39 12 10 times 10 divided by 12 plus 7 10 times 10 divided by 12 plus 7 yeah I need a drink of water, this is drying up my mouth yeah just just so the researchers know that math has always been my bugaboo, I've always been terrible with math my 12 times 10 is going to be how many points 10 points divided by 12 divided by 7 plus 10 17 and 12 times 10 would be 150 120 120 divided by 10 minus 7 53 yeah yeah yeah 12 12 times 7 12 times 7 would be 12 times 8 would be would be 34 minus 10 would be 74 yeah um minus yeah that's not that much 10 plus 10 I don't know 12 times 10 12 times 4 is 48 50 72 and 72 is 52 minus no","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 10 divided by 12 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10/12+7=15.33"",
    resulting_state=(15.33,),
    comment='""10 times 10 divided by 12 plus 7""',
)

# ""12 times 10 is going to be how many points"" participant tries a new calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*10=120"",
    resulting_state=(7, 10, 120),
    comment='""12 times 10 is going to be how many points""',
)

# ""120 divided by 10 minus 7 53""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""120/10-7=53"",
    resulting_state=(53,),
    comment='""120 divided by 10 minus 7 53""',
    result_calc_error=True,
)

# ""12 times 7 would be 12 times 8 would be would be 34 minus 10 would be 74""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(10, 10, 84),
    comment='""12 times 7""',
)

# The participant seems to have run out of time, as indicated by their incomplete response ""(10x""
```"
2759,"[3,5,6,11]",,180," Okay, target number is 24. Okay, these are getting harder. So, 6 plus 5 is 11. 11 plus 3 is 14. 14 plus 11 is 25, so that doesn't work. Um, 11, let's see, 6 minus, somehow I think we can get 24 by adding these numbers but subtracting 1 maybe? 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21. Oh, I know, no, that won't work. I was going to say 6 minus 5 is 1. 11, no, that doesn't, I was going to say 6 minus 5 equals 1. 1 plus 4 is 4. That won't get us there, obviously. Uh, 5 plus 3 is 8. 8, 8, no. Somehow if we can get to it. 12 times 2. 6 minus, no, that won't get us 6. 6 minus 5 is 1. Oh, 3 minus, parentheses, 6. 3 minus 1 is 2. 2 times 11 is 22. That doesn't work either. Um, somehow we have to get 12. 6, 6 minus 5. Urgh. Okay, 6. 1. 6 minus. And then 11. 11 plus 1 is 12. Sigh. 6 minus 3 is 3. Okay. Okay, I'm just getting stumped. Uh, let's try divided by. Okay.","```python
start_state = (3, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 5 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(3, 11, 11),
    comment='""6 plus 5 is 11""',
)

# ""11 plus 3 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+3=14"",
    resulting_state=(11, 14),
    comment='""11 plus 3 is 14""',
)

# ""14 plus 11 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+11=25"",
    resulting_state=(25,),
    comment='""14 plus 11 is 25""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""6 minus 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 3, 11),
    comment='""6 minus 5 is 1""',
)

# ""5 plus 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(6, 8, 11),
    comment='""5 plus 3 is 8""',
)

# ""3 minus 1 is 2. 2 times 11 is 22"" - participant seems to be using the 1 from 6-5=1
curr_state = graph.move_to_node((1, 3, 11))
new_state = graph.explore_operation(
    curr_state,
    operation=""(3-1)*11=22"",
    resulting_state=(22,),
    comment='""3 minus 1 is 2. 2 times 11 is 22""',
)

# ""somehow we have to get 12"" - participant sets a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""somehow we have to get 12""',
)

# ""11 plus 1 is 12"" - participant trying to reach subgoal using 1 from earlier 6-5
curr_state = graph.move_to_node((1, 3, 11))
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(3, 12),
    comment='""11 plus 1 is 12""',
)

# ""6 minus 3 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 5, 11),
    comment='""6 minus 3 is 3""',
)

```"
2761,"[1,6,8,9]",(9-6)x1x8,72," Target number 24. I'm starting not to feel good about myself because I can't really get these very quickly. 24. 6 times 4 is 24 so can I get can I get the number 4 out of 9, 8, and 1 and then 8 times 8 times 3 is 24 so I could use that 8 and use oh wait use the 6, 9, and 1 out of that. So 6, 9, and 1. So wait 9, 9 minus 6 times 1 but I had to use the parentheses for that. So let's start out 9 minus 6 in parentheses times 1 that would be 3 and then times 8 that would be 24.","```python
start_state = (1, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24"" - participant sets a subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24"" - participant sets a subgoal to try to make 4',
)

# ""8 times 3 is 24"" - participant sets another subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24"" - participant sets another subgoal',
)

# ""9 minus 6 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-6)*1=3"",
    resulting_state=(3, 8),
    comment='""9 minus 6 times 1""',
)

# ""and then times 8 that would be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""and then times 8 that would be 24""',
)
```"
2762,"[5,6,8,13]",,180," Target number 24. I think I saw this one before, but I'm not quite sure. Okay, so 8 times 3 is 24, so 6 times 4. So can I get there with this? 13 minus 5 is 8. 8 and 8 is 16. 16 and 6 is 22, so that doesn't work. 8 plus 5 is 13. Plus 13 is 26. I don't have the 6 left over. That doesn't work. I haven't really used a division much. I don't really see anything that divides that easily. 8. I feel like I'm missing something simple. 8. 13. 6 plus 5 is 11. No, this doesn't work. I tried that already. 6 plus 8 is 14. Let me just write. 6 plus 8 is 14. And then I would need 10 to get to. Yeah, this doesn't work. Plus 13 plus 5. 13 minus 5. 14. 13 minus 5 is 8. So that doesn't work. That doesn't work. 13 minus 5 is 7. 7 plus 6 is 13. Minus 5 is 7. 7 plus... 8 times 6 is 48. 8 times 6 is 48. Minus... 13. That doesn't work. 13 minus... 13 minus 1 times...","```python
start_state = (5, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(6, 8, 8),
    comment='""13 minus 5 is 8""',
)

# ""8 and 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(6, 16),
    comment='""8 and 8 is 16""',
)

# ""16 and 6 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(22,),
    comment='""16 and 6 is 22""',
)

# ""8 plus 5 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(6, 13, 13),
    comment='""8 plus 5 is 13""',
)

# ""Plus 13 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(6, 26),
    comment='""Plus 13 is 26""',
)

# ""6 plus 5 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(8, 11, 13),
    comment='""6 plus 5 is 11""',
)

# ""6 plus 8 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(5, 13, 14),
    comment='""6 plus 8 is 14""',
)

# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(6, 8, 8),
    comment='""13 minus 5 is 8""',
)

# ""13 minus 5 is 7. 7 plus 6 is 13"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=7"",
    resulting_state=(6, 7, 8),
    comment='""13 minus 5 is 7""',
    result_calc_error=True,
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(8, 13),
    comment='""7 plus 6 is 13""',
)

# ""8 times 6 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 13, 48),
    comment='""8 times 6 is 48""',
)

```"
2765,"[1,5,9,10]",(10+9+5)/1,141," Alright, target number 24. I see a 6. I feel like 9 is going to be hard to make out of a 4. So 9 minus 5 is 4. And there is also a 5 plus 1 is 6. But they're both using 5 minus 4. They're both using the 5. Oh, there's 19. 10 plus 9 is 19 plus 1 is 20 plus 5 is 25. So 10 plus 9. Oh, 5 minus 1 is 4. No. Dang it. 5 minus 1 is 4 plus 19. 18. 10 minus 9 is 1. No. 6 plus 5 is 1. 6 times 5 is 30. Plus 1 doesn't make any sense. 5 minus 1 is 4. 10 divided by... No. Go back to the 6. 5 plus 1 is 6. 5 minus 1 is 4. 10 plus 19. That's the 5. 10 plus 9. 10 plus 9 is 19. 19... Oh, wait a second. 10... Maybe if I divide the whole thing by 1. Plus 9 plus 5 is 24. And divide that whole thing by 1.","```python
start_state = (1, 5, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(1, 4, 10),
    comment='""9 minus 5 is 4""',
)

# ""5 plus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 9, 10),
    comment='""5 plus 1 is 6""',
)

# ""10 plus 9 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+9=19"",
    resulting_state=(1, 5, 19),
    comment='""10 plus 9 is 19""',
)

# ""plus 1 is 20 plus 5 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+1+5=25"",
    resulting_state=(25,),
    comment='""plus 1 is 20 plus 5 is 25""',
)

# ""5 minus 1 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 9, 10),
    comment='""5 minus 1 is 4""',
)

# ""plus 19"" - participant seems to be trying to add 19 to 4, but 19 isn't available

# ""10 minus 9 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 1, 5),
    comment='""10 minus 9 is 1""',
)

# ""6 times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*5=30"",
    resulting_state=(9, 10, 30),
    comment='""6 times 5 is 30"" where 6 comes from 5+1',
)

# ""Plus 1 doesn't make any sense""

# ""5 minus 1 is 4"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 9, 10),
    comment='""5 minus 1 is 4""',
)

# ""10 divided by... No""

# ""5 plus 1 is 6"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 9, 10),
    comment='""5 plus 1 is 6""',
)

# ""5 minus 1 is 4"" - participant tries this yet again
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 9, 10),
    comment='""5 minus 1 is 4""',
)

# ""10 plus 9 is 19"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""10+9=19"",
    resulting_state=(1, 5, 19),
    comment='""10 plus 9 is 19""',
)

# Finally, the participant finds the solution: ""Plus 9 plus 5 is 24. And divide that whole thing by 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+9+5)/1=24"",
    resulting_state=(24,),
    comment='""Plus 9 plus 5 is 24. And divide that whole thing by 1""',
)
```"
2767,"[7,8,8,11]",(11-7)x8,180," 8 divided 8 is 1. Oh, wait, wait. 8 divided by 8 is 1. No. Plus 7. 1 plus 7, no. 11 minus 7 is 4. 11 minus 7 is 4. 12, no. 22, no. Ugh. Hmm. I don't know. I don't know. Hmm. Beep. Beep. Beep. Beep. Beep, beep. Beep, beep, beep. 8 times 8 is 64 divided 8 times 8 is 64 divided by a set. No, that's not going to give me an even number. May 3rd, prix automé. Well, let me get close to 24. I don't know. Maybe that 11, stop, 11 minus seven is four. Uh, four times eight is 32, minus eight, no, no, no, minus.","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 7, 11),
    comment='""8 divided 8 is 1""',
)

# ""Plus 7"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+7=8"",
    resulting_state=(8, 8, 11),
    comment='""Plus 7""',
)

# ""11 minus 7 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 8, 8),
    comment='""11 minus 7 is 4""',
)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 11, 64),
    comment='""8 times 8 is 64""',
)

# ""11 minus seven is four"" participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 8, 8),
    comment='""11 minus seven is four""',
)

# ""four times eight is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(8, 32),
    comment='""four times eight is 32""',
)

# Based on their final response of (11-7)x8, they must have eventually realized that 4*8=32 was not the right path
# and instead computed (11-7)*8=24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-7)*8=24"",
    resulting_state=(8, 32),
    comment=""Based on their final response"",
)
```"
2776,"[2,3,5,10]",,180," All right, so we're going for 24 again. So, well, we can't do 10 times 2 because that's 20. Hmm. Hmm. So we're going to go with, okay, yeah, 10 times 2. 5 is 50. Minus 6. That's not right. 5 times 3 is 15. Times 2 is 30. Minus 10 is 20 again. So that's not right. Hmm. Yeah, let's do, why can't I think of this? 10 minus, nope. Hmm. 3. Yep, okay, wait. So, we're going to do 5 minus 3 equals 2 plus 2. Plus 10. That's 2. That's only 14. That's 20. 20 plus 5 minus 3. It's not right either. 3 times 10 is 30. Minus 5 is 25.","```python
start_state = (2, 3, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 2 because that's 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 5, 20),
    comment='""10 times 2 because that\'s 20""',
)

# ""10 times 2. 5 is 50"" - participant seems to be multiplying 10*2*5
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2*5=50"",
    resulting_state=(3, 50),
    result_calc_error=True,
    comment='""10 times 2. 5 is 50""',
)

# ""5 times 3 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(2, 10, 15),
    comment='""5 times 3 is 15""',
)

# ""Times 2 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*2=30"",
    resulting_state=(10, 30),
    comment='""Times 2 is 30""',
)

# ""Minus 10 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-10=20"",
    resulting_state=(20,),
    comment='""Minus 10 is 20""',
)

# ""5 minus 3 equals 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 2, 10),
    comment='""5 minus 3 equals 2""',
)

# ""plus 2. Plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2+10=14"",
    resulting_state=(14,),
    comment='""plus 2. Plus 10""',
)

# ""3 times 10 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(2, 5, 30),
    comment='""3 times 10 is 30""',
)

# ""Minus 5 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-5=25"",
    resulting_state=(2, 25),
    comment='""Minus 5 is 25""',
)
```"
2784,"[7,7,11,12]",(11+12)+(7/7),95," Okay, 77, 12 plus 11 is 23, 23, 23, 23, hmm. 11 minus 7 is 4, 4, 4 times 7 is 28, 4 times 12, 12 minus 7 is 24, 24, 24, 24, 24, 24, 4 times 5 is 20. 12 minus 7 is 5. Yep. So 23, okay. So 11 plus 12 is 23 plus 7 divided by 7 is 1. That's my answer.","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 11 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(7, 7, 23),
    comment='""12 plus 11 is 23""',
)

# ""11 minus 7 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 7, 12),
    comment='""11 minus 7 is 4""',
)

# ""4 times 7 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(12, 28),
    comment='""4 times 7 is 28""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 7),
    comment='""12 minus 7 is 5""',
)

# ""4 times 5 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(7, 20),
    comment='""4 times 5 is 20""',
)

# Then the participant goes back to using 11 and 12 from the start state
curr_state = graph.move_to_node(start_state)

# ""11 plus 12 is 23 plus 7 divided by 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11+12)+(7/7)=24"",
    resulting_state=(24,),
    comment='""11 plus 12 is 23 plus 7 divided by 7 is 1""',
)
```"
2793,"[3,5,12,12]",(12x5)-(12x3),95," Um, okay, target is 24. Oh my gosh. Um, 5 times 3 is 15, times 12, or plus 12, equals 17. Oh, that doesn't work. 12, 12 is 24. Um, my goodness, I don't know. Um, 12 and 12 is really throwing me off because that equals 24. Okay. Out. Bye. Bye. Okay. Okay, okay, okay. Sorry.","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(12, 12, 15),
    comment='""5 times 3 is 15""',
)

# ""plus 12, equals 17"" - participant adds 12 to 15, but makes a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+12=17"",
    resulting_state=(12, 17),
    comment='""plus 12, equals 17"" - participant makes calculation error',
    result_calc_error=True,
)

# ""12, 12 is 24"" - participant notices that 12+12=24 but realizes this won't work since they need to use all numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 5, 24),
    comment='""12, 12 is 24"" but participant realizes they need to use all numbers',
)

# Based on their response (12x5)-(12x3), they must have eventually tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5-12*3=24"",
    resulting_state=(24,),
    comment=""Based on their submitted response"",
)
```"
2795,"[3,3,3,9]",(9-(3/3))x,180," All right, so we get under 24. Let's try 3 times 3 gives you 9. 9 plus 9. Let's try 3 times 9 to get 27. Minus 3 gives you 24. That won't work. Let's try 3. What if we do 6 times 3 plus 9? No. Let's think about this. So we can get 24. Try some different things. 9 divided by 3 plus 3. No. Let's think about this more. Let's try 3 times 3. So we'll go back to three. So what we do, three divided by three first. That gives us one. This needs to be in parentheses, actually. Let's do that. Three divided by three. Three, and if we multiply that by three, that gives us three. Huh, this is a tricky one. So three times three is nine. Already at nine again. I'm not really sure what to do here. All right, let's try this. We do nine minus three divided by three, double parentheses, multiply that by three, which should give us 24. What do you think?","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 gives you 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 9, 9),
    comment='""3 times 3 gives you 9""',
)

# ""9 plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(3, 18),
    comment='""9 plus 9""',
)

# Going back to start state for ""3 times 9 to get 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(3, 3, 27),
    comment='""3 times 9 to get 27""',
)

# ""Minus 3 gives you 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(3, 24),
    comment='""Minus 3 gives you 24""',
)

# ""What if we do 6 times 3 plus 9"" - the 6 likely comes from 3+3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*3+9=27"",
    resulting_state=(27,),
    comment='""What if we do 6 times 3 plus 9"" - the 6 likely comes from 3+3',
)

# ""9 divided by 3 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3+3=6"",
    resulting_state=(3, 6),
    comment='""9 divided by 3 plus 3""',
)

# ""three divided by three first. That gives us one.""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 9),
    comment='""three divided by three first. That gives us one.""',
)

# ""and if we multiply that by three, that gives us three""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*3=3"",
    resulting_state=(3, 9),
    comment='""and if we multiply that by three, that gives us three""',
)

# ""three times three is nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 9),
    comment='""three times three is nine""',
)

# ""nine minus three divided by three, double parentheses, multiply that by three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-(3/3))*3=24"",
    resulting_state=(24,),
    comment='""nine minus three divided by three, double parentheses, multiply that by three""',
)
```"
2797,"[8,8,8,11]",(8x11)-(8x8),57," All right, now we got 8, 8, 8, and 11. Let's think about this. How can we get maybe a 3 and an 8 would probably be a way to do it. Or maybe we could just multiply the numbers by themselves, like 8 times 8. No, it gives you, no, we don't want to do that. We want to do 8 times 11, get the higher number. Give you 88, then subtract it by, I guess, 8 times 8. I don't know, maybe 64. 64 such should be it. 88, yeah.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""How can we get maybe a 3"" suggests they are thinking about getting to 24 by multiplying by 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""How can we get maybe a 3 and an 8 would probably be a way to do it""',
)

# ""8 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""like 8 times 8""',
)

# ""No, we don't want to do that"" suggests backtracking
curr_state = graph.move_to_node(start_state)

# ""8 times 11, get the higher number""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(8, 8, 88),
    comment='""8 times 11, get the higher number. Give you 88""',
)

# ""then subtract it by, I guess, 8 times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88-(8*8)=24"",
    resulting_state=(24,),
    comment='""then subtract it by, I guess, 8 times 8. I don\'t know, maybe 64""',
)

```"
2805,"[1,11,12,12]",12,180," 1, 11, 12, and 12 must equal 24, so open bracket 1, plus 11, close bracket, plus... How did I screw that up? 24, 35, 36... Can't use the same one twice, right? Okay. 12 times 11 is 132. 12 is 144, divided by 11 would be... 13.1... 09, 09, 09... I'm confused, is it... 12 plus 11 plus 1... Okay, no. All numbers have to be equal. I'm confused. So 24... Okay... All numbers have to be equal... 16, 35, 36... It doesn't make any sense. 12 times... 12 times 11... 5 by 12... 12 times... 12 by 12...","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""(1, plus 11, close bracket, plus..."" participant seems to be trying 1+11
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 12, 12),
    comment='""(1, plus 11, close bracket, plus...""',
)

# ""24, 35, 36"" seems to be adding numbers: 12+12=24, 24+11=35, 35+1=36
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""24, 35, 36"" participant starts by adding 12+12',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+11=35"",
    resulting_state=(1, 35),
    comment='""24, 35, 36"" participant continues by adding 11',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35+1=36"",
    resulting_state=(36,),
    comment='""24, 35, 36"" participant finishes by adding 1',
)

# ""12 times 11 is 132""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(1, 12, 132),
    comment='""12 times 11 is 132""',
)

# ""12 is 144"" seems to be computing 12*12
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 is 144"" seems to be computing 12*12',
)

# ""divided by 11 would be... 13.1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/11=13.09"",
    resulting_state=(1, 13.09),
    comment='""divided by 11 would be... 13.1""',
)

# ""12 plus 11 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11+1=24"",
    resulting_state=(12, 24),
    comment='""12 plus 11 plus 1""',
)

# ""12 times 11"" participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(1, 12, 132),
    comment='""12 times 11"" participant tries this operation again',
)

# ""12 by 12"" participant tries multiplying 12s again
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 by 12"" participant tries multiplying 12s again',
)
```"
2809,"[8,8,8,11]",(8/8)x11,180," Eleven, eight, eight, and eight. Eight times eight equals sixty-four Let's try eleven over eight. Close bracket, times. Over bracket, eight. Eight times eight, close bracket. Eight plus eleven. Eighteen. Eighteen. Eighteen. Eighteen. Eighteen. Eighteen. Eighteen Eighteen. Eighteen. Eighteen. wait, 8 times 8 8 times 8 over 8 is 1 times 11","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Eight times eight equals sixty-four""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""Eight times eight equals sixty-four""',
)

# ""Let's try eleven over eight"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""11/8=1.38"",
    resulting_state=(1.38, 8, 8),
    comment='""Let\'s try eleven over eight""',
)

# ""Eight plus eleven""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(8, 8, 19),
    comment='""Eight plus eleven""',
)

# The participant repeats ""Eighteen"" multiple times but this seems to be a calculation error or thinking out loud

# ""8 times 8 over 8 is 1 times 11"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*8/8)*11=88"",
    resulting_state=(88,),
    comment='""8 times 8 over 8 is 1 times 11""',
)

# Based on their final response, they simplified this to (8/8)*11
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8/8)*11=11"",
    resulting_state=(8, 11),
    comment=""Based on their final response"",
)
```"
2810,"[2,3,6,6]",((6x3,180," 2, 3, 6 and 6. 12 times 2 is 24. 2 plus 3 is 5. 11, 17. 6 plus 6 is 18. 18 18 plus 12 is 30. 36. This doesn't make any sense. 6 over 2 is 3. times 3 is going to be 9 and 3 times 18 6 over 2 times 6 times 3 6 plus 2 8 8 times 6, 48 8 9 10 11 10 12 13 14 15 Let's see, 6, 6 times 3 equals 18.","```python
start_state = (2, 3, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 is 24"" - participant likely got 12 from 6+6
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(2, 3, 12),
    comment='""12 times 2 is 24"" - first getting 12 from 6+6',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(3, 24),
    comment='""12 times 2 is 24""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""2 plus 3 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3=5"",
    resulting_state=(5, 6, 6),
    comment='""2 plus 3 is 5""',
)

# ""11, 17"" is unclear what operations led to these numbers

# ""6 plus 6 is 18"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=18"",
    resulting_state=(2, 3, 18),
    comment='""6 plus 6 is 18"" - calculation error',
    result_calc_error=True,
)

# ""6 over 2 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/2=3"",
    resulting_state=(3, 3, 6),
    comment='""6 over 2 is 3""',
)

# ""times 3 is going to be 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9),
    comment='""times 3 is going to be 9""',
)

# ""6 plus 2 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+2=8"",
    resulting_state=(3, 6, 8),
    comment='""6 plus 2 8""',
)

# ""8 times 6, 48""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(3, 48),
    comment='""8 times 6, 48""',
)

# The counting sequence ""8 9 10 11 10 12 13 14 15"" doesn't represent operations

# ""6 times 3 equals 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(2, 6, 18),
    comment='""6 times 3 equals 18""',
)
```"
2823,"[2,8,9,12]",,180," 2, 9, 8 times 9, 72 minus 24, no problem. 12 times 12, 8 times 2, 16 plus 12, no, 12 plus 9 plus 2, what? 12, 12 over 2, 12 over 2 plus 8 plus 9, nope. 8 over 2, that's 4 plus 9 plus 12, that's wrong. 8 times 9, no, 8 times 12, no, 12, what? How do I do this? 12 plus 8 plus 9 plus 2. 7 plus 8, 8 times 9, that's wrong. 12 plus 9, 12 plus 18, no, 12 plus 18 minus 9, 12 plus 16 minus 9, no, 12 times 9, no, 12 plus 2 times 8 over 9, nope, 12 plus 2 times 9 over 8, no, 8 plus 2, nope, 12 plus 2, nope, 18, 11, 18, minus 8.","```python
start_state = (2, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 9, 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(2, 12, 72),
    comment='""8 times 9, 72""',
)

# ""8 times 2, 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(9, 12, 16),
    comment='""8 times 2, 16""',
)

# ""12 plus 9 plus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9+2=23"",
    resulting_state=(8, 23),
    comment='""12 plus 9 plus 2""',
)

# ""12 over 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(6, 8, 9),
    comment='""12 over 2""',
)

# ""plus 8 plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8+9=23"",
    resulting_state=(23,),
    comment='""plus 8 plus 9""',
)

# ""8 over 2, that's 4 plus 9 plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/2+9+12=25"",
    resulting_state=(25,),
    comment='""8 over 2, that\'s 4 plus 9 plus 12""',
)

# ""8 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(2, 9, 96),
    comment='""8 times 12""',
)

# ""12 plus 8 plus 9 plus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8+9+2=31"",
    resulting_state=(31,),
    comment='""12 plus 8 plus 9 plus 2""',
)

# ""12 plus 18"" - participant may have gotten 18 from 9*2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+(9*2)=30"",
    resulting_state=(8, 30),
    comment='""12 plus 18"" - participant may have gotten 18 from 9*2',
)

# ""12 plus 16 minus 9"" - participant may have gotten 16 from 8*2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+(8*2)-9=19"",
    resulting_state=(19,),
    comment='""12 plus 16 minus 9"" - participant may have gotten 16 from 8*2',
)

# ""12 times 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(2, 8, 108),
    comment='""12 times 9""',
)

# ""12 plus 2 times 8 over 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+2*8/9=13.78"",
    resulting_state=(13.78,),
    comment='""12 plus 2 times 8 over 9""',
)

# ""12 plus 2 times 9 over 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+2*9/8=14.25"",
    resulting_state=(14.25,),
    comment='""12 plus 2 times 9 over 8""',
)

# ""8 plus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+2=10"",
    resulting_state=(9, 10, 12),
    comment='""8 plus 2""',
)

# ""12 plus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+2=14"",
    resulting_state=(8, 9, 14),
    comment='""12 plus 2""',
)
```"
2824,"[1,6,11,13]",,180," 1 plus 6, 1, 6, 11, 13, 13 plus 11, 6 times 11, minus 13, nope, 66 over 13. 13, 6 plus 1 plus 11 plus 13, can't beat it, so 11 plus 1 is 12, minus 6 plus, plus 13, 13, 13 minus 1 plus 17, no, 10 minus 1, 11 minus 1 plus 6 plus 13, nope, 66 over 13. 6 times 13, divided by 11, 11 plus 13, divided by 1 over 6, 6 times 13, divided by 1 over 6, no, 1 times 6, what, I don't know how to do this, 6 plus 11, nope, 11 minus 6 plus times 13. 3 times 13, minus 3 plus 4, no, 2 over sill even within 4, 7 over 8, no, 2 over 8, OK, 13 minus 11 times 6, 25 plus 1. Nope. 13. Nope. 13. And 6. Time it. Plus 11. Plus 1. Nope.","```python
start_state = (1, 6, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(7, 11, 13),
    comment='""1 plus 6""',
)

# ""13 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 6, 24),
    comment='""13 plus 11""',
)

# ""6 times 11, minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*11-13=53"",
    resulting_state=(1, 53),
    comment='""6 times 11, minus 13""',
)

# ""66 over 13"" - participant likely divided 6*11 by 13
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*11)/13=5.08"",
    resulting_state=(1, 5.08),
    comment='""66 over 13""',
)

# ""6 plus 1 plus 11 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1+11+13=31"",
    resulting_state=(31,),
    comment='""6 plus 1 plus 11 plus 13""',
)

# ""11 plus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(6, 12, 13),
    comment='""11 plus 1 is 12""',
)

# ""11 minus 1 plus 6 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1+6+13=29"",
    resulting_state=(29,),
    comment='""11 minus 1 plus 6 plus 13""',
)

# ""6 times 13, divided by 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*13/11=7.09"",
    resulting_state=(1, 7.09),
    comment='""6 times 13, divided by 11""',
)

# ""11 plus 13, divided by 1 over 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11+13)/(1/6)=144"",
    resulting_state=(144,),
    comment='""11 plus 13, divided by 1 over 6""',
)

# ""6 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+11=17"",
    resulting_state=(1, 13, 17),
    comment='""6 plus 11""',
)

# ""13 minus 11 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-11)*6=12"",
    resulting_state=(1, 12),
    comment='""13 minus 11 times 6""',
)

# ""13. And 6. Time it. Plus 11. Plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6+11+1=90"",
    resulting_state=(90,),
    comment='""13. And 6. Time it. Plus 11. Plus 1""',
)

```"
2829,"[10,11,11,12]",12+11+11-10,51, Let's get it. Holy crap. We're gonna try and get to 12 times 2. Oh God. What in the world? Could you just add and then subtract? What's that? 22? 12? I think you just add and then subtract the 10 at the end. And a minus 10. That should be it.,"```python
start_state = (10, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We're gonna try and get to 12 times 2"" - participant sets a subgoal of 24
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""We\'re gonna try and get to 12 times 2""',
)

# ""Could you just add and then subtract?"" participant considers a different strategy

# ""What's that? 22?"" participant seems to be adding 11+11
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(10, 12, 22),
    comment='""What\'s that? 22?""',
)

# ""I think you just add and then subtract the 10 at the end""
# Based on their final answer, they add 12+11+11 and subtract 10
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11+11-10=24"",
    resulting_state=(24,),
    comment='""I think you just add and then subtract the 10 at the end""',
)

```"
2830,"[1,1,2,6]",6x(2+1+1),13," Oh god. Wait, this was in the practice, right? 6 times 4? So it's just adding all of these.","```python
start_state = (1, 1, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4?"" suggests participant is setting a subgoal of getting to 4 to multiply by 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4?"" suggests participant wants to get to 4 to multiply by 6',
)

# ""So it's just adding all of these"" - participant adds 2+1+1 to get 4
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1+1=4"",
    resulting_state=(4, 6),
    comment='""So it\'s just adding all of these"" - participant adds 2+1+1 to get 4',
)

# Then multiply by 6 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment=""Multiply by 6 to reach goal"",
)
```"
2832,"[5,6,8,8]",,180," Okay, 16, no. Could be 8 times 3. Let's think. 8 times 3. But then you have to use 6 because you could do like 8 minus. 8 times 5, no. 6, 11, 12, 13, 14, 15, 16. I don't know, 8 times 5, no, 8 times 8, 64, minus 5 times 6, it's still 34, damn it, 48, 48, minus 40, no, it would have to be 8 times 3, but then I'm going to have to use 6, I can't do that, 8 times 2, no, no, no, I might want to be enough either, 16, 22, 22, 7, 8, times 5, 40, minus, if it doesn't get there, that would be 26, 26, 26, 26, I can't even do 5 times, 14, I don't know, I'm going to get it wrong, well, I'm not sure, I just don't even have an answer, I need to give it back, you know. Not sure.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3"" - participant seems to be considering this operation but realizes they need to use 6
# They may be trying to make 24 by getting to 3 first
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3"" - participant seems to be considering this operation',
)

# ""8 times 5, no""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 8, 40),
    comment='""8 times 5, no""',
)

# ""8 times 8, 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""8 times 8, 64""',
)

# ""minus 5 times 6, it's still 34""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64-5*6=34"",
    resulting_state=(34,),
    comment='""minus 5 times 6, it\'s still 34""',
)

# ""48, 48"" - participant may be computing 8*6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 8, 48),
    comment='""48, 48"" - participant may be computing 8*6',
)

# ""minus 40"" - participant may be subtracting 5*8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-5*8=8"",
    resulting_state=(8,),
    comment='""minus 40"" - participant may be subtracting 5*8',
)

# ""8 times 2"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (2, 8),
    state_after_subgoal=(16,),
    comment='""8 times 2"" - participant seems to be considering this operation',
)

# ""times 5, 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 8, 40),
    comment='""times 5, 40""',
)

# ""that would be 26"" - not clear what operation this refers to

# ""5 times, 14"" - participant may be multiplying 5 by something to get 14
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(5, 8, 14),
    comment='""5 times, 14"" - participant seems to be adding numbers to get 14',
)
```"
2837,"[3,5,7,11]",(11-5)x(7-3),106," How many times 3 is 33? Minus, no. Can you get to 12 times 2 in any of these? No. Eleven times seven, no, you could do like 7 minus 5 to get to 2, and then that would be times 11 to get to 22, plus 3 gets you to 20. It's always 25. 5 times 3, 15, 22, no you can still get up to 11. Can you get to 6 and then times 4? No. Can anything get to 8? Yeah, but it doesn't get to 3. You can do 11. Oh, I see it.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""How many times 3 is 33?"" participant seems to be trying to work backward from 33
graph.set_subgoal(
    (3, 11),
    state_after_subgoal=(33,),
    comment='""How many times 3 is 33?""',
)

# ""Can you get to 12 times 2 in any of these?"" participant sets another subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""Can you get to 12 times 2 in any of these?""',
)

# ""7 minus 5 to get to 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 3, 11),
    comment='""7 minus 5 to get to 2""',
)

# ""and then that would be times 11 to get to 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(3, 22),
    comment='""and then that would be times 11 to get to 22""',
)

# ""plus 3 gets you to 20"" - this seems to be a calculation error since 22+3=25
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+3=20"",
    resulting_state=(20,),
    comment='""plus 3 gets you to 20"" - calculation error',
    result_calc_error=True,
)

# ""5 times 3, 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(7, 11, 15),
    comment='""5 times 3, 15""',
)

# ""Can you get to 6 and then times 4?"" sets another subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""Can you get to 6 and then times 4?""',
)

# ""Can anything get to 8?"" sets another subgoal
graph.set_subgoal(
    (8,),
    state_after_subgoal=(24,),
    comment='""Can anything get to 8?""',
)

# ""Oh, I see it."" The participant then submits (11-5)x(7-3) as their answer
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-5)*(7-3)=24"",
    resulting_state=(24,),
    comment='""Oh, I see it."" The participant submits (11-5)x(7-3)',
)
```"
2840,"[7,10,10,12]",,180," As you perform plus 10 times 10... no that doesn't make any sense. 10 times 10... what's 7 times 12? 7 times 12 is 72, which is 3 times 24. I can't get 3. 70... hmm... if I add all these together, that's 32 minus 7 is 25... okay. hmm... minus 12, can I do a minus? Oh, I can. So if I did... minus 12 gives me 12, how can I get... 72... uh... 100... doesn't divide by 12 or 7. 70... 70... hmm... it's 19... I need to do 5... uh... hmm... If I do... If I do... If I do... 10... 10...","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(7, 12, 100),
    comment='""10 times 10""',
)

# ""what's 7 times 12? 7 times 12 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=72"",
    resulting_state=(10, 10, 72),
    result_calc_error=True,
    comment='""what\'s 7 times 12? 7 times 12 is 72""',
)

# ""which is 3 times 24"" - participant realizes 72 is 3x24, suggesting they're working backward
graph.set_subgoal(
    (3, 24),
    state_after_subgoal=(72,),
    comment='""which is 3 times 24"" - participant realizes 72 is 3x24',
)

# ""if I add all these together, that's 32"" - participant likely means 39 (7+10+10+12=39)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10+10+12=39"",
    resulting_state=(39,),
    comment='""if I add all these together, that\'s 32"" - participant likely means 39',
)

# The participant mentions ""72"" and ""100"" again but doesn't perform new operations with them
# The rest of the transcript shows the participant struggling but not clearly performing any new operations
```"
2842,"[2,2,10,11]",,180," 10 x 11 is 121 40 minus 11 is not 24. I can do 5 plus 13. No. 5 plus 11 minus 2. Ah. So 5 plus 11. 11 minus 2. Ah. Minus 2. Oh, I need parentheses. So I need to do 11 plus 5 minus 2. Right? That's 20. Ah. 5 minus 2. Right, that's 5. Oh. I'm dumb. Let me do it. Hmm. 12. 20. I need 5. Huh. If I do 5. Plus 13. That's 9. Times 5. 20. I need 5. I do five times two, plus 10, that's 12, times two. Two.","```python
start_state = (2, 2, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 x 11 is 121""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*11=121"",
    resulting_state=(2, 2, 121),
    result_calc_error=True,
    comment='""10 x 11 is 121"" - calculation error',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)

# ""I can do 5 plus 13"" - participant likely got 5 from 10/2
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 11),
    comment='""I can do 5"" - participant divides 10 by 2',
)

# ""11 plus 5 minus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5-2=14"",
    resulting_state=(14,),
    comment='""11 plus 5 minus 2""',
)

# Going back to start state to try a new approach
curr_state = graph.move_to_node(start_state)

# First make 5 from 10/2
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 11),
    comment='""five times two, plus 10, that\'s 12, times two"" - first making 5',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(10, 11),
    comment='""five times two""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(20,),
    comment='""plus 10, that\'s 12, times two"" - participant miscalculates',
    result_calc_error=True,
)
```"
2851,"[6,6,7,10]",6+((10-7)x6),96," 6, 6, 7, 10, 7 times 10, 70, 76, number 60, um, 6, 6, 7, 10, um, Alright, so I'm gonna do, um, 7, so that, man, we're gonna have to divide, let's see, so, alright, so, 6, so that'd be 3, 6 times 3 is 24, 36, so, 3, 6 times 3 is 24, alright, so, 10, 7, 3, 3 times 6, alright, so, let's try it like this, so, 6 plus, I'll do that, 10 minus 7, times 6,","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 10, 70""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(6, 6, 70),
    comment='""7 times 10, 70""',
)

# ""76"" seems to be adding 6 to 70
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70+6=76"",
    resulting_state=(6, 76),
    comment='""76"" seems to be adding 6 to 70',
)

# ""number 60"" is unclear what operation this refers to

# ""so that'd be 3"" seems to refer to 10-7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 6, 6),
    comment='""so that\'d be 3"" seems to refer to 10-7',
)

# ""6 times 3 is 24"" - this is a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=24"",
    resulting_state=(6, 24),
    comment='""6 times 3 is 24"" - this is a calculation error',
    result_calc_error=True,
)

# Finally, the participant finds the solution: ""6 plus, I'll do that, 10 minus 7, times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+((10-7)*6)=24"",
    resulting_state=(24,),
    comment='""6 plus, I\'ll do that, 10 minus 7, times 6""',
)
```"
2856,"[1,11,12,12]",,180," Oh Lord! 24. anecdotes Mum, mum, mum, mum, mum, 12 and 12 is 24, 11 plus 1 is 12, um, mum, mum, let's see, how do I do this? 1 times, no, no, no, no, no, no, no, no, no, 12 and 12, that would equal 1, um, plus 1 plus 11, whatever, that's only 31. 13, 12 and 12, 12 plus 12 is 24, um, let's see, 12 plus 12 would be 24, um, mum, mum, mum, mum, and 12 plus 11 is Coe. Shit, let me think about this, 12 divided by 12 is 1, 1, uh, x, um, um, I'm going to 1, no, no, no, shit, 1, 1, and that's 12, 12 three times, 1 plus 1, 11 equals 12, minus 12 times 12, oh shit, nope, 12 plus 12 is 24, I need that, I need something that equals zero here.","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 and 12 is 24""',
)

# ""11 plus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 12),
    comment='""11 plus 1 is 12""',
)

# ""12 and 12, that would equal 1, um, plus 1 plus 11, whatever, that's only 31""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12+1+11=31"",
    resulting_state=(31,),
    comment='""12 and 12, that would equal 1, um, plus 1 plus 11, whatever, that\'s only 31""',
    result_calc_error=True,
)

# ""12 divided by 12 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 1, 11),
    comment='""12 divided by 12 is 1""',
)

curr_state = graph.move_to_node(new_state)
# ""1 plus 1, 11 equals 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1+11=12"",
    resulting_state=(12,),
    result_calc_error=True,
    comment='""1 plus 1, 11 equals 12""',
)

# ""12 plus 12 is 24, I need that, I need something that equals zero here""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12 is 24, I need that, I need something that equals zero here""',
)
```"
2858,"[5,6,7,7]",,180," Oh, damn it. I figured out the last one. Okay, let's see. Equals 24. 5 and 6 is 30. 49 minus 30 is 19. Let's see. 30. 6 minus 7. Shit. Shoot. Okay. 7. Times. I'm talking to myself. Yes, I'm talking to myself. 7 times 6 minus 7. No. Minus 5 plus 7. That's not going to work. Oops. 6. I am talking to myself. Minus 5. Divided by 7. Nope. Nope. Nope. Nope. Nope. 5 times. 6. Plus. 7. Minus. 7. Nope. Wait. Back it up. Back it up. 30. 30. Um. What am I? 7. Nope. 6. Times. 7. Nope. Nope. Nope. Nope. Nope. Nope. Nope. 6. Plus. 7. Minus. 7. Nope. Nope.","```python
start_state = (5, 6, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 and 6 is 30"" - participant likely means 5*6=30
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(7, 7, 30),
    comment='""5 and 6 is 30""',
)

# ""49 minus 30 is 19"" - participant likely got 49 from 7*7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(5, 6, 49),
    comment='""49 minus 30 is 19"" - participant first computes 7*7',
)

# ""7 times 6 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 7, 42),
    comment='""7 times 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-7=35"",
    resulting_state=(5, 35),
    comment='""minus 7""',
)

# ""6...Minus 5. Divided by 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-5)/7=0.14"",
    resulting_state=(0.14, 7),
    comment='""6...Minus 5. Divided by 7""',
)

# ""5 times. 6. Plus. 7. Minus. 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6+7-7=30"",
    resulting_state=(30,),
    comment='""5 times. 6. Plus. 7. Minus. 7""',
)

# ""6. Times. 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(5, 7, 42),
    comment='""6. Times. 7""',
)

# ""6. Plus. 7. Minus. 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7-7=6"",
    resulting_state=(5, 6),
    comment='""6. Plus. 7. Minus. 7""',
)
```"
2869,"[4,7,8,12]",(8-12),180," 4, 7, 8, and 12, 4, 7, 8, 9, 10, 11, 8, 9, 10, 11, 12. Okay, 7, 8, 8, so 7 times 4 is, 7 times 4 is 24, and it's 30. 8 plus 12 is 20. 28 times, that's a 10, that's 20. 13, 16. . . 8, 7, 4, 8, 7, 4, 8, 7, 4, 12, times 7 is 49. That was 8, 4, 12, times 7, times 7, 7, times 8 is 50. 50, 6, 7, 8, and 4. 7, 8, and 4. 7, 8, and 4 is, and 12. 12, 7, 8, 4, 12. 7, 8, 4, 12, you get 24. Let's see, let's see. Okay, we got the 8, that's going to be constant. 8 minus 12 is 4. Okay, 8 minus 12 would be 4. Plus 7 times 4 is 28. 24, 7 times 4 is 24, plus 8 minus 12. Okay, let's do this, parentheses.","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 4 is 24"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=24"",
    resulting_state=(8, 12, 24),
    comment='""7 times 4 is 24"" - participant makes calculation error',
    result_calc_error=True,
)

# ""8 plus 12 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(4, 7, 20),
    comment='""8 plus 12 is 20""',
)

# ""times 7, 7, times 8 is 50"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=50"",
    resulting_state=(4, 12, 50),
    comment='""times 7, 7, times 8 is 50"" - participant makes calculation error',
    result_calc_error=True,
)

# ""8 minus 12 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-12=-4"",
    resulting_state=(4, 7, -4),
    comment='""8 minus 12 is 4"" - participant makes calculation error',
    result_calc_error=True,
)

# ""7 times 4 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 12, 28),
    comment='""7 times 4 is 24"" - participant makes calculation error',
    result_calc_error=True,
)

```"
2871,"[2,7,9,13]",(13x2)+(7-9),116," Okay, we got two seven nine thirteen Two seven Nine thirteen Two seven nine thirteen and we're gonna get 24 from that Okay, just fight her pretty Okay, 13 times 2 is 26 13 times 2 is 3 15 25 Plus 9 plus 9 minus 7 Okay What was that? So a squared number Six 15 times 2 is what you've got What is that and it isn't 8 8 and 2? If you stay out in the park if you stay out in the park Cl Certain Okay, and it's going to be a plus, plus, plus two.","```python
start_state = (2, 7, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first repeats the numbers and states the goal

# ""13 times 2 is 26"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(7, 9, 26),
    comment='""13 times 2 is 26""',
)

# ""13 times 2 is 3 15 25"" seems to be a correction or recalculation
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=25"",
    resulting_state=(7, 9, 25),
    comment='""13 times 2 is 3 15 25"" seems to be recalculating',
    result_calc_error=True
)

# ""Plus 9 minus 7"" participant seems to be trying operations with the remaining numbers
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+9-7=27"",
    resulting_state=(27,),
    comment='""Plus 9 minus 7""',
)

# The rest of the transcript is unclear or seems unrelated to the mathematical operations

# Based on their submitted response (13x2)+(7-9), they must have eventually tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(7, 9, 26),
    comment=""Based on submitted response, participant computed 13*2"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+(7-9)=24"",
    resulting_state=(24,),
    comment=""Based on submitted response, participant added (7-9) to 26"",
)
```"
2878,"[5,5,10,10]",5,180," Oh, this is interesting. Okay, so let's try 5 times 10. That is 50, obviously. And then, I'm not quite sure if this one is even possible. Let me see. 10 times 10 is 100. 100 divided by 5, that's what, like 50, I think. Maybe. I'm not sure. Um, this is very strange. Um, hmm. 5 times 5 is 25, plus 10 is 35. My ice telegram is still 25. If we... Man, what can we do here? This one is getting me bad too. Um. Hmm. Okay. Okay. This is not an easy one. I'm doubting if this one is possible. 5 plus 5 is 10. 10 plus 10 plus 10 is just 30. Hmm. 10 plus 5 is 15. 15 plus 10 is 25. Hmm. Okay. Minus the 5 again, we still end up with 20. This is... This one is not easy. I think the numbers I've been given kind of make this one impossible. Yeah, I don't see how this one could work, unless you maybe start involving fractions. I'm not really seeing... I'm not really seeing how this could work.","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 10. That is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(5, 10, 50),
    comment='""5 times 10. That is 50""',
)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 5, 100),
    comment='""10 times 10 is 100""',
)

# ""100 divided by 5, that's what, like 50""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""100/5=50"",
    resulting_state=(5, 50),
    result_calc_error=True,
    comment='""100 divided by 5, that\'s what, like 50""',
)

# ""5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(10, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""plus 10 is 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+10=35"",
    resulting_state=(10, 35),
    comment='""plus 10 is 35""',
)

# ""5 plus 5 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(10, 10, 10),
    comment='""5 plus 5 is 10""',
)

# ""10 plus 10 plus 10 is just 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+10=30"",
    resulting_state=(30,),
    comment='""10 plus 10 plus 10 is just 30""',
)

# ""10 plus 5 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(5, 10, 15),
    comment='""10 plus 5 is 15""',
)

# ""15 plus 10 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+10=25"",
    resulting_state=(5, 25),
    comment='""15 plus 10 is 25""',
)

# ""Minus the 5 again, we still end up with 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-5=20"",
    resulting_state=(20,),
    comment='""Minus the 5 again, we still end up with 20""',
)

```"
2882,"[1,6,11,13]",,180," All right, let's go. Ooh, you did a tricky one. It's 24, 30, 31. How do I want to do this? All right, 13, 11, 6, 1. So that's 24 right there. But then I've got 6 and 7. How do I do this? All right, how do you do this? How? How, I say. So that's 19. All right, so if I do 24, 25, minus 6, that would be 19. So 17. Uh, 14. No. So 14 minus 6 would be 8. That would be 19. So I can't divide any of these because they're odd numbers. There's only one even number. So that isn't going to work. So how do I do this? 7. 7, 18, well, I could do 12, 25, nope, 7, no. How do I get this? How do I get this? I don't know how to get this one. 13 plus 11, that's 24. So then I have 7. Oh, I don't know how to do this one. I can't do this one. All right, so that's 18, 19, that's not going to work. It's 24. Um, so what if I... Okay. Multiply. Multiply. Well, no, because that's only going to be 66 minus 13. That's not going to work. Uh, what is, what is 11 times 13? I don't get it. All right, so I'm thinking 11 times 13 is 143 divided by 7 is 20. Uh, 11. 11 times 13 divided by...","```python
start_state = (1, 6, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13, 11, 6, 1"" participant lists numbers
# ""So that's 24 right there"" - participant likely means 13+11=24
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 6, 24),
    comment='""So that\'s 24 right there""',
)

# ""So that's 19"" - participant may be adding 13+6
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(1, 11, 19),
    comment='""So that\'s 19""',
)

# ""13 plus 11, that's 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 6, 24),
    comment='""13 plus 11, that\'s 24""',
)

# ""that's 18, 19"" - might be adding 13+6 again
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(1, 11, 19),
    comment='""that\'s 18, 19""',
)

# ""what is 11 times 13?""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13=143"",
    resulting_state=(1, 6, 143),
    comment='""what is 11 times 13?""',
)

# ""143 divided by 7 is 20"" - participant may be trying to divide by 6+1=7
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""143/(6+1)=20"",
    resulting_state=(20,),
    comment='""143 divided by 7 is 20"" - participant may be trying to divide by 6+1=7',
    result_calc_error=True,
)
```"
2886,"[1,4,5,8]",(5+1)x(8-4),82," Let's go on, um, 8, 5, 4, and 1, 8, 5, 4, and 1, 8, 5, 4, and 1, 8, 5, 4, 1. So how would I do this one? Um, how do I get this one? Okay, 8 minus 4 times 5 minus 1. Okay, 8 minus 4 times 5 minus 1. Um, 8 minus 4, 4 times 4, well, that's only 16, dummy, what you were thinking. You need a 6. Oh, 5 plus 1 times 8 minus 4.","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first repeats the numbers several times

# ""8 minus 4 times 5 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-4)*(5-1)=16"",
    resulting_state=(16,),
    comment='""8 minus 4 times 5 minus 1""',
)

# ""well, that's only 16, dummy"" - participant realizes this won't work

# ""You need a 6"" suggests they might be working backward from 24 (since 24/4=6)
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""You need a 6"" suggests they might be working backward from 24 (since 24/4=6)',
)

# ""5 plus 1 times 8 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*(8-4)=24"",
    resulting_state=(24,),
    comment='""5 plus 1 times 8 minus 4""',
)

```"
2900,"[1,1,5,8]",(5-1-1)x8,162," 5 times 8 equals... that's 40. Everything is 24. Oh, wait. It's just going to get it down to 3. Alright, so that would just be... Something's got to go in parentheses, though. Maybe they won't. Is that it? Nah, I gotta use parentheses. Parentheses. Parentheses. I can't fit this full equation. . 5 minus 1. . Well, maybe I can do that. Let's see if it accepts this. . . No, it's not going to let me do that. . . . . . . . . .","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 8 equals... that's 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(1, 1, 40),
    comment='""5 times 8 equals... that\'s 40""',
)

# ""It's just going to get it down to 3"" suggests participant realizes they need to get to 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""It\'s just going to get it down to 3""',
)

# ""5 minus 1"" participant starts working on getting to 3
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(1, 4, 8),
    comment='""5 minus 1""',
)

# Based on their final response (5-1-1)x8, they must have then subtracted the other 1 to get 3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 8),
    comment=""Based on final response, participant subtracted the other 1"",
)

# Then multiply by 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment=""Based on final response, participant multiplied by 8"",
)
```"
2905,"[2,12,12,13]",12,180," Target number 24, plus 12, plus 12 is 24. Target number 24. Is that the softest before? It's going to be some pick number, come on. 12 times 24. 12 and 12 is 4. 13 and 2 is 15. I'm not going to do this. 12, what does this look like? 12 divided by 2. So I've gone to 6. 6. 6. So I'm going to write 18. And now I'm going to read it. Hold on, clouds. But before I leave, divide by two.","```python
start_state = (2, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""plus 12, plus 12 is 24"" - participant seems to be adding the 12s
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(2, 13, 24),
    comment='""plus 12, plus 12 is 24""',
)

# ""12 and 12 is 4"" - not clear what operation they're doing, but recording it
new_state = graph.explore_operation(
    curr_state, 
    operation=""12+12=4"",
    resulting_state=(2, 4, 13),
    comment='""12 and 12 is 4"" - unclear operation',
    result_calc_error=True
)

# ""13 and 2 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(12, 12, 15),
    comment='""13 and 2 is 15""',
)

# ""12 divided by 2. So I've gone to 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(6, 12, 13),
    comment='""12 divided by 2. So I\'ve gone to 6""',
)

# ""So I'm going to write 18"" - not clear how they got 18
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(13, 18),
    comment='""So I\'m going to write 18"" - possibly adding 12 and 6 from previous calculation',
)
```"
2909,"[1,4,7,13]",(13-7)x(4x1),144," I just had that. Oh man. Okay. So 13, I'm going to try that again. 13 minus 7 is 5. It's kind of similar. 5 times, so 13, 4 minus 1 is 3. 3, 3 times, oh man. Man. Okay. So if I do 13 minus 7, I'm at 5. Okay, let's try it. 13. Sorry. 13, sorry. Minus. 7. Because 13 minus 7, oh man. 13 plus, no, 13 minus 7. Sorry. I messed that up. 13 minus 7. Is that 6? Yeah. This should work. Okay.","```python
start_state = (1, 4, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 7 is 5"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=5"",
    resulting_state=(1, 4, 5),
    comment='""13 minus 7 is 5"" - calculation error',
    result_calc_error=True,
)

# ""4 minus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 7, 13),
    comment='""4 minus 1 is 3""',
)

# ""13 minus 7"" participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(1, 4, 6),
    comment='""13 minus 7. Is that 6? Yeah.""',
)

# Based on their submitted response (13-7)x(4x1), they must have then multiplied 6 by 4x1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*(4*1)=24"",
    resulting_state=(24,),
    comment=""Based on submitted response, participant multiplied 6 by 4x1"",
)
```"
2910,"[1,4,4,4]",((4+1)x4)+4,71," Wait. Oh, that's easy. So you got to do 4 plus 1 because we were trying to get to 6, kind of like what we've been doing before. So 4 plus 1 is 5. 5 times 4 is 20 plus 4. I don't know if this is how you do it. Okay, 4 plus 1. Okay, how do I write this? 4 plus 1 times 4. Okay, wait. I think I got it. 4 plus 1. I hate how you have to start over. So you do 4 plus 1 times 4 plus 4.","```python
start_state = (1, 4, 4, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""we were trying to get to 6"" suggests a subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""we were trying to get to 6""',
)

# ""4 plus 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+1=5"",
    resulting_state=(4, 4, 5),
    comment='""4 plus 1 is 5""',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(4, 20),
    comment='""5 times 4 is 20""',
)

# ""plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+4=24"",
    resulting_state=(24,),
    comment='""plus 4""',
)

# The rest of the transcript appears to be the participant figuring out how to write their answer in the correct format
```"
2911,"[5,5,8,13]",(13-8)x5/5,180," Let's see what I do. 13 plus 8 is 19. No. 8 times 5 is 40. 40. No. 13 plus 8. Oh, man. I don't know. I don't know. Okay, so it's not super easy. 13 minus 8 is 13, 12, 11, 10, 9, 8, 7, 6, 5. 5. Oh, man. Hmm. 8 minus 5 is 3. Okay, so 5 minus 1 is 4. 4. So 12, 11, 10, 9, 8, 7, 6. Okay, so 13 minus 8 is going. Okay, sorry. 13 minus 8 is going to get me to 6. So it has to be something after that. 6. Oh, man. Times 5 is 6 times 5 is 30. Oh, man. Minus 5. 5 would be what? That's close. Because that's 30. I'm not going to get this one. 13 minus 8. Oh, man. Times 5 is 30. I can get to 30. I can get to 30. But I need that 6. But I don't want. Times 5 minus. No, it's 5 minus. There's a 1, 5 divided by 5. 5 divided by 5. Oh, man. 5 divided by 5. Nope. I'm assuming that 13 minus 8 is right, but I don't know how to do the 5 part. Hmm. My brain is hurting. You're killing my brain. 5 times 8.","```python
start_state = (5, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 8 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=19"",
    resulting_state=(5, 5, 21),
    comment='""13 plus 8 is 19""',
)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(5, 13, 40),
    comment='""8 times 5 is 40""',
)

# ""13 minus 8 is ... 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(5, 5, 5),
    comment='""13 minus 8 is ... 5""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 13),
    comment='""8 minus 5 is 3""',
)

# ""13 minus 8 is going to get me to 6"" - participant miscalculates
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=6"",
    resulting_state=(5, 5, 6),
    comment='""13 minus 8 is going to get me to 6"" - participant miscalculates',
    result_calc_error=True,
)

# ""Times 5 is 6 times 5 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(5, 30),
    comment='""Times 5 is 6 times 5 is 30""',
)

# The participant then seems to realize they need to use division with the remaining 5
# Based on their submitted answer (13-8)x5/5, they eventually figure out the correct sequence:
# First compute 13-8=5
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(5, 5, 5),
    comment=""Based on final answer, participant computes 13-8=5"",
)

# Then multiply by 5 and divide by 5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5/5=5"",
    resulting_state=(5,),
    comment=""Based on final answer, participant multiplies by 5 and divides by 5"",
)
```"
2912,"[4,7,7,8]",,180," All right, next. Target number 24. 7 plus 8 is 15. No. 7, no. Let's see. So we got 8 minus 1 is 7. 7 plus 8 is 28. No. 7. What about 8 minus 2? Because 7, 8, 7, 4, 2, 1, 28. Okay. Oh, man. Because 8 times 1 is 8. Oh, man. 8 times 4 is 8, 60, 24, 32. What about 8 times 4? Okay, I'm going to do this. 8 times 4 is 32. Minus 14 wouldn't be right. What about 8 times 7 is 56. Divided by 7 is 8. No. By 4 is 14. That's 21. Okay. Sorry. Dang. I can't do this. So 7, I can't go that high. What about 7 times 7? 7 times 7 is 49. 49 divided by, divided by, can't be 4, 8. That's close. That's 6.25 times. That's close. 49 divided by 8. 7 times 4 is 28. Oh, man, 28. That feels right. 7 times 4 is 28. 28 plus 15. 8 plus 7 is 15.","```python
start_state = (4, 7, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 8 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(4, 7, 15),
    comment='""7 plus 8 is 15""',
)

# ""8 minus 1 is 7"" - participant seems to be trying to get another 7, but there's no 1 in the start state

# ""7 plus 8 is 28"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=28"",
    resulting_state=(4, 7, 28),
    comment='""7 plus 8 is 28"" - calculation error',
    result_calc_error=True,
)

# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 7, 32),
    comment='""8 times 4 is 32""',
)

# ""8 times 7 is 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(4, 7, 56),
    comment='""8 times 7 is 56""',
)

# ""Divided by 7 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/7=8"",
    resulting_state=(4, 8),
    comment='""Divided by 7 is 8""',
)

# ""By 4 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""56/4=14"",
    resulting_state=(7, 14),
    comment='""By 4 is 14""',
)

# ""7 times 7 is 49""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(4, 8, 49),
    comment='""7 times 7 is 49""',
)

# ""49 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/8=6.12"",
    resulting_state=(4, 6.12),
    comment='""49 divided by 8""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(7, 8, 28),
    comment='""7 times 4 is 28""',
)

# ""8 plus 7 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(4, 7, 15),
    comment='""8 plus 7 is 15""',
)
```"
2913,"[1,1,4,6]",6x4x1x1,16," Okay, this one should be easy. Oh, I got it right away. 6 times 4 times 1, just all times. Boom.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 times 1, just all times""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4*1*1=24"",
    resulting_state=(24,),
    comment='""6 times 4 times 1, just all times""',
)
```"
2916,"[4,7,12,12]",,180," Sorry, I'm trying. Okay. Oh man. Okay, let's see. So we got 4, 7, 12, 12. 12 divided by 4 again is 3. 3, 7, okay. Oh man. Okay, so 12 plus 12 divided by 4 is 3. 3 plus 12 is 15. 15 plus 7 is 22. So I'm trying to do adds and minuses for everything we can think of. 7 plus 7 is 22. 7 plus 12 is 19. What about 12 divided by 12 is 1? 1 times 7, 4, 2, 21, 28. No. 12 divided by 7 times 4 is 28. 28 minus, no. I don't know that. I'm trying my hardest but it's not working. My brain hates me. My brain hates me. But it's 7 divided by 7. I don't know. Sorry. I'm starting to sing because I'm going crazy here. It's probably not going to be 12 times 12. I don't even know. 144 divided by 7 wouldn't work either. 7 plus 12 is 19, which can't work. 24 divided by 4. 24 divided by 4 is 6. 6 times 7, no. 12 times 4 is 48. 48 divided by 12 is 4. No. We need to get to 6. We need to get to 6 times 4. 7 plus 12. We can't get to it. 12 minus 7. 11, 10, 9, 8, 7, 6, 5, 18. I got to 22 by adding after that. I'm very curious how you see people's brains work here. I can't get it. I'm trying. I'm trying so hard but I can't get it. I got to be close though. Man. I'm trying. I'm trying. 7 plus 12 is 19.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 divided by 4 again is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 7, 12),
    comment='""12 divided by 4 again is 3""',
)

# ""12 plus 12 divided by 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+12)/4=6"",
    resulting_state=(6, 7),
    comment='""12 plus 12 divided by 4 is 3"" - though they miscalculated',
    result_calc_error=True,
)

# ""3 plus 12 is 15""
curr_state = graph.move_to_node((3, 7, 12))
new_state = graph.explore_operation(
    curr_state,
    operation=""3+12=15"",
    resulting_state=(7, 15),
    comment='""3 plus 12 is 15""',
)

# ""15 plus 7 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+7=22"",
    resulting_state=(22,),
    comment='""15 plus 7 is 22""',
)

# ""7 plus 12 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(4, 12, 19),
    comment='""7 plus 12 is 19""',
)

# ""12 divided by 12 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 4, 7),
    comment='""12 divided by 12 is 1""',
)

# ""12 divided by 7 times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/7*4=28"",
    resulting_state=(12, 28),
    comment='""12 divided by 7 times 4 is 28""',
    result_calc_error=True,
)

# ""144 divided by 7 wouldn't work either"" - participant seems to be considering 12*12=144
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(4, 7, 144),
    comment='""144 divided by 7 wouldn\'t work either"" - participant seems to be considering 12*12=144',
)

# ""7 plus 12 is 19"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(4, 12, 19),
    comment='""7 plus 12 is 19""',
)

# ""24 divided by 4 is 6"" - participant seems to be working backwards from goal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 4 is 6"" - participant seems to be working backwards from goal',
)

# ""12 times 4 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(7, 12, 48),
    comment='""12 times 4 is 48""',
)

# ""48 divided by 12 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/12=4"",
    resulting_state=(4, 7),
    comment='""48 divided by 12 is 4""',
)

# ""We need to get to 6. We need to get to 6 times 4"" - participant sets another subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""We need to get to 6. We need to get to 6 times 4""',
)

# ""12 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 12),
    comment='""12 minus 7""',
)

# ""I got to 22 by adding after that""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+12+4=22"",
    resulting_state=(22,),
    comment='""I got to 22 by adding after that""',
    result_calc_error=True,
)
```"
2925,"[7,7,11,12]",,180," Okay, so we have several odd numbers here, and we want to equal 24, so if we can somehow make a 12 plus 12, so we'll have to reduce the odd numbers. 7, you subtract 7 from 11, you get 4. 4 minus, no, that's not going to work. 7, subtract 7 would be 0, that's not working. How about we subtract 7 from even 12, would leave us with 5. 5 plus 7 is 12, and then 11 again. I don't see anything jumping out at me, so... We can make a 14. That doesn't work. I'm not seeing it. How about 12 minus 7 is 5. Well, 11 minus 7 is 4, but that only would make 20. 7 plus 11 is 18, plus 5, 18, no, that won't work either. So I'm not seeing a solution here. Umm... Yeah, this is... I'm not finding it in my head, sorry. I'll keep talking, but I don't see a solution to get to 24. And if there's ten of these maybe I should just turn this in.","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if we can somehow make a 12 plus 12"" - participant sets a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""if we can somehow make a 12 plus 12""',
)

# ""7, you subtract 7 from 11, you get 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 7, 12),
    comment='""7, you subtract 7 from 11, you get 4""',
)

# ""subtract 7 from even 12, would leave us with 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 7, 11),
    comment='""subtract 7 from even 12, would leave us with 5""',
)

# ""5 plus 7 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(11, 12),
    comment='""5 plus 7 is 12""',
)

# ""We can make a 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(11, 12, 14),
    comment='""We can make a 14""',
)

# ""12 minus 7 is 5"" - participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 7, 11),
    comment='""12 minus 7 is 5""',
)

# ""11 minus 7 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 7, 12),
    comment='""11 minus 7 is 4""',
)

# ""7 plus 11 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(7, 12, 18),
    comment='""7 plus 11 is 18""',
)
```"
2926,"[3,4,8,12]",(8-4)x3+12,131," Okay, this one should be doable, because we have mostly even numbers. So hopefully I can figure this out. 3 times 4 is 12, and then there's another 12, so we have to get rid of this 8. So maybe 8 divided by, maybe we could do, we need to get a 2 times 12 somehow, or a 3 times 8. How could we subtract 12? How could we get a 3 out of this? Possibly we could go large and subtract. So what would be 4 times 8? That would be 32, and then minus 12 would be, but there's an odd number here. So. . . I'm confounded. I can't do this in my head. That's 8 subtract 4. So if we do 8 subtract 4, that would be 4, and then 4 times 3 is 12. Okay, so maybe we can do this one. So we're going to go bracket 8 minus 4, close bracket, times 3 plus 12.","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 12, 12),
    comment='""3 times 4 is 12""',
)

# ""we need to get a 2 times 12 somehow"" - setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""we need to get a 2 times 12 somehow""',
)

# ""or a 3 times 8"" - setting another potential subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""or a 3 times 8""',
)

# ""4 times 8? That would be 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(3, 12, 32),
    comment='""4 times 8? That would be 32""',
)

# ""8 subtract 4. So if we do 8 subtract 4, that would be 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(3, 4, 12),
    comment='""8 subtract 4. So if we do 8 subtract 4, that would be 4""',
)

# ""and then 4 times 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(12, 12),
    comment='""and then 4 times 3 is 12""',
)

# Finally, based on their submitted answer (8-4)x3+12, they must have done:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-4)*3+12=24"",
    resulting_state=(24,),
    comment='Based on submitted answer ""(8-4)x3+12""',
)
```"
2927,"[5,5,7,10]",,180," Okay, so we have 3 odd numbers and a 10. So how are we going to make these odd numbers even? We could maybe add 4. Let's see, we can reduce the 7, 5, and 5 to 14. But I don't see that happening. So, we need to times the 7 by 2. So how do we get that? Okay, so 10 minus 5 would be 5. 10 minus 7 would be 3. Another odd number, but 3 times 8 would be 24. So maybe 5 minus 7 would be 2. You can go 2 times 5 would be 10, and then plus 10. That doesn't work either. So maybe if we could get 3. 3, that's not going to work either. So I don't see it. I got 3 minutes to fool around with it, but it could be 17 plus 5 would be 22. Yeah, I don't really know how you would do that. You could subtract numbers from the 24 to get lower. So you'd have 24 minus 7 would be 17, but you can't get 17 with a 5, a 5, and a 10. So we could subtract 1 of the 5's. It would be 19. And so... 19. How do you get 19 with 5, 7, and 10? I don't really see that. 14. If you deduct a 10, that doesn't work. If you...","```python
start_state = (5, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""we can reduce the 7, 5, and 5 to 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5+5=17"",
    resulting_state=(10, 17),
    comment='""we can reduce the 7, 5, and 5 to 14"" though they actually sum to 17',
)

# ""10 minus 5 would be 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 7),
    comment='""10 minus 5 would be 5""',
)

# ""10 minus 7 would be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 5, 5),
    comment='""10 minus 7 would be 3""',
)

# ""5 minus 7 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 5, 10),
    comment='""5 minus 7 would be 2""',
)

# ""2 times 5 would be 10, and then plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5+10=20"",
    resulting_state=(20,),
    comment='""2 times 5 would be 10, and then plus 10""',
)

# ""17 plus 5 would be 22""
# The participant seems to be setting a subgoal
graph.set_subgoal(
    (5, 17),
    state_after_subgoal=(22,),
    comment='""17 plus 5 would be 22"" - participant working backwards',
)

# ""24 minus 7 would be 17""
# The participant seems to be working backwards from 24
graph.set_subgoal(
    (7, 17),
    state_after_subgoal=(24,),
    comment='""24 minus 7 would be 17"" - participant working backwards',
)

# ""14. If you deduct a 10""
# The participant seems to be working backwards from 24
graph.set_subgoal(
    (10, 14),
    state_after_subgoal=(24,),
    comment='""14. If you deduct a 10"" - participant working backwards',
)
```"
2929,"[1,5,5,6]",(5x6)-5-1,129," So we have two 5s and a 6. So 24, if we reduce, if we subtract a 5 from the 5, a 1, that would give us a 4 times 6 would be 24, but there's an extra 5. So somehow we need to get rid of a 5. So 5 from 6 is only a 1. So you could add the 1 and the 5 to make the 6 again. So somehow we need to get rid of a 5. So somehow we need to get rid of a 5. So 5 minus 5, that would not work either. So could we times, if you times 5 by 5 is 25 and minus the 1, but how do we get rid of the 6? So this is an interesting dilemma here. Let's see. Let's see, maybe if we subtract 5 from 24, that's 19. Can we get 19? No. How about 5 times 6 is 30 minus 6 is 24. So let's do that. Bracket 5 times 6 equals 30. Okay. Minus, and we'll just do the bracket again, or minus 5 minus 1, that should work. Minus, and we'll just do the bracket again, or minus 5 minus 1, that should work.","```python
start_state = (1, 5, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if we subtract a 5 from the 5, a 1, that would give us a 4 times 6 would be 24""
# The participant seems to be setting a subgoal of getting to 4 to multiply by 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""if we subtract a 5 from the 5, a 1, that would give us a 4 times 6 would be 24""',
)

# ""5 from 6 is only a 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 1, 5),
    comment='""5 from 6 is only a 1""',
)

# ""So you could add the 1 and the 5 to make the 6 again""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(1, 6),
    comment='""So you could add the 1 and the 5 to make the 6 again""',
)

# ""5 minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-5=0"",
    resulting_state=(0, 1, 6),
    comment='""5 minus 5""',
)

# ""if you times 5 by 5 is 25 and minus the 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5-1=24"",
    resulting_state=(6, 24),
    comment='""if you times 5 by 5 is 25 and minus the 1""',
)

# ""5 times 6 is 30 minus 6 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 5, 30),
    comment='""5 times 6 is 30""',
)

# Then the participant decides to subtract 5 and 1 from 30
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-5-1=24"",
    resulting_state=(24,),
    comment='""minus 5 minus 1, that should work""',
)
```"
2934,"[1,1,5,5]",(5+1)x(5-1),35," Okay, they're all odd numbers. They're prime. And so it looks kind of like the last one. Maybe you add a 1 to make 6 and subtract a 1 to make 4. So how do we type that in? We'll go 5 plus 1 times 5 minus 1.","```python
start_state = (1, 1, 5, 5)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Maybe you add a 1 to make 6 and subtract a 1 to make 4"" - participant is setting subgoals
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""Maybe you add a 1 to make 6 and subtract a 1 to make 4""',
)

# ""We'll go 5 plus 1 times 5 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*(5-1)=24"",
    resulting_state=(24,),
    comment='""We\'ll go 5 plus 1 times 5 minus 1""',
)
```"
2937,"[4,7,12,12]",(12-7),180," Okay, again, we're starting with 24. We have the numbers 4, 7, 12, and 12. Okay, so 12 plus 12, obviously, is 24. 4 plus 7, 7, 8, 9, 10, 11, 12. Okay, so we would do 12 plus 12. All right, let's see. 12 plus 12 is 24, and then this is 12. 12 plus 12 is 24, and if that is 12, 7, let's see, 12 minus 7 is what? That's 5. 5, and then this 4 minus 12 is what? Minus 12. 4 minus 12 is 8, so 5 and 8 is 24, isn't it? Okay, so we're going to go 4, 7 minus 7 minus 4. Wait, delete. Okay, so 7 minus... Minus 4, right? No, that's not right. Delete. I'm sorry. All right, so it was... Okay, so it was 12 minus 7. 12 minus 7. Shit. Shit, I still messed it up again. Excuse me. 12 minus 7 is 5. Okay, and then we're going to say plus, I believe, and then in parentheses, 12 minus 4 is 8. Okay, so... Oh, that's going to be times. Shit. Okay, delete, delete, delete, delete, delete, delete, delete, delete. Okay, 12... Wait, no. 12 minus 7 is 5, and 12 minus 4 is 8. That's not right. Hold on. Okay, 4 divided by 12. 4 divided by, okay, 12 times 4. 4.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12, obviously, is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 7, 24),
    comment='""12 plus 12, obviously, is 24""',
)

# ""4 plus 7"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(11, 12, 12),
    comment='""4 plus 7""',
)

# ""12 minus 7 is what? That's 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 12),
    comment='""12 minus 7 is what? That\'s 5""',
)

# ""4 minus 12 is 8"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4-12=8"",
    resulting_state=(7, 8, 12),
    comment='""4 minus 12 is 8"" - calculation error',
    result_calc_error=True,
)

# ""7 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 12, 12),
    comment='""7 minus 4""',
)

# ""12 minus 7 is 5"" - participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 12),
    comment='""12 minus 7 is 5"" - participant tries this operation again',
)

# ""12 minus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 12),
    comment='""12 minus 4 is 8""',
)

# ""4 divided by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""4/12=0.33"",
    resulting_state=(0.33, 7, 12),
    comment='""4 divided by 12""',
)

# ""12 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(7, 12, 48),
    comment='""12 times 4""',
)
```"
2938,"[1,1,4,6]",,180," Okay, so 4 times 6 is 20. Okay, and then 1 plus 1 is 2. Let's see, 4 plus 1 is 5. 4 minus 1 is 3. 3 times 6 is 24, I think. Okay, so we're going to go 4. 4 minus 1 is 3. Okay, and then it's going to be times 6. And then it's 6. Times 1, right? 6 times 1 in parentheses. Okay, so 4 minus 1 is 3 times. Okay, wait. That's supposed to be plus 4. No, it's times. Okay, 4 minus 1 is 3. 6 times 1 is 6. 6 times 3 is 4. 6 times 3 is 24. Oh, okay. Try this again. Okay, that's all right. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. I'm going to write. No, 2. That's not right either, is it? 36 divided by 2. No. 36 divided by. Okay. I hated times tables, so I'm going to say that this is a bit hard for me for some reason. 4 times 6. 6 and 6. And 6 and 6. So that's 12 and 12. And that's 4 times 6. 4 times 6 is. I'm going blank right now. 24. Okay. So 4 times 6. Okay. I got it. I got it. I got it. I got it. I got it. I got it. I got it. Delete. Delete. Delete. Delete. Delete. Delete. Delete. Okay. I'm saying it out loud, people. Delete. Delete. Delete. Delete.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6 is 20"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=20"",
    resulting_state=(1, 1, 20),
    comment='""4 times 6 is 20"" - calculation error',
    result_calc_error=True,
)

# ""1 plus 1 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 4, 6),
    comment='""1 plus 1 is 2""',
)

# ""4 plus 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+1=5"",
    resulting_state=(1, 5, 6),
    comment='""4 plus 1 is 5""',
)

# ""4 minus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(1, 3, 6),
    comment='""4 minus 1 is 3""',
)

# ""3 times 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=24"",
    resulting_state=(1, 24),
    comment='""3 times 6 is 24""',
    result_calc_error=True,
)

# ""6 times 1"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1=6"",
    resulting_state=(3, 6),
    comment='""6 times 1""',
)

# ""6 times 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=24"",
    resulting_state=(24,),
    comment='""6 times 3 is 24""',
    result_calc_error=True,
)

# ""4 times 6"" participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(1, 1, 24),
    comment='""4 times 6 is 24"" participant finally calculates this correctly',
)

# The rest of the transcript is the participant saying ""delete"" repeatedly and expressing frustration
```"
2947,"[3,3,3,9]",(9-(3/3))x3,53," 3 divided by 3 equals 1, 9 minus 1, 9 minus 3 divided by 3 equals 8, 8 times 3 equals 24. Okay, maybe I'm not showing that correctly. Maybe I need to do 9 minus more brackets for 3 divided by 3 so that that's 8 times 3.","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 divided by 3 equals 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 3, 9),
    comment='""3 divided by 3 equals 1""',
)

# ""9 minus 1"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(3, 3, 8),
    comment='""9 minus 1""',
)

# ""8 times 3 equals 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24, 3),
    comment='""8 times 3 equals 24""',
)

# The participant then talks about needing more brackets but is describing the same computation they just did
# Their final answer (9-(3/3))x3 matches the sequence of operations they described
```"
2949,"[3,3,7,13]",,180," See, 3 times 3 doesn't work. 4...16... 16 times 7... 16 times 7... Okay, that's not working. 1 divided by 1...yep, still working on it. 7 minus 3 equals... 4... 7... Oh, that wouldn't work. 3 divided by 3... So we need 13 plus 11... Can't get that to 11... 7 times 3 is 21... 3 times 3 is 9... 9... That doesn't work. 3... 13 plus 7 is 20... 3 times 3 is 9... 7 is 21... 13...oh, okay. 13 minus 7 equals 6... 6... Oh, no, that doesn't work. I was thinking 3 divided by 3 is 1 plus 3 is 4, but there's not enough 3s. So we gotta... I don't think this one you can do, but apparently you can. Let's see... So we do that... That's not... Oh, 6... Okay, so we add those together... 6...","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 doesn't work""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(7, 9, 13),
    comment='""3 times 3 doesn\'t work""',
)

# ""16 times 7"" - not clear where 16 came from, might be a transcription error

# ""7 minus 3 equals... 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(3, 4, 13),
    comment='""7 minus 3 equals... 4""',
)

# ""3 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 7, 13),
    comment='""3 divided by 3""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3 is 21""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(7, 9, 13),
    comment='""3 times 3 is 9""',
)

# ""13 plus 7 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(3, 3, 20),
    comment='""13 plus 7 is 20""',
)

# ""13 minus 7 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7 equals 6""',
)

# ""3 divided by 3 is 1 plus 3 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3+3=4"",
    resulting_state=(4, 6),
    comment='""3 divided by 3 is 1 plus 3 is 4""',
)

```"
2954,"[9,11,12,13]",,180," So, thinking about this, we can clearly see that we have to take a critical look. So, let's see, let's see, let's see, let's see, how are we going to go about this. Okay. Let's see, okay, first of all, let me think about 12 divided by 9. So, divided by 9, and I will be getting, um, that is, um, okay, that wouldn't be possible. Okay. Okay. Wow. This is more difficult than I thought. Okay. So. How do we go about it? This is more difficult than I thought. Thank you. Thank you.","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# Most of the transcript is the participant thinking out loud without performing calculations

# ""let me think about 12 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 11, 13),
    comment='""let me think about 12 divided by 9""',
)

# The participant then decides ""that wouldn't be possible"" and continues to struggle without performing any more calculations

```"
2956,"[1,1,5,6]",(1/6)x(1/5,180," Let's proceed and then see that we forward. Now, 6. We have 1. Another 1. We have 6. And then 5. Okay. So, 6 times 5. 6 times 5 will give us 30. And it means that 1 1 cannot help us in this situation. Okay. So, what do we do? Mm-hmm. You see, we can't repeat the numbers too. Hmm. This is very difficult than I thought, seriously speaking. It's very difficult. Very, very difficult than I thought. I don't know what to do. I don't know what to do. Sincerely speaking. I don't know what to do again. Okay. Let's see. Let's see what happens. Okay. So, 6. Let's see. Let's see. Let's see. Let's see. Sincerely speaking. Let's see. Let's see. that way one out of six because your rapids plus rocket open one out of five let's see the results it's not possible it's not working","```python
start_state = (1, 1, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 5 will give us 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 1, 30),
    comment='""6 times 5 will give us 30""',
)

# The participant then expresses that they can't use the 1s to help with 30
# There's a long period where they express difficulty

# ""one out of six"" and ""one out of five"" suggests they tried division
new_state = graph.explore_operation(
    curr_state,
    operation=""1/6=0.17"",
    resulting_state=(0.17, 1, 5),
    comment='""one out of six""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""0.17/5=0.03"",
    resulting_state=(0.03, 1),
    comment='""one out of five""',
)

# The participant concludes ""it's not possible it's not working""
```"
2957,"[5,6,7,8]",(8-5)x(7+6),180," Okay, so we are having 5, 6, 7, and 8. Okay, so using these numbers, we have We are going to see that 6, let's say 8 plus 7 would be 15. So 15, we are left with 7. How do we go about it? So 6 times 8 would be 48 times 7. That would be 3, 3, 6 divided by 5. It's not working. So 5 times 6 times 7. 7 divided by 8, it's not working. So how do we go about this? Uh huh, uh huh, uh huh, uh huh, uh huh. Still thinking about it. I'm still thinking about it. Let's see, probably 8 minus 5, because of the bracket, multiplied by bracket opening, 6, plus 7, because of brackets, hmm, that is not working.","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 7 would be 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(5, 6, 15),
    comment='""8 plus 7 would be 15""',
)

# ""6 times 8 would be 48 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8*7=336"",
    resulting_state=(5, 336),
    comment='""6 times 8 would be 48 times 7""',
)

# ""divided by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""336/5=67.2"",
    resulting_state=(67.2,),
    comment='""divided by 5""',
)

# ""5 times 6 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6*7=210"",
    resulting_state=(8, 210),
    comment='""5 times 6 times 7""',
)

# ""7 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/8=0.875"",
    resulting_state=(0.88, 5, 6),
    comment='""7 divided by 8""',
)

# ""8 minus 5, because of the bracket, multiplied by bracket opening, 6, plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-5)*(6+7)=39"",
    resulting_state=(39,),
    comment='""8 minus 5, because of the bracket, multiplied by bracket opening, 6, plus 7""',
)
```"
2959,"[7,8,8,12]",,180," Let's see about this one. Okay. So with this one we are having 7, 8, 8 and 12. So 7, 8, 8 and 12. How do we go about it? Okay. Let me think through. Let me think through. Let me think through. Let me think through. Okay. So I'll be thinking about maybe 12 plus 8. It's not working. It's not working. It's not working for me. It's not working. So I'm thinking about 12 times 8. That will be 96. So I'm thinking about 12 times 8. That will be 96. Okay. How about 8 times 7? Hmmmm. I'm still not working. 8 times 8. 8 times 8 is 34. 34. 12 times 7. minus 34. 96 is 24. 96 is 28. It's not working. It's not working. What do we do? It's not working. Thank you. It's really not working for me. It's really not working for me.","```python
start_state = (7, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(7, 8, 20),
    comment='""12 plus 8""',
)

# ""12 times 8. That will be 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(7, 8, 96),
    comment='""12 times 8. That will be 96""',
)

# ""8 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(8, 12, 56),
    comment='""8 times 7""',
)

# ""8 times 8 is 34"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=34"",
    resulting_state=(7, 12, 34),
    comment='""8 times 8 is 34"" - calculation error',
    result_calc_error=True,
)

# ""12 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(8, 8, 84),
    comment='""12 times 7""',
)

# The rest appears to be the participant expressing frustration at not finding the solution
```"
2961,"[1,5,10,13]",5,180," Okay, so we have 1, 5, 5, 10, 1, 5, 10, and 13. So I'm going to go about this. Okay, so let's see how to go about this. We have 1, 5, 10, and 13. Okay. So therefore, how do you go about this? Okay, let's say we have the 13. We are left with 11. How do we get 11? Okay. Okay. So when 10 multiplies 13, we get 130. 130 divided by 6. Okay. Okay. It's not working. It's not working. 130 divided by 5. That is giving us 36. It's still not working. I'm sorry, guys. It's still not working. Okay, so let's say we have this, and let's say we have five. Five.","```python
start_state = (1, 5, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first repeats the numbers

# ""We have 13. We are left with 11. How do we get 11?"" suggests they are trying to work backward
graph.set_subgoal(
    (11,),
    state_after_subgoal=(24,),
    comment='""We have 13. We are left with 11. How do we get 11?""',
)

# ""when 10 multiplies 13, we get 130""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(1, 5, 130),
    comment='""when 10 multiplies 13, we get 130""',
)

# ""130 divided by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""130/5=26"",
    resulting_state=(1, 26),
    comment='""130 divided by 5""',
)

# The participant says ""five"" at the end but doesn't seem to do any calculation with it
# They submitted ""5"" as their response but the transcript doesn't show how they arrived at this
```"
2964,"[7,8,8,11]",(11-7)x8-8,76," 24, 8, 8, 7 and 11, 8 and 8 is 16, plus 7 is 25, 8, 8 and 8, 8 divided by 8, will give me a 1 to work with, 11 plus 8 is 19, that's 5 away, so I can't really do that, can't add them all up, can't divide them all out. If I did 11 minus 7, that would give me 4, 11 minus 7 would give me 4, that's my 11, that's my 7, yeah, 11 minus 7 gives me 4, times 8 is 3, 32 minus 8 is 24, so we'll do it like that. Alright, so parentheses 11 minus 7 is 4, times 8 minus 8.","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 and 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 11, 16),
    comment='""8 and 8 is 16""',
)

# ""plus 7 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+7=25"",
    resulting_state=(11, 25),
    comment='""plus 7 is 25""',
    result_calc_error=True,
)

# ""8 divided by 8, will give me a 1 to work with""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 7, 8, 11),
    comment='""8 divided by 8, will give me a 1 to work with""',
)

# ""11 plus 8 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(7, 8, 19),
    comment='""11 plus 8 is 19""',
)

# ""11 minus 7, that would give me 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 8, 8),
    comment='""11 minus 7, that would give me 4""',
)

# ""times 8 is 3, 32"" (participant corrects themselves)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(8, 32),
    comment='""times 8 is 32""',
)

# ""minus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-8=24"",
    resulting_state=(24,),
    comment='""minus 8 is 24""',
)
```"
2965,"[3,4,8,10]",(10-8)x(,180," If I did 8 times 4 is 32, take away 3 is 19, that doesn't work, 30, 10, I can go pretty high up, I mean if I can get to 80, if I can get to 80, if I do 10 times 8, that gives me an 80, divided by 4 gets me a 20, add 3, that's 23, that's one off, if I do 4 times 10, that gives me a 40, then I'm 16 away, 16 away, 30, what's 24 times 8, 24 times 8, it's 192, that doesn't really help, 10, 24 times 10 is 240, 240 divided by 8, divided by 3 is 80, that's not going to produce 24. 12, 120, so if I do 3 times 4 is 12 times 8, 96, that doesn't work, what if I do 3 times 4 times, 3 times 4, times 4 times 8, 96, I'm probably, oh I see what I'm doing here, 10 minus 8 gives me the 2, I can times that by,","```python
start_state = (3, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 4 is 32, take away 3 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4-3=29"",
    resulting_state=(10, 29),
    comment='""8 times 4 is 32, take away 3 is 19"" - participant made calculation error',
    result_calc_error=True,
)

# ""if I do 10 times 8, that gives me an 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(3, 4, 80),
    comment='""if I do 10 times 8, that gives me an 80""',
)

# ""divided by 4 gets me a 20, add 3, that's 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80/4+3=23"",
    resulting_state=(23,),
    comment='""divided by 4 gets me a 20, add 3, that\'s 23""',
)

# ""if I do 4 times 10, that gives me a 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*10=40"",
    resulting_state=(3, 8, 40),
    comment='""if I do 4 times 10, that gives me a 40""',
)

# ""what's 24 times 8"" - participant seems to be working backward from goal
graph.set_subgoal(
    (8, 24),
    state_after_subgoal=(192,),
    comment='""what\'s 24 times 8""',
)

# ""24 times 10 is 240"" - participant seems to be working backward from goal
graph.set_subgoal(
    (10, 24),
    state_after_subgoal=(240,),
    comment='""24 times 10 is 240""',
)

# ""3 times 4 is 12 times 8, 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4*8=96"",
    resulting_state=(10, 96),
    comment='""3 times 4 is 12 times 8, 96""',
)

# ""10 minus 8 gives me the 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 3, 4),
    comment='""10 minus 8 gives me the 2""',
)
```"
2971,"[2,4,6,9]",(9-6)x(4x2),54," 24. Wait, okay. Um, I got a 4, that's 24. At least throw it. 9 minus 2 is a 7. 7's not a very helpful number. So if I do 9 minus 6, that gives me a 3 to work with. I don't need a 3. Oh, 3 works though, because 3 times 4 times 2. So, so parenthesis 9 minus 6, that gives me a 3. And then I can, a 3 times 6. So times parenthesis, no, it's 3. I need an 8. So that's 2, 4 times 2. So it should be 3 times 8.","```python
start_state = (2, 4, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 2 is a 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(4, 6, 7),
    comment='""9 minus 2 is a 7""',
)

# ""7's not a very helpful number"" suggests backtracking
curr_state = graph.move_to_node(start_state)

# ""9 minus 6, that gives me a 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(2, 3, 4),
    comment='""9 minus 6, that gives me a 3""',
)

# The participant seems to be working toward a subgoal of getting 8 from 4*2
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I need an 8. So that\'s 2, 4 times 2""',
)

# ""4 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(3, 8),
    comment='""4 times 2""',
)

# ""So it should be 3 times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""So it should be 3 times 8""',
)

```"
2973,"[1,5,5,10]",((10-5)x5)-1,163," Target 1, 5, 5, and 10. So how do I get 24? Um, I can do, how do I get to 24? 10, 10 minus 5 is 5. And then, plus 1. Okay, so 10 minus 5 is 5. No. Okay. Okay, go back. Um, 10 divided by 5 is 2. Then 2 times, no, that's not going to give me what I need. Um, 10 divided, no, 5 divided by 1 is 5. I don't need 5. I need 6 and 4. So how would I get 24? I don't know. It's hard. So the target number is 24. Easy. 1. I'm trying to get, I can do 5 times 5. That's 25. So let's, let's see, that's 25. And then, okay, so 5 times 5 is going to give me 25. And then if I move, I don't, 1, 5, 5, 10. So I can do, delete, delete, delete, delete, delete, delete, delete. So I can do 2, so 10 minus 5. Okay, so 10, oh sorry, delete. 10 minus 5 is 5 times 5, which is 25. And then minus 1, that's 24.","```python
start_state = (1, 5, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 5 is 5. And then, plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5+1=6"",
    resulting_state=(5, 5, 6),
    comment='""10 minus 5 is 5. And then, plus 1""',
)

# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(1, 2, 5),
    comment='""10 divided by 5 is 2""',
)

# ""5 divided by 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5/1=5"",
    resulting_state=(5, 5, 10),
    comment='""5 divided by 1 is 5""',
)

# ""I can do 5 times 5. That's 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 10, 25),
    comment='""I can do 5 times 5. That\'s 25""',
)

# The participant then seems to delete their work and start over

# ""10 minus 5 is 5 times 5, which is 25. And then minus 1, that's 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-5)*5-1=24"",
    resulting_state=(24,),
    comment='""10 minus 5 is 5 times 5, which is 25. And then minus 1, that\'s 24""',
)
```"
2981,"[2,5,8,10]",(10-2)x(8-5),77," 5, 2, 8, 10. Okay, so what's different ways I can get 24? 24 for this one? 12 times 2, but I can't do 2. I can't get, oh, I can get 12 here. No. I can do 12 times 2. I can do 4 times 6, but I can't get 4. I can do 8 times 3. I have 8 here, but then I can't get 3 this way. I can get 3 minus, I can get 3 if I minus 8 minus 5. Then I can get 8 by minusing 10. Okay, 10 minus 2 times 8 minus 5. That's 8 times 3. Okay, yeah.","```python
start_state = (2, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""12 times 2, but I can\'t do 2""',
)

# ""4 times 6"" - participant sets another subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""I can do 4 times 6, but I can\'t get 4""',
)

# ""8 times 3"" - participant sets another subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""I can do 8 times 3""',
)

# ""I can get 3 if I minus 8 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(2, 3, 10),
    comment='""I can get 3 if I minus 8 minus 5""',
)

# ""Then I can get 8 by minusing 10"" - participant likely means 10-2=8
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(5, 8, 8),
    comment='""Then I can get 8 by minusing 10"" - participant likely means 10-2=8',
)

# ""10 minus 2 times 8 minus 5. That's 8 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-2)*(8-5)=24"",
    resulting_state=(24,),
    comment='""10 minus 2 times 8 minus 5. That\'s 8 times 3""',
)

```"
2982,"[1,6,8,13]",(13-1)x(8-6),34," Okay, 1, 6, 8, and 13. Okay, I can do 12. This is the 12th last time. I can do get 12 here, but then I need 2. 8 minus 3. 8 minus 6 is 2. 13 minus 1 is 12. 12 times 2 is 24. Okay, 13 minus 1. Times 8 minus 6.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can do 12"" suggests participant is setting a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""I can do 12"" and ""but then I need 2"" suggests participant wants 12 and 2',
)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(1, 2, 13),
    comment='""8 minus 6 is 2""',
)

# ""13 minus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(6, 8, 12),
    comment='""13 minus 1 is 12""',
)

# ""12 times 2 is 24"" - participant seems to be verifying their solution will work
# Then they restate the full solution ""13 minus 1. Times 8 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-1)*(8-6)=24"",
    resulting_state=(24,),
    comment='""12 times 2 is 24"" followed by restating full solution',
)
```"
2986,"[3,5,6,8]",,180," 8 times 5 is 40. Nope. 8 times 6 is 48. Hmm. 5 plus 8 is 40. Nope. 3 times 8. 18. 6 times 5 is 30. 8 times 6 is 24. That doesn't work. 6 times 8 times 5 is 40. 6 minus 9. That doesn't do it. 6 times 3. 6 times 18. And 8 is 26. Minus 5? No. 30. Minus 8. 22. Plus 3. 5 times 3 is 8, 15 5 times 5 times 8 is 40 5 times 6 times 40 dang it 48 minus 15","```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(3, 6, 40),
    comment='""8 times 5 is 40""',
)

# ""8 times 6 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(3, 5, 48),
    comment='""8 times 6 is 48""',
)

# ""5 plus 8 is 40"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=40"",
    resulting_state=(3, 6, 40),
    comment='""5 plus 8 is 40"" - calculation error',
    result_calc_error=True,
)

# ""3 times 8. 18"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=18"",
    resulting_state=(5, 6, 18),
    comment='""3 times 8. 18"" - calculation error',
    result_calc_error=True,
)

# ""6 times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(3, 8, 30),
    comment='""6 times 5 is 30""',
)

# ""8 times 6 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=24"",
    resulting_state=(3, 5, 24),
    comment='""8 times 6 is 24"" - calculation error',
    result_calc_error=True,
)

# ""6 times 8 times 5 is 40"" - seems to be a transcription error since 6*8*5=240
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8*5=40"",
    resulting_state=(3, 40),
    comment='""6 times 8 times 5 is 40"" - calculation error',
    result_calc_error=True,
)

# ""6 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(5, 8, 18),
    comment='""6 times 3""',
)

# ""6 times 18. And 8 is 26"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8=26"",
    resulting_state=(5, 26),
    comment='""6 times 18. And 8 is 26"" - calculation error',
)

# ""Minus 5? No. 30"" participant seems to be trying different operations
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-5=21"",
    resulting_state=(21,),
    comment='""Minus 5?""',
)

# Go back to start state for remaining operations
curr_state = graph.move_to_node(start_state)

# ""5 times 3 is 8, 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(6, 8, 15),
    comment='""5 times 3 is 15""',
)

# ""5 times 8 is 40"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(3, 6, 40),
    comment='""5 times 5 times 8 is 40"" - calculation error',
    result_calc_error=True,
)

# ""48 minus 15"" - participant first computes 8*6=48
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(3, 5, 48),
    comment='""48 minus 15"" - first computing 8*6',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-15=33"",
    resulting_state=(3, 33),
    comment='""48 minus 15""',
)
```"
2987,"[3,3,6,13]",,180," 6 times 3 is 18. 18 plus 13 is 31. No. 3 times 13 is 36. 36 minus 18 is 36. 36 minus 18 is 36. 36 minus 18 is 31. 18.ECHO Oh, 39, 6 times 13 is 39, no, 3 times 13 is 39. 6 plus 3 is 9, 9 plus 13 is, 9 plus 13 is 22. 3 plus 3. 3 plus 3. 3 plus 3. 3 plus 3 is 6, plus, 6 plus 6 is 36, minus 13, 23, dang it. Oh, 6 times, 9 times 3 is 27. 9 times 3. 9 times 3 is 27. 9 times 3 is 27. 9 times. 9 times. 3 times. 3 times. and given up 3 times 13 36 minus 9 is 25 3 times 13 is actually 39","```python
start_state = (3, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 13, 18),
    comment='""6 times 3 is 18""',
)

# ""18 plus 13 is 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+13=31"",
    resulting_state=(3, 31),
    comment='""18 plus 13 is 31""',
)

# ""3 times 13 is 36"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=36"",
    resulting_state=(3, 6, 36),
    comment='""3 times 13 is 36"" - calculation error',
    result_calc_error=True,
)

# ""6 times 13 is 39, no, 3 times 13 is 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(3, 6, 39),
    comment='""3 times 13 is 39""',
)

# ""6 plus 3 is 9, 9 plus 13 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+3)+13=22"",
    resulting_state=(3, 22),
    comment='""6 plus 3 is 9, 9 plus 13 is 22""',
)

# ""3 plus 3 is 6, plus, 6 plus 6 is 36, minus 13, 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)+6=12"",
    resulting_state=(12, 13),
    comment='""3 plus 3 is 6, plus 6""',
)

# ""9 times 3 is 27"" - participant likely made 9 from 3+6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+6)*3=27"",
    resulting_state=(13, 27),
    comment='""9 times 3 is 27"" - participant likely made 9 from 3+6',
)

# ""3 times 13 is actually 39"" - participant corrects their earlier calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(3, 6, 39),
    comment='""3 times 13 is actually 39""',
)
```"
2988,"[2,12,12,13]",12x2/(13-12),138," Plus plus 2, plus plus 2, plus plus 5. 15. These are getting harder. 13. 13 plus 12 is 25. 13 divided by 12. No, that's crazy. Oh, 12 minus 12. 12 divided by 12 is 1. No. 12 minus 12 is 0. No. 12. 13. 13 minus 12 is 1. 13 minus 12 times 2 equals divided by 13 minus 12. 13 minus 12. 13 minus 12 is 1.","```python
start_state = (2, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 12 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12=25"",
    resulting_state=(2, 12, 25),
    comment='""13 plus 12 is 25""',
)

# ""13 divided by 12"" participant quickly abandons this
new_state = graph.explore_operation(
    curr_state,
    operation=""13/12=1.08"",
    resulting_state=(2, 12, 1.08),
    comment='""13 divided by 12""',
)

# ""12 minus 12 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-12=0"",
    resulting_state=(0, 2, 13),
    comment='""12 minus 12 is 0""',
)

# ""13 minus 12 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 2, 12),
    comment='""13 minus 12 is 1""',
)

# Based on their final answer of 12x2/(13-12), they must have then multiplied 12*2 and divided by 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2/1=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they multiplied 12*2 and divided by (13-12) which is 1"",
)
```"
2989,"[8,9,9,12]",,180," 12, 9, plus 9, 18, plus 12, 30, no, 9 times 12 is 98, 98, 9 times 12 is 72, so 98 minus 72 is 26, that doesn't work, 9, 9 plus 12 is 21, plus 9 is 30, minus 8 is 22, nope, 20, 8 plus 9 is 17, 8 plus 9 is 17, plus 9 is 26, no, 8 plus 9 is 17, plus 12 is 26, I don't know, hmmm, sticking for a second, 9 minus 8 is 1, 9 minus 12 is 3, 3 times 8 is 24, but I'm left with a 9, 9 minus 12 is 3, 3 times 8 is 24, but I'm left with a 9, 9 minus 12 is 3, 3 times 8 is 5, 3 times 8 is 3, 3 times 9 is 18, 3 times 9 is 17, 1 9 plus 12 is 28, 1, 2, 3 plus 12 is 20, Thank you.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 9, 18, plus 12, 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+12=30"",
    resulting_state=(8, 30),
    comment='""9 plus 9, 18, plus 12, 30""',
)

# ""9 times 12 is 98"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=98"",
    resulting_state=(8, 9, 98),
    comment='""9 times 12 is 98""',
    result_calc_error=True,
)

# ""9 times 12 is 72"" - correcting previous calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=72"",
    resulting_state=(8, 9, 72),
    comment='""9 times 12 is 72""',
    result_calc_error=True,
)

# ""9 plus 12 is 21, plus 9 is 30, minus 8 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12+9-8=22"",
    resulting_state=(22,),
    comment='""9 plus 12 is 21, plus 9 is 30, minus 8 is 22""',
)

# ""8 plus 9 is 17, plus 9 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9+9=26"",
    resulting_state=(12, 26),
    comment='""8 plus 9 is 17, plus 9 is 26""',
)

# ""8 plus 9 is 17, plus 12 is 26"" - trying a different combination
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9+12=29"",
    resulting_state=(9, 29),
    comment='""8 plus 9 is 17, plus 12 is 26"" - participant makes calculation error',
    result_calc_error=True,
)

# ""9 minus 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 9, 12),
    comment='""9 minus 8 is 1""',
)

# ""9 minus 12 is 3, 3 times 8 is 24, but I'm left with a 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(9, 24),
    comment='""9 minus 12 is 3, 3 times 8 is 24, but I\'m left with a 9""',
)

# ""9 plus 12 is 28"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12=28"",
    resulting_state=(8, 9, 28),
    comment='""9 plus 12 is 28"" - calculation error',
    result_calc_error=True,
)
```"
2993,"[1,4,7,12]",,180," Okay, it's a different problem. 12, 7, 4, and 1. Let's try 7 times 4. It should be parenthesis 7 times 4. Parenthesis 7 times 4 gives you 28. 28 minus 12 gives you 16. Plus 1 will give you 17. No, wrong. Big numbers are 7 and 12. 7 and 12. They're almost too big. If I could get 7 minus... 4. Give me 3. It's going to be parenthesis. Parenthesis 7 minus 4 gives you 3. 3 plus 1. 3 plus 1 gives you 4. 4 times 12 is 48. Which is wrong. No. Uh... The... 12 minus 1 is 11. 11 minus 7 is 5. 5 times 4 is 20. Close, but no. 7... 12 minus 4 is 8. 8 times 7 is 56. 56 plus... 56 plus 1 is 58. 56 plus 1 is 57. No. Oof.","```python
start_state = (1, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let's try 7 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(1, 12, 28),
    comment='""Let\'s try 7 times 4""',
)

# ""28 minus 12 gives you 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-12=16"",
    resulting_state=(1, 16),
    comment='""28 minus 12 gives you 16""',
)

# ""Plus 1 will give you 17""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+1=17"",
    resulting_state=(17,),
    comment='""Plus 1 will give you 17""',
)

# ""If I could get 7 minus... 4. Give me 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(1, 3, 12),
    comment='""7 minus... 4. Give me 3""',
)

# ""3 plus 1. 3 plus 1 gives you 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(4, 12),
    comment='""3 plus 1. 3 plus 1 gives you 4""',
)

# ""4 times 12 is 48""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=48"",
    resulting_state=(48,),
    comment='""4 times 12 is 48""',
)

# ""12 minus 1 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(4, 7, 11),
    comment='""12 minus 1 is 11""',
)

# ""11 minus 7 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 4),
    comment='""11 minus 7 is 5"" - participant says 5 but likely meant 4',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=20"",
    resulting_state=(20,),
    comment='""5 times 4 is 20"" - participant continues with incorrect number from previous step',
    result_calc_error=True,
)

# ""12 minus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(1, 7, 8),
    comment='""12 minus 4 is 8""',
)

# ""8 times 7 is 56""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(1, 56),
    comment='""8 times 7 is 56""',
)

# ""56 plus 1 is 57""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56+1=57"",
    resulting_state=(57,),
    comment='""56 plus 1 is 57""',
)

```"
2997,"[2,2,5,12]",,180," So, 24 again. 2 times 2, no, 2, 2, 5, 24. I mean, 2, 2, 5, 12. 2, 2, 5, 12. Okay, that's what I got to work with. That 12, I think, is too big. 2 times 5 is 10. 10, okay. 2 times 5 is 10. Okay. 2 times 5 is 10. 12. I think 12 is too big to do anything with. And then I have a 2. 12 minus 10 gives you 2 times 2 is 4, which is nothing. It needs to be bigger. Or maybe try to get 3. Or 12. 12 times 2. 12 times 2, 24. If I can get 12 times 2, somehow that would work. But to get 12 times 2, to negate 5, minus 4. 5 minus 4 would give you 1. 1 times 12, no. If you want, you can do 10. No, that's too large. 10. 10 times 12 is too large. The answer should be 12. 12, 12. The answer should be somehow managing to get 12 times 2. But it might not be correct. You have 4. You have 1. 1 times 12. 1 times 12 is nothing. 1 times 12 is nothing. You could take... You could take 2 minus 2 is 0. Or you could take...","```python
start_state = (2, 2, 5, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(2, 10, 12),
    comment='""2 times 5 is 10""',
)

# ""12 minus 10 gives you 2 times 2 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(2, 2),
    comment='""12 minus 10 gives you 2""',
)

# ""times 2 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4,),
    comment='""times 2 is 4""',
)

# ""12 times 2, 24"" - participant seems to set this as a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""12 times 2, 24. If I can get 12 times 2, somehow that would work""',
)

# Moving back to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""2 minus 2 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""2-2=0"",
    resulting_state=(0, 5, 12),
    comment='""2 minus 2 is 0""',
)

```"
3004,"[8,9,12,12]",(9+,180," I am plus 8, I am plus 8, I am plus 8.itesse I I am plus 8 is 16 plus 12 minus 12 that's not wrong 8, 9, 12, 12 delete, ok, delete 12 divided by 12 minus 9 plus 8 I did, plus 8 minus oh shit 9 plus 8 ok 9, no, parentheses 9, 12","```python
start_state = (8, 9, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I am plus 8 is 16"" - participant likely means ""9 plus 8 is 16"" based on available numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=16"",
    resulting_state=(12, 12, 16),
    comment='""I am plus 8 is 16"" - participant likely means ""9 plus 8 is 16""',
    result_calc_error=True, # since 9+8=17
)

# ""plus 12 minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+12-12=16"",
    resulting_state=(16,),
    comment='""plus 12 minus 12""',
)

# ""12 divided by 12 minus 9 plus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12-9+8=0"",
    resulting_state=(0,),
    comment='""12 divided by 12 minus 9 plus 8""',
)

# The participant seems to be trying different combinations with 9 and parentheses but doesn't complete any more calculations before time runs out
```"
3005,"[1,11,13,13]",,180," 13 minus 1 plus 11 minus 13 That's 12. Okay, let's do plus 1. Plus 1. I know I did. Plus 1. Plus 11. 13 minus 11. Thirteen plus 11. Thirteen plus 11. That's 26 minus 13. Thirteen plus 11. Thirteen plus 11. Thirteen plus 11. Thirteen plus 11. Thirteen plus 11. Thirteen plus 11. Thirteen plus 11. Thirteen plus 11. Thirteen plus 11. It's minus, minus, 13 plus 1, 13 times. Plus 13 times 1.","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 1 plus 11 minus 13 That's 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1+11-13=12"",
    resulting_state=(12,),
    comment='""13 minus 1 plus 11 minus 13 That\'s 12""',
    result_calc_error=True,
)

# ""Plus 1. Plus 1."" seems to be adding 1 to something
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(11, 13, 14),
    comment='""Plus 1. Plus 1.""',
)

# ""Plus 11"" seems to be trying a new operation
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 13, 24),
    comment='""Plus 11""',
)

# ""13 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 13),
    comment='""13 minus 11""',
)

# ""Thirteen plus 11. That's 26 minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11-13=11"",
    resulting_state=(1, 11),
    comment='""Thirteen plus 11. That\'s 26 minus 13""',
)

# The participant repeats ""Thirteen plus 11"" many times, suggesting they are stuck

# ""13 plus 1, 13 times""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(11, 13, 14),
    comment='""13 plus 1""',
)

# ""Plus 13 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*1=13"",
    resulting_state=(11, 13, 13),
    comment='""Plus 13 times 1""',
)
```"
3014,"[2,3,9,10]",2+3+9+10,71," Next one, target number 24. Ooh, okay. So it ends on 10. So 2 times 12, is there a way to get 12 out of these numbers? 27. You're not multiplying by 10 for the last number, because then you'd have to get 240 out of these, which you can't really do by multiplying them all out, so it's not dividing by 10. So you're either adding, subtracting, or multiplying by 10. And then you can really multiply by 10 because it's, would not be an integer, so it's gotta be either plus or minus, so it's either gotta, either gotta equal 14. Oh yeah. 12, 14, this is, oh my god, I'm stupid. Okay, 2 plus 3 is 5, plus 9 is 14, plus 10 is 24. Duh.","```python
start_state = (2, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So 2 times 12, is there a way to get 12 out of these numbers?"" 
# This suggests the participant is setting a subgoal to get 12
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""So 2 times 12, is there a way to get 12 out of these numbers?""',
)

# ""27"" - participant may have tried 2*3*9=54/2=27, but they only say ""27"" so we'll set it as a subgoal
graph.set_subgoal(
    (27,),
    state_after_subgoal=(24,),
    comment='""27""',
)

# The participant then reasons about operations with 10 and concludes they need addition/subtraction

# ""2 plus 3 is 5, plus 9 is 14, plus 10 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3+9+10=24"",
    resulting_state=(24,),
    comment='""2 plus 3 is 5, plus 9 is 14, plus 10 is 24""',
)
```"
3015,"[4,7,12,12]",4x(7-12/12),81," 24. Okay. We know that 12 plus 12 is 24. We have these other numbers here. 12, 4 minus 7. No. Negative 3. No. Okay, so we got 12 plus 12. 12 divided by 12. No. Equals 1. So we got 24. Okay, 4 plus 7 is 11. That's not going to get me anywhere. 4 times. Okay, so 4 multiplies. Can I get 6 out of this somehow? 7 minus 1. There we go. We got 4 times parenthesis 7 minus 12. 12. That'll be 12. That'll be 12. Yeah. Yeah.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 7, 24),
    comment='""12 plus 12 is 24""',
)

# ""12, 4 minus 7. No. Negative 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-7=-3"",
    resulting_state=(-3, 12, 12),
    comment='""4 minus 7. No. Negative 3""',
)

# ""12 divided by 12. No. Equals 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 4, 7),
    comment='""12 divided by 12. No. Equals 1""',
)

# ""4 plus 7 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(11, 12, 12),
    comment='""4 plus 7 is 11""',
)

# ""Can I get 6 out of this somehow?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""Can I get 6 out of this somehow?""',
)

# ""7 minus 1"" where 1 comes from 12/12
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 4, 7),
    comment='""7 minus 1"" first computing 12/12',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(4, 6),
    comment='""7 minus 1""',
)

# Finally, based on their response of 4x(7-12/12), they must have multiplied 4 by 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='Based on their response of ""4x(7-12/12)"", they multiplied 4 by 6',
)
```"
3018,"[2,4,7,12]",,180," Okay, 24. Okay, so we got 12. So this goes into 24. So we might be either dividing or multiplying here. 7 times 4 is 28. So can we get 2 somehow? So it goes 2 times 12 out of this. 8. 2 times 8, no. 2 plus 5, no, not any 2. So I don't think... Today we're just adding all these up. 6 plus 7, 13, no. 2 plus 6, 2 minus 4. Maybe this is tougher. Okay, let me see. So 12. It's either adding or we're going to be... I don't know, I can't get... This is somehow like 2. I can't get 2 out of this because 2 times 12 would equal 24. So we're just adding 4. 2 plus 6, 2 minus 5, no. Oh yeah, if I do... Okay, if I do... 2 plus 4 minus 7 is negative 1. What if I... What if I... negative 6 plus 7 2 minus 4 8 2 times 8, 56 28, 56 11 times 2 is 22 28 Can I get 36 anywhere? No, 8 This is tough I'm not good at this one Okay Okay 24712","```python
start_state = (2, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(2, 12, 28),
    comment='""7 times 4 is 28""',
)

# The participant seems to be looking for a way to get 2 to multiply with 12
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment=""Participant seems to be looking for a way to get 2 to multiply with 12"",
)

# ""2 plus 4 minus 7 is negative 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4-7=-1"",
    resulting_state=(-1, 12),
    comment='""2 plus 4 minus 7 is negative 1""',
)

```"
3019,"[4,7,7,8]",(4-7/7)x8,101," Okay, 24. Okay, so 8 goes into 24. So we might be multiplying or dividing this. So we got 4 minus 1 times 3 equals 24. So we got 4 minus 7 divided by 7. It's 4 minus 1 times 8. Wait. That's not wrong. 4 minus 1 times 8. 7 divided by 7 is 1. So 4 minus 1. Times 8. That's... That's... What do you mean? Okay. 4 minus 7 times... There's 7. Divided by 7. Maybe it's this. 4 minus 7 divided by 7. I clicked it. Times 8. Times 8.","```python
start_state = (4, 7, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 goes into 24"" suggests participant is working backward from 24
graph.set_subgoal(
    (3, 8),  # since 3*8=24
    state_after_subgoal=(24,),
    comment='""8 goes into 24"" suggests participant is working backward from 24',
)

# ""4 minus 7 divided by 7"" participant realizes they can make 1 by dividing 7 by 7
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 4, 8),
    comment='""7 divided by 7 is 1""',
)

# Then they use this 1 in their next calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 8),
    comment='""4 minus 1""',
)

# Finally they multiply by 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""Times 8""',
)
```"
3027,"[9,9,11,13]",(9/9)x(11+13),56," 9 plus 9 is 24, so I could do 9 divided by 9 is 1, plus, no, 9 and 1 times 11 plus 3. No, I need a parenthesis. So if I do 9 divided by 9 is 1. . . . . . . . . . times 11 plus 13.","```python
start_state = (9, 9, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 9 is 24"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=24"",
    resulting_state=(11, 13, 24),
    comment='""9 plus 9 is 24"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""9 divided by 9 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 11, 13),
    comment='""9 divided by 9 is 1""',
)

# ""times 11 plus 13"" - participant multiplies 1 by (11+13)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*(11+13)=24"",
    resulting_state=(24,),
    comment='""times 11 plus 13""',
)
```"
3042,"[4,8,8,11]",,180," 24. Alright, we've got 8 plus 4 is 12. I would need another 12 to get there. I can't do that with the remaining numbers. 4 times 11 is 44. Oh, here we go. 11 minus 8 is 3. 3 times 4 is 12. No. 8 divided by 4 is 2. 2 times 8 is 16. No, that doesn't work. 11 minus 4 is 7. Plus 16. That doesn't work either. 8 plus 8 is 16. 8 plus 8 is 16. Alright, let's do 11 times 4 is 44. 44 minus 8 is 36. 36 minus 8 is 28. That doesn't help. 8 times 8 is 72? 8 times 8 is 64. 64 divided by 4 is 65. What is 64 divided by 4? 64 divided by 4 is 16 plus 11. That's too much. That's too much. Ok. 11 times 8, 88, divided by 4 is 22, and I've got an 8 left over. I can't do anything with that. So once again, we have 8 times 11, 32, 32 minus, I would need 8, but then I got an 11 out there. 11 minus 4. 7 plus 8, 15 plus 8, 23.","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(8, 11, 12),
    comment='""8 plus 4 is 12""',
)

# ""4 times 11 is 44""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(8, 8, 44),
    comment='""4 times 11 is 44""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 8),
    comment='""11 minus 8 is 3""',
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 12),
    comment='""3 times 4 is 12""',
)

# ""8 divided by 4 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 8, 11),
    comment='""8 divided by 4 is 2""',
)

# ""2 times 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(11, 16),
    comment='""2 times 8 is 16""',
)

# ""11 minus 4 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(7, 8, 8),
    comment='""11 minus 4 is 7""',
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(4, 11, 16),
    comment='""8 plus 8 is 16""',
)

# ""11 times 4 is 44""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=44"",
    resulting_state=(8, 8, 44),
    comment='""11 times 4 is 44""',
)

# ""44 minus 8 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44-8=36"",
    resulting_state=(8, 36),
    comment='""44 minus 8 is 36""',
)

# ""36 minus 8 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-8=28"",
    resulting_state=(28,),
    comment='""36 minus 8 is 28""',
)

# ""8 times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(4, 11, 64),
    comment='""8 times 8 is 64""',
)

# ""64 divided by 4 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/4=16"",
    resulting_state=(11, 16),
    comment='""64 divided by 4 is 16""',
)

# ""plus 11"" - participant adds 11 to 16
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+11=27"",
    resulting_state=(27,),
    comment='""plus 11"" - participant adds 11 to 16',
)

# ""11 times 8, 88, divided by 4 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8/4=22"",
    resulting_state=(8, 22),
    comment='""11 times 8, 88, divided by 4 is 22""',
)

# ""8 times 11, 32"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=32"",
    resulting_state=(4, 8, 32),
    comment='""8 times 11, 32"" - participant makes calculation error',
    result_calc_error=True,
)

# ""11 minus 4. 7 plus 8, 15 plus 8, 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4+8+8=23"",
    resulting_state=(23,),
    comment='""11 minus 4. 7 plus 8, 15 plus 8, 23""',
)
```"
3049,"[1,2,2,6]",(2+2)x1x6,19," Okay, so, oh, this is the same problem. So we need 4 times 6 is 24. So in the brackets we'll do 2 plus 2, which is 4, times 1, which is still 4, times 6 is 24.","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So we need 4 times 6 is 24"" - participant is setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""So we need 4 times 6 is 24""',
)

# ""in the brackets we'll do 2 plus 2, which is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(1, 4, 6),
    comment='""in the brackets we\'ll do 2 plus 2, which is 4""',
)

# ""times 1, which is still 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*1=4"",
    resulting_state=(4, 6),
    comment='""times 1, which is still 4""',
)

# ""times 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""times 6 is 24""',
)
```"
3052,"[3,4,8,11]",(11-8+3)x4,123," Okay, so we have 3, 7, 8. Let's go 11 minus 7 is 4. Nope, that won't work. 11 minus, we could go, what would be 24? 6 and 4, so 8 minus, okay, 8 in brackets, we'll go 8 minus 3. Which is 5. And we'll start out with, so we're going to go 11 minus 3 minus 8. Nope, not minus 8, not minus 8. Minus 4. And that should be 6. No, because 11 minus 7. Okay, it made sense a second ago. Let's see. We should go 4 minus, oh crap, hmm. Oh, we need 6. So 11 minus 8, 11 minus 8 is 8. Minus 3, 3 plus 3 is 6 times 4. Okay, 11 minus 8. 8 minus, no, 11 minus 4. Crap, I'm confusing myself. 11, 8, 9, 10, 11. So 11 minus 3, or 11 minus 8 is 3. And then 3 plus 3 is 6. Times 4 is 24.","```python
start_state = (3, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 3. Which is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-3=5"",
    resulting_state=(4, 5, 11),
    comment='""8 minus 3. Which is 5""',
)

# ""11 minus 3 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3-8=0"",
    resulting_state=(0, 4),
    comment='""11 minus 3 minus 8""',
)

# ""11 minus 8 is 8"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=8"",
    resulting_state=(3, 4, 8),
    comment='""11 minus 8 is 8"" - calculation error',
    result_calc_error=True,
)

# ""11 minus 8 is 3. And then 3 plus 3 is 6. Times 4 is 24.""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8+3)*4=24"",
    resulting_state=(24,),
    comment='""11 minus 8 is 3. And then 3 plus 3 is 6. Times 4 is 24.""',
)
```"
3053,"[2,8,10,12]",,180," 22 so that's 10 10, 20, 32 we could go this is hard 12 times 2 is 24 that won't work 12 and we got to divide 2 so 8 divided by 2 is 4 that won't work 10 divided by crap let me think that's 22 8 is throwing me off ok let's see there has to be a way to get 24 12 divided by 2 is 6 oh there we go no that's 2 ah ah ah 12 divided by 8 is 6 6 minus or 10 minus 6 is 4 4 times 8 is not 24 ok 10 divided by 2 is 5 8 minus 5 is 3 still won't work still won't work so we could go 8 6","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10, 20, 32"" seems to be adding numbers: 10+10=20, 20+12=32
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(2, 8, 22),
    comment='""10, 20, 32"" seems to be adding numbers',
)

# ""12 times 2 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(8, 10, 24),
    comment='""12 times 2 is 24""',
)

# ""8 divided by 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/2=4"",
    resulting_state=(4, 10, 12),
    comment='""8 divided by 2 is 4""',
)

# ""12 divided by 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(6, 8, 10),
    comment='""12 divided by 2 is 6""',
)

# ""12 divided by 8 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8=6"",
    resulting_state=(2, 6, 10),
    comment='""12 divided by 8 is 6"" - calculation error',
    result_calc_error=True,
)

# ""10 minus 6 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(2, 4),
    comment='""10 minus 6 is 4""',
)

# ""4 times 8 is not 24"" - participant realizes this won't work

# ""10 divided by 2 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(5, 8, 12),
    comment='""10 divided by 2 is 5""',
)

# ""8 minus 5 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 12),
    comment='""8 minus 5 is 3""',
)

# ""still won't work still won't work"" participant realizes this approach won't work
# ""so we could go 8 6"" seems incomplete
```"
3054,"[1,7,10,13]",(7+1)x(13-10),58," Okay, so let's see. Let's try to get to 12. 13. We still got that 7 because we can go 10 plus 13 is 23 plus 1 is 24. We got a 10 and a 20. Oh my gosh, I can't do fractions in my head. Let's see. We could go 7 plus 1 is 8. We'll put that in brackets. And then 10 and we'll times that and we'll put in brackets 13 minus 10, which is 3. So essentially that's going to be 8 times 3. And that's 24.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let's try to get to 12"" - participant sets a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""Let\'s try to get to 12""',
)

# ""10 plus 13 is 23 plus 1 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13+1=24"",
    resulting_state=(7, 24),
    comment='""10 plus 13 is 23 plus 1 is 24""',
)

# ""7 plus 1 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(8, 10, 13),
    comment='""7 plus 1 is 8""',
)

# ""13 minus 10, which is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 8),
    comment='""13 minus 10, which is 3""',
)

# ""So essentially that's going to be 8 times 3. And that's 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""So essentially that\'s going to be 8 times 3. And that\'s 24""',
)
```"
3055,"[2,3,13,13]",,180," All right. Oh. So let's try 13 minus 3 is 10. 10 plus 13 is 23, but then I have a 2. Can't do anything with that. 13 minus... crap. 13 plus 13 is 26 minus 2, but I can't do that. How can we get... 13 minus 13 is 0 plus... nope, that won't work. 13 minus 2 is 11. That won't work. 13 times 2 is 26. 26 minus 13 is... that won't work. Let's see. 13 plus 5 is... yeah, that will work. 13 plus 2 is 15. 15... is 25. That won't work. Crap. What's 13 minus 6? 6, 7, 8, 9, 10, 11, 12, 13. 13 minus 6 is 7. 7 times 3 is 21. 21 minus 13. Yeah, that won't work. Wow, this 13 is... hard. Um... Well, 13 goes into that for... Oh my god, I can't do fractions. Well, 13 over 13 is 1. But that doesn't help me out. 2 times... 12. How do I get to 12? 13 minus... 5 is... That's 13 minus 5. Oh my gosh. I don't have enough time with this one. That would be 10. 10 plus... 13 is 23. 23 plus 2 is 25. That won't work. Uh-huh. Um...","```python
start_state = (2, 3, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(2, 10, 13),
    comment='""13 minus 3 is 10""',
)

# ""10 plus 13 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(2, 23),
    comment='""10 plus 13 is 23""',
)

# ""13 plus 13 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(2, 3, 26),
    comment='""13 plus 13 is 26""',
)

# ""13 minus 13 is 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-13=0"",
    resulting_state=(0, 2, 3),
    comment='""13 minus 13 is 0""',
)

# ""13 minus 2 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(3, 11, 13),
    comment='""13 minus 2 is 11""',
)

# ""13 times 2 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(3, 13, 26),
    comment='""13 times 2 is 26""',
)

# ""26 minus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-13=13"",
    resulting_state=(3, 13),
    comment='""26 minus 13""',
)

# ""13 plus 2 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(3, 13, 15),
    comment='""13 plus 2 is 15""',
)

# ""7 times 3 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(2, 13, 21),
    result_calc_error=True,
    comment='""7 times 3 is 21""',
)

# ""13 over 13 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 2, 3),
    comment='""13 over 13 is 1""',
)

# ""23 plus 2 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+2=25"",
    resulting_state=(3, 25),
    result_calc_error=True,
    comment='""23 plus 2 is 25""',
)
```"
3062,"[3,3,6,10]",,180, plus 6 plus 6 is 16 plus another 6 18 plus 3 all right hold on I just had it 10 10 3 plus 9 10 6 times 10 is 60 minus or delete divided by I don't know I'm confused,"```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""plus 6 plus 6 is 16"" - participant likely started with 10 and added 6
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6=16"",
    resulting_state=(3, 3, 16),
    comment='""plus 6 plus 6 is 16"" - participant likely started with 10 and added 6',
)

# ""plus another 6 18"" - participant seems to be adding 3 to 16, but that would be 19 not 18
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+3=18"",
    resulting_state=(3, 18),
    comment='""plus another 6 18"" - calculation error',
    result_calc_error=True,
)

# ""plus 3"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3=21"",
    resulting_state=(21,),
    comment='""plus 3""',
)

# ""10 3 plus 9"" is unclear what operation they're trying

# ""6 times 10 is 60""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(3, 3, 60),
    comment='""6 times 10 is 60""',
)

# The participant then mentions division but doesn't complete the calculation
```"
3063,"[1,3,3,10]",10,180, is 11 11 times 3 is 33 3 times 30 3 times 10 at 10 plus 3 let's delete these and put these in parentheses plus three that's 13 times wait i got it 10 plus 3 minus one that's 12 times three is 25 doesn't it right delete 10 plus 1 is 11. delete 10 plus 1 is 11. 11 plus 6 17 11 times 6. 11 plus 6 17 11 times 6. that's not it delete we can go back to i don't know 10. i don't know 10. i don't know 10. i don't know 10.,"```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 3 is 33"" - participant likely added 10+1 first
new_state = graph.explore_operation(
    curr_state,
    operation=""10+1=11"",
    resulting_state=(3, 3, 11),
    comment='""11 times 3 is 33"" - participant likely added 10+1 first',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(3, 33),
    comment='""11 times 3 is 33""',
)

# ""3 times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(1, 3, 30),
    comment='""3 times 10""',
)

# ""10 plus 3 ... plus three that's 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(1, 3, 13),
    comment='""10 plus 3 ... plus three that\'s 13""',
)

# ""10 plus 3 minus one that's 12 times three is 25"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+3-1)*3=25"",
    resulting_state=(25,),
    comment='""10 plus 3 minus one that\'s 12 times three is 25""',
    result_calc_error=True,
)

# ""10 plus 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+1=11"",
    resulting_state=(3, 3, 11),
    comment='""10 plus 1 is 11""',
)

# ""11 plus 6 17"" - participant first computes 3+3=6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 11),
    comment='""11 plus 6 17"" - participant first computes 3+3=6',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(17,),
    comment='""11 plus 6 17""',
)

# The participant then says ""delete"" and ""we can go back to"" suggesting they are backtracking
# They end by repeating ""10"" several times and submit 10 as their answer

```"
3064,"[1,2,5,7]",(7+5)x(2x1),163," 3, plus 10, 7, plus 5, 35, 7 times 5 is 35, 35 divided by 2 is 17, 35 divided by 2 is 7, 7 times 2 is 14, 14 plus 6 is 20, 12, I got it. Alright, so 7 plus 5, okay, I got it, I know, 7 plus 5, 5 times, parentheses, 2 times 1. Any other questions? Any other questions? All right. Thank you, everyone. Thanks very much. Bye. times 2 plus 1 2 times 1 so I'm going to put those in parentheses so 7 plus 5 times 2 times 1 times 1","```python
start_state = (1, 2, 5, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 5 is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(1, 2, 35),
    comment='""7 times 5 is 35""',
)

# ""35 divided by 2 is 17"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35/2=17"",
    resulting_state=(1, 17),
    comment='""35 divided by 2 is 17""',
    result_calc_error=True,
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 5, 14),
    comment='""7 times 2 is 14""',
)

# ""14 plus 6 is 20"" - seems like they computed 5+1=6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+(5+1)=20"",
    resulting_state=(20,),
    comment='""14 plus 6 is 20"" where 6 came from 5+1',
)

# ""7 plus 5"" participant starts over
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(1, 2, 12),
    comment='""7 plus 5""',
)

# ""2 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*1=2"",
    resulting_state=(5, 7, 2),
    comment='""2 times 1""',
)

# Finally, based on their response, they multiply (7+5)*(2*1)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+5)*(2*1)=24"",
    resulting_state=(24,),
    comment='Based on their response ""(7+5)x(2x1)""',
)
```"
3065,"[7,12,12,13]",(12x12),180," 12 times 12 is 49. 49 plus 13 is 62. 12 times 13... Turn that down, Ryan! It's time to turn on the tablet. 24... 25... 12 plus 13... I'm doing that. 12 plus 13... There's 25. 25 minus 12... That doesn't do anything. I don't think you can... you can't solve this one. Why are they putting up stuff you can't solve? 12 plus 4... all right so let's do some negatives so 12 minus 13 plus seven times two no oh this is so annoying 12 times 12 it's 144 these in parentheses 12 times 12","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 12 is 49"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=49"",
    resulting_state=(7, 13, 49),
    comment='""12 times 12 is 49"" - calculation error',
    result_calc_error=True,
)

# ""49 plus 13 is 62"" continuing from previous error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49+13=62"",
    resulting_state=(7, 62),
    comment='""49 plus 13 is 62""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""12 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(7, 12, 25),
    comment='""12 plus 13""',
)

# ""25 minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-12=13"",
    resulting_state=(7, 13),
    comment='""25 minus 12""',
)

# ""12 minus 13 plus seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-13+7=6"",
    resulting_state=(6, 12),
    comment='""12 minus 13 plus seven""',
)

# ""12 times 12 it's 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(7, 13, 144),
    comment='""12 times 12 it\'s 144""',
)
```"
3066,"[1,11,11,12]",(11+11)+1,180," Okay, I hear you. So let's do 11 plus 1. No, no. 11 plus 11. It's 22. Minus 12 is 21? No. 12. Minus 11. 12 minus 11 is 1. 1 plus 1 is 11. Minus one is 11. The same 11. Gene is always talking about Mac. They are alone. Don't stand up. 1 plus 1 is 2ble at the same time. 11 minus 1 plus 12, no, it's 12. 11 minus 1 is 10, no, so that's not it. Oh, I'm an idiot, alright, hold on one second, 11 divided by 11 is 1. 1 plus 1.","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(11, 12, 12),
    comment='""11 plus 1""',
)

# ""No, no. 11 plus 11. It's 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(1, 12, 22),
    comment='""11 plus 11. It\'s 22""',
)

# ""Minus 12 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22-12=21"",
    resulting_state=(1, 21),
    comment='""Minus 12 is 21""',
    result_calc_error=True,
)

# ""12 minus 11 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 11),
    comment='""12 minus 11 is 1""',
)

# ""1 plus 1 is 11"" seems to be a transcription error
# ""11 minus 1 plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1+12=22"",
    resulting_state=(11, 22),
    comment='""11 minus 1 plus 12""',
)

# ""11 minus 1 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(10, 11, 12),
    comment='""11 minus 1 is 10""',
)

# ""11 divided by 11 is 1. 1 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/11=1"",
    resulting_state=(1, 1, 11, 12),
    comment='""11 divided by 11 is 1""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 11, 12),
    comment='""1 plus 1""',
)
```"
3068,"[3,5,10,10]",(10-5),180," Alright, this one should be easier. Target number 24. 3, 5, 10, and 10. Well, if you do, let's see. 5 and 3 is 15. Nope. So the 10 and 10. Um, get a 6. I don't know if these are possible. 10 plus 5 is 15. What if we do 15 times 3 is 45, maybe minus 10. It's 35. No. Um, even if you do 5 times 10, that's 50. And then 3 times 10, that's 30, and that's only equal 20. Um, what if we did... I think it said you can only use each number once. 10 plus 10 is 20. 10 plus 10 is 20. Even if you did 25, that's not going to work. Oh, I have it now. Okay, let's see. Let's do this. Hello, 10 minus 10 is 0. Ugh, that's not going to work. Because I need 8 times 3. Plus... I wonder if it'll let me use it more than once. 5 plus 3. That's 8. Nope. These are really hard. 30. What if we do 3 times 10? That's 30. Okay. Oh, there's divided by... 8 times... 8 times 3 is 24. We can't get to 8, though. What if we do 10 minus 5? We would get 5. We do 10 minus 5. We get 5. 5.","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 and 3 is 15"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(10, 10, 15),
    comment='""5 and 3 is 15"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""10 plus 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(3, 10, 15),
    comment='""10 plus 5 is 15""',
)

# ""15 times 3 is 45, maybe minus 10. It's 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*3-10=35"",
    resulting_state=(35,),
    comment='""15 times 3 is 45, maybe minus 10. It\'s 35""',
)

# ""5 times 10, that's 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(3, 10, 50),
    comment='""5 times 10, that\'s 50""',
)

# ""3 times 10, that's 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(5, 10, 30),
    comment='""3 times 10, that\'s 30""',
)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(3, 5, 20),
    comment='""10 plus 10 is 20""',
)

# ""10 minus 10 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-10=0"",
    resulting_state=(0, 3, 5),
    comment='""10 minus 10 is 0""',
)

# ""5 plus 3. That's 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(8, 10, 10),
    comment='""5 plus 3. That\'s 8""',
)

# ""3 times 10? That's 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(5, 10, 30),
    comment='""3 times 10? That\'s 30""',
)

# ""8 times 3 is 24"" - participant realizes this would work but can't get 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24"" - participant realizes this would work but can\'t get 8',
)

# ""10 minus 5? We would get 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 10),
    comment='""10 minus 5? We would get 5""',
)

```"
3070,"[1,5,5,10]",,180," 5 times 5 is 25 minus 1 is 24, but we have this 10 here. What do we do with this 10? What about 5 minus 1 is 4? 4, no, 4 times 10 is 20, no. 5 times 5 is 25. No. Minus 10 is 15, no. 25. 5 times 5 minus, what about 10 minus 1 is 9. 5 divided by 5, no, that's not going to work either. It's got to be 5 plus 5 is, I don't know, times, that's 25. 25. 25. 25. 25. 25 divided by 25 minus 1. That's 24. No, that's not it either. I'm not going to get this one either. 5 divided by 10 is 2. 2 times 5 is 15. No. 5 plus 5 is 10. 10 plus 10 is 20, but then you have 1. 5 plus 5, 15. 5 plus 5 plus 10, that's 20, no. 5 plus 1 is 6. 6.","```python
start_state = (1, 5, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 25 minus 1 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5-1=24"",
    resulting_state=(10, 24),
    comment='""5 times 5 is 25 minus 1 is 24""',
)

# ""What about 5 minus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 5, 10),
    comment='""What about 5 minus 1 is 4""',
)

# ""4 times 10 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*10=40"",
    resulting_state=(5, 40),
    comment='""4 times 10 is 20""',
)

# Going back to start state for ""5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""Minus 10 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-10=15"",
    resulting_state=(1, 15),
    comment='""Minus 10 is 15""',
)

# ""what about 10 minus 1 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(5, 5, 9),
    comment='""what about 10 minus 1 is 9""',
)

# ""5 divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5/5=1"",
    resulting_state=(1, 1, 10),
    comment='""5 divided by 5""',
)

# ""5 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(1, 10, 10),
    comment='""5 plus 5""',
)

# ""5 divided by 10 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(1, 2, 5),
    comment='""5 divided by 10 is 2""',
)

# ""2 times 5 is 15"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=15"",
    resulting_state=(1, 15),
    comment='""2 times 5 is 15"" - calculation error',
    result_calc_error=True,
)

# Going back to start for ""5 plus 5 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(1, 10, 10),
    comment='""5 plus 5 is 10""',
)

# ""10 plus 10 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(1, 20),
    comment='""10 plus 10 is 20""',
)

# ""5 plus 5 plus 10, that's 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+10=20"",
    resulting_state=(1, 20),
    comment='""5 plus 5 plus 10, that\'s 20""',
)

# ""5 plus 1 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(5, 6, 10),
    comment='""5 plus 1 is 6""',
)
```"
3072,"[2,5,8,10]",(10-5-2)x8,103," Target number 24, 2, 5, 8, and 10. Target number 24, 2, 5, 8, and 10. is, I mean it could be 8 and 3. Oh, 10 minus 5 is 5. Oh, how about that? 10 minus 5 would be 5. 5, but then you minus 2 is 3, and then we can do times 8. Why does it say that? What? Oh my gosh. 10 minus 5 minus 2 is 3. Oh my gosh. 10 minus 5 minus 2 times it by 8.","```python
start_state = (2, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first repeats the numbers and target

# ""it could be 8 and 3"" suggests they are looking for numbers that multiply to 24
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""it could be 8 and 3"" suggests they are looking for numbers that multiply to 24',
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(2, 5, 8),
    comment='""10 minus 5 is 5""',
)

# ""5, but then you minus 2 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=3"",
    resulting_state=(3, 8),
    comment='""5, but then you minus 2 is 3""',
)

# ""and then we can do times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""and then we can do times 8""',
)

```"
3080,"[1,2,3,3]",(3+1)x2x(3),76," 24, so we need to multiply clearly. I need 9 times 2, no. I need 9. 24, I need 8 times 3. 8, how can I get 8? 2 times 3 is 6. 8 times 3. I need 8, 8, 8, 8. I need 1, 3, so I need to keep a 3 out here. So what can I do with 3, 2, 1 to get 8? 3, 6, 7, 25, so I get 12 and 2. No way I'm getting a 12 here. Oh, 4 times 3 is 12, okay. 4 times 3. So it's 3 plus 1 times 8, so it's going to be times 2 times 3. That looks weird with the breaks, but that should work.","```python
start_state = (1, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need 9 times 2"" - participant sets a subgoal
graph.set_subgoal(
    (2, 9),
    state_after_subgoal=(18,),
    comment='""I need 9 times 2"" - participant sets subgoal',
)

# ""I need 8 times 3"" - participant sets a subgoal of getting 8 to multiply by 3
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I need 8 times 3"" - participant sets a subgoal of getting 8',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(1, 3, 6),
    comment='""2 times 3 is 6""',
)

# ""3, 6, 7, 25"" seems to be adding numbers: 3+2+1=6
new_state = graph.explore_operation(
    curr_state,
    operation=""3+2+1=6"",
    resulting_state=(3, 6),
    comment='""3, 6, 7"" seems to be adding numbers',
)

# ""4 times 3 is 12""
# Looking at their final answer, they must have gotten 4 from 3+1
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(2, 3, 4),
    comment='""4 times 3 is 12"" - participant first computes 3+1=4',
)

# Then they multiply by 2 and 3 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2*3=24"",
    resulting_state=(24,),
    comment='""So it\'s 3 plus 1 times 8, so it\'s going to be times 2 times 3""',
)
```"
3081,"[1,4,5,6]",,180," 24, we have 4, 5, 6, and 1. What combinations make 24 a 6 out of 4? Um, 5 times 6 is 30. 30 minus 6. But I just use a 6. Yeah, 5 times 4 is 20. How do I get a 4 from a 6 and a 1? Cannot. Can I do what I see? 4 times, what about 4 times 1? That's 30. Minus 4 is 6 times 4 is 24. I have to use some subtractions. 5 times 5 is 25. 5 times 5 is 25. 6 times, you have to subtract. 5 minus 4 is 1. You can't use that. 6 minus 5 is 1. You can't use that. You need larger numbers. 4 minus 1 is 3. 30 minus 4 is 1. 3 minus 3, no. 5 minus 4, no. 6 minus 4 is 2. Can't use that. I had it in my head and I forgot when it popped up. Uh, 4 minus 1 is 3. 24, 24. I need 6 times 4. 6 times 4. Uh, 6 times 4 is 24. Um, 6 times 4, 6 times 4, 6 times 4. Uh, how can I get a 1 but keep a 4? Minus 4 is 20. I had it, bro. I have to keep a 6. It's 20. Uh, 4 times 1 is... Uh, I had the solution somewhere. 6 minus... I need to subtract something. Or divide. 6... No. I need to subtract... 24. 8 times 3. Can I get 8? No, I cannot get 8. Actually, no. 4 minus 3 is 9. No, I cannot get 8. No, I cannot get 8. I can get 4. 16 plus 6 is 12. I... I...","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 4, 30),
    comment='""5 times 6 is 30""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 6, 20),
    comment='""5 times 4 is 20""',
)

# ""4 times 1"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""4*1=4"",
    resulting_state=(4, 5, 6),
    comment='""4 times 1""',
)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 5, 24),
    comment='""6 times 4 is 24""',
)

# ""5 minus 4 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 1, 6),
    comment='""5 minus 4 is 1""',
)

# ""6 minus 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 1, 4),
    comment='""6 minus 5 is 1""',
)

# ""4 minus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 5, 6),
    comment='""4 minus 1 is 3""',
)

# ""6 minus 4 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-4=2"",
    resulting_state=(1, 2, 5),
    comment='""6 minus 4 is 2""',
)

# The participant seems to be trying to find ways to get 8 to make 24 (through 8*3)
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3. Can I get 8?""',
)
```"
3082,"[5,8,9,11]",(11-5),180," 24. 5, 8, 9, and 11. It's 23. What about 17? Boom. What's the 29? Whoa. 28, 23. What was the other combination? 17? 22. 5, 8, 11 is 24. Does that divide anything easily? No. 9 times... 40 and 99 is not it. 88 and 45. No. Numbers are too large. 55 and 72. 55 and 72. 8 times 9 is 72. 1 is 55. No. 8 times 11 is 72. 8 times 9 is 88. And no. The largest number. No. 8 times 5 is 40. No. 5 times 9 is 11. 5 times 8. 8 times 9. 8 times 11. Yo. 13. 13. But then 9. 11 minus 8 is 3. 27 minus 5 is 22. 9 minus 5 is 4. 44 minus 8 is not it. 11 minus 9 is 2. 8 times 5. No. 8 times 3. 11 minus 5. 11 minus 5 is 3. 3 times 8 is 24. I had the solution. 11 minus 5. No. 11 minus... What was it? 11 minus 8? It's 3. 27 minus... What? What? I just had the solution. 11 minus 5 is 6. Times 8 is 24. 8 times 8 is 48. What am I talking about? I just had the solution. That's so annoying. 11 minus 9 is 2. Times 8 is 16. No. I lost it. 11 minus 8.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What about 17?""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(5, 11, 17),
    comment='""What about 17?""',
)

# ""28, 23"" participant trying different sums
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8+9=28"",
    resulting_state=(5, 28),
    comment='""28""',
)

# ""5, 8, 11 is 24"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8+11=24"",
    resulting_state=(9, 24),
    comment='""5, 8, 11 is 24""',
)

# ""9 times... 40"" participant trying multiplication
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(8, 11, 45),
    comment='""9 times...""',
)

# ""8 times 9 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(5, 11, 72),
    comment='""8 times 9 is 72""',
)

# ""8 times 11 is 72"" - participant made calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=72"",
    resulting_state=(5, 9, 72),
    comment='""8 times 11 is 72"" - participant made calculation error',
    result_calc_error=True,
)

# ""8 times 9 is 88"" - participant made calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=88"",
    resulting_state=(5, 11, 88),
    comment='""8 times 9 is 88"" - participant made calculation error',
    result_calc_error=True,
)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(9, 11, 40),
    comment='""8 times 5 is 40""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 5, 9),
    comment='""11 minus 8 is 3""',
)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 8, 11),
    comment='""9 minus 5 is 4""',
)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 5, 8),
    comment='""11 minus 9 is 2""',
)

# ""11 minus 5 is 3"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=3"",
    resulting_state=(3, 8, 9),
    comment='""11 minus 5 is 3"" - calculation error',
    result_calc_error=True,
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(9, 24),
    comment='""3 times 8 is 24""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 8, 9),
    comment='""11 minus 5 is 6""',
)

# ""Times 8 is 48""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(9, 48),
    comment='""Times 8 is 48""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-9)*8=16"",
    resulting_state=(5, 16),
    comment='""11 minus 9 is 2. Times 8 is 16""',
)
```"
3085,"[2,3,6,7]",,180," Should I got them? 2, 3, 6, 7, 10 times 4 is 48, 42, 42, 42, 42, that was 48, 42, I can't get to 48, 6 times 3 is 24, 24 times 7 is 9, 8 times 1, 24, was it 24? How did I get 24? It's 18, 18 times 7. OD, no, 36, 36 minus 7 is 29, 7, what can I get? 14 times 3 is not it, 6 times 3 is 18 plus 5 is not it, 7 times 3 is 21, no. times 2 is 14. 14 times... it's 42. No. 9 times 6 minus... 9 times 2 minus 18. 7 times 2 is 42. 7 times 2 is not 42. 7 times 3. What? 7? What? What is this, bro? 42. 7 times 6 minus 6 is not 8. 7 times 2 is 14. 7 times 3 is 21. 12. 21 and 12. No. 7 times... 6 times 2 is 12. 21. No. 6 times 4 is 48. What was in my head? 6 minus 3 is 3. Times 7 is 21. 23. 7 minus 3 is 4. 4 times 24. 4 times 6 is 24. 3 minus 2 is 1. 6 minus 2 is 4. 12. 7 minus 3 is... 7 minus 2 is 5. 15. 7 minus 6 is not 8. 3. 14. Oh, man. I'm just not... I'm cooked. Rice. 2 times... 6. 6 on 6 is 36, minus 7 is 29, so dang. I'm not getting this one. 6 minus 2 is 4.","```python
start_state = (2, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 3 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=24"",
    resulting_state=(2, 7, 24),
    comment='""6 times 3 is 24"" - calculation error',
    result_calc_error=True,
)

# ""18 times 7"" - participant likely got 18 from 6*3
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(2, 7, 18),
    comment='""18 times 7"" - participant getting 18 from 6*3',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18*7=126"",
    resulting_state=(2, 126),
    comment='""18 times 7""',
)

# ""14 times 3"" - participant likely got 14 from 7*2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 6, 14),
    comment='""14"" - participant likely multiplied 7*2',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*3=42"",
    resulting_state=(6, 42),
    comment='""14 times 3""',
)

# ""6 times 3 is 18 plus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(2, 7, 18),
    comment='""6 times 3 is 18""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(2, 6, 21),
    comment='""7 times 3 is 21""',
)

# ""times 2 is 14"" - going back to 7*2
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 6, 14),
    comment='""times 2 is 14""',
)

# ""6 minus 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(2, 3, 7),
    comment='""6 minus 3 is 3""',
)

# ""Times 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 21),
    comment='""Times 7 is 21""',
)

# ""7 minus 3 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(2, 4, 6),
    comment='""7 minus 3 is 4""',
)

# ""4 times 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(2, 24),
    comment='""4 times 6 is 24""',
)

# ""3 minus 2 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-2=1"",
    resulting_state=(1, 6, 7),
    comment='""3 minus 2 is 1""',
)

# ""6 minus 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-2=4"",
    resulting_state=(3, 4, 7),
    comment='""6 minus 2 is 4""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(3, 5, 6),
    comment='""7 minus 2 is 5""',
)

# ""7 minus 6 is not 8"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(2, 3, 1),
    comment='""7 minus 6""',
)

```"
3086,"[5,5,8,13]",(8-5)x(13-5),42," Okay, so 5, 5, 8, and 13. So I know 8 is a factor of 24. I don't see where I can add that. I could subtract something. If I do 8 minus 5, I'll have 3. 13 minus 5, I'll have 8. And so if I multiply that together, so I can say 8 minus 5, which is 3. And then I'm going to multiply that by 13 minus 5, which is 8. So 3 times 8 is 24.","```python
start_state = (5, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 is a factor of 24"" suggests participant is working backward from 24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 is a factor of 24"" suggests participant is working backward from 24, looking for factors',
)

# ""8 minus 5, I'll have 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 13),
    comment='""8 minus 5, I\'ll have 3""',
)

# ""13 minus 5, I'll have 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(3, 8),
    comment='""13 minus 5, I\'ll have 8""',
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""3 times 8 is 24""',
)
```"
3089,"[1,1,4,6]",(6x4)x1x1,16," Okay, 6 is a factor, 4 is a factor, so that's easy. So I can say 6 times 4 equals 24, times 1, and then times 1, and that's all 24. Subtitles by the Amara.org community","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 equals 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 1, 24),
    comment='""6 times 4 equals 24""',
)

# ""times 1, and then times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1*1=24"",
    resulting_state=(24,),
    comment='""times 1, and then times 1""',
)

# The last line about subtitles is not relevant to the participant's solution process
```"
3091,"[2,4,7,12]",,180," 2, 4, 7, 12. Okay, so 2 times 12 is 24, plus 4 is 28. I can't get rid of the 7. 12, let me see, 7 minus 4 gives me 3, times 2 is 6, 7, 7 minus 4 gives me 3, then I would need an 8, but 12 divided by 2 is 6. See, 12 times 4 is 48, 48 minus 14 is not right, 48 divided by 2, oh, wait, okay, so what did I say? 12 times 4 is 48, and then... No, that's not right, that's just divided by 2, I haven't used a 7, that was stupid of me. Okay, so 12, 4 times 2 is 8, 4 times 2 is 8. This is, this is a pain, okay. 12 divided by 4 is 3, 3 times 7 is 21, 2 more, no? 12 times 7 is, the large number is 84, 84 divided by 4 is 21, 23. 84 divided by 2 is 42, nope, 2 plus 7 is 9, 9 plus 12 is 21, 21, doesn't work. Um, goodness, 12 divided by 2 is 6, 6 times 7 is 42, 42 divided by 4 is not going to work. Um, 12 minus 4 is 6, 6 times 7 is 42, 42 divided by 4 is 6, 6 times 7 is 42, 42 divided by 4 is not going to work.","```python
start_state = (2, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 12 is 24, plus 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(4, 7, 24),
    comment='""2 times 12 is 24""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+4=28"",
    resulting_state=(7, 28),
    comment='""plus 4 is 28""',
)

# ""7 minus 4 gives me 3, times 2 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(2, 3, 12),
    comment='""7 minus 4 gives me 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(6, 12),
    comment='""times 2 is 6""',
)

# ""12 divided by 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(6, 6),
    comment='""12 divided by 2 is 6""',
)

# ""12 times 4 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(2, 7, 48),
    comment='""12 times 4 is 48""',
)

# ""48 divided by 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/2=24"",
    resulting_state=(7, 24),
    comment='""48 divided by 2""',
)

# ""4 times 2 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(7, 8, 12),
    comment='""4 times 2 is 8""',
)

# ""12 divided by 4 is 3, 3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(2, 3, 7),
    comment='""12 divided by 4 is 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 21),
    comment='""3 times 7 is 21""',
)

# ""12 times 7 is, the large number is 84""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(2, 4, 84),
    comment='""12 times 7 is, the large number is 84""',
)

# ""84 divided by 4 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""84/4=21"",
    resulting_state=(2, 21),
    comment='""84 divided by 4 is 21""',
)

# ""84 divided by 2 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""84/2=42"",
    resulting_state=(4, 42),
    comment='""84 divided by 2 is 42""',
)

# ""2 plus 7 is 9, 9 plus 12 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+7=9"",
    resulting_state=(4, 9, 12),
    comment='""2 plus 7 is 9""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+12=21"",
    resulting_state=(4, 21),
    comment='""9 plus 12 is 21""',
)

# ""12 divided by 2 is 6, 6 times 7 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(4, 6, 7),
    comment='""12 divided by 2 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(4, 42),
    comment='""6 times 7 is 42""',
)

# ""12 minus 4 is 6, 6 times 7 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(2, 7, 8),
    comment='""12 minus 4 is 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(2, 56),
    comment='""6 times 7 is 42"" - participant seems to have made a calculation error',
    result_calc_error=True,
)
```"
3095,"[3,3,6,12]",,180," Okay, 6 divided by 3 is 3. 4 divided by 3, I mean 12 divided by 3 is 4. Okay, no. So if I get the 4, then I'll need an 8, but I can't get an 8 out of that. If I get 12 divided by 6 is 2. 2 times 9 is 18, so I need, okay, 6 times 3 is 18. 18 plus 3 is 21. 18, I would need, to get to 24, I would need 6, which is, no. Um, so... 6 minus 3 is... Okay, 12 divided by 3 is 4. But I would need... 4 times 6, what do I do with the other 3? 3 times 12 is 36. 6 minus 3 is 6. 6. Hmm, it's 30... 36, so then I would need... Ah! Nicely done! 36 minus three is three okay and three plus three is six that doesn't help me 36 minus three is 36 minus 36 minus three is 33 minus 3 is 30 I know I'm not making sense with my numbers 3 plus 6 is 9 9 minus three is six oh I know it's I know 12 minus six is six I need a four","```python
start_state = (3, 3, 6, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 3, 12),
    comment='""6 divided by 3 is 3"" - participant made calculation error',
    result_calc_error=True,
)

# ""12 divided by 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(3, 4, 6),
    comment='""12 divided by 3 is 4""',
)

# ""12 divided by 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 3, 3),
    comment='""12 divided by 6 is 2""',
)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 12, 18),
    comment='""6 times 3 is 18""',
)

# ""18 plus 3 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3=21"",
    resulting_state=(12, 21),
    comment='""18 plus 3 is 21""',
)

# ""6 minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3, 12),
    comment='""6 minus 3""',
)

# ""12 divided by 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(3, 4, 6),
    comment='""12 divided by 3 is 4""',
)

# ""3 times 12 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(3, 6, 36),
    comment='""3 times 12 is 36""',
)

# ""36 minus three is 33 minus 3 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-3-3=30"",
    resulting_state=(6, 30),
    comment='""36 minus three is 33 minus 3 is 30""',
)

# ""3 plus 6 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+6=9"",
    resulting_state=(3, 9, 12),
    comment='""3 plus 6 is 9""',
)

# ""9 minus three is six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 12),
    comment='""9 minus three is six""',
)

# ""12 minus six is six""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 3, 6),
    comment='""12 minus six is six""',
)
```"
3096,"[2,4,5,9]",2x9,180," Okay, let's see. Let's see. 5 times 2 is 10. 9 times 4 is 36. 36, hmm. 4 times 5 is 20, and 2 times 9 is 18. 9 times 5 is, 9 times 5, what's 9 times 5? 9 times 5 is 36, 37, 38, 39, 40, 41, 42, oh, it's 45. So let's see. 45 minus, 45 divided by, no, let's think, think, think, think, think. 36 divided by 2 equals, 18. Plus 5 would be 23. Hmm. 9 times 2 is 18. I don't know these. Sophie, lay down, lay down, lay down. Go. Oh, gosh, I don't know the answer. Okay, let's see. 4 times 5 is 20. I'm saying them out loud. 4 times 5 is 20. Plus 9 is 29. Minus 2 would be 27. That would not work. 5 times 2 is 30. Uh-oh. 5 times 2 is 25. 5 times 2 is 25. This is 2. 7 times 2 is 2, 10 plus..... There we go. Not bad indeed. 5 times 2 is 10. 5 times 2 is 25. equal 23. Hmm, 9 times 4 is 36, minus 2 would be 34. Hmm, okay let's see, 5 times 4 would be 20, plus 9, that would be 27. Darn it, I don't know what the answer to this one is. 2 times 9 is 18. 2 times 9 equals","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 2 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(4, 9, 10),
    comment='""5 times 2 is 10""',
)

# ""9 times 4 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 5, 36),
    comment='""9 times 4 is 36""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/2+5=23"",
    resulting_state=(23,),
    comment='""36 divided by 2 equals, 18. Plus 5 would be 23""',
)

curr_state = graph.move_to_node(start_state)
# ""4 times 5 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(2, 9, 20),
    comment='""4 times 5 is 20""',
)

# ""2 times 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(4, 5, 18),
    comment='""2 times 9 is 18""',
)

# ""9 times 5 is 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(2, 4, 45),
    comment='""9 times 5 is 45""',
)

# ""4 times 5 is 20. Plus 9 is 29. Minus 2 would be 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5+9-2=27"",
    resulting_state=(27,),
    comment='""4 times 5 is 20. Plus 9 is 29. Minus 2 would be 27""',
)

# ""5 times 2 is 25"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=25"",
    resulting_state=(4, 9, 25),
    comment='""5 times 2 is 25"" - calculation error',
    result_calc_error=True,
)

# ""9 times 4 is 36, minus 2 would be 34""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4-2=34"",
    resulting_state=(5, 34),
    comment='""9 times 4 is 36, minus 2 would be 34""',
)

# ""5 times 4 would be 20, plus 9, that would be 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4+9=27"",
    resulting_state=(2, 27),
    comment='""5 times 4 would be 20, plus 9, that would be 27""',
    result_calc_error=True,
)

# ""2 times 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(4, 5, 18),
    comment='""2 times 9 is 18""',
)
```"
3097,"[5,8,8,9]",(9-5)x8-8,163," Okay, I appreciate it. Alright, let's try this again. 8 times 8, no, we're not going to do that. 8 times 5 equals 40. 8 times 9 equals 8 times 9 equals 8 times 8 is 64, right? Plus 9, or plus 8 would be 72. So 72 minus 40 would equal 32, so that would not work. 8 times 8 equals 64 minus 45 would equal 19. 8 times 9 is 72. Hmm, divided by 5 would be 14, plus 8 would be 22. No, that would not work. Darn it, darn it, darn it, I don't know. I'm going to run out of time on this one too. 9 times 5 equals 45 minus 8 equals 37 minus 8 equals 29. This is a joke. Hmm, times 9 divided by 8. Hmm, 8 times 9 divided by 8 equals 9, plus 5 would only be 14. Hmm, hmm, hmm, hmm. 9 minus 5 equals 4. 9 minus 5 equals 4. Times 8 would be 32, minus 8 would be 24. There we go, that's it. So what is it? What did I do? I don't remember what I did. So it was 8 times 4. Oh, wait, no. I don't remember what I did, honestly. Darn it. I figured it out. Darn it, darn it, darn it. 8 times, wait. Okay, so it was 9 minus 5 would equal 4. Wait, so I would need to put that in parentheses. 9 minus 5 times 8. 8 minus 8. That's it. That's it. Thank you for watching.","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8, no, we're not going to do that"" - participant considers but rejects this operation

# ""8 times 5 equals 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(8, 9, 40),
    comment='""8 times 5 equals 40""',
)

# ""8 times 9 equals 8 times 8 is 64, right? Plus 9, or plus 8 would be 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(5, 8, 72),
    comment='""8 times 9 equals... plus 8 would be 72""',
)

# ""8 times 8 equals 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 9, 64),
    comment='""8 times 8 equals 64""',
)

# ""8 times 9 is 72... divided by 5 would be 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9/5=14.4"",
    result_calc_error=True,
    resulting_state=(8, 14),
    comment='""8 times 9 is 72... divided by 5 would be 14""',
)

# ""plus 8 would be 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+8=22"",
    resulting_state=(22,),
    comment='""plus 8 would be 22""',
)

# ""9 times 5 equals 45 minus 8 equals 37 minus 8 equals 29""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5-8-8=29"",
    resulting_state=(29,),
    comment='""9 times 5 equals 45 minus 8 equals 37 minus 8 equals 29""',
)

# ""8 times 9 divided by 8 equals 9, plus 5 would only be 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9/8+5=14"",
    resulting_state=(14,),
    comment='""8 times 9 divided by 8 equals 9, plus 5 would only be 14""',
)

# ""9 minus 5 equals 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 8, 8),
    comment='""9 minus 5 equals 4""',
)

# ""Times 8 would be 32, minus 8 would be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8-8=24"",
    resulting_state=(24,),
    comment='""Times 8 would be 32, minus 8 would be 24""',
)

# The participant then spends time trying to remember what they did
# Finally they reconstruct it as ""(9-5)x8-8"" which matches their submitted response
```"
3098,"[3,5,7,11]",,180," Alright, so we have 11 minus 7, that would be 4. Hmm. 4 plus 5 equals 9 times 3 would equal 27, so that would not work. So 5 plus 3 equals 8 times 7 equals 26. Hmm. That's good. Divided by 11 equals, no. Hmm hmm hmm hmm hmm. Okay, so let's try this instead. 11 plus 5 equals 16 plus 7 equals 23. Plus 3 would equal 26, darn it. 3 times 7 equals 21. Plus 11 equals 32. Minus 5 equals 27, darn it. 11 plus 5 equals 16 times 3 equals 48 minus 7 equals 41. 7 times 5 equals 35 minus 11. Darn it, that would have been the right answer right there. Hmm. Okay, let's try this. 3 times 11 equals 33 plus 5 minus 7. No. Hmm hmm hmm hmm. 5 times 11 equals 55 minus 7 minus 3. No. All clear. Dang it. Dang it dang it dang it. Oh wait wait wait! Maybe we could do 7 times 11 divided by 5. Divided by 5 plus 3. No. Okay, let's try 70, wait 77. 7 times 11 divided by 3. No. Hmm. 7 times 3 equals 21.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 7, that would be 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(3, 4, 5),
    comment='""11 minus 7, that would be 4""',
)

# ""4 plus 5 equals 9 times 3 would equal 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+5)*3=27"",
    resulting_state=(27,),
    comment='""4 plus 5 equals 9 times 3 would equal 27""',
)

# ""5 plus 3 equals 8 times 7 equals 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+3)*7=56"",
    resulting_state=(11, 56),
    comment='""5 plus 3 equals 8 times 7 equals 26"" - calculation error',
    result_calc_error=True,
)

# ""11 plus 5 equals 16 plus 7 equals 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5+7=23"",
    resulting_state=(3, 23),
    comment='""11 plus 5 equals 16 plus 7 equals 23""',
)

# ""Plus 3 would equal 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+3=26"",
    resulting_state=(26,),
    comment='""Plus 3 would equal 26""',
)

# ""3 times 7 equals 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(5, 11, 21),
    comment='""3 times 7 equals 21""',
)

# ""Plus 11 equals 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+11=32"",
    resulting_state=(5, 32),
    comment='""Plus 11 equals 32""',
)

# ""Minus 5 equals 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-5=27"",
    resulting_state=(27,),
    comment='""Minus 5 equals 27""',
)

# ""11 plus 5 equals 16 times 3 equals 48 minus 7 equals 41""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11+5)*3-7=41"",
    resulting_state=(41,),
    comment='""11 plus 5 equals 16 times 3 equals 48 minus 7 equals 41""',
)

# ""7 times 5 equals 35 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5-11=24"",
    resulting_state=(3, 24),
    comment='""7 times 5 equals 35 minus 11""',
)

# ""3 times 11 equals 33 plus 5 minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11+5-7=31"",
    resulting_state=(31,),
    comment='""3 times 11 equals 33 plus 5 minus 7""',
)

# ""5 times 11 equals 55 minus 7 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*11-7-3=45"",
    resulting_state=(45,),
    comment='""5 times 11 equals 55 minus 7 minus 3""',
)

# ""7 times 11 divided by 5 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*11/5+3=18.4"",
    resulting_state=(18.4,),
    comment='""7 times 11 divided by 5 plus 3""',
)

# ""7 times 11 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*11/3=25.67"",
    resulting_state=(5, 25.67),
    comment='""7 times 11 divided by 3""',
)

# ""7 times 3 equals 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(5, 11, 21),
    comment='""7 times 3 equals 21""',
)
```"
3108,"[10,11,11,12]",,180," Let's see, okay, 24 here, okay, so, 22, easy, and 12 plus 22, nope, that's not what I want to do, hmm, 11, 11 is 22, 24, but I don't want, the 10 is a problem. So I do 120 times, 12 times 10 is 120, hmm, that's 24, but if I add 11 and 11, plus the 12 is 24, but that's not what I want, hmm. What else, hmm, I'm trying to think here, okay, what numbers, what is that, 12, 12 times 11, what is that, that would be, 132, what if I do, hmm, what if I divide that, I'll divide it by 10, because then I get 13.2, so, but I divide it by 11 again, I'll get 12, 122 if I do that, let's see, 120 times 10, hmm, would be 1200, okay, oh, why am I doing 120? 12 times 10 is 120. Now if I divide that by 11, what do we get? Oh, that's not, I don't know. that is 22, and if I times that by 10 that's 220, if I divide it by 12 that's going to be, it's not even a breather, 11 times 12 is 132, and if I divide it by 11 I get 12, that's my 22.","```python
start_state = (10, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11, 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(10, 12, 22),
    comment='""11, 11 is 22""',
)

# ""12 times 10 is 120""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*10=120"",
    resulting_state=(11, 11, 120),
    comment='""12 times 10 is 120""',
)

# ""if I add 11 and 11, plus the 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11+12=34"",
    resulting_state=(10, 34),
    comment='""if I add 11 and 11, plus the 12 is 24"" - participant makes calculation error',
    result_calc_error=True,
)

# ""12 times 11, what is that, that would be, 132""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(10, 11, 132),
    comment='""12 times 11, what is that, that would be, 132""',
)

# ""divide it by 10, because then I get 13.2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""132/10=13.2"",
    resulting_state=(11, 13.2),
    comment='""divide it by 10, because then I get 13.2""',
)

# ""12 times 10 is 120. Now if I divide that by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12*10)/11=10.91"",
    resulting_state=(10.91, 11),
    comment='""12 times 10 is 120. Now if I divide that by 11""',
)

# ""11 times 12 is 132, and if I divide it by 11 I get 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11*12)/11=12"",
    resulting_state=(10, 12),
    comment='""11 times 12 is 132, and if I divide it by 11 I get 12""',
)
```"
3109,"[5,6,8,8]",8-,180," 8 times 8 is 16. If I add those, 6 is 11. What is 8 times 8? 64? 64. If I divide that by 6, it's not going to be an even number, so I don't think I want to do that. And 8 times 6 would be 48. And if I divide, I should divide by 8 evenly, so 6, no, that's not, that's not, 6 times 6 certainly gives me 11. Oh, boy. 8 times 8 is 64. I really want to divide that by 10. I can't. Hmm. Okay, let's see if I, 8 times 5, I know that's 40. And if I, let's see, divide by 6, it's 240. And if I divide it by 5, I know that's 40. And if I divide it by 5, it's still too many. Hmm. 11. If I add 5 and 6. Hmm. Wait a minute. No. If I divide, so 8 minus 5 is 3. 8 minus 5, I'm trying to think how, that seems like that to me. 8 minus 5 is 3. What if I multiply that by 6? Let's see if I do 8 minus 5, I'm going to get to 3. So I've used those two. I think maybe, okay. 8 minus,","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 is 16"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=16"",
    resulting_state=(5, 6, 16),
    comment='""8 times 8 is 16"" - calculation error',
    result_calc_error=True,
)

# ""If I add those, 6 is 11"" seems to be adding 5+6
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(8, 8, 11),
    comment='""If I add those, 6 is 11"" seems to be adding 5+6',
)

# ""What is 8 times 8? 64?""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""What is 8 times 8? 64?""',
)

# ""And 8 times 6 would be 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 8, 48),
    comment='""And 8 times 6 would be 48""',
)

# ""6 times 6 certainly gives me 11"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=11"",
    resulting_state=(5, 8, 8, 11),
    comment='""6 times 6 certainly gives me 11"" - calculation error',
    result_calc_error=True,
)

# ""8 times 5, I know that's 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 8, 40),
    comment='""8 times 5, I know that\'s 40""',
)

# ""If I add 5 and 6"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(8, 8, 11),
    comment='""If I add 5 and 6""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 8),
    comment='""8 minus 5 is 3""',
)

# ""What if I multiply that by 6?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(8, 18),
    comment='""What if I multiply that by 6?""',
)

```"
3111,"[3,5,7,11]",,180," Okay, let's see here. It would be 18 if I had 11 and 7. Nope, okay. Okay, I think... let's see, 5 plus 3 is 8, 11. No, 11 minus 7 is 4. Okay. I don't want to do that. 11 plus 5 is 16, so I need 19. 11 plus 5 is 16. Nope. That's 18. I don't know. 7 plus 5 is 12. 5 plus 5 is 12. I don't actually know. No. 7 times 5 is 30. That's 35. Times 5 is 35. What if I take away 11 from that? It's 24, but I still have the 3. Right? Yes. 7 times 5 is 35. 7 times 5 is 35. If I take away 11, then that's 24 also. What if I do 11 times 7 to get 77? Does that divide by 3? No, it doesn't. No, that's wrong, too. What if I did 5 times 3? 5 plus 3 is 8. No, no, no. It's not going to be either. If I do the 11 times 5, which is 55, none of those numbers are going to, like, divide evenly is the problem.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 and 7"" seems to be adding them
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(3, 5, 18),
    comment='""It would be 18 if I had 11 and 7""',
)

# ""5 plus 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(7, 8, 11),
    comment='""5 plus 3 is 8""',
)

# ""11 minus 7 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(3, 4, 5),
    comment='""11 minus 7 is 4""',
)

# ""11 plus 5 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(3, 7, 16),
    comment='""11 plus 5 is 16""',
)

# ""7 plus 5 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(3, 11, 12),
    comment='""7 plus 5 is 12""',
)

# ""7 times 5 is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(3, 11, 35),
    comment='""7 times 5 is 35""',
)

# ""What if I take away 11 from that?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-11=24"",
    resulting_state=(3, 24),
    comment='""What if I take away 11 from that?""',
)

# ""11 times 7 to get 77""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7=77"",
    resulting_state=(3, 5, 77),
    comment='""11 times 7 to get 77""',
)

# ""Does that divide by 3?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""77/3=25.67"",
    resulting_state=(5, 25.67),
    comment='""Does that divide by 3?""',
)

# ""5 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(7, 11, 15),
    comment='""5 times 3""',
)

# ""11 times 5, which is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(3, 7, 55),
    comment='""11 times 5, which is 55""',
)

```"
3113,"[5,8,8,9]",,180," Let's see here, okay, so I have 8, 16, 21, that's 30 if I don't want to do that, and 9, let's see, 9 plus 8 is 17, right, yeah, 9 plus 8 is 17, and then 9 plus 8 is 17, and then 9 plus 8 is 17. Um, I add 8 again, I get 25, and then 8 plus 5 is 13, I add 9, I get 20, nope, I add 9, hmm, 8 times 8 is 64, what happens if I divide that by 9, see none of these are, and 9 plus 5 is 14, if I add 8 is 22, but I still have the other 8, 9 by 8 is 72, if I divide by 8 again, I get 8, which, nope, 8 and 8 plus, did I do 8 and 8, no, 8 and 8 is 16, and if I add 9, yeah, so that's 16, I still add 9 to 25, but if I do 9 plus 8, I get 17, and I add 5, and if I add 8, I get 12, so I get 8, and 9 by 5 is 45, If I take... Let's see if I take both of them. 16... If I do 45 divided by 8, which I don't think is... Yeah... 45... 45 divided by 9 is... 5... Let's see...","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8, 16, 21, that's 30"" seems to be adding numbers: 8+8=16, +5=21, +9=30
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+5+9=30"",
    resulting_state=(30,),
    comment='""8, 16, 21, that\'s 30""',
)

# ""9 plus 8 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(5, 8, 17),
    comment='""9 plus 8 is 17""',
)

# ""I add 8 again, I get 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+8=25"",
    resulting_state=(5, 25),
    comment='""I add 8 again, I get 25""',
)

# ""8 plus 5 is 13, I add 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5+9=22"",
    resulting_state=(8, 22),
    comment='""8 plus 5 is 13, I add 9""',
)

# ""8 times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 9, 64),
    comment='""8 times 8 is 64""',
)

# ""what happens if I divide that by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/9=7.11"",
    resulting_state=(5, 7.11),
    comment='""what happens if I divide that by 9""',
)

# ""9 plus 5 is 14, if I add 8 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5+8=22"",
    resulting_state=(8, 22),
    comment='""9 plus 5 is 14, if I add 8 is 22""',
)

# ""9 by 8 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(5, 8, 72),
    comment='""9 by 8 is 72""',
)

# ""if I divide by 8 again""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/8=9"",
    resulting_state=(5, 9),
    comment='""if I divide by 8 again""',
)

# ""8 and 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(5, 9, 16),
    comment='""8 and 8 is 16""',
)

# ""9 plus 8, I get 17, and I add 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8+5=22"",
    resulting_state=(8, 22),
    comment='""9 plus 8, I get 17, and I add 5""',
)

# ""9 by 5 is 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(8, 8, 45),
    comment='""9 by 5 is 45""',
)

```"
3114,"[2,4,5,9]",,180," Okay. If I add all these up, I get 9 plus 5 is 14 plus 8 is 20. But 9 times 2 is 18, which is 6, so it's not helpful for... 5 times 4. 9 times... Ugh. 18, 27, 36, I'm getting 9 times 4. Take away 1 is, no, 5 times 2, 2 is 10, yeah, add 9, that's done, that's 24, 9 and 9 is 9, 4 and 4, or 4 plus 2, if I add that is 6, times 5 is 30, that's 21, I don't know, 9 times 4 is 45, I can't do anything with that, let's see, 4 times 2 is 8, alright, and then if I multiply that by 5, I get 40, I don't know, 4 times 2 is 8, if I add 9, I get something else, so let's try, 5 times 2 is 20, 5 times, 9 times 4 is 18, so that's 36, which I need to take 12 away, there's no way to get 12 from those numbers. Hmm, if I add 9 and 5, that's 14, that only makes","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 5 is 14 plus 8"" (they meant to say plus 6 from 2+4)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5+(2+4)=20"",
    resulting_state=(20,),
    comment='""If I add all these up, I get 9 plus 5 is 14 plus 8 is 20""',
)

# ""9 times 2 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(4, 5, 18),
    comment='""9 times 2 is 18""',
)

# ""9 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 5, 36),
    comment='""9 times... 18, 27, 36, I\'m getting 9 times 4""',
)

# ""5 times 2 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(4, 9, 10),
    comment='""5 times 2 is 10""',
)

# ""4 plus 2 is 6, times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+2)*5=30"",
    resulting_state=(9, 30),
    comment='""4 plus 2 is 6, times 5 is 30""',
)

# ""4 times 2 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(5, 8, 9),
    comment='""4 times 2 is 8""',
)

# ""multiply that by 5, I get 40""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(9, 40),
    comment='""multiply that by 5, I get 40""',
)

# ""if I add 9, I get something else""
curr_state = graph.move_to_node((5, 8, 9))
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(5, 17),
    comment='""if I add 9, I get something else""',
)

# ""5 times 2 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(4, 9, 10),
    comment='""5 times 2 is 20"" - participant may have made calculation error',
)

# ""9 times 4 is 18"" (calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=18"",
    resulting_state=(2, 5, 18),
    comment='""9 times 4 is 18"" - participant made calculation error',
    result_calc_error=True,
)

# ""if I add 9 and 5, that's 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(2, 4, 14),
    comment='""if I add 9 and 5, that\'s 14""',
)
```"
3115,"[5,5,8,10]",,180," Okay, if I add all these numbers together, I get 28. 8 times 5 is 30, right? 5 times 5 is 40. And if I take, no, if I take away 5, it makes 35, and then we're down to 25, which is not correct. Okay, so if I do 10 times 8, that's 80. If I divide it by 5, that's 6. Nope, I can't remember. 5 times 5 is 25. And if I add 8, that's 30. Nope, 24. 5 times 10 is 50, minus 45. And then if I take, it's only 37. If I take away 8, hmm, I don't know, these are hard. And then 10 divided by 5 is 2. 5 times that by 2 is 16, but that only gets me to 25. 21. I'm going to see if I do 10 minus 5 and have 5. And then I 8, 16, I have 4, 3, 2, and a 40 if I multiply. Nope, I ate. I ate. 10 minus 2 is 8, which, 10 minus 8 is 2. And then, let's see if I do, okay, see if I did, let's see if I did, let's see if I did 10 minus 4, 3, 2, and a 4, something like that. I'm going to see if I did it, hmm, 0. Oh, I made it it here, see, I can't remember. . 10 times 5 is 8. Huh. . I made it here, see if I did, see if I did. I ate. 10 times 5 is 10.","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I add all these numbers together, I get 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+8+10=28"",
    resulting_state=(28,),
    comment='""if I add all these numbers together, I get 28""',
)

# ""8 times 5 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=30"",
    resulting_state=(5, 10, 30),
    result_calc_error=True,
    comment='""8 times 5 is 30, right?""',
)

# ""5 times 5 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=40"",
    resulting_state=(8, 10, 40),
    result_calc_error=True,
    comment='""5 times 5 is 40""',
)

# ""10 times 8, that's 80""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(5, 5, 80),
    comment='""10 times 8, that\'s 80""',
)

# ""If I divide it by 5, that's 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80/5=6"",
    resulting_state=(5, 6),
    result_calc_error=True,
    comment='""If I divide it by 5, that\'s 6""',
)

# ""5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""And if I add 8, that's 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+8=33"",
    resulting_state=(10, 33),
    comment='""And if I add 8, that\'s 30"" - participant seems to have miscalculated',
)

# ""5 times 10 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(5, 8, 50),
    comment='""5 times 10 is 50""',
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 8),
    comment='""10 divided by 5 is 2""',
)

# ""5 times that by 2 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(8, 10),
    comment='""5 times that by 2 is 16"" - participant seems to have miscalculated',
)

# ""10 minus 5 and have 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 8),
    comment='""10 minus 5 and have 5""',
)

# ""10 minus 8 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 5, 5),
    comment='""10 minus 8 is 2""',
)

# The rest of the transcript seems to be the participant repeating operations they've already tried or making unclear statements
```"
3122,"[5,6,8,8]",,180," 5, 6, 8, and 8. I don't know. delete open parenthesis 8 delete open parenthesis 8 delete open parenthesis delete delete delete delete delete delete I forgot a parentheses eight divided by six close parentheses times five it's not correct huh i don't know chat gpt doesn't know delete hey okay okay okay delete um parentheses or i'm gonna run out of time soon um eight or eight or six or five um i don't know","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""eight divided by six"" followed by ""times five""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8/6)*5=6.67"",
    resulting_state=(6.67, 8),
    comment='""eight divided by six close parentheses times five""',
)

# The rest of the transcript consists of the participant expressing uncertainty, mentioning ChatGPT (which seems irrelevant), and listing the numbers without performing operations. There don't appear to be any other clear operations attempted.
```"
3135,"[1,4,12,12]",(12x12)/(4+1),180," Okay, 24, you got 12, okay, we got 1, wait, 4 divided by, okay, that's not going to work, 4 divided by 12, okay, 5 divided by 6 times, no, okay, 12, 12, where's 12, it's 24, divided by 2, that's 12. So we're going to multiply 2, and we're going to do 4, 8, 12, 16, 19, 20, 21, 26. Okay, we're going to do 12 divided by 4. 4, 8, 12 divided by 4 is 3, times 12 times 1. That's not right. Okay, 12 times 1 is 12. 12, okay, 24. 9, 9, 12, 12, 12 divided by 12 is 3, no? Okay. Okay, 12 plus 12 is 24. 3, times 12 is 144. 12, 3, times 12 is 144, divided by 4. 4, 5. 12, how could I get 24, 12 plus 1.","```python
start_state = (1, 4, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 divided by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""4/12=0.33"",
    resulting_state=(1, 0.33, 12),
    comment='""4 divided by 12""',
)

# ""12 divided by 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(1, 3, 12),
    comment='""12 divided by 4 is 3""',
)

# ""times 12 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12*1=36"",
    resulting_state=(36,),
    comment='""times 12 times 1""',
)

# ""12 times 1 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*1=12"",
    resulting_state=(4, 12, 12),
    comment='""12 times 1 is 12""',
)

# ""12 divided by 12 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 1, 4),
    comment='""12 divided by 12 is 3"" - participant made calculation error',
    result_calc_error=True
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 4, 24),
    comment='""12 plus 12 is 24""',
)

# ""3, times 12 is 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 4, 144),
    comment='""3, times 12 is 144""',
)

# ""divided by 4. 4, 5"" seems to be dividing 144 by something
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/(4+1)=28.8"",
    resulting_state=(28.8,),
    comment='""divided by 4. 4, 5"" seems to be dividing 144 by 4+1',
)
```"
3140,"[2,3,7,10]",(10x2)+(7-3),119," There's 21, 14, 21, 24, 24, 24, 24, 24, 6, 29, 29, 2 times 3 is 6, 16, 17, 18, 19, 20, 21, 22, 23. 2 times 4 is 2, 2 times 2 is 3, 2 times 3 is 30, 2 times 2 is 14, so 30, 30 is not going to work. 7 times 2 is 20, 7, 6, 5, 4, okay, we're going with 10, 10 times 2 divided by 7 minus 3. Come on, okay, that's incorrect, 7 times 2 is 20, 0 plus 7 minus 3, close bracket.","```python
start_state = (2, 3, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 7, 10),
    comment='""2 times 3 is 6""',
)

curr_state = graph.move_to_node(start_state)
# ""2 times 2 is 3"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=3"",
    resulting_state=(3, 7, 10),
    comment='""2 times 2 is 3"" - calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""2 times 3 is 30"" seems to be another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=30"",
    resulting_state=(7, 10, 30),
    comment='""2 times 3 is 30"" - calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""7 times 2 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 10, 14),
    comment='""7 times 2 is 20"" - calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""10 times 2 divided by 7 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2/7-3=0"",
    resulting_state=(-0.14,),
    comment='""10 times 2 divided by 7 minus 3""',
)

# Based on their final response (10x2)+(7-3), they try:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(3, 7, 20),
    comment=""Based on final response, first computing 10*2"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 20),
    comment=""Based on final response, computing 7-3"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+4=24"",
    resulting_state=(24,),
    comment=""Based on final response, adding the results"",
)
```"
3141,"[1,3,3,10]",(10-3)+(3+1),180," 10 x 3 10 x 3 is equal to 10 x 1. It's 10 times 30, that's 27, that's not going to be right, 10 times 3, that's 9, 19, that's not going to be right, 10 times 3, 3 plus 3 is 6, that's 16, so I'm going to write 10 times, 10 plus 3 is 13, 10 times 13. 13 times 3, nope, kind of 5, 10, no, that's not right, 10 minus 3 is 7, okay, okay, 10 minus 3. Okay.","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 x 3"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(1, 3, 30),
    comment='""10 x 3""',
)

# ""that's 27"" seems to be a calculation error or the participant is trying something else
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3-3=27"",
    resulting_state=(1, 27),
    comment='""that\'s 27""',
)

# ""10 times 3, that's 9, 19"" seems to be another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=19"",
    resulting_state=(1, 3, 19),
    comment='""10 times 3, that\'s 9, 19""',
    result_calc_error=True,
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(1, 6, 10),
    comment='""3 plus 3 is 6""',
)

# ""that's 16"" seems to be adding 10 to the 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10=16"",
    resulting_state=(1, 16),
    comment='""that\'s 16""',
)

# ""10 plus 3 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(1, 3, 13),
    comment='""10 plus 3 is 13""',
)

# ""10 minus 3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(1, 3, 7),
    comment='""10 minus 3 is 7""',
)

# Based on their final response (10-3)+(3+1), they must have then added 3+1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+(3+1)=11"",
    resulting_state=(11,),
    comment=""Based on their final response (10-3)+(3+1)"",
)
```"
3142,"[1,2,5,7]",(7x2,180," 5 times 2, 7 times 2 is 24. 7 times 2 is 21. 7 times 2 is 21. Minus, 7 times 2, no plus, 5 minus 1. Close parentheses. What does it say? I can't answer that all. 7 minus 1, so 5. Oh, because that's 14. I don't know why I was thinking 3. Times. Okay, well. 21. Mm, okay. I mean, all of that. Start over. Um, that's 35. Minus 35. No, that's not going to work. Okay. Um. Okay. 14. Um. No, 14. 14 plus 6 is not going to work. Okay. Um. 10. And we use 17. 10, 18. Okay. Not now. 35. Okay. Sorry. And let's see. 2 plus 5 is 10. 2 plus 5 is 10. 2 plus 5 is 10. 2 plus 5 is 10. 2 plus 5 is 10. 7 times 2 7 times 2 is 14 14 7 times 2 7 times 2 7 times 2","```python
start_state = (1, 2, 5, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(1, 7, 10),
    comment='""5 times 2""',
)

# ""7 times 2 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=24"",
    resulting_state=(1, 5, 24),
    comment='""7 times 2 is 24"" - calculation error',
    result_calc_error=True,
)

# ""7 times 2 is 21"" - another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=21"",
    resulting_state=(1, 5, 21),
    comment='""7 times 2 is 21"" - calculation error',
    result_calc_error=True,
)

# ""7 minus 1, so 5"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=5"",
    resulting_state=(2, 5, 5),
    comment='""7 minus 1, so 5""',
    result_calc_error=True,
)

# ""that's 35"" - possibly 7*5
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(1, 2, 35),
    comment='""that\'s 35"" - possibly 7*5',
)

# ""2 plus 5 is 10"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2+5=10"",
    resulting_state=(1, 7, 10),
    comment='""2 plus 5 is 10"" - calculation error',
    result_calc_error=True,
)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 5, 14),
    comment='""7 times 2 is 14""',
)

```"
3145,"[2,6,8,13]",(8+13)+(6/2),83, 13 and 8 is 24. 8 minus 2 is 6. 6 divided by 8. 8 and 13 is 24. 8 minus 2 is 6. 8 and 13 is 21. So I need 3. 6 divided by 2. 6 divided by 2. 8 plus 13. 8 plus 13 divided by 2. No. 8 plus 13 is 21 plus parenthesis 6 divided by 2. So the answer to 21 plus 3 is 24.,"```python
start_state = (2, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 and 8 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=24"",
    resulting_state=(2, 6, 24),
    comment='""13 and 8 is 24"" - calculation error',
    result_calc_error=True,
)

# ""8 minus 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(6, 6, 13),
    comment='""8 minus 2 is 6""',
)

# ""6 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/8=0.75"",
    resulting_state=(0.75, 2, 13),
    comment='""6 divided by 8""',
)

# ""8 and 13 is 21"" - participant corrects their earlier calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8+13=21"",
    resulting_state=(2, 6, 21),
    comment='""8 and 13 is 21""',
)

# ""So I need 3"" - participant realizes they need 3 more to get to 24
graph.set_subgoal(
    (21, 3),
    state_after_subgoal=(24,),
    comment='""So I need 3"" - participant realizes they need 3 more to get to 24',
)

# ""6 divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/2=3"",
    resulting_state=(3, 8, 13),
    comment='""6 divided by 2""',
)

# Finally, the participant combines these operations:
# ""8 plus 13 is 21 plus parenthesis 6 divided by 2. So the answer to 21 plus 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+13)+(6/2)=24"",
    resulting_state=(24,),
    comment='""8 plus 13 is 21 plus parenthesis 6 divided by 2. So the answer to 21 plus 3 is 24""',
)
```"
3152,"[2,5,8,10]",,180," 10 and 8 is 18. 5 and 2 is 7. 8 and 7 is 15. So I need 1. 8 and 5 is 13. Oh, shoot. 10 and 5 is 15. 9 is 2. Plus 8. Can I, no, I can't do that. What have I lost? 8 and 5 is 13. And 10 is 23. But I only need 1. 10 divided by 5 is 2. 2 times 8 is 16. 10 divided by 5 is 2. 2 times 8 is 16. 10 divided by 5 is 2. 2 times 2 is 4. Times 8, that's 32. 10 minus 8 is 2. Times 2 is 14. 10 minus 8 is 2. That's not gonna work. Times eight is 2. Times five is 2. Times eight is 2. Times 5 is 30. Times seven is 5. 2 times 5 is 10, times 2 is 20, 8, no, can I make it 85, times 8 is 40, I can make it 40, minus 20, I still need 4, 4 times 8 is 40, 5 times 8 is 40, minus 10 is 30,","```python
start_state = (2, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 and 8 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(2, 5, 18),
    comment='""10 and 8 is 18""',
)

# ""5 and 2 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+2=7"",
    resulting_state=(7, 8, 10),
    comment='""5 and 2 is 7""',
)

# ""8 and 7 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(10, 15),
    comment='""8 and 7 is 15""',
)

# Going back to start state for ""8 and 5 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(2, 10, 13),
    comment='""8 and 5 is 13""',
)

# ""10 and 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(2, 8, 15),
    comment='""10 and 5 is 15""',
)

# ""8 and 5 is 13. And 10 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5+10=23"",
    resulting_state=(2, 23),
    comment='""8 and 5 is 13. And 10 is 23""',
)

# ""10 divided by 5 is 2. 2 times 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*8=16"",
    resulting_state=(2, 16),
    comment='""10 divided by 5 is 2. 2 times 8 is 16""',
)

# ""10 divided by 5 is 2. 2 times 2 is 4. Times 8, that's 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*2*8=32"",
    resulting_state=(32,),
    comment='""10 divided by 5 is 2. 2 times 2 is 4. Times 8, that\'s 32""',
)

# ""10 minus 8 is 2. Times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-8)*2=4"",
    resulting_state=(4, 5),
    comment='""10 minus 8 is 2. Times 2""',
)

# ""Times eight is 2. Times five is 2. Times eight is 2. Times 5 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(8, 10, 10),
    comment='""Times five is""',
)

# ""2 times 5 is 10, times 2 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(8, 10, 10),
    comment='""2 times 5 is 10""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(8, 10, 20),
    comment='""times 2 is 20""',
)

# Going back to start state for ""times 8 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(2, 10, 40),
    comment='""times 8 is 40""',
)

# ""minus 10 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-10=30"",
    resulting_state=(2, 30),
    comment='""minus 10 is 30""',
)
```"
3154,"[3,9,10,13]",,180," Oh, okay. Let's see, okay. 10 plus 13 is 23. 23 minus 9 is 11. No, that wouldn't work. Alright, 9 plus 13 is 22. 22 minus, no, wait, what's 22 minus? 22 minus 3? No, that doesn't work. Alright, let's see. 10 plus 13 is 20. 23. No, that's not going to work. Okay. 13, what's 13 plus 9 plus 3? 13 plus 9 is 22. Okay, wait, yeah. 3 is 20. No, not going to work. Okay. 3 plus 10 plus 13, what's, okay. 10 plus 13 is, no, no, I'm going to do that one. All right, 3 times 9. 3 times 9 is... 3 times 9 is... 3 times 9 is... 8, 20. Great. 27, okay, 27. And then... No, that's not going to work. 3 times 10 is 30. No that's not going to work. 3 times 9 is 20. No. 3 times 10 is 30. No, that's not going to work. Alright, let's see. 3 times 13 is too hard for me with that piece of paper. 3 times 13, well, what's 3 times 13? So 3 times 13 would be 29. So that would be 29. Um, no, 39. 39. Um, okay, 39.","```python
start_state = (3, 9, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 13 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(3, 9, 23),
    comment='""10 plus 13 is 23""',
)

# ""23 minus 9 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23-9=11"",
    resulting_state=(3, 11),
    comment='""23 minus 9 is 11""',
    result_calc_error=True,
)

# ""9 plus 13 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(3, 10, 22),
    comment='""9 plus 13 is 22""',
)

# ""13 plus 9 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9+3=25"",
    resulting_state=(10, 25),
    comment='""13 plus 9 plus 3""',
)

# ""3 plus 10 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+10+13=26"",
    resulting_state=(9, 26),
    comment='""3 plus 10 plus 13""',
)

# ""3 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(10, 13, 27),
    comment='""3 times 9 is... 27""',
)

# ""3 times 10 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(9, 13, 30),
    comment='""3 times 10 is 30""',
)

# ""3 times 13"" participant calculates this incorrectly first as 29 then corrects to 39
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(9, 10, 39),
    comment='""3 times 13"" participant calculates this incorrectly first as 29 then corrects to 39',
)

```"
3155,"[5,7,13,13]",(13+13)-7+5,93," 24, okay, let's see if I can do this one. Okay, um, 5 times 13 is, oh boy. I'm just gonna, um, 5 plus 7 is 13. 13 plus 13 is, wait, is that right? No, 5 plus 7 is 12. 5 plus 7 is 12. Yeah, that's not gonna work. Okay, um, 13 plus 13 is 26. Um, ah, wait, okay, I think I know what I can do. 13 plus 13 is 26. Ah, I think I got it, right? Yeah, I think I got it, okay. Okay, so it'll be, I'll just put it out there once, and then 13, and I'll change the syntax and do it again later. So that's 26, and then I'll go minus 7, oh, I don't know if the syntax is right. I might have to change it to plus 5.","```python
start_state = (5, 7, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*13=65"",
    resulting_state=(7, 13, 65),
    comment='""5 times 13""',
)

# ""5 plus 7 is 13"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=13"",
    resulting_state=(13, 13, 13),
    comment='""5 plus 7 is 13"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""No, 5 plus 7 is 12"" - participant corrects themselves
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(12, 13, 13),
    comment='""No, 5 plus 7 is 12"" - participant corrects themselves',
)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(5, 7, 26),
    comment='""13 plus 13 is 26""',
)

# Then the participant seems to work with this 26
curr_state = graph.move_to_node(new_state)
# ""26, and then I'll go minus 7... plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""26-7+5=24"",
    resulting_state=(24,),
    comment='""26, and then I\'ll go minus 7... plus 5""',
)

```"
3160,"[4,7,8,12]",(4x7)-12+8,164," Oh, I almost got the Ross one right. I figured it out. Alright, um, 4, what's 4 times 7? 4 times 7 is 20. 5 times 7 is 28. Um, let's see, 8, so 28, eh, no. Wait, what's 28 minus 8? No, that's not gonna work. Okay, what's 28 minus 12? 28 minus 12, no, that's not gonna work. Alright, um, let's see. Um, 7 minus 8, no. 8 plus 12, 8 plus 12, no. 7 plus 12 is 21, no, doesn't work. Um, I might have to do some times. It's 4 times 7, no. I can't do times, so times isn't gonna work, is it? Maybe, uh, no, that's not gonna work. Um, hmm. Oh, boy, this is a difficult one. Wait, what's 7 minus 4 is 3, and 8 plus 3 would be 13, so that's not gonna work. Oh, boy. Um, let's see, 4 times, okay, let's do the 4 times 7 again. 4 times 7. 4 times 7. 4 times 7 is 28, 28 minus 12, um, 16, and then 16 plus 8 is 24. That might work. I don't know, maybe I did that wrong. Okay, so let's do 4 times 7. I don't even know if I'm doing this right. 7, um, oh, I could just do it that way. Let's do it this way. Okay, 4 times 7, um, and then, um, times 7 minus 12 plus 8, 12, I don't know.","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""what's 4 times 7? 4 times 7 is 20"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=20"",
    resulting_state=(8, 12, 20),
    comment='""4 times 7 is 20"" - calculation error',
    result_calc_error=True,
)

# ""5 times 7 is 28"" - participant corrects calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(8, 12, 28),
    comment='""5 times 7 is 28"" - participant actually means 4*7=28, correcting previous error',
)

# ""what's 28 minus 8?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-8=20"",
    resulting_state=(12, 20),
    comment='""what\'s 28 minus 8?""',
)

# ""28 minus 12""
curr_state = graph.move_to_node((8, 12, 28))  # going back to state with 28
new_state = graph.explore_operation(
    curr_state,
    operation=""28-12=16"",
    resulting_state=(8, 16),
    comment='""28 minus 12""',
)

# Back to start state for new attempts
curr_state = graph.move_to_node(start_state)

# ""8 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(4, 7, 20),
    comment='""8 plus 12""',
)

# ""7 plus 12 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(4, 8, 19),
    comment='""7 plus 12 is 21"" - though actual sum is 19',
    result_calc_error=True,
)

# ""7 minus 4 is 3, and 8 plus 3 would be 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 8, 12),
    comment='""7 minus 4 is 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+3=11"",
    resulting_state=(11, 12),
    comment='""8 plus 3 would be 13"" - though actual sum is 11',
    result_calc_error=True,
)

# ""4 times 7 is 28, 28 minus 12, um, 16, and then 16 plus 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(8, 12, 28),
    comment='""4 times 7 is 28""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-12=16"",
    resulting_state=(8, 16),
    comment='""28 minus 12, um, 16""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8=24"",
    resulting_state=(24,),
    comment='""16 plus 8 is 24""',
)

```"
3161,"[1,3,6,13]",,180," All right, this is a doozy. Okay, 13 plus 13 is 23. That's not 13, that's 1. Okay, 1 plus 6, 3 plus 6, 13 plus, oh, okay, 1 plus 3 is 4. And, okay, so that would be 23. That wouldn't work. Okay. 6 times 3 is 18. 6 times 3 is, okay, 6 times 3 is 12, I think. Am I wrong? No. 6 plus 12 is 12, and then 18. Okay, 18. I don't think that's going to work. All right, let's see. What is 1 times 13? Plus, was that, wait, what's that? 6 plus 3 is 9. No, it's 22. All right, that's not going to work. No, that's not going to work either. Hmm. Hmm. 3 times 13 is 30. 3 times 13, 3 times 1? No. Wait, would that work? Wait, 3 plus 6 is 9. No, that's not going to work. That's going to be 22. That's why I remembered that wasn't going to work. Okay, 6 times 13 is 39. 39, no. Wait, 6 times 13 is not 39. It's 6, okay, I have to do more math than that. No, we're not going that far. Okay. 6 plus 13, 6 plus 13 is 19. 19. 6 plus 13 is 19. 19 plus 3 is, yeah, yeah. Um, all right, 6 divided by 3. 6 divided by 3 is 2. 6 divided by 3 is 2. Um, I don't, time, 2 times, no, that's not going to work. Try to write 3.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 23. That's not 13, that's 1"" - participant corrects themselves
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(3, 6, 14),
    comment='""13 plus 13 is 23. That\'s not 13, that\'s 1"" - participant corrects themselves',
)

# ""1 plus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+3=4"",
    resulting_state=(4, 6, 13),
    comment='""1 plus 3 is 4""',
)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 13, 18),
    comment='""6 times 3 is 18""',
)

# ""6 times 3 is 12"" participant seems unsure about previous calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=12"",
    resulting_state=(1, 12, 13),
    comment='""6 times 3 is 12"" participant seems unsure about previous calculation',
    result_calc_error=True,
)

# ""6 plus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(1, 9, 13),
    comment='""6 plus 3 is 9""',
)

# ""3 times 13 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=30"",
    resulting_state=(1, 6, 30),
    comment='""3 times 13 is 30""',
    result_calc_error=True,
)

# ""3 plus 6 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+6=9"",
    resulting_state=(1, 9, 13),
    comment='""3 plus 6 is 9""',
)

# ""6 times 13 is 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*13=39"",
    resulting_state=(1, 3, 39),
    comment='""6 times 13 is 39""',
    result_calc_error=True,
)

# ""6 plus 13 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(1, 3, 19),
    comment='""6 plus 13 is 19""',
)

# ""19 plus 3"" participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+3=22"",
    resulting_state=(1, 22),
    comment='""19 plus 3""',
)

# ""6 divided by 3 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(1, 2, 13),
    comment='""6 divided by 3 is 2""',
)

```"
3163,"[4,4,8,10]",(8x10)/4+4,80," Okay, 4, 4, 8, 10 we're working with. 4 times 4 is 16. 4 and 8 is 12. 10 minus 4 is 6. 10 minus 8 is 2. 2. 4 minus 32. Minus 12. 4 times 4 is 4 minus 4 is 0. So that won't work. 8 minus 4 is 4. 10 minus 8 is 2. Times 4 is 8. Times 4 is 32. Uh, 4 times 8 is 32. Minus 10 is 22. Um, let's see, 80 divided by 4 is 20. 2, wait, 80 divided by 4 is 20. Plus 4. Okay, here we go. 8 times 10. Times 10 is 8. In, in parenthesis. It's 80. Divided by 4 is 20. 8 times, is 80 divided by 4 is 20. Plus 4.","```python
start_state = (4, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 10, 16),
    comment='""4 times 4 is 16""',
)

# ""4 and 8 is 12"" - participant adds 4 and 8
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(4, 10, 12),
    comment='""4 and 8 is 12""',
)

# ""10 minus 4 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-4=6"",
    resulting_state=(4, 6, 8),
    comment='""10 minus 4 is 6""',
)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 4, 4),
    comment='""10 minus 8 is 2""',
)

# ""4 times 4 is 4 minus 4 is 0"" - participant multiplies 4s and subtracts 4
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4-4=12"",
    resulting_state=(8, 10, 12),
    comment='""4 times 4 is 4 minus 4 is 0""',
)

# ""8 minus 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 4, 10),
    comment='""8 minus 4 is 4""',
)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 4, 4),
    comment='""10 minus 8 is 2""',
)

# ""Times 4 is 8. Times 4 is 32"" - participant multiplies 2 by 4 twice
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4*4=32"",
    resulting_state=(32,),
    comment='""Times 4 is 8. Times 4 is 32""',
)

# ""4 times 8 is 32. Minus 10 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8-10=22"",
    resulting_state=(4, 22),
    comment='""4 times 8 is 32. Minus 10 is 22""',
)

# ""80 divided by 4 is 20"" - participant seems to be working backward from 8*10=80
graph.set_subgoal(
    (80,),
    state_after_subgoal=(24,),
    comment='""80 divided by 4 is 20""',
)

# ""8 times 10 is 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(4, 4, 80),
    comment='""8 times 10 is 80""',
)

# ""divided by 4 is 20. Plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80/4+4=24"",
    resulting_state=(24,),
    comment='""divided by 4 is 20. Plus 4""',
)
```"
3165,"[2,3,7,9]",,180," Target number is 24. 2 times 5 is 16, plus 5, that won't work. 9 times 7 is 21, minus 9, no that won't work. 2 times 3 is 6, times 7 is 42, no that won't work. So if we get to 72 divided by 3 is 24. 9 times 7 is 63, minus 3 divided by 2, no that won't work. Let's see, 3 times 9 is 27. Minus 7, no. 27 minus 2, let's see. 9 times 2 is 18, plus 3 is 21, no. 18 plus 7 is 25. 9 times 2 is 18. 9 times 3 is 27. Let's see. 9 times 7 is 63, divided by 2, won't work. 21 plus 2, no, divided by 3. 3 and 7 is 10. 19, 10. Let's see, nothing goes over. 9 times 2 is 18, plus 3 is 21. 9 times 3 is 27. Minus 2 is 25, okay. 7 times 2 is 14. 14 minus 3 is 11, plus 9 is 20, not enough. Let's see, 9 times 3 is 9, times 7 is 63, minus 3 is 60. Divided by 2 is 30, that won't work. 2 times 3 is 6. Plus 7 is 13. Plus 9 is not it. 6 times, we need that to be a 4. So, 9 times 3 is 27, minus 2 is 25. 7 plus 9 is 16, plus 3 is 16, plus 6. Now that won't do.","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 7 is 21"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=21"",
    resulting_state=(2, 3, 21),
    comment='""9 times 7 is 21"" - participant made a calculation error',
    result_calc_error=True,
)

# ""2 times 3 is 6, times 7 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3*7=42"",
    resulting_state=(9, 42),
    comment='""2 times 3 is 6, times 7 is 42""',
)

# ""9 times 7 is 63"" - now participant calculates correctly
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(2, 3, 63),
    comment='""9 times 7 is 63""',
)

# ""minus 3 divided by 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(63-3)/2=30"",
    resulting_state=(30,),
    comment='""minus 3 divided by 2""',
)

# ""3 times 9 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(2, 7, 27),
    comment='""3 times 9 is 27""',
)

# ""Minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-7=20"",
    resulting_state=(2, 20),
    comment='""Minus 7""',
)

# ""27 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""27-2=25"",
    resulting_state=(7, 25),
    comment='""27 minus 2""',
)

# ""9 times 2 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(3, 7, 18),
    comment='""9 times 2 is 18""',
)

# ""plus 3 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3=21"",
    resulting_state=(7, 21),
    comment='""plus 3 is 21""',
)

# ""18 plus 7 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(3, 25),
    comment='""18 plus 7 is 25""',
)

# ""9 times 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(2, 7, 27),
    comment='""9 times 3 is 27""',
)

# ""9 times 7 is 63, divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7/2=31.5"",
    resulting_state=(3, 31.5),
    comment='""9 times 7 is 63, divided by 2""',
)

# ""3 and 7 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7=10"",
    resulting_state=(2, 9, 10),
    comment='""3 and 7 is 10""',
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 9, 14),
    comment='""7 times 2 is 14""',
)

# ""14 minus 3 is 11, plus 9 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-3+9=20"",
    resulting_state=(20,),
    comment='""14 minus 3 is 11, plus 9 is 20""',
)

# ""2 times 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 7, 9),
    comment='""2 times 3 is 6""',
)

# ""Plus 7 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(9, 13),
    comment='""Plus 7 is 13""',
)

# ""Plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(22,),
    comment='""Plus 9""',
)

# ""9 times 3 is 27, minus 2 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-2=25"",
    resulting_state=(7, 25),
    comment='""9 times 3 is 27, minus 2 is 25""',
)

# ""7 plus 9 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(2, 3, 16),
    comment='""7 plus 9 is 16""',
)

# ""plus 3 is 16"" - participant made an error here, 16+3=19
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+3=16"",
    resulting_state=(2, 16),
    comment='""plus 3 is 16"" - participant made an error',
    result_calc_error=True,
)
```"
3168,"[2,8,10,13]",(13x2)-(10-8),155," Okay, so 2 plus 8 is 10, 20, that won't work. 8 times 10 is 80, minus 26, that won't work. 10 is 130, 8 and 13, 2 is 15, plus 10 is 25, so that won't work. 10 minus it is 2, times, let's say 13 minus 10 is 3, 8 times 3, then we'd have that 2. Let's see, 8 times, let's bring that to 16, that would be great, that would be 12. Let's see, 10 plus is 12, 13 minus it is 5, so it won't work. We need that to be 2. 10 minus 8 is 2, 13 minus 2 is 11, 13 plus 2, um, 24, so 13 minus 8 is 5, so that won't work. Um, 2 times 8 is 16, so we'd need that to be 27 minus 3, that won't work. Um, 80 minus 13, no, that won't work. 10 times 100, 13. 30, I just know that won't work. Um, 13 times 2 is 26, 10 minus 8, okay, got it. 13, okay, parenthesis. 13 minus 2, in parenthesis, times, oh no, that would be 11, that won't work. What did I do wrong? Um, delete that. 13 minus 2 would be 11. Um, 10 minus 2 is, okay, no, that won't work either. 13 minus 3, 8 minus 2 is 6, 13 minus 8 is 5, 13 minus 2 is 11. 13 minus 10 is 3 times 8, but that would leave 13, I thought I saw that for a minute. Um, 26 minus 2, okay, I got it. 13 times 2, parenthesis. 13 times 2, in parenthesis, minus, that's 26, minus, parenthesis, 10 minus 8, in parenthesis.","```python
start_state = (2, 8, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 plus 8 is 10, 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+8=10"",
    resulting_state=(10, 10, 13),
    comment='""2 plus 8 is 10""',
)

# ""8 times 10 is 80, minus 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(2, 13, 80),
    comment='""8 times 10 is 80""',
)

# ""13, 8 and 2 is 15, plus 10 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8+2+10=25"",
    resulting_state=(25,),
    comment='""13, 8 and 2 is 15, plus 10 is 25""',
    result_calc_error=True,
)

# ""10 minus it is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 2, 13),
    comment='""10 minus it is 2""',
)

# ""13 minus 10 is 3, 8 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(2, 3, 8),
    comment='""13 minus 10 is 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(2, 24),
    comment='""8 times 3""',
)

# ""13 minus 8 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(2, 5, 10),
    comment='""13 minus 8 is 5""',
)

# ""2 times 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(10, 13, 16),
    comment='""2 times 8 is 16""',
)

# ""13 times 2 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(8, 10, 26),
    comment='""13 times 2 is 26""',
)

# ""10 minus 8"" participant combines this with previous result
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(10-8)=24"",
    resulting_state=(24,),
    comment='""10 minus 8"" participant combines this with previous result',
)

# The rest of the transcript shows the participant verifying their answer and writing it out
```"
3172,"[1,2,7,7]",,180," 24. Okay, 7 times 7 is going to be 42, so that's far too much. Okay, let's see, 7 plus 14. Let's see. Try something different, just adding, so it's going to be 24. Okay, let's see, 2 times 7 equals 14. 14, if I had another 7, that's... not enough. I'm trying to see if I can even divide, but that doesn't seem good. Wait, 7 times 7 is 42. 42 divided by, wait, it's spelled too little. It doesn't work. Or... Um, 12. Is there anything that makes 12? This does not look like it. Damn. Um... Let's see, let's see, let's see, let's see, let's see, let's see, let's see, let's see. I think I come up with, it's still missing, like, 3. 7 times 2... Mmm, 2 plus 3, 3 times 7 is 21. That's still all 7s too much. Okay. Mmm. Hmm. Anything else? Nothing? Uh, I, uh... So, I, um, I think it's, I think it's, I think it's... Uh? I think it's a 10. It's definitely a 10, but... Yeah. Trim, trim, trim. Okay. So, um, let's see. Oh. All right. And the number for 8 is, okay.","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is going to be 42"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=42"",
    resulting_state=(1, 2, 42),
    result_calc_error=True,
    comment='""7 times 7 is going to be 42""',
)

# ""7 plus 14"" participant seems to be adding 7 to 2*7
new_state = graph.explore_operation(
    curr_state,
    operation=""7+(2*7)=21"",
    resulting_state=(1, 21),
    comment='""7 plus 14"" participant seems to be adding 7 to 2*7',
)

# ""2 times 7 equals 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(1, 7, 14),
    comment='""2 times 7 equals 14""',
)

# ""14, if I had another 7"" participant seems to be adding 7 to 14
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+7=21"",
    resulting_state=(1, 21),
    comment='""14, if I had another 7"" participant seems to be adding 7 to 14',
)

# ""7 times 7 is 42. 42 divided by"" participant tries dividing 42
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=42"",
    resulting_state=(1, 2, 42),
    result_calc_error=True,
    comment='""7 times 7 is 42""',
)

# ""Is there anything that makes 12?"" participant seems to be setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""Is there anything that makes 12?""',
)

# ""7 times 2"" participant tries multiplying 7 and 2
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""7 times 2""',
)

# ""3 times 7 is 21"" participant seems to be computing 3*7, where 3 might have come from 1+2
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+2)*7=21"",
    resulting_state=(7, 21),
    comment='""3 times 7 is 21"" participant seems to be computing 3*7, where 3 might have come from 1+2',
)
```"
3173,"[6,8,12,12]",(12/6),180," 24. Okay, 6, 8, 12, 12. Okay, so 6 plus 8 will be 14. Okay, wait, 12 plus 8 is 30 minus- nah that's not enough. Barely too much. Wait, so let's say 12 plus 8, plus 12 is 30, then minus 8 and it's only 22. So 12 plus 8 equals 20. . plus twelve is thirty-two and minus six puts me at twenty-six so let's do twelve okay let's start inputting things twelve divided by six that's going to make it two and then we have the eight so two right now two plus eight equals ten still too much much okay so still let's just keep working with this 12 divided by 6 to 2 times 8 16 16 or I could do 2 plus 12 is 14 I'm still too short if I do that so so 2 2 times 8 is 16 so 2 2 times 8 is 16 That's still too much. 8 divided by 2. Wait, so could... Wait, so wait, I could divide this by 2. Or, to make this 2, I'm gonna divide this by 2.","```python
start_state = (6, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 8 will be 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(12, 12, 14),
    comment='""6 plus 8 will be 14""',
)

# ""12 plus 8 is 30"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=30"",
    resulting_state=(6, 12, 30),
    comment='""12 plus 8 is 30"" - calculation error',
    result_calc_error=True,
)

# ""12 plus 8 equals 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(6, 12, 20),
    comment='""12 plus 8 equals 20""',
)

# ""plus twelve is thirty-two and minus six puts me at twenty-six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+12-6=26"",
    resulting_state=(26,),
    comment='""plus twelve is thirty-two and minus six puts me at twenty-six""',
)

# ""twelve divided by six that's going to make it two""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 8, 12),
    comment='""twelve divided by six that\'s going to make it two""',
)

# ""two plus eight equals ten""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+8=10"",
    resulting_state=(10, 12),
    comment='""two plus eight equals ten""',
)

# ""2 plus 12 is 14""
curr_state = graph.move_to_node((2, 8, 12))  # going back to state after 12/6
new_state = graph.explore_operation(
    curr_state,
    operation=""2+12=14"",
    resulting_state=(8, 14),
    comment='""2 plus 12 is 14""',
)

# ""2 times 8 is 16""
curr_state = graph.move_to_node((2, 8, 12))  # going back to state after 12/6
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(12, 16),
    comment='""2 times 8 is 16""',
)

# ""8 divided by 2""
curr_state = graph.move_to_node((2, 8, 12))  # going back to state after 12/6
new_state = graph.explore_operation(
    curr_state,
    operation=""8/2=4"",
    resulting_state=(4, 12),
    comment='""8 divided by 2""',
)
```"
3175,"[7,7,11,12]",,180," Ooh, big numbers. 7, 7, 11, and 12. Did you just add 14? 14 plus 12 is... 14 plus 12 is 26. Hmm. ... Yes, I know. Okay, hold up. So, 7 plus... 7 plus 11 equals 18, 18, that's 25. Hmm. 7 plus 12 is 23, 23... No, that doesn't work. Almost. Damn, bro, yeah, I needed a fucking piece of paper or something to do this. Okay. So, let's see, 7 times 7 is 40? No, it's 49. I said 42 early? Damn, I fucked up. Oh, yeah, so... 49... minus... no, that's not enough. That'll be 26. 7 times 12 is gonna be 84. 84... 84 divided by 7? I'm still missing a line, and it's always one off. Okay, let's see. What do we... if I... times 11... like, 12 is 132, and then... 7 times 7, that's 80... nah, it's way off. Okay, let's see if I...","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 11 equals 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(7, 12, 18),
    comment='""7 plus 11 equals 18""',
)

# ""that's 25"" seems to be adding 7 to 18
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(12, 25),
    comment='""that\'s 25"" seems to be adding 7 to 18',
)

# Going back to start state for ""7 plus 12 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(7, 11, 19),
    comment='""7 plus 12 is 23"" - participant made calculation error',
    result_calc_error=True,
)

# ""7 times 7 is 40? No, it's 49""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(11, 12, 49),
    comment='""7 times 7 is 40? No, it\'s 49""',
)

# ""7 times 12 is gonna be 84""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(7, 11, 84),
    comment='""7 times 12 is gonna be 84""',
)

# ""84 divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""84/7=12"",
    resulting_state=(11, 12),
    comment='""84 divided by 7""',
)

# ""times 11... like, 12 is 132""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(7, 7, 132),
    comment='""times 11... like, 12 is 132""',
)

# ""7 times 7, that's 80""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=80"",
    resulting_state=(11, 12, 80),
    comment='""7 times 7, that\'s 80"" - participant makes calculation error',
    result_calc_error=True,
)
```"
3179,"[4,7,8,11]",(11x8,180," Okay, so we have bigger numbers now than we did in the practice, and that makes me nervous because I really don't think of myself as a math person, but that's okay. So I want to get to 24, and I see we have an 8 again, so I wonder if I can multiply 8 times 3 somehow. I have a lot of odd numbers this time. I also have an 11, which I don't like because that's really large. So I might have to subtract 11 from something. So what if I started off with multiplying 7 times 8? That's going to get way too big. What is 7 times 8? I'm so bad at mental math. I have a mental block, it freaks me out. Okay, 7 times 8, that's 56. I mean, even if I subtract 44 from that, because I could do 7 times 8 minus... minus... 4 times 11, but that's not going to get me to 24, so I'm not going to do that. I will not be multiplying 7 times 8. Well, what if I start anyway with 4 times 11? So that would give me 44 to start with. And to get to 24 from 44, I would need to subtract 20 in some way, and I can't get 20 out of 7 plus 8, because that would be 15. This is tough. I am not wired for this. Okay. What if I start with 7 times 4? Or maybe I could make use of the division in some way. Hmm. Okay, I can start with 7 times 4, which would be 28. I know my math sometimes. And then... Oh, okay. 28 plus 8. Hmm. If I did 28 plus 8, I would get 36. And then if I subtract 11 from that, I get 25. So that's so close, but so far. I haven't used a division at all, and I feel like maybe this is a division problem. I am unfortunately just very bad at division. Okay. So thinking through if I wanted to use division, maybe say I want to get to a number that I divide by 4 to get to 24. So 24 times 4 is 96. So if I can somehow get to 96 using 7, 8, and 11, then I can divide by 4, and I'll end up at 24. So can I get to 96? I can get to 88. Plus 7 is 96. Oh my goodness, this is working. Okay, so 8 times 11. Good. 8 times 11. Um...","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I wonder if I can multiply 8 times 3 somehow"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I wonder if I can multiply 8 times 3 somehow""',
)

# ""what if I started off with multiplying 7 times 8?""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 11, 56),
    comment='""what if I started off with multiplying 7 times 8?""',
)

# ""Well, what if I start anyway with 4 times 11?""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(7, 8, 44),
    comment='""Well, what if I start anyway with 4 times 11?""',
)

# ""What if I start with 7 times 4?""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 11, 28),
    comment='""What if I start with 7 times 4?""',
)

# ""28 plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28+8=36"",
    resulting_state=(11, 36),
    comment='""28 plus 8""',
)

# ""And then if I subtract 11 from that""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-11=25"",
    resulting_state=(25,),
    comment='""And then if I subtract 11 from that""',
)

# ""So if I can somehow get to 96 using 7, 8, and 11""
# ""I can get to 88. Plus 7 is 96""
# ""8 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(4, 7, 88),
    comment='""8 times 11""',
)

```"
3180,"[8,9,11,11]",,180," Okay, I figured it out right as I ran out of time with the last one. Oh, I'm so mad about that. I just wasn't fast enough putting it in. Okay, so I gotta be fast this time. So we're trying to get to 24. And I have two 11s, an 8, and a 9. So I don't have a 7 anymore. That's okay. Maybe. So what if I start in the same place that I would have started with the last one? 8 times 11. So that gets me to 88. What can I do with 88 to get to 24? Maybe it's better to work backwards and to think. Okay, so 24. No, I don't think I need to divide with this one because I don't have any small numbers that I can divide by. I want to get to 24. Okay, so 11 plus 11 is obviously 22. That's not going to help. I don't even know where to start with this. These numbers are all relatively big when we think about multiplying them. Okay, so let's just say I'm multiplying 11 times 9 to get to 99. And then I need to get to 24. So how can I get to 24 from 99? 99. 99 minus 8 is 91. And then it leaves me with 11. And that's not going to help. That's not going to help me at all. 99 minus 11 is 88. If I divide that by 8, all I get is 11 again. So that's not going to work either. Okay, so I think starting with 11 times 9, that might not help. What if I start with 8 times 9 and I get, what is that? 72. So I start with 72. 8 times 9. Okay. And how can I get to 24 from 72? 72 using two 11s. Let's see. I could subtract 11 and get 61. And then I have one 11 left and I end up at 50. So that's not going to work either. I feel like I'm going to end up working with big numbers here, not friendly numbers. So 8 times 11 is 88. What's 8 times 11 plus 11 would be? That would be 99 because it's just the same thing as 9 times 11. But then I have a 9 left and it's like, well, what do I do with that? Okay, okay, okay, okay, okay. Hey, this one's tricky. I don't know. Okay. So 24. What's my goal number here? If I make it to 32, then I can divide it. I can divide by 8. That seems useful. However, I don't know.","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 11. So that gets me to 88""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(9, 11, 88),
    comment='""8 times 11. So that gets me to 88""',
)

# ""11 plus 11 is obviously 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(8, 9, 22),
    comment='""11 plus 11 is obviously 22""',
)

# ""multiplying 11 times 9 to get to 99""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*9=99"",
    resulting_state=(8, 11, 99),
    comment='""multiplying 11 times 9 to get to 99""',
)

# ""99 minus 8 is 91""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""99-8=91"",
    resulting_state=(11, 91),
    comment='""99 minus 8 is 91""',
)

# ""What if I start with 8 times 9 and I get, what is that? 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(11, 11, 72),
    comment='""What if I start with 8 times 9 and I get, what is that? 72""',
)

# ""I could subtract 11 and get 61""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72-11=61"",
    resulting_state=(11, 61),
    comment='""I could subtract 11 and get 61""',
)

# ""And then I have one 11 left and I end up at 50""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""61-11=50"",
    resulting_state=(50,),
    comment='""And then I have one 11 left and I end up at 50""',
)

# ""8 times 11 is 88""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(9, 11, 88),
    comment='""8 times 11 is 88""',
)

# ""8 times 11 plus 11 would be? That would be 99""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88+11=99"",
    resulting_state=(9, 99),
    comment='""8 times 11 plus 11 would be? That would be 99""',
)

# The participant then mentions wanting to get to 32 to divide by 8, which suggests they set a subgoal
graph.set_subgoal(
    (8, 32),
    state_after_subgoal=(24,),
    comment='""If I make it to 32, then I can divide it. I can divide by 8""',
)
```"
3182,"[9,9,11,13]",(11+13)+9-9,129," Ah, big numbers again. Okay, okay. 9, 9, 11, and 13. Okay, so 9 times 9 maybe might be useful, and the 13 might be helpful. 9 times 13 is 117. Can I do anything with 117? I don't know. So let's think about this. I wonder what 24, 24 times 9 is 216. So if I can somehow reach 216 using the three other numbers, then I can divide it by 9, and I'll end up at 24. So 216, okay. So 9 times 11 is obviously just 99. Let's try that again. Okay, so 9 times 11 is obviously just 99. What if I multiply 99? No, that's going to be too big. If I multiplied 99 times 13, that would obviously be way over what I want. 9 times 13 though. No, okay. I think my idea with dividing by 9, I don't think that's going to work very well. Okay. I need to get to 24. There's got to be a way to do this with facts. I don't know. I don't know. I don't know. I don't know. I don't like greatest common factors or multiples or something. Unfortunately, I am just thinking it. I, there's gotta be some kind of math way to do it, but I don't, I don't know what the math way is. So let's see. I've got multiplication, division, addition, and subtraction. Well, if I just add, Oh wait, no. Oh, I'm so dumb. Okay. 11 times 13 is no 11 plus 13 is 24 and I have two nines. So they neutralize each other. So, so hold on. So 11 plus 13 is 24. Oh goodness. I got, wow. I see it now. And so then I can just add nine and then subtract nine and then I get 24.","```python
start_state = (9, 9, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 9 maybe might be useful""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(11, 13, 81),
    comment='""9 times 9 maybe might be useful""',
)

# ""9 times 13 is 117""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*13=117"",
    resulting_state=(9, 11, 117),
    comment='""9 times 13 is 117""',
)

# The participant then sets a subgoal of getting to 216 to divide by 9
graph.set_subgoal(
    (216,),
    state_after_subgoal=(24,),
    comment='""if I can somehow reach 216 using the three other numbers, then I can divide it by 9""',
)

# ""9 times 11 is obviously just 99""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*11=99"",
    resulting_state=(9, 13, 99),
    comment='""9 times 11 is obviously just 99""',
)

# The participant considers multiplying 99 by 13 but realizes it would be too big
# Then they try 9*13 again but abandon that approach

# Finally they have the insight: ""11 plus 13 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(9, 9, 24),
    comment='""11 plus 13 is 24""',
)

# ""And so then I can just add nine and then subtract nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+9-9=24"",
    resulting_state=(24,),
    comment='""And so then I can just add nine and then subtract nine""',
)
```"
3183,"[2,3,3,7]",(2x3)x(7-3),94," Okay. 2, 3, 3, and 7. So clearly what I need to do is not get so invested in the big numbers and just think about how I can use little numbers. So, well, what happens if I just add all of these? 2 plus 3 is 5, plus 7 is 12, plus 3 is 15. So that's not going to get me where I need to go. So I'm going to have to multiply something. Let's see. Well, 3 times 7 is 21, and then I have a 2 and a 3, so that might not help. Okay. 2 times 7 is 14. Can I make 10? Well, I can, but I would need the 2 again to make 5. Okay. Let's see. 7 times 2. I did that one already. 2 times 3 is 6. 3 times 3 is 9. Okay. Well, let's try. So 2 times 3, that would give me 6. Wait a second. No, I can't do that because I was thinking if I could somehow get to 6, then maybe I could do that times 4 and get to 24, but I don't have anything I can use to make a 4. No, wait. No, no, no. I do. I do. I do. Oh, this might work. Because what I could do is... Maybe it'll work. ...is say 2 times 3, so that's 6, and then I could multiply 6. I can get 4 by saying 7 minus 3. Okay. Okay.","```python
start_state = (2, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 plus 3 is 5, plus 7 is 12, plus 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3+7+3=15"",
    resulting_state=(15,),
    comment='""2 plus 3 is 5, plus 7 is 12, plus 3 is 15""',
)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(2, 3, 21),
    comment='""3 times 7 is 21""',
)

# ""2 times 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 3, 14),
    comment='""2 times 7 is 14""',
)

# ""Can I make 10?"" suggests setting a subgoal
graph.set_subgoal(
    (10,),
    state_after_subgoal=(24,),
    comment='""Can I make 10?""',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(3, 6, 7),
    comment='""2 times 3 is 6""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(2, 7, 9),
    comment='""3 times 3 is 9""',
)

# The participant then realizes they can make 4 by doing 7-3
# They set a new subgoal of getting to 6 and 4 to multiply them
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='The participant realizes they can make 4 by doing 7-3 and wants to multiply it by 6',
)

# First they make 6 with 2*3
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(3, 6, 7),
    comment='""2 times 3, so that\'s 6""',
)

# Then they make 4 with 7-3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 6),
    comment='""I can get 4 by saying 7 minus 3""',
)

# Finally they multiply 6*4 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment=""Based on their response, they multiply 6 and 4 to get 24"",
)
```"
3196,"[3,5,6,11]",11-5+3,180," Okay, let's try this real quick. Okay, I think 5 times 3 is 15, minus 6 is which is, 15 minus 6 is like, okay, so 15 minus 5 is 10, so that's 9. 9. Okay, that wouldn't work. 15, 3, 15. Okay, 11 minus 5, that's like 14. No, 11 minus, 10 minus 4 is 14. No, I'm tripping. 10 minus 4 is 6. So this would be, this would be, okay, this would, yeah, I'm tripping. I'm tripping. This is 6. Okay, 6. Okay, I'm oh this is six right here 11 minus 5 is 6 and then you know I'm saying 11 minus minus 5 is 6 times debris that's 24 now 6 18 6 18 21 no yeah the minus 5 is 6 it's time see that's 36 yeah seeks this okay so the minus 5 would be 6 plus 3 that's 9","```python
start_state = (3, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(6, 11, 15),
    comment='""5 times 3 is 15""',
)

# ""15 minus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-6=9"",
    resulting_state=(9, 11),
    comment='""15 minus 6""',
)

# ""11 minus 5, that's like 14"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=14"",
    resulting_state=(3, 6, 14),
    comment='""11 minus 5, that\'s like 14""',
    result_calc_error=True,
)

# ""10 minus 4 is 6"" seems to be correcting their previous error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(3, 6, 6),
    comment='""10 minus 4 is 6"" seems to be correcting their previous error about 11-5',
)

# ""6 times debris that's 24"" (debris probably means ""three"") 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(6, 18),
    comment='""6 times debris that\'s 24"" (debris probably means ""three"")',
)

# ""11 minus 5 would be 6 plus 3 that's 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5+3=9"",
    resulting_state=(6, 9),
    comment='""11 minus 5 would be 6 plus 3 that\'s 9""',
)
```"
3198,"[5,5,10,10]",,180," What if this is 10, 20, 30? How can we make all these 3 equal 24? How can we... How much is... Okay, so 10 divided by 5 dot be 2. That'd be 2. Alright. Then we'll have... Then we'd have... 10 plus 5. Nay. So this would be 2 times... I wouldn't even be right. Hmm... I feel like... You do... 10 plus 10. That would be 20. So... I... I... I... I... this would give you anything about it and I think it would take us to the number 20 24 unless we see five and I should do ten times five minus five divided by five that's the answer this one is not it it's not this one it's not it for this would be five this is not it I'm not even gonna struggle with this one this one does not give us 24 these numbers right here does not give us 24 at all","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10, 20, 30?"" participant seems to be adding 10s
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 5, 20),
    comment='""10, 20, 30?"" participant seems to be adding 10s',
)

# ""10 divided by 5 dot be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 10),
    comment='""10 divided by 5 dot be 2""',
)

# ""10 plus 10. That would be 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 5, 20),
    comment='""10 plus 10. That would be 20""',
)

# ""ten times five minus five divided by five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*5)-(5/5)=49"",
    resulting_state=(5, 10, 49),
    comment='""ten times five minus five divided by five""',
)

# The participant then concludes that the problem is impossible
```"
3199,"[5,6,8,8]",6x(5-8/8),28," Okay, now I see 5, 6, 8, 8. I'm trying to come up with a 3 or a 4. Oh yeah, now I see, so 6 times 5 minus 8 divided by 8, which is 1.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I'm trying to come up with a 3 or 4"" suggests the participant is setting a subgoal
graph.set_subgoal(
    (4,),
    state_after_subgoal=(24,),
    comment='""I\'m trying to come up with a 3 or a 4""'
)

# ""8 divided by 8, which is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 5, 6),
    comment='""8 divided by 8, which is 1""',
)

# ""6 times 5 minus 8 divided by 8"" - participant combines operations
new_state = graph.explore_operation(
    curr_state,
    operation=""6*(5-8/8)=24"",
    resulting_state=(24,),
    comment='""6 times 5 minus 8 divided by 8""',
)
```"
3200,"[1,3,9,10]",3x(1+10)-9,133," 1, 3, 9, 10. So I want to either get 6 and 4 or 8 and 3. How can I get 8 from this? I have a 3 already. 10, minus 3, 39, 4, all 12 and 2. I can't get 12. Yeah, I'm thinking to see... 9 minus 3 is 6, but I have 10 and 1. Hmm, I don't know. 24? 1, 3, 9, 10. 9, 10. Oh, now I see. I can use 3 times 11, which is 33, and then minus 9. That is 24.","```python
start_state = (1, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So I want to either get 6 and 4 or 8 and 3"" - participant is setting subgoals
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""So I want to either get 6 and 4""',
)
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""or 8 and 3""',
)

# ""10, minus 3"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(1, 7, 9),
    comment='""10, minus 3""',
)

# ""9 minus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(1, 6, 10),
    comment='""9 minus 3 is 6""',
)

# ""I can use 3 times 11, which is 33, and then minus 9""
# The 11 must come from 1+10
new_state = graph.explore_operation(
    curr_state,
    operation=""1+10=11"",
    resulting_state=(3, 9, 11),
    comment='""3 times 11"" - first making 11 from 1+10',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11=33"",
    resulting_state=(9, 33),
    comment='""3 times 11, which is 33""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-9=24"",
    resulting_state=(24,),
    comment='""and then minus 9""',
)
```"
3201,"[5,5,8,10]",8x(5-10/5),51," 5, 5, 8, 10. Can I get a 12 times 2? No. 25, 5 times 8, 40. 1, cannot. I can get a 3 easily, but not an 8 easily, which I have an 8 and 10. I can try to do. Oh, so 8 times 5 minus, sorry, 5 minus, 5 minus 10 divided by 5, which is 2.","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Can I get a 12 times 2?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""Can I get a 12 times 2?""',
)

# ""5 times 8, 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(5, 10, 40),
    comment='""5 times 8, 40""',
)

# ""I can get a 3 easily"" - participant likely thinking about 10/5=2 and then +1 to get 3
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 8),
    comment='""I can get a 3 easily"" - participant likely thinking about 10/5=2',
)

# Finally, the participant finds the solution: ""8 times 5 minus, sorry, 5 minus, 5 minus 10 divided by 5, which is 2""
# This is 8*(5-10/5) which equals 24 because 10/5=2, 5-2=3, and 8*3=24
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(5-10/5)=24"",
    resulting_state=(24,),
    comment='""8 times 5 minus, sorry, 5 minus, 5 minus 10 divided by 5, which is 2""',
)
```"
3205,"[2,4,5,9]",4x(2+9-5),20," 2, 4, 5, 9. So 4 is 4. 4 times 6 is 24. To get 6, I have 2 plus 9 minus 5. Then this is 24.","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6 is 24"" - participant sets a subgoal of getting 6 to multiply by 4
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 times 6 is 24"" - participant sets a subgoal of getting 6',
)

# ""To get 6, I have 2 plus 9 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+9-5=6"",
    resulting_state=(4, 6),
    comment='""To get 6, I have 2 plus 9 minus 5""',
)

# ""Then this is 24"" - participant multiplies 4 and 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""Then this is 24"" - participant multiplies 4 and 6',
)
```"
3207,"[3,9,13,13]",,180," So, I would think about the numbers that multiply to be 24, and I know that it's 3 times 8, so the 3 could be used, but other numbers include 6 and 4, and so the 9 and the 3 could combine to be the 6. Or since there are 13s, I could use those to subtract, so like 13 minus 9 would be a 4, or 13 plus 13 would be 26, and then the 9 but divided by 3 would be 3. And then the 9 but divided by 3 would be 3. And then the 9 but divided by 3 would be 3. 13 plus 9 would be 22. 13 plus 3 is 16. 13 minus 9. 13 plus 3 is 16. And then I would need an 8. And then I would need an 8. 13 times 3 is 39. So then I would have to get to 15. Don't know what 13 times 9 is or 13 times 13 is. I think 13 times 13 is 169. Um. Um. Um. Um. But I don't know what that divided by 9 would be. But I don't know what that divided by 9 would be. 3 times 9 is 27. Minus 13 plus 13 would be the same thing. 3 times 13 is 39. And then minus 9 would be 30, but then there's still a 13. Let's see, 13 minus 3 is 10, and then 13 plus 9 is 22, so that would give 12, 9 divided by 3 is 3. Okay. 13 plus 3 is 12, so that would give 12, 9 divided by 3 is 12.","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# First the participant sets a subgoal of getting numbers that multiply to 24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I would think about the numbers that multiply to be 24, and I know that it\'s 3 times 8""',
)

# ""9 and the 3 could combine to be the 6"" suggests another subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""9 and the 3 could combine to be the 6""',
)

# ""13 minus 9 would be a 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9 would be a 4""',
)

# ""13 plus 13 would be 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13 plus 13 would be 26""',
)

# ""9 divided by 3 would be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 13, 13),
    comment='""9 divided by 3 would be 3""',
)

# ""13 plus 9 would be 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(3, 13, 22),
    comment='""13 plus 9 would be 22""',
)

# ""13 plus 3 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(9, 13, 16),
    comment='""13 plus 3 is 16""',
)

# ""13 times 3 is 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(9, 13, 39),
    comment='""13 times 3 is 39""',
)

# ""13 times 13 is 169""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(3, 9, 169),
    comment='""13 times 13 is 169""',
)

# ""3 times 9 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(13, 13, 27),
    comment='""3 times 9 is 27""',
)

# ""3 times 13 is 39. And then minus 9 would be 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13-9=30"",
    resulting_state=(13, 30),
    comment='""3 times 13 is 39. And then minus 9 would be 30""',
)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(9, 10, 13),
    comment='""13 minus 3 is 10""',
)

# ""13 plus 9 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(3, 13, 22),
    comment='""13 plus 9 is 22""',
)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 13, 13),
    comment='""9 divided by 3 is 3""',
)

# ""13 plus 3 is 12"" appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=12"",
    resulting_state=(9, 12, 13),
    comment='""13 plus 3 is 12"" appears to be a calculation error',
    result_calc_error=True,
)

```"
3208,"[4,4,8,10]",(8-4)x(10-4),66," Okay, this one maybe seems a bit easier because it doesn't have numbers like 13. So I know that 8 times 3, or 12 times 2, or 24 and 1, or 8 and 3. 3, or 8 and 3, 6 and 4. So I could make a 6 by doing 10 minus 4. And then I could make a 4 by doing 8 minus 4. So that seems like it would work, but I have to type in the parentheses right. So 8 minus 4 times 10 minus 4.","```python
start_state = (4, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3"" participant seems to be setting a subgoal of getting 24 by multiplying 8 and 3
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3"" participant seems to be setting a subgoal',
)

# ""12 times 2"" another subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""12 times 2"" another subgoal',
)

# ""24 and 1"" another subgoal
graph.set_subgoal(
    (24, 1),
    state_after_subgoal=(24,),
    comment='""24 and 1"" another subgoal',
)

# ""8 and 3"" repeated subgoal
# ""6 and 4"" another subgoal - participant realizes they need to get 6 and 4
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 and 4"" another subgoal',
)

# ""10 minus 4"" to make 6
new_state = graph.explore_operation(
    curr_state,
    operation=""10-4=6"",
    resulting_state=(4, 6, 8),
    comment='""10 minus 4"" to make 6',
)

# ""8 minus 4"" to make 4
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 4, 10),
    comment='""8 minus 4"" to make 4',
)

# Based on their response, they then multiply these results together
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-4)*(10-4)=24"",
    resulting_state=(24,),
    comment='Based on their response ""(8-4)x(10-4)"", they multiply these results together',
)
```"
3214,"[2,2,3,3]",(3+3)x(2+2),17," So, 24 can be 6 times 4, and you can make 6 by doing 3 plus 3, and 4 by doing 2 plus 2.","```python
start_state = (2, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 can be 6 times 4"" - participant is setting subgoals of making 6 and 4
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""24 can be 6 times 4""',
)

# ""you can make 6 by doing 3 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(2, 2, 6),
    comment='""you can make 6 by doing 3 plus 3""',
)

# ""and 4 by doing 2 plus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 6),
    comment='""and 4 by doing 2 plus 2""',
)

# Then multiply to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment=""Multiply the subgoals to reach 24"",
)
```"
3227,"[6,8,12,12]",(8x6)-12-12,39," 6, 8, 12, and 12. 12 plus 12 is 24, but 6 times 8 is 32. 48. 6 times 8. 8 times 5 is 40, so 48. 48 minus 12 minus 12. 8 times 6. 48 minus 12 minus 12 is 24.","```python
start_state = (6, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(6, 8, 24),
    comment='""12 plus 12 is 24""',
)

# ""but 6 times 8 is 32"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=32"",
    resulting_state=(12, 12, 32),
    comment='""but 6 times 8 is 32"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""48. 6 times 8"" - participant corrects their calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(12, 12, 48),
    comment='""48. 6 times 8"" - participant corrects their calculation',
)

# ""48 minus 12 minus 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-12-12=24"",
    resulting_state=(24,),
    comment='""48 minus 12 minus 12 is 24""',
)
```"
3230,"[1,3,6,7]",(6x3)+(7-1),117," 1, 3, 6, and 7. 6 times 4, what do you do with the 7? 6, 3, 1, 24 is 6 times 4, 8 times 3, 2 times 12, 7, 9, 10, and 12, 13, minus 1, no, 7 minus 1, no, 6 times 12, 6, 7 minus 1 is 6, 6 plus 6 is not enough. 1 plus 3 is 4 times 6, and what do you do with the 7? Then 3, and 6, 7 minus 1, 7 minus 1 is 6, 7 minus 1, 7 minus 1 is 6, 7 minus 1 is 6, 4 6 times 3 is 18 18, 19, 20, 21, 22, 23, 24 Oh, so 6 times 3 is 18 plus 6 which you get 7 minus 1","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4, what do you do with the 7?"" - participant seems to be trying to get to 24 by multiplying by 4
# They might be trying to make 4 from the other numbers
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4, what do you do with the 7?"" - participant seems to be trying to get to 24 by multiplying by 4',
)

# ""7 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(3, 6, 6),
    comment='""7 minus 1""',
)

# ""1 plus 3 is 4 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+3)*6=24"",
    resulting_state=(7, 24),
    comment='""1 plus 3 is 4 times 6""',
)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 7, 18),
    comment='""6 times 3 is 18""',
)

# Then they count up from 18 and realize they can add 6 to get to 24
# ""7 minus 1 is 6"" to get the 6 they need
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+(7-1)=24"",
    resulting_state=(24,),
    comment='""6 times 3 is 18 plus 6 which you get 7 minus 1""',
)

```"
3235,"[1,2,7,9]",2x7+1+9,54," 9 minus 7 equals 2 times 2. Yeah, no, that doesn't work. 9 plus 7 equals 16. No. 2 times 7 equals 14, plus 1 equals 15, plus 9 equals 12.","```python
start_state = (1, 2, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 7 equals 2 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-7)*2=4"",
    resulting_state=(1, 4, 7),
    comment='""9 minus 7 equals 2 times 2""',
)

# ""9 plus 7 equals 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(1, 2, 16),
    comment='""9 plus 7 equals 16""',
)

# ""2 times 7 equals 14, plus 1 equals 15, plus 9 equals 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7+1+9=24"",
    resulting_state=(24,),
    comment='""2 times 7 equals 14, plus 1 equals 15, plus 9 equals 12"" - participant makes calculation error in speaking but finds correct solution',
)
```"
3236,"[1,2,3,3]",(3x2)x(3+1),158," 3 times 3 equals 9 times 2 plus 1. 3 plus 1 plus 2 times 3. So 24, so we have 2 times 1. 2 times 1. 2 times 6. Why don't we go 2, open parenthesis, 3 plus 3 times 1. 3. So 3. 3 times 3 equals 9 times 2 plus 1. Hmm. Okay. Okay. Okay. Okay. Um. Two times 3 plus one times 3. Three times 2 plus 3. times 1 times 2 is 6 oh I know it's 3 times 2 times 3 plus 1","```python
start_state = (1, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 equals 9 times 2 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 2, 9),
    comment='""3 times 3 equals 9""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2+1=19"",
    resulting_state=(19,),
    comment='""9 times 2 plus 1""',
)

# ""3 plus 1 plus 2 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+1+2)*3=18"",
    resulting_state=(18,),
    comment='""3 plus 1 plus 2 times 3""',
)

# ""2 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*1=2"",
    resulting_state=(2, 3, 3),
    comment='""2 times 1""',
)

# ""2 times 6"" - participant may be trying to make 6 first
graph.set_subgoal(
    (2, 6),
    state_after_subgoal=(24,),
    comment='""2 times 6"" - participant may be trying to make 6 first',
)

# ""2, open parenthesis, 3 plus 3 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*(3+3)=12"",
    resulting_state=(1, 12),
    comment='""2, open parenthesis, 3 plus 3 times 1""',
)

# ""3 times 3 equals 9 times 2 plus 1"" - participant tries this path again
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*2+1=19"",
    resulting_state=(19,),
    comment='""3 times 3 equals 9 times 2 plus 1"" - participant tries this path again',
)

# ""Two times 3 plus one times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*3+1)*3=21"",
    resulting_state=(21,),
    comment='""Two times 3 plus one times 3""',
)

# ""Three times 2 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2+3=9"",
    resulting_state=(1, 9),
    comment='""Three times 2 plus 3""',
)

# ""times 1 times 2 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(1, 3, 6),
    comment='""times 1 times 2 is 6""',
)

# ""oh I know it's 3 times 2 times 3 plus 1"" - this is their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2*(3+1)=24"",
    resulting_state=(24,),
    comment='""oh I know it\'s 3 times 2 times 3 plus 1"" - this is their final answer',
)
```"
3238,"[5,8,9,11]",9+11+8-5,180," Eleven minus eight equals three times five plus nine. What if we did eleven minus eight is three times nine minus, oh no, that doesn't work either, nine minus five is fifteen. Eleven minus eight is three, and then three times five is fifteen, and then fifteen plus nine is twenty-four. So, eleven minus eight is fifteen, and then fifteen plus nine is twenty-four. So, eleven minus eight is three times five times thirty-eight plus nine. Eleven minus eight equals three times five, close parentheses, plus nine. Now, that's not how you do it. Nine plus eight equals seventeen, plus five, plus twenty-five, eighteen, nineteen, twenty, twenty-one, twenty-two, plus eleven- definitely not right. Nine plus eleven equals twenty, plus eight equals twenty-five, and nine plus nine and forty-seven equals sigue 28 minus 5 only equals 23.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Eleven minus eight equals three times five plus nine""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8)*5+9=24"",
    resulting_state=(24,),
    comment='""Eleven minus eight equals three times five plus nine""',
)

# ""nine minus five is fifteen"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=15"",
    resulting_state=(8, 11, 15),
    comment='""nine minus five is fifteen"" - calculation error',
    result_calc_error=True,
)

# ""Eleven minus eight is three, and then three times five is fifteen, and then fifteen plus nine is twenty-four""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 5, 9),
    comment='""Eleven minus eight is three""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(9, 15),
    comment='""three times five is fifteen""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+9=24"",
    resulting_state=(24,),
    comment='""fifteen plus nine is twenty-four""',
)

# ""nine plus eight equals seventeen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(5, 11, 17),
    comment='""nine plus eight equals seventeen""',
)

# ""plus five, plus twenty-five""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+5=22"",
    resulting_state=(11, 22),
    comment='""plus five""',
)

# ""Nine plus eleven equals twenty""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(5, 8, 20),
    comment='""Nine plus eleven equals twenty""',
)

# ""plus eight equals twenty-five""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+8=28"",
    resulting_state=(5, 28),
    comment='""plus eight equals twenty-five"" (though they say 28)',
)

# ""28 minus 5 only equals 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-5=23"",
    resulting_state=(23,),
    comment='""28 minus 5 only equals 23""',
)

```"
3240,"[1,11,13,13]",(13-11)x(13-1),139," Okay, 1, 11, 13, 13, 26. Let's do open parenthesis, 13 minus No, that doesn't work. 13 times 13. Okay, so 1 plus 11 is 12. What if we just did 13 literally minus 1 equals 12, and then times, I don't know, let's just try that. I don't know, this is hard. I don't know if I'm just really bad at math or if this is just how people Okay, what about 11 over 13? 11 over 13. No, that's definitely not right. What if we just did 13 minus 11 is 2, and then times that by 13 minus 1 is 12, so 2 times 12.","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 26"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(1, 11, 26),
    comment='""13, 13, 26"" participant adds the two 13s',
)

# ""1 plus 11 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 13, 13),
    comment='""1 plus 11 is 12""',
)

# ""13 literally minus 1 equals 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(11, 12, 13),
    comment='""13 literally minus 1 equals 12""',
)

# ""11 over 13"" participant considers division
new_state = graph.explore_operation(
    curr_state,
    operation=""11/13"",
    resulting_state=(1, 0.846, 13, 13),
    comment='""11 over 13""',
)

# ""13 minus 11 is 2, and then times that by 13 minus 1 is 12, so 2 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-11)*(13-1)=24"",
    resulting_state=(24,),
    comment='""13 minus 11 is 2, and then times that by 13 minus 1 is 12, so 2 times 12""',
)
```"
3241,"[2,3,6,7]",,180," Okay, 2, 3, 6, 7, well, 2 times 6 is 12. Okay, so 2 times 6 is 12. 7 minus 3 is 4. 4 times 8 equals 32. What if we did 4 times, no, because 4 times 4 is 16. 7 minus 6 over 3, and then multiply all of that by 2. That's not right. Hmm, 6 plus 7 is 14. What if we did 7 times? So 34 to 35. Okay. What if we did 7 times? That doesn't work either. What if we did 7 times? No, because that's 25. What if we did 7 times?","```python
start_state = (2, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(3, 7, 12),
    comment='""2 times 6 is 12""',
)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(2, 4, 6),
    comment='""7 minus 3 is 4""',
)

# ""4 times 8 equals 32"" - not clear where 8 comes from, might be a transcription error
# ""4 times 4 is 16"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(16,),
    comment='""4 times 4 is 16""',
)

# ""7 minus 6 over 3, and then multiply all of that by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-6/3)*2=10"",
    resulting_state=(10,),
    comment='""7 minus 6 over 3, and then multiply all of that by 2""',
)

# ""6 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(2, 3, 13),
    comment='""6 plus 7 is 14"" - participant makes calculation error',
    result_calc_error=True,
)

# The rest of the transcript shows the participant trying to start calculations with ""7 times"" but not completing them

```"
3243,"[7,10,11,13]",13-7,180," 15 minus 11 equals 2. Hmm. Hmm, okay. Seven, seven minus 10 times 11 minus 13. No. Oh my god. Seven, okay now that's incorrect. Okay. 10 plus seven equals 17. Okay, so it's gotta be like... 13... Okay, so 13 minus 10 equals 3. And then... 11 minus 7 equals 4. 4 times 3 is 12, but not 24. 13 minus 7 equals 6. 6 plus 10 is 16. 16 plus 11 is 9.","```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus seven equals 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(11, 13, 17),
    comment='""10 plus seven equals 17""',
)

# ""13 minus 10 equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 7, 11),
    comment='""13 minus 10 equals 3""',
)

# ""11 minus 7 equals 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 10, 13),
    comment='""11 minus 7 equals 4""',
)

# Go back to start state for next operation
curr_state = graph.move_to_node(start_state)

# ""13 minus 7 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 10, 11),
    comment='""13 minus 7 equals 6""',
)

# ""6 plus 10 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10=16"",
    resulting_state=(11, 16),
    comment='""6 plus 10 is 16""',
)

# ""16 plus 11 is 9"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+11=9"",
    resulting_state=(9,),
    comment='""16 plus 11 is 9"" - calculation error',
    result_calc_error=True
)
```"
3246,"[3,3,6,10]",,180," All right, we're back. 3, 3, 6, 10. We're looking at 6, 6. Okay, so the addition of all of them is 22. We could do 10 times 6 divided by 3, 20, but then there's a 3 left over. That's not good enough. 3 times 6 is 18. That's not helpful. 10 times 6 is 60. Divided by 3 is 30. Again, that's also not helpful. 6 divided by 3 is 2 times 10, 23. That's not going to do it. I don't know if we're allowed to use non-integers in this, even though I don't like non-integers. I don't think that really fixes my situation here. I don't know how much more time I have. Okay, 6 times 6. I guess 3 times 3 is 9. 9 times 6. What is that, 54? Yeah, that's not going to do it. 3 times 6 is 18. That makes 25. Again, we're there. 10, I guess 7. Is 7 helpful here? No. I guess 1, 3. If I do 6 minus 3, we have 33 and 10, which is, again, not helpful. Ah, lordy. 10 minus 6 is 4. 3 times 3 is 9. 9 times 4. We're looking at 36. Also not helpful. Man, this one might have me stumped. 3 plus 3 is 6. 10 minus 3 is 7. 7 times 6. 7 times 6 is what? 42 divided by 3 is like 14. So that's not it. Man, I'm way worse at math than I remember being. I guess we could try to get... Let's see. 16 times 1.5. That's obviously not... Can I get... No, I can't get that. 12. Is there a way to get 12? Let me do times 2.","```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""the addition of all of them is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3+6+10=22"",
    resulting_state=(22,),
    comment='""the addition of all of them is 22""',
)

# ""10 times 6 divided by 3, 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6/3=20"",
    resulting_state=(3, 20),
    comment='""10 times 6 divided by 3, 20""',
)

# ""3 times 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(3, 10, 18),
    comment='""3 times 6 is 18""',
)

# ""10 times 6 is 60. Divided by 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6/3=30"",
    resulting_state=(3, 30),
    comment='""10 times 6 is 60. Divided by 3 is 30""',
    result_calc_error=True,
)

# ""6 divided by 3 is 2 times 10, 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6/3)*10=20"",
    resulting_state=(3, 20),
    comment='""6 divided by 3 is 2 times 10""',
)

# ""3 times 3 is 9. 9 times 6. What is that, 54?""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*6=54"",
    resulting_state=(10, 54),
    comment='""3 times 3 is 9. 9 times 6. What is that, 54?""',
)

# ""3 times 6 is 18. That makes 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6+10=28"",
    resulting_state=(3, 28),
    comment='""3 times 6 is 18. That makes 25"" - though they say 25, they likely meant 28',
)

# ""6 minus 3, we have 33 and 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3, 10),
    comment='""6 minus 3""',
)

# ""10 minus 6 is 4. 3 times 3 is 9. 9 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3*3)*(10-6)=36"",
    resulting_state=(36,),
    comment='""10 minus 6 is 4. 3 times 3 is 9. 9 times 4""',
)

# ""3 plus 3 is 6. 10 minus 3 is 7. 7 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3)*6=42"",
    resulting_state=(3, 42),
    comment='""10 minus 3 is 7. 7 times 6""',
)

# ""42 divided by 3 is like 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42/3=14"",
    resulting_state=(14,),
    comment='""42 divided by 3 is like 14""',
)

# The participant then mentions ""16 times 1.5"" but doesn't actually compute it with the numbers available

# ""Is there a way to get 12?"" suggests they are setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""Is there a way to get 12?""',
)
```"
3248,"[7,12,12,13]",(13x12),180," All right, come on. I've been messing everything up, so it's going to be fun now. What does all this add up to? 19 plus 12, we're looking at 31. I'm 44. I don't know if I can make that work. Probably not. That would be 24. Sorry, 12 plus 12 would be 24. Yeah, it didn't matter at that point. The divisions get weird here. I mean, unless I'm allowed to use non-integers and stuff, I'd need a pen and paper if we're going to do that, and I'm still pretty sure that doesn't make any sense. I guess 12 divided by 7, you're looking at a little over 1.5, which I guess you can multiply by 12. 144 divided by 7, that's close to 20. We're not going to mess with that. Now they just really go into each other with the exception of 12 and 12. I'm real confused by this one. I think it's 7, 13, and prime. I don't know if that matters. 7 times 12. What the hell is 7 times 12? 7 times 12 is 714. 84. 74. So 7 times 12, 84. Divided by 13, is that divisible by 13? It's not. I guess 7 plus 13 is 20, but then I can't really do anything about that. Divided by 12 times 12 is nothing. You've done nothing. Congratulations. 25 times 7 divided by 12. Does that make sense? It doesn't. 25 times 12 divided by 7. Does that make sense? Also, no. 24 times 7. What the hell is that? It's 168. Divided by 13, not even close. What in God's green earth y'all doing to me, bruh? This ain't it. I'm too dumb for this. 13 times 12 plus 12, so that divided by 7. That might do it. So what is it again? It's 13 times 12 plus 12 is 168. 13, oh crap. Let me do it. 13 times 12. 12, close.","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""19 plus 12, we're looking at 31"" - participant likely added 7+12=19 first
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(12, 13, 19),
    comment='""19 plus 12, we\'re looking at 31""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+12=31"",
    resulting_state=(13, 31),
    comment='""19 plus 12, we\'re looking at 31""',
)

# ""12 plus 12 would be 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(7, 13, 24),
    comment='""12 plus 12 would be 24""',
)

# ""12 divided by 7, you're looking at a little over 1.5, which I guess you can multiply by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12/7)*12=20.57"",
    resulting_state=(13, 20.57),
    comment='""12 divided by 7...multiply by 12""',
)

# ""7 times 12. What the hell is 7 times 12? 7 times 12 is 714. 84. 74. So 7 times 12, 84.""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(12, 13, 84),
    comment='""7 times 12...84""',
)

# ""Divided by 13"" participant tries to divide 84 by 13
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""84/13=6.46"",
    resulting_state=(12, 6.46),
    comment='""Divided by 13""',
)

# ""7 plus 13 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(12, 12, 20),
    comment='""7 plus 13 is 20""',
)

# ""13 times 12"" - this matches their final response
new_state = graph.explore_operation(
    curr_state,
    operation=""13*12=156"",
    resulting_state=(7, 12, 156),
    comment='""13 times 12""',
)
```"
3249,"[1,11,11,12]",,180," All right. I had it last time. Y'all got me messed up. This all good. So let's do the thing. 12. Nope, nope. I'm typing in. I shouldn't be typing. 12 times 11. We're looking at 12, 21, 31. I think that's right. 132. 132 plus 1 is 133 divided by 11. That is not useful. But I could do 12 plus 11. That's 23. What's 11 times 11? 11 times 11 is 121. Not helpful. 12 times 12. 144. I'm talking out loud. What are you talking about? Sorry. I'm just being quiet. 12 times 12 is 144. That's not divisible by 11. 11 plus 11 is useless. 12 plus 1 is 13. Also not helpful. I guess I could try 11 minus 1 gives us 10. Times 11 is 110. Does that divide into 12? 12, that's way too little. 11, 11, 11. I don't know if that's helpful. No, it's not. 12 minus 11, you get 1 again, man. You just have 1, 11, 1, 1, 1. 4, 1s, not helpful. Good stuff. Neo and the Matrix. I'm real dumb. This is real fun. At this point, I'm just really wondering what you guys are looking for here. If you just want me to be bad at this, or if it's a psychological experiment how bad at this I am, how quickly I get better at it. I get distracted. I feel like I'm just staring at numbers at this point. I'm sure at times I'll know stuff on this one. Last time I had it, and this time I'm just dumb.","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 11"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(1, 11, 132),
    comment='""12 times 11. We\'re looking at 12, 21, 31. I think that\'s right. 132""',
)

# ""132 plus 1 is 133 divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(132+1)/11=12.09"",
    resulting_state=(12.09,),
    comment='""132 plus 1 is 133 divided by 11""',
)

# ""12 plus 11. That's 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(1, 11, 23),
    comment='""12 plus 11. That\'s 23""',
)

# ""What's 11 times 11? 11 times 11 is 121""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=121"",
    resulting_state=(1, 12, 121),
    comment='""What\'s 11 times 11? 11 times 11 is 121""',
)

# ""11 plus 11 is useless""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(1, 12, 22),
    comment='""11 plus 11 is useless""',
)

# ""12 plus 1 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+1=13"",
    resulting_state=(11, 11, 13),
    comment='""12 plus 1 is 13""',
)

# ""11 minus 1 gives us 10. Times 11 is 110""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-1)*11=110"",
    resulting_state=(12, 110),
    comment='""11 minus 1 gives us 10. Times 11 is 110""',
)

# ""12 minus 11, you get 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 11),
    comment='""12 minus 11, you get 1""',
)

# The rest of the transcript is the participant expressing frustration and meta-commentary about the experiment
```"
3252,"[1,3,3,10]",(10-1)x3-3,148," Did these get easier? They definitely got easier. I think the last word's up. 1, 3, 3, 10. Let's see what we got here. 10 times 3 is 30, minus 4 because of 1 plus 3 is going to get us to 26, so that's not going to be enough. 3 minus 1 is going to be 2, and that's still not going to be enough. I feel like I saw this one earlier. Did I end up getting it? Probably not. What can I do? 3 minus 1, 2, and then you get 2 times 10. Again, 23. 10 divided by 3 is not really going to work. 10 divided by 3 is not really going to work. 30. If you do 3 times 10, again, minus 4 is not going to do enough. Multiplying and multiplying by 1 is also not going to be enough. So I feel like I've got to do 3 times 3 is 9. That's not going to be helpful. Oh, okay. Can we get to 12? We can get to 12, but I used too many numbers doing it, because then I end up with 3 minus 1 is 2, plus 10 is 12. Then I only have 3 left over, so that's not going to be enough. I can do 3 times 3 for 9. Or honestly, I can do 1 plus 4, or 1 plus 3 to 4. 4 times 10, 40 divided by 3, also not enough. 10 minus 3 times 3 is 21. You get to 22, also not going to be good enough. Okay. 7 times 4 is 28, so that's not helpful. Oh, but I can do 10. Oh, crap. I'm getting close now. Damn it. Oh, my typing skills are bad. 10 minus 1 is 9. Is that what I'm going to do? 9 times 3. And then that minus 3, I think, is what I was trying to do.","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 3 is 30, minus 4 because of 1 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(1, 3, 30),
    comment='""10 times 3 is 30""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-(1+3)=26"",
    resulting_state=(26,),
    comment='""minus 4 because of 1 plus 3 is going to get us to 26""',
)

# ""3 minus 1 is going to be 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-1=2"",
    resulting_state=(2, 3, 10),
    comment='""3 minus 1 is going to be 2""',
)

# ""2 times 10. Again, 23"" participant multiplies 2 by 10 and adds 3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10+3=23"",
    resulting_state=(23,),
    comment='""2 times 10. Again, 23""',
)

# ""10 divided by 3 is not really going to work""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/3=3.33"",
    resulting_state=(1, 3, 3.33),
    comment='""10 divided by 3 is not really going to work""',
)

# ""3 times 10, again, minus 4"" - participant is using 1+3=4
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10-(1+3)=26"",
    resulting_state=(26,),
    comment='""3 times 10, again, minus 4""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""3 minus 1 is 2, plus 10 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3-1+10=12"",
    resulting_state=(3, 12),
    comment='""3 minus 1 is 2, plus 10 is 12""',
)

# ""1 plus 3 to 4. 4 times 10, 40 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+3)*10/3=13.33"",
    resulting_state=(13.33,),
    comment='""1 plus 3 to 4. 4 times 10, 40 divided by 3""',
)

# ""10 minus 3 times 3 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-3)*3=21"",
    resulting_state=(1, 21),
    comment='""10 minus 3 times 3 is 21""',
)

# ""You get to 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+1=22"",
    resulting_state=(22,),
    comment='""You get to 22""',
)

# Finally, ""10 minus 1 is 9... 9 times 3. And then that minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-1)*3-3=24"",
    resulting_state=(24,),
    comment='""10 minus 1 is 9... 9 times 3. And then that minus 3""',
)
```"
3255,"[5,9,10,11]",11-5,180," Okay, I am bad at this. Um, alright, 15, um, 24. Okay, 9 times 5 is 50. Okay, let's see. 11 times 10 is 110. Um, divided by 9, divided by 5 would be 22. Uh, plus 9 would be 31, or minus 9 would be 35. Um, 13. Um, let's see, let's see, let's see. 9, um, plus 5 would be 14. Um, plus 10 would be 24. Do I, I have to use them all, right? Um, I'm pretty sure, but let's just see. Okay. Okay, okay. Let me think here, let me think. Try to just breathe. It's been a long time since I've done math regularly. 9, 11 times 5 would be 55. 55, um, minus, uh, 4 to the 3rd of 25 minus 31 would be 24. I don't know how to get to 31 with any of these. Ah, I just don't know. Um, hmm, hmm, hmm. Let's see. 10 divided by 5 is 2, plus 11 would be 13, plus 5. Okay. Hmm, yeah, I don't, I don't know, I think I might be stumped on this one. Okay, okay, okay. 1, um, 1 times 5 is 5. Um, 11 times, okay, minus 5 is 6. 16, no, 11 minus 5. 5 would be 6, and then, um, plus 10 would be 16 and plus 9 would be 28. 10 times 5 is a minus, yeah.","```python
start_state = (5, 9, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 5 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=50"",
    resulting_state=(10, 11, 50),
    result_calc_error=True,
    comment='""9 times 5 is 50""',
)

# ""11 times 10 is 110""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*10=110"",
    resulting_state=(5, 9, 110),
    comment='""11 times 10 is 110""',
)

# ""divided by 9, divided by 5 would be 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""110/(9*5)=22"",
    resulting_state=(22,),
    result_calc_error=True,
    comment='""divided by 9, divided by 5 would be 22""',
)

# ""9 plus 5 would be 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(10, 11, 14),
    comment='""9 plus 5 would be 14""',
)

# ""plus 10 would be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(11, 24),
    comment='""plus 10 would be 24""',
)

# ""11 times 5 would be 55""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(9, 10, 55),
    comment='""11 times 5 would be 55""',
)

# ""10 divided by 5 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 9, 11),
    comment='""10 divided by 5 is 2""',
)

# ""plus 11 would be 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+11=13"",
    resulting_state=(9, 13),
    comment='""plus 11 would be 13""',
)

# ""1 times 5 is 5"" - not clear where the 1 comes from
# ""11 minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 9, 10),
    comment='""11 minus 5""',
)

# ""plus 10 would be 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10=16"",
    resulting_state=(9, 16),
    comment='""plus 10 would be 16""',
)

# ""plus 9 would be 28"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=28"",
    resulting_state=(28,),
    result_calc_error=True,
    comment='""plus 9 would be 28"" - calculation error',
)
```"
3256,"[4,7,8,13]",8x13,180," Okay, let's think here. Gosh, I'm really bad at these. Uh, right, 13, 26, 29, 52, 13 times 4 is 52, um, 52, let's do it, okay, uh, okay, okay, let's think here. 13 times 4 is 29, 26, 27, 28, uh, 91, 104, um. Let me see, 24, 29, 8, 5, okay, 104, um, so 13 times 8, 13, 26, 39, 52, 65, 78, uh, 91, 104, so 13 times 8 is 104. Now we have 104, let's divide that by 4, uh, and then that would give us 26, um, I think, and then 26, and then we have a 7 to deal with, though. Well, how are we going to deal with that 7? Uh, we can't, we can't subtract it to get, uh, uh, 24, um, mm-hmm-hmm. Okay, uh, probably not the right way to do it then. 4, um, plus 13 would be 17, then plus 7 would be 24, so if we didn't have the 8, that would be fine. But how do we, how do we deal with the 8 being there? How can we, how can we incorporate that into these numbers to get us 24? Let me think, let me think, let me think. Um, okay, let's go back to the drawing board. Um, 7 times 8 would be 56, um, 40, 44, 48, 52, uh, so 7 times 8, 56. Um, 5 by 4, um, 40, 44, 48, 52, 56, is 14, and then plus 13 would be, um, 27, so that's not right. 52, 52, huh, golly, I don't know, I'm just really bad at these. Um, 52, 69. 91. Minus 32, 81, 71, 61, 29. Hmm. Yeah, I just, er, I don't know, I know I'm doing really bad with these, but just not.","```python
start_state = (4, 7, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 4 is 52""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*4=52"",
    resulting_state=(7, 8, 52),
    comment='""13 times 4 is 52""',
)

# ""13 times 4 is 29"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13*4=29"",
    resulting_state=(7, 8, 29),
    comment='""13 times 4 is 29""',
    result_calc_error=True,
)

# ""13 times 8"" participant counts up by 13s
new_state = graph.explore_operation(
    curr_state,
    operation=""13*8=104"",
    resulting_state=(4, 7, 104),
    comment='""13 times 8"" participant counts up by 13s',
)

# ""Now we have 104, let's divide that by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""104/4=26"",
    resulting_state=(7, 26),
    comment='""Now we have 104, let\'s divide that by 4""',
)

# ""4 plus 13 would be 17, then plus 7 would be 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+13+7=24"",
    resulting_state=(8, 24),
    comment='""4 plus 13 would be 17, then plus 7 would be 24""',
)

# ""7 times 8 would be 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 13, 56),
    comment='""7 times 8 would be 56""',
)

# ""plus 13 would be, um, 27"" - participant seems to be adding 13 to 14 (which they got from dividing 56 by 4)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/4+13=27"",
    resulting_state=(27,),
    comment='""plus 13 would be, um, 27"" - participant seems to be adding 13 to 14 (which they got from dividing 56 by 4)',
)

# The rest of the transcript contains some numbers but it's not clear what operations the participant is trying

```"
3261,"[8,9,9,12]",8+9,180," simplify this 12-9 is 3 3-9 is 12 3-8 is 11 3-8 is 11 No, I don't know This one is a little too hard for me This one is a little too hard for me Okay, let's see I think if we do 8 Then let's try to make it 5 it with 12 20 plus 9 31 then minus 9 would be 22 so now 12 plus 9 12 12 21 30 2 1 3 22 yeah oh I'm in me he 17 not really a meeting but the equivalent I suppose 9 plus 8 17 plus 12 29 now yeah I think I might be beef with this one sorry to say twelve 24 12 times 8 12 4 6 6 2 4 96 96 minus 81 15 yeah geez another one that I'm stumped on sorry to say I'm just not very good at math at that point I'm sorry to say I'm sorry to say I'm just not very good at math at the moment I guess once you get out of a thinking panic 17 minus 9 something minus 9 would be","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12-9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""12-9 is 3""',
)

curr_state = graph.move_to_node(new_state)
# ""3-9 is 12"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3-9=12"",
    resulting_state=(8, 12),
    comment='""3-9 is 12"" seems to be a calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(new_state)
# ""3-8 is 11"" repeated twice, seems to be another calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=11"",
    resulting_state=(11,),
    comment='""3-8 is 11"" seems to be a calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""if we do 8... Then let's try to make it 5 it with 12 20 plus 9 31""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12+9=31"",
    resulting_state=(9, 31),
    comment='""if we do 8... Then let\'s try to make it 5 it with 12 20 plus 9 31""',
    result_calc_error=True,
)

# ""then minus 9 would be 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""31-9=22"",
    resulting_state=(22,),
    comment='""then minus 9 would be 22""',
)

curr_state = graph.move_to_node(start_state)
# ""12 plus 9 12 12 21 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 9, 21),
    comment='""12 plus 9 12 12 21""',
)

curr_state = graph.move_to_node(start_state)
# ""9 plus 8 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(9, 12, 17),
    comment='""9 plus 8 17""',
)

# ""plus 12 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+12=29"",
    resulting_state=(9, 29),
    comment='""plus 12 29""',
)

curr_state = graph.move_to_node(start_state)
# ""twelve times 8 ... 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(9, 9, 96),
    comment='""twelve times 8 ... 96""',
)

# ""17 minus 9"" participant seems to go back to the state with 17
curr_state = graph.move_to_node((9, 12, 17))
new_state = graph.explore_operation(
    curr_state,
    operation=""17-9=8"",
    resulting_state=(8, 12),
    comment='""17 minus 9""',
)
```"
3264,"[8,8,8,11]",11/8,180," So 8 times 8, I mean 8 plus 8 plus 8 is 24. How do we get rid of this 11? Oh wow, 88. Do 8 times 11, and that's 85 by 8. That gives us 11. So maybe 8 times 8 gives us 64. Oh, wee, y'all got me doing too much thinking. So, 64 divided by 11 plus 8. 8 times 8 is 64. 64, 64, 54, 54, 53, 54. 1, 2, 3, 4, 5. 1, 2, 3, 4, 5. 1, 2, 3, 4, 5. No, no! No! No! No! No, I don't want that! I don't want that! I don't want that! Oh One, two, three, four, five, six, seven, eight, nine, ten.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 plus 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+8=24"",
    resulting_state=(11, 24),
    comment='""8 plus 8 plus 8 is 24""',
)

# ""Do 8 times 11, and that's 85"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=85"",
    resulting_state=(8, 8, 85),
    comment='""Do 8 times 11, and that\'s 85"" - calculation error',
    result_calc_error=True,
)

# ""8 times 8 gives us 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""8 times 8 gives us 64""',
)

# ""64 divided by 11 plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/11+8=13.82"",
    resulting_state=(13.82,),
    comment='""64 divided by 11 plus 8""',
)

# The rest appears to be the participant counting and expressing frustration rather than performing calculations

```"
3265,"[2,3,6,6]",6x6/3x2,120," It's 24, so, hmm, I need to get rid of this 2 somehow, someway. So, let's see, 8, if I do, eww, how about 2 times 3? So, 2 times 3 equals 6, plus 6, plus 6. 6. 6. 5. 6. 2 times 2, plus 6, plus 6. 4. 4. 4. 5. Ehh, how am I going to get that right? Ah, it's not 24. Ehhh. Ehhh. six times thirty-six, so we do six times six equals thirty-six, divide that by three, and multiply that, um, let's just multiply that.","```python
start_state = (2, 3, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 6, 6),
    comment='""2 times 3""',
)

# ""plus 6, plus 6"" seems to be adding the remaining 6s
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6+6=18"",
    resulting_state=(18,),
    comment='""plus 6, plus 6"" seems to be adding the remaining 6s',
)

# Going back to start state for ""2 times 2, plus 6, plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2+6+6=16"",
    resulting_state=(3, 16),
    comment='""2 times 2, plus 6, plus 6""',
)

# ""six times six equals thirty-six""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 3, 36),
    comment='""six times six equals thirty-six""',
)

# ""divide that by three, and multiply that"" - participant found the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/3*2=24"",
    resulting_state=(24,),
    comment='""divide that by three, and multiply that""',
)
```"
3266,"[1,11,12,12]",12x1,180," So 12 times 12 is 144. Let's see. I can do 12. I can do 1 plus 11 equals 12. Time. Time. Time. 5 by 12, plus 12, I don't, I don't know. So I'm going to do 12 plus 12, that's 24. Times 1, 12 by 11, I don't know, 12, 12, 12, divide by 12. Hmm, plus 11, plus 1. All right, so let's do parentheses. 1 plus 11, which would be 12. If I do 12, divide by 12. So that's 12, that's 12, divide by 12. Hmm, plus, let's do 12, divide by 12. I don't know, I guess that wouldn't be right. So let's do 12 times 1. 1 is 12, and then times 11 is 5 by 12. Oh my gosh, let's do that.","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 12 is 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 times 12 is 144""',
)

# ""1 plus 11 equals 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 12, 12),
    comment='""1 plus 11 equals 12""',
)

# ""12 plus 12, that's 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12, that\'s 24""',
)

# ""12 by 11"" seems to mean multiply
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(1, 12, 132),
    comment='""12 by 11""',
)

# ""12, divide by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 1, 11),
    comment='""12, divide by 12""',
)

# ""1 plus 11, which would be 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+11=12"",
    resulting_state=(12, 12, 12),
    comment='""1 plus 11, which would be 12""',
)

# ""12 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*1=12"",
    resulting_state=(11, 12, 12),
    comment='""12 times 1""',
)

# ""times 11 is 5 by 12"" seems to be a calculation error or transcription error
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=60"",
    resulting_state=(1, 12, 60),
    comment='""times 11 is 5 by 12"" seems to be a calculation error',
    result_calc_error=True,
)
```"
3267,"[3,4,7,9]",(9x3)-7+4,105," Let's do 7 times 4 is 28. 28 minus 9 plus 30. So 3 times 4 plus 7 plus 9. Let me guess, how about 7 times 9 is 27. 9 times 3, that equals what? 27. So minus 7 plus 4.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(3, 9, 28),
    comment='""7 times 4 is 28""',
)

# ""28 minus 9 plus 30"" seems incomplete or unclear

# ""3 times 4 plus 7 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4+7+9=28"",
    resulting_state=(28,),
    comment='""3 times 4 plus 7 plus 9""',
)

# ""7 times 9 is 27"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=27"",
    resulting_state=(3, 4, 27),
    comment='""7 times 9 is 27"" - calculation error',
    result_calc_error=True,
)

# ""9 times 3, that equals what? 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(4, 7, 27),
    comment='""9 times 3, that equals what? 27""',
)

# ""So minus 7 plus 4"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-7+4=24"",
    resulting_state=(24,),
    comment='""So minus 7 plus 4""',
)
```"
3274,"[8,9,9,12]",(8x9)/(12-9),72," Okay, so we got 8, 9, 9, 9, 9, and then 12. What the heck? Okay, let's see. 12 plus 8 is 20. 9 times 9 is 18. That ain't gonna work. Let's see. We are going to... 8 times 9 is 64. Let me see. Okay, we are going to do... Okay, let's see. This will work. 12 minus 9.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(9, 9, 20),
    comment='""12 plus 8 is 20""',
)

# ""9 times 9 is 18"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=18"",
    resulting_state=(8, 12, 18),
    comment='""9 times 9 is 18"" - calculation error',
    result_calc_error=True
)

# ""8 times 9 is 64"" - calculation error 
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=64"",
    resulting_state=(9, 12, 64),
    comment='""8 times 9 is 64"" - calculation error',
    result_calc_error=True
)

# ""12 minus 9"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""12 minus 9""',
)

# Based on their final answer (8x9)/(12-9), they must have realized that 8*9=72 and 72/3=24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*9)/(12-9)=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they computed 8*9=72 and divided by 3"",
)
```"
3285,"[2,2,5,11]",2+2,180," What's your number? 5, 11. You gotta get 24? Yup. 5, 11. And the way it is, they actually use exponents in different order. Because when you're doing anything like that, it's like you have to do the multiplication, division first, and addition, and whatever's in parentheses. But you have to? It's damn expensive. I can't fuckin' remember how to do it, honestly. They don't give you very much time to think. Yeah, 2, 2, 5, and 11. And you gotta get 24. 2 times 2 is 4. Times 5 is 20. 2 times 2 is 25. 2 times 4 is 30. 2 times 4 is 20. 2 times 5 is a quarter. 2 times 5 is a quarter. This is a piece of cake. You're constantly thinking of the그,"" and it's completely wrong. and if you're trying to figure out a number, you gotta start thinking about the number of squares, and what's in parentheses, and then you gotta go back to the number one. Yeah, I'm the same way. Hmm. I have no idea. I really don't. Hmm. You don't talk enough, they can prompt you to verbalize your thoughts more. I'm trying to, I'm just looking at it. Nope. Nope. You gotta talk. You gotta talk it out. I guess I can't talk now, which I don't understand. Ha ha! Two times I was ten. Um. No. Wait a minute. Alright. Two. Two. Plus. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay.","```python
start_state = (2, 2, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 5, 11),
    comment='""2 times 2 is 4""',
)

# ""Times 5 is 20"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(11, 20),
    comment='""Times 5 is 20""',
)

# ""2 times 2 is 25"" - this appears to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=25"",
    resulting_state=(5, 11, 25),
    comment='""2 times 2 is 25"" - calculation error',
    result_calc_error=True,
)

# ""Two times I was ten"" - possibly means 2*5=10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(2, 10, 11),
    comment='""Two times I was ten"" - possibly means 2*5=10',
)

# The participant submitted ""2+2"" but this operation was already tried earlier and doesn't lead to 24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 5, 11),
    comment='""Two plus two"" - final submitted answer',
)
```"
3287,"[1,2,11,13]",,180," Let's use all these numbers. Twenty four minus thirteen is eleven. Let's do eleven plus thirteen. Plus two? Minus one? I don't think. Ugh, shut up. Shoot, shoot, shoot. Mm-mm. Damn. I'm trying to think. Damn. Eleven times two is twenty-two. This is eleven. Hold on. Two times. Um. Divided by one plus thirteen. Would that be it? No, that's not it. Mmm. Hold on. That's twenty-six. Thirteen plus two. Hello? I'm saying my thoughts. It's twenty-six. Mmm. Oh my gosh.","```python
start_state = (1, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Twenty four minus thirteen is eleven"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""Twenty four minus thirteen is eleven"" - participant seems to be working backwards',
)

# ""Let's do eleven plus thirteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(1, 2, 24),
    comment='""Let\'s do eleven plus thirteen""',
)

# ""Plus two? Minus one?"" participant considers adding 2 or subtracting 1 but doesn't actually compute it

# ""Eleven times two is twenty-two""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(1, 13, 22),
    comment='""Eleven times two is twenty-two""',
)

# ""Divided by one plus thirteen"" participant seems to be considering dividing something by (1+13)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+13=14"",
    resulting_state=(2, 11, 14),
    comment='""Divided by one plus thirteen"" - participant computes 1+13 first',
)

# ""Thirteen plus two""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(1, 11, 15),
    comment='""Thirteen plus two""',
)

# ""That's twenty-six"" - not clear what operation led to 26

```"
3290,"[6,8,10,12]",(12,180," 10 times 12, 8. That's 15 plus 6. No, that wouldn't work. 12 times 6, 8. Let me try again. Let me try this. Plus 8. Oh, shoot, shoot, shoot. I meant to put the 8 in parentheses. Oh, crap. You want me to say my every single thought? What do you want me to say? I'm saying the numbers out loud, so how much do you want me to say? You guys are confusing. Don't need to talk every second. 120. That's from 1210. 120 divided by 6. 8 divided by 12. No, that's not going to work. 80 divided by 6. That won't work either. Oh, 12 times 8. I'm saying my fucking thoughts. God. 96 divided by 6 is 16. Oh, actually. Hold on. I think we got somewhere with this, so. 12 times 8. Times 8. 96. Divided by 6. That's 16. Wait, hold on. 96 divided by 6. No, I think that was the wrong one. This annoying pop-up keeps distracting me.","```python
start_state = (6, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 12"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(6, 8, 120),
    comment='""10 times 12""',
)

# ""12 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(8, 10, 72),
    comment='""12 times 6""',
)

# ""120 divided by 6""
curr_state = graph.move_to_node((6, 8, 120))  # moving back to state with 120
new_state = graph.explore_operation(
    curr_state,
    operation=""120/6=20"",
    resulting_state=(8, 20),
    comment='""120 divided by 6""',
)

# ""80 divided by 6"" - participant likely got 80 from 10*8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(6, 12, 80),
    comment='""80 divided by 6"" - participant likely got 80 from 10*8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80/6=13.33"",
    resulting_state=(12, 13.33),
    comment='""80 divided by 6""',
)

# ""12 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(6, 10, 96),
    comment='""12 times 8""',
)

# ""96 divided by 6 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/6=16"",
    resulting_state=(10, 16),
    comment='""96 divided by 6 is 16""',
)
```"
3291,"[4,5,5,8]",,180," Let me see, 5, 5, 8, 8 times 4, minus 5, minus 5, no, oh, 5 times 5, fuck off, 5 times 5, plus 8, minus 5, mm-mm, or 5 times 8, plus 40, minus 5, minus, ugh, god, 8 times 4, is 5, divided by 5, ugh, 8 times 5, 40, minus 8, mm, shit, shit, shit, shit, shit, shit. Ugh, 5 times, 5 times 8 is 40. That's the highest number. Mmm. Mmm, mmm, . . . . . . . . . . . . 5 times 5. 8. Shut up. 40 times 8 is 5. That still doesn't equal it. 20. That doesn't equal. I have to do this. Divide it by 4 plus 5. Oh, that's not going to work. Let me do 8 times 4 again. How do these numbers work? 5.","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 4, minus 5, minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(5, 5, 32),
    comment='""8 times 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-5-5=22"",
    resulting_state=(22,),
    comment='""minus 5, minus 5""',
)

# Move back to start for next operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 8, 25),
    comment='""5 times 5""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+8=33"",
    resulting_state=(4, 33),
    comment='""plus 8""',
)

# Move back to start for next operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(4, 5, 40),
    comment='""5 times 8 is 40""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40/(4+5)=4.44"",
    resulting_state=(4.44,),
    comment='""Divide it by 4 plus 5""',
)

# Move back to start for next operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(5, 5, 32),
    comment='""8 times 4 again""',
)
```"
3296,"[4,5,6,10]",(5x4)+10-6,55," Alright, so these are higher numbers. Um, 10, if I could get to 6, could I get to 6? Yes, okay, so I could do 10 minus 5, no, no, no, no, hold on. 10 divided by 5 would be 2, no, shoot, never mind, back to the train. Um, 5, 10, 20, oh, okay, hold on, 5, 5 times 4 is 20, 20 plus 10 is 30, and 30 minus 6, 24.","```python
start_state = (4, 5, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I could get to 6"" suggests setting a subgoal
graph.set_subgoal(
    (6,),
    state_after_subgoal=(24,),
    comment='""if I could get to 6, could I get to 6?""',
)

# ""10 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(4, 5, 6),
    comment='""10 minus 5""',
)

# ""10 divided by 5 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 4, 6),
    comment='""10 divided by 5 would be 2""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(6, 10, 20),
    comment='""5 times 4 is 20""',
)

# ""20 plus 10 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+10=30"",
    resulting_state=(6, 30),
    comment='""20 plus 10 is 30""',
)

# ""30 minus 6, 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-6=24"",
    resulting_state=(24,),
    comment='""30 minus 6, 24""',
)
```"
3298,"[3,5,10,10]",,180," Okay, we've got 10 and 10 again, so 10 and 10 is 20. I can't get to 4 with 3 and 5, can I? If I did 10 times 5, no. 10 and 10, um, what am I going to do with that? 10 minus 3 is 7. 10 minus 5 is 5. 5 minus 3 is 15. I get to 25. Um, 10 plus 3, 28. 10 plus 3, 28. 10 is 1. That's not going to help me. Um, 3 times 10 is 30. 30 minus 10, nope. 10 minus 3 is 7, nope. 28, no. Shoot. Um, 10, 3, 13, 10, 5. Okay. 10 divided by 5 is 2. Nope. 2 times 10 is 20, plus 3 is 23. Okay, so 10. I don't know what to do with these 10s, or this 3 or 5. Shoot. Um, 10 minus 5. Oh, I already did that, didn't I? 5. How am I supposed to get to, like, a 6 or an 8 or a 4? Get to a 6. But I can't get to a 4 to go with that. Get to a 20. I can get to... Shoot, I really don't know how to solve this. What am I missing? 10 divided by 5 is 2. 2... 2.","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 and 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(3, 5, 20),
    comment='""10 and 10 is 20""',
)

# ""10 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(3, 10, 50),
    comment='""10 times 5""',
)

# ""10 minus 3 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 10),
    comment='""10 minus 3 is 7""',
)

# ""10 minus 5 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 10),
    comment='""10 minus 5 is 5""',
)

# ""5 minus 3 is 15"" seems to be a transcription error or calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=15"",
    resulting_state=(10, 10, 15),
    comment='""5 minus 3 is 15"" seems to be a transcription or calculation error',
    result_calc_error=True,
)

# ""I get to 25"" - not clear how
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+5=25"",
    resulting_state=(3, 25),
    comment='""I get to 25""',
)

# ""10 plus 3, 28"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=28"",
    resulting_state=(5, 10, 28),
    comment='""10 plus 3, 28"" seems to be a calculation error',
    result_calc_error=True,
)

# ""3 times 10 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(5, 10, 30),
    comment='""3 times 10 is 30""',
)

# ""30 minus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-10=20"",
    resulting_state=(5, 20),
    comment='""30 minus 10""',
)

# ""10, 3, 13"" seems to be adding
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(5, 10, 13),
    comment='""10, 3, 13"" seems to be adding',
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 10),
    comment='""10 divided by 5 is 2""',
)

# ""2 times 10 is 20, plus 3 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10+3=23"",
    resulting_state=(23,),
    comment='""2 times 10 is 20, plus 3 is 23""',
)

# ""10 minus 5"" participant realizes they already tried this
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 10),
    comment='""10 minus 5"" participant realizes they already tried this',
)

# The participant then talks about wanting to get to various numbers (6, 8, 4, 20) but doesn't actually try operations

# ""10 divided by 5 is 2"" participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 10),
    comment='""10 divided by 5 is 2"" participant tries this operation again',
)
```"
3300,"[1,6,6,11]",1+6+6+11,41," 11 times 2 would be 22. 11 minus 1 is 10, plus 12 is 22. 6 minus 1 is 5, 5 times 6 is 30, minus 11, that won't help. 6 plus 6 is 12. Wait a second, if I just add all these up it'll work. Gosh darn it.","```python
start_state = (1, 6, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 2 would be 22"" - participant seems to be trying to get to 24 by first getting to 22
graph.set_subgoal((22,), comment='""11 times 2 would be 22"" - participant sets subgoal of getting to 22')

# ""11 minus 1 is 10, plus 12 is 22"" - participant likely gets 12 from 6+6
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-1)+(6+6)=22"",
    resulting_state=(22,),
    comment='""11 minus 1 is 10, plus 12 is 22""',
)

# ""6 minus 1 is 5, 5 times 6 is 30, minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-1)*6-11=19"",
    resulting_state=(19,),
    comment='""6 minus 1 is 5, 5 times 6 is 30, minus 11""',
)

# ""6 plus 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(1, 11, 12),
    comment='""6 plus 6 is 12""',
)

# ""Wait a second, if I just add all these up it'll work""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6+6+11=24"",
    resulting_state=(24,),
    comment='""Wait a second, if I just add all these up it\'ll work""',
)
```"
3306,"[1,2,3,8]",(1,180," Okay. It's 4, 5, okay, no. How we can make 24 using this 4 character? Okay. We're going to make 4 characters using the number of the first number. Did I do it right? **** **** three into 24 okay I'm talking loudly now 4 4 4 4 26 how we can make it 24 24 18 to 324 but we have to use it all for number okay okay okay okay two plus one three into three sorry I have to delete two plus one in two three was blackest closing do it okay incorrect why incorrect six six okay six three six three three into three three two three okay okay okay okay okay okay divided by three into eight no okay one","```python
start_state = (1, 2, 3, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""two plus one three""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 3, 8),
    comment='""two plus one three""',
)

# ""divided by three into eight"" seems to be trying to divide 8 by 3
new_state = graph.explore_operation(
    curr_state,
    operation=""8/3=2.67"",
    resulting_state=(1, 2, 2.67),
    comment='""divided by three into eight""',
)

# Much of the transcript appears to be the participant talking about the task requirements or making unclear references. There are many numbers mentioned but without clear operations being performed on them. The participant seems to be struggling and mostly repeating numbers without performing clear calculations.

```"
3317,"[3,7,7,9]",,180," And maybe I need to start using a calculator because I cannot do this mental math at all. This is so hard for me. 9 times 7 is 63. Divided by 3 is 21. Oh, there we go. 9 times 7 divided by 3. Oh, dang it. See? Messed up. I was like, there we go, but it's wrong. So I thought I had another 3. Yeah, these are not, this is not, I don't think you can create 24. So 9 times 3 is 63. If you divide that by 3, you get 21. And then you need to add 3 more to get 24. But I have 7. This does not work. Okay, let me try it again. I'm using a calculator because I can't just, it's not telling me the answer. I don't know. It's, okay, let's do 7 times 7 equals 49. Divided by 3. No, that doesn't work. It's 16.3. 7 times 7, 49 divided by 9. No, this does not work. 9 times 3. Equals 27. Yeah, I don't see how any of this works. Because if I do 9 times 3, it equals 27. And then what? Then I add 7 and take away 7? I mean, oh, maybe I, okay, 9 times 3 is 27. 7 times 7. 49 minus 27 is 22. See? This does not work. This does not work. I'm trying different equations. Because even if I try this, this does not work. I'm really trying. I'm trying here. I was feeling, like, a little defeated, and now I'm like, hmm, maybe these aren't possible. Maybe this is not, I don't know. I'm thinking it's not possible, but it probably is. And I'm just second-guessing myself because... I'm not that great at math, I guess. I don't know. I don't even know what to do from here. What's 9 plus 7 plus 7 plus 3? 26. 26.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 7 is 63. Divided by 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7/3=21"",
    resulting_state=(7, 21),
    comment='""9 times 7 is 63. Divided by 3 is 21""',
)

# ""9 times 3 is 63"" - this appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=63"",
    resulting_state=(7, 7, 63),
    comment='""9 times 3 is 63"" - this appears to be a calculation error',
    result_calc_error=True,
)

# ""7 times 7 equals 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7 equals 49""',
)

# ""Divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/3=16.33"",
    resulting_state=(9, 16.33),
    comment='""Divided by 3""',
)

# ""49 divided by 9""
curr_state = graph.move_to_node((3, 9, 49))
new_state = graph.explore_operation(
    curr_state,
    operation=""49/9=5.44"",
    resulting_state=(3, 5.44),
    comment='""49 divided by 9""',
)

# ""9 times 3. Equals 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""9 times 3. Equals 27""',
)

# ""7 times 7. 49 minus 27 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7""',
)

# The participant computes 49-27 but they got 27 from a previous computation that's not in the current state
# So we'll move back to start and compute 9*3=27 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""9 times 3 equals 27""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7""',
)

# ""What's 9 plus 7 plus 7 plus 3? 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+7+3=26"",
    resulting_state=(26,),
    comment='""What\'s 9 plus 7 plus 7 plus 3? 26""',
)
```"
3321,"[1,6,8,13]",13+6,180," Okay, 1, 6, 8, and 13. Those are my numbers right now. 8 times 6 is 48. 48 divided by 13? I think that's divisible now. 13 times 6 divided by 8? Nope. 7 times 8 minus 13? No. 7, 9 times 6, 54 minus 13 is not correct. 8 times 13, 8. 7 is 104 divided by 6. It does not work. 14 times 6 is 84 divided by 8? See? I don't know. I don't know. Maybe I can get lucky again. Okay, 8. Let's see. 8 times 6 plus 1 divided by 13. No. Why not? 13 times 6 plus 1 divided by 8. Oh, maybe something like that. You know what? I bet you it is, because it's... Okay, 13 times 6 equals 78. No. No, no, no, no, no. Okay, 13 times 8 equals 104 divided by 6. No. 104. Oh, gosh. This is hard. 8 times 6 is 48 minus 13? No, I don't get it. I don't get this. I don't get this at all. Okay. 6 plus 1 times 8 minus 13, maybe? No idea. 13 times 1 plus 6 plus 8. No? Oh, come on. 13 plus 8 plus 6. Okay, what if I add them up? 13 plus 6 is 19. Oh, okay. 13... I think it's 13 plus 6.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 6 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(1, 13, 48),
    comment='""8 times 6 is 48""',
)

# ""48 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/13=3.69"",
    resulting_state=(1, 3.69),
    comment='""48 divided by 13""',
)

# ""13 times 6 divided by 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6/8=9.75"",
    resulting_state=(1, 9.75),
    comment='""13 times 6 divided by 8""',
)

# ""8 times 13... is 104 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*13/6=17.33"",
    resulting_state=(1, 17.33),
    comment='""8 times 13... is 104 divided by 6""',
)

# ""8 times 6 plus 1 divided by 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*6+1)/13=3.77"",
    resulting_state=(3.77,),
    comment='""8 times 6 plus 1 divided by 13""',
)

# ""13 times 6 plus 1 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*6+1)/8=9.88"",
    resulting_state=(9.88,),
    comment='""13 times 6 plus 1 divided by 8""',
)

# ""13 times 6 equals 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(1, 8, 78),
    comment='""13 times 6 equals 78""',
)

# ""13 times 8 equals 104 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*8/6=17.33"",
    resulting_state=(1, 17.33),
    comment='""13 times 8 equals 104 divided by 6""',
)

# ""8 times 6 is 48 minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6-13=35"",
    resulting_state=(1, 35),
    comment='""8 times 6 is 48 minus 13""',
)

# ""6 plus 1 times 8 minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+1)*8-13=43"",
    resulting_state=(43,),
    comment='""6 plus 1 times 8 minus 13""',
)

# ""13 times 1 plus 6 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*1+6+8=27"",
    resulting_state=(27,),
    comment='""13 times 1 plus 6 plus 8""',
)

# ""13 plus 8 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8+6=27"",
    resulting_state=(1, 27),
    comment='""13 plus 8 plus 6""',
)

# ""13 plus 6 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(1, 8, 19),
    comment='""13 plus 6 is 19""',
)
```"
3331,"[1,3,3,10]",3x(-3+10+1),103," How do I get to 24 with this at 30? 7 3 times 3 is 9 9 3 times 1 3 minus 1 I have to make it 8 somehow. I can make 8 too with it, right? So if I do minus the 3, let's see, 3 times So first I have to do 3, 1, 2, 3, that's not going to be 8. minus 3 plus 10 minus 3 plus 10 is 7 plus 1 minus 3","```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""3 minus 1"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3-1=2"",
    resulting_state=(2, 3, 10),
    comment='""3 minus 1""',
)

# ""I have to make 8 somehow"" suggests participant is setting a subgoal
graph.set_subgoal(
    (8,),
    state_after_subgoal=(24,),
    comment='""I have to make 8 somehow""',
)

# ""minus 3 plus 10 is 7 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3+1=8"",
    resulting_state=(3, 8),
    comment='""minus 3 plus 10 is 7 plus 1""',
)

# Based on their final answer of 3x(-3+10+1), they must have then multiplied this 8 by 3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment=""Based on final answer, participant multiplied 8 by remaining 3"",
)
```"
3338,"[6,6,8,9]",(9x8)(6x6,180," Target number is 6, 6, 8, 9. If I add all these up, that's way more than I need. Let's see, 6 times 6, that's 36 divided by 9. 36 divided by 9 is 36 divided by 9 is 3. Okay, so 6 times 6 is equal to 36 divided by 9 is going to equal 3, and then we're going to times that times 8, and that should give me 24. Nope, that does not give me 24. Why not? Why does that not give me 24? Oh, cause multiplication goes before division. Okay, so can I do a double parentheses? To do 6 times 6 times 6, close parentheses and divide that by not wait close that parentheses, then divide that by 9 close parentheses I feel like that should be a good answer. Maybe I did it backwards? Let's try that again. 8 times 9 divided by 6 times 6. Okay, that didn't work. Okay. I understand that. By 6. I am speaking my thoughts out loud. 6 times 6. Close parentheses. Submit answer. I have... I don't know. Alright, how about 9? 9 times 8. Close parentheses. Divided by 6 times...","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 6, that's 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(8, 9, 36),
    comment='""6 times 6, that\'s 36""',
)

# ""36 divided by 9 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/9=4"",
    resulting_state=(4, 8),
    comment='""36 divided by 9 is 3"" - participant makes calculation error',
    result_calc_error=True,
)

# ""and then we're going to times that times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(32,),
    comment='""and then we\'re going to times that times 8""',
)

# Participant realizes this won't work due to order of operations

# ""6 times 6 times 6"" participant tries a new approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(6, 8, 9, 36),
    comment='""6 times 6 times 6""',
)

# ""divide that by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/9=4"",
    resulting_state=(4, 6, 8),
    comment='""divide that by 9""',
)

# ""8 times 9 divided by 6 times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9/(6*6)=2"",
    resulting_state=(2,),
    comment='""8 times 9 divided by 6 times 6""',
)

# ""9 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(6, 6, 72),
    comment='""9 times 8""',
)

# The participant seems to be trying different combinations but doesn't complete any more calculations before time runs out
```"
3340,"[1,5,10,12]",(10/5)x12x1,94," Target number 24, 10 minus 5 is 5, 5, nope. 10 plus 12, okay, 1 plus 5 is 6, no. Okay, 12 times 5, that would be 60, no. 10 and 5 multiplied is 50, no. 12, maybe if I do 9? 10 plus 12 is 24, no. 10 plus 12 is 22, um, can't do that. How about 10 divided by, 10 divided by 5 is 2, 2 times 12 times 1. Alright, 10 divided by 5 equals 2, plus, no, times 12, times 1. Submit answer.","```python
start_state = (1, 5, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(1, 5, 12),
    comment='""10 minus 5 is 5""',
)

# ""1 plus 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(6, 10, 12),
    comment='""1 plus 5 is 6""',
)

# ""12 times 5, that would be 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(1, 10, 60),
    comment='""12 times 5, that would be 60""',
)

# ""10 and 5 multiplied is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(1, 12, 50),
    comment='""10 and 5 multiplied is 50""',
)

# ""10 plus 12 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=24"",
    resulting_state=(1, 5, 24),
    comment='""10 plus 12 is 24"" - calculation error',
    result_calc_error=True,
)

# ""10 plus 12 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(1, 5, 22),
    comment='""10 plus 12 is 22""',
)

# ""10 divided by 5 is 2, 2 times 12 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*12*1=24"",
    resulting_state=(24,),
    comment='""10 divided by 5 is 2, 2 times 12 times 1""',
)

```"
3344,"[8,9,12,13]",13-(9-8)+12,126," As you perform the task, try to say aloud everything that comes to mind 21 minus 9 is 11. 11 plus 12 is 23. So almost, but not quite there. Um, 9 minus 8 is 1. 13, let's see, 13 minus 9 minus 8 is 12 plus 12.","```python
start_state = (8, 9, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""21 minus 9 is 11"" - participant likely added 8+13=21 first
new_state = graph.explore_operation(
    curr_state,
    operation=""8+13=21"",
    resulting_state=(9, 12, 21),
    comment=""Participant seems to be computing 8+13 first"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21-9=11"",
    resulting_state=(11, 12),
    comment='""21 minus 9 is 11""',
    result_calc_error=True,
)

# ""11 plus 12 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(23,),
    comment='""11 plus 12 is 23""',
)

# ""9 minus 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 12, 13),
    comment='""9 minus 8 is 1""',
)

# ""13 minus 9 minus 8 is 12 plus 12"" - this seems to be a transcription error since they submitted 13-(9-8)+12
new_state = graph.explore_operation(
    curr_state,
    operation=""13-(9-8)+12=24"",
    resulting_state=(24,),
    comment=""Based on their submitted response"",
)
```"
3348,"[4,8,8,12]",,180," Okay, this one, let's see. 12. 12 times 2 is 24. So we could try to do 2, uh, hold on. 12. 12 minus 8 is 4. 4. 4. 4 times 4. Okay. 12 divided by 8 equals 4. 4 plus 8, or 4 plus 4. Hold on, I had it in my head when I left. 4. 4. 12 divided by... Oh, wait, hold on, actually. 12 divided by 4 is 3. 3. No, that won't work either. 8 divided by 4 is 2. 2 plus 12 is 14. 14 plus 8 doesn't equal 24. Mmm, we could do 8 divided by 8 is 1. Okay, that won't work either. 8 divided by 4 is 2. 2 times... 2 plus 8 is 10. 12... 8 divided... 8 divided by 8 is 1. Mmm, 8, or... 12 divided by 4 is 3. 3 plus 8 is 11. Okay. Mmm... Mmm... Mmm... 8 plus 8 is 16. 16. 8 plus... 8 plus... 4 is 12. Mmmm... 12 plus 4 is 16. 16. 16. 16 divided by 8 is 2.","```python
start_state = (4, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 is 24"" - participant seems to set a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 is 24""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 4, 8),
    comment='""12 minus 8 is 4""',
)

# ""12 divided by 8 equals 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8=4"",
    resulting_state=(4, 4, 8),
    comment='""12 divided by 8 equals 4""',
    result_calc_error=True,  # 12/8 = 1.5, not 4
)

# ""12 divided by 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 8, 8),
    comment='""12 divided by 4 is 3""',
)

# ""8 divided by 4 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 8, 12),
    comment='""8 divided by 4 is 2""',
)

# ""2 plus 12 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+12=14"",
    resulting_state=(8, 14),
    comment='""2 plus 12 is 14""',
)

# ""14 plus 8 doesn't equal 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+8=22"",
    resulting_state=(22,),
    comment='""14 plus 8 doesn\'t equal 24""',
)

# ""8 divided by 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 4, 12),
    comment='""8 divided by 8 is 1""',
)

# ""8 divided by 4 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 8, 12),
    comment='""8 divided by 4 is 2""',
)

# ""2 plus 8 is 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+8=10"",
    resulting_state=(10, 12),
    comment='""2 plus 8 is 10""',
)

# ""8 divided by 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 4, 12),
    comment='""8 divided by 8 is 1""',
)

# ""12 divided by 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 8, 8),
    comment='""12 divided by 4 is 3""',
)

# ""3 plus 8 is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+8=11"",
    resulting_state=(8, 11),
    comment='""3 plus 8 is 11""',
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(4, 12, 16),
    comment='""8 plus 8 is 16""',
)

# ""8 plus 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(8, 12, 12),
    comment='""8 plus 4 is 12""',
)

# ""12 plus 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4=16"",
    resulting_state=(8, 8, 16),
    comment='""12 plus 4 is 16""',
)

# ""16 divided by 8 is 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16/8=2"",
    resulting_state=(2, 8),
    comment='""16 divided by 8 is 2""',
)
```"
3350,"[3,5,12,12]",(12x5)-(12x3),135," 12 divided by 3 is 4. 12 divided by 12. 12 minus 3 is 9. 9, okay, that won't work either. 12 plus 5 is 17. 17 plus 12. That's too much. 3 or 12 divided by 3 is 4. 12 divided by 3 is 4. That's not going to work either. 12. 12 plus 12 is 24. 24 divided by 3 is 7. Okay. 5 Plus 12 is 17. Plus 12 divided by 3, no. 3 plus 12 is 15 no 12 times 3, wait, 12 times 5 is 60, 0 minus 12 times 3.","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 divided by 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 5, 12),
    comment='""12 divided by 3 is 4""',
)

# ""12 minus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(5, 9, 12),
    comment='""12 minus 3 is 9""',
)

# ""12 plus 5 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+5=17"",
    resulting_state=(3, 12, 17),
    comment='""12 plus 5 is 17""',
)

# ""17 plus 12"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+12=29"",
    resulting_state=(3, 29),
    comment='""17 plus 12""',
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 5, 24),
    comment='""12 plus 12 is 24""',
)

# ""24 divided by 3 is 7"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24/3=7"",
    resulting_state=(5, 7),
    comment='""24 divided by 3 is 7""',
    result_calc_error=True,
)

# ""5 Plus 12 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+12=17"",
    resulting_state=(3, 12, 17),
    comment='""5 Plus 12 is 17""',
)

# ""3 plus 12 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+12=15"",
    resulting_state=(5, 12, 15),
    comment='""3 plus 12 is 15""',
)

# ""12 times 5 is 60"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(3, 12, 60),
    comment='""12 times 5 is 60""',
)

# ""minus 12 times 3"" - participant is computing 60-(12*3)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60-(12*3)=24"",
    resulting_state=(24,),
    comment='""minus 12 times 3""',
)
```"
3363,"[3,3,6,11]",6x3+(11-3),180," You know I'm fucking kidding. Fucking give me that look, man. Okay, so... There's nothing you can do about it. We're here. We're clear. Eleven minus... Your mom wants that. Be honest here. He'll stop. He can have it. No, he can not because he's going to break it. You're going to break it. It's what you're going to fucking do. And you need to stop running around just screaming. For that. I don't want to... Get away, get away, get away, get away from me. Give me a bit of tea. Six times six is thirty-six. So that wouldn't do. I need to get eighteen. Plus eleven minus three. So... Let me see. Okay, I get it. So if I did... Eleven minus three. That would be eight. Six times three is eighteen. Alright. So six times four is twenty-four. If I did three plus three, it would be six. Times six would be thirty-six. Minus eleven. That wouldn't work. So... If I did six times three... That would be eighteen. Alright. Plus eleven... Eighteen. That would be twenty... I don't know. I need... Eighteen. So I need... Three minus eleven is going to be eight. Alright. Eight... Eight... Eight... How about this, we do 6 times 3, plus 11 times 3. That was totally it!","```python
start_state = (3, 3, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# A lot of the initial transcript appears to be the participant dealing with distractions

# ""I need to get eighteen""
graph.set_subgoal((18,), comment='""I need to get eighteen""')

# ""Eleven minus three. That would be eight.""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(3, 6, 8),
    comment='""Eleven minus three. That would be eight.""',
)

# ""Six times three is eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 11, 18),
    comment='""Six times three is eighteen""',
)

# ""If I did three plus three, it would be six. Times six would be thirty-six""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*6=36"",
    resulting_state=(11, 36),
    comment='""If I did three plus three, it would be six. Times six would be thirty-six""',
)

# ""minus eleven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-11=25"",
    resulting_state=(25,),
    comment='""minus eleven""',
)

# ""If I did six times three... That would be eighteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 11, 18),
    comment='""If I did six times three... That would be eighteen""',
)

# ""plus eleven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+11=29"",
    resulting_state=(3, 29),
    comment='""plus eleven""',
)

# ""Three minus eleven is going to be eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(3, 6, 8),
    comment='""Three minus eleven is going to be eight""',
)

# Finally, based on their submitted response ""6x3+(11-3)"", they combine the operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3+(11-3)=26"",
    resulting_state=(26,),
    comment='Based on submitted response ""6x3+(11-3)""',
)
```"
3365,"[3,5,7,9]",,180," You can beat yourself up over it, or just talk them up to you and not even get paid for it. There you go, that'll be enough. I love you. I love you. I love you too. I love you too. I love you. And you said that we're going to play some Xbox or something? I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. I don't know. It's so hard. It's too hard. Yeah. I'm going to go on a fucking sweet hike in the mountains, you know? Nine times seven is 36? Nine times seven? No, nine times eight is 36, isn't it? Nine times seven is 63. 63? Okay. Nine, 18, 27. Nine times three is 27. Nine, 18, 27. 36. 45. 54. 63. That would be 63. That's too high. Nine times five would be 45. Okay. 45. Oh my god. So. Nine. Nine. Three times five plus nine. You have to use the parentheses. You have to use order operations. You have to have sum in parentheses and addition or subtraction and you have to have that either multiplied, divided, added to the rest of the numbers. Put the nine in parentheses, put the three on the outside, and then minus the five. You have to use all the numbers. Oh, you have to use all the numbers. All of those numbers. Can you throw a sheet on my hand? Okay. Okay. Okay. Okay.","```python
start_state = (3, 5, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# A lot of the transcript appears to be unrelated conversation. Let's focus on the mathematical operations mentioned:

# ""Nine times seven is 36?"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=36"",
    resulting_state=(3, 5, 36),
    comment='""Nine times seven is 36?"" - participant makes calculation error',
    result_calc_error=True,
)

# ""Nine times seven is 63"" - participant corrects earlier error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 5, 63),
    comment='""Nine times seven is 63"" - participant corrects earlier error',
)

# ""Nine times three is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(5, 7, 27),
    comment='""Nine times three is 27""',
)

# ""Nine times five would be 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(3, 7, 45),
    comment='""Nine times five would be 45""',
)

# ""three times five plus nine""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5+9=24"",
    resulting_state=(7, 24),
    comment='""three times five plus nine""',
)
```"
3366,"[2,6,8,9]",,180," Target number 24. You have to use every single one. You have to use all those numbers, you have to use parentheses, you have to use the order operations. Or we will make it about 5 minutes. And we will name an initiative everybody that we know has to regroup in this list. Check all those numbers that you think would fit, so that you take away none of them. ä وجót miť aces tio boring. Alexa, set a 50 second timer. You still have to talk later. Oh. 8 times 6 is 48. Damn. 8 times 6 is 16. That's 9 less. Fuck. Poor guy. Not very easy. That's not that easy. No. I never even said it wasn't that easy. Well, I know. I didn't say that you did. I think 9 times, or 8 times 2 is 16 plus 9 is 24. Gotta use the 6. Yeah, I know. I'm trying to figure it out. Let's see. 9 plus 8 is 17. 17 plus 6. Let's see. 19 times 8 is 20. 21 times 8 is 23. So that would make it a little bit too far. 9 times 2 is 18. 18 plus 8 is 24. Yeah. 9 times 2 is 18. 18 plus 8 is 24. Yeah. Yeah. You're taking the 6 away. You make it 20. 8 times 8 is 21. Get it full. 13. Get it full. Times 2 is 26. Full! Get it. Get it. Plus 9. Plus 9. This would be 22. 24.","```python
start_state = (2, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# First there's some general discussion about the rules and setting a timer

# ""8 times 6 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(2, 9, 48),
    comment='""8 times 6 is 48""',
)

# ""8 times 6 is 16"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=16"",
    resulting_state=(2, 9, 16),
    comment='""8 times 6 is 16"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""8 times 2 is 16 plus 9 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2+9=25"",
    resulting_state=(6, 25),
    comment='""8 times 2 is 16 plus 9 is 24"" but this actually equals 25',
)

# ""9 plus 8 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(2, 6, 17),
    comment='""9 plus 8 is 17""',
)

# ""17 plus 6"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+6=23"",
    resulting_state=(2, 23),
    comment='""17 plus 6""',
)

# ""9 times 2 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(6, 8, 18),
    comment='""9 times 2 is 18""',
)

# ""18 plus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8=26"",
    resulting_state=(6, 26),
    comment='""18 plus 8 is 24"" but this actually equals 26',
)

# The rest of the transcript is unclear or contains calculation errors
```"
3372,"[1,1,5,8]",((5-1)-1)x8,47," Okay, 24. Oh, wow. This is just like, uh... This is 3 times 8. So, minus 1, minus 1, yeah, two parentheses, right? I don't know if this is 5 minus 1, minus 1, times 8.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""This is 3 times 8"" suggests the participant is working backward from 24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""This is 3 times 8"" suggests participant is working backward from 24',
)

# ""So, minus 1, minus 1"" and ""5 minus 1, minus 1, times 8"" shows how they plan to get 3
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1-1=3"",
    resulting_state=(3, 8),
    comment='""5 minus 1, minus 1""',
)

# Then they multiply by 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""times 8""',
)
```"
3375,"[8,9,9,12]",,180," 12 plus 9 is 21. Not a lot of addition. Just like, bring it all together. I'm like, nah, I don't have any idea. Is it 4 times 9? What's 4 times 9? I don't know. What's 4 times 9 again? 36 minus 9, no, no. It's gonna be like 9 times, just times and divided by, ugh, that's what it's gonna be. And I'm no good with that. 90 minus 8 times that, yeah. No, it's not gonna be that, holy cow. Did I do something stupid? is one okay nine divided by eight is or not not nine nine minus eight one oh nine times nine is like what 91 i know it's 8 times 12. it's like stupid like that minus no that's yeah that's not it the other way times nine divided by eight yeah i have no clue nope of course that's not it i don't know if the difference is 24 or not um that was just a guess three times eight three three times eight minus nine okay nine times nine is like what 91 i know it's 8 times 12. it's like stupid like that i wonder if it's 12 minus nine times eight yeah three times the eight is really important how many permutations i can think of i i feel like i'm going through every one but the right permutation and i just can't think about this because it's super creative that's really informative Think of it. What the heck?","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 9 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 9, 21),
    comment='""12 plus 9 is 21""',
)

# ""Is it 4 times 9?"" - participant may have gotten 4 from 12/3, but we can't include this operation since they don't have 4

# ""nine minus eight one""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 9, 12),
    comment='""nine minus eight one""',
)

# ""nine times nine is like what 91"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=91"",
    resulting_state=(8, 12, 91),
    comment='""nine times nine is like what 91""',
    result_calc_error=True,
)

# ""8 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(9, 9, 96),
    comment='""8 times 12""',
)

# ""12 minus nine times eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(9, 24),
    comment='""12 minus nine times eight""',
)

```"
3385,"[2,3,3,7]",(7-3)x3x2,90," All right, target number is 24. Let me see, 7 times 3, that's 21. 21 minus, 21 plus 3 is 24. Well, we got to use all the numbers. 6 times 2 is 12 plus 7. It's not going to work. 14, that's 6. 6 times 3, that's 18. 18 plus 7, that's 25. That's not going to work. Okay, here we go. Let's do parentheses, 3. Let me see, 3. Let's delete that. Let's see, 7 times 3, that's 21. 7 times 2, that's 14. I just had it in my head, 14. Well, then we need 10. Okay, 7 minus 3 is 4. 4 times 3 is 12. Times 2. So, 4 times 3 is 12. Times 2 is 24.","```python
start_state = (2, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 3, that's 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(2, 3, 21),
    comment='""7 times 3, that\'s 21""',
)

# ""21 plus 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+3=24"",
    resulting_state=(2, 24),
    comment='""21 plus 3 is 24""',
)

# ""6 times 2 is 12"" - participant likely got 6 from 3+3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*2=12"",
    resulting_state=(7, 12),
    comment='""6 times 2 is 12"" - participant likely got 6 from 3+3',
)

# ""plus 7"" from current state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(19,),
    comment='""plus 7""',
)

# ""6 times 3, that's 18"" - participant likely got 6 from 3+3 again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*3=18"",
    resulting_state=(2, 7, 18),
    comment='""6 times 3, that\'s 18""',
)

# ""18 plus 7, that's 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(2, 25),
    comment='""18 plus 7, that\'s 25""',
)

# ""7 times 2, that's 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 3, 14),
    comment='""7 times 2, that\'s 14""',
)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(2, 3, 4),
    comment='""7 minus 3 is 4""',
)

# ""4 times 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(2, 12),
    comment='""4 times 3 is 12""',
)

# ""Times 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""Times 2 is 24""',
)
```"
3390,"[4,5,5,9]",(4x5)+(9)-5,73," Target number is 24. 9 times 5 is 45. Minus 4 is 41. Minus 5 is 36. That's not going to work. 5 times 5 is 25. 25 plus 9. Let's see, 25 plus 9. It was what, 34 minus 4? That's not going to work. 9 minus 4, 5 is 4. 4 times 4 is 16 plus 5. That's not going to work. That's 21. 9 minus 4, that's 5. Times 5, minus 5, that's only 20. Okay, it's going to be 4 times 5, which gives you 20. Add 9, and then if you add 9, and that's 29 minus 5, and then you get 24.","```python
start_state = (4, 5, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 5 is 45. Minus 4 is 41. Minus 5 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5-4-5=36"",
    resulting_state=(36,),
    comment='""9 times 5 is 45. Minus 4 is 41. Minus 5 is 36""',
)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 9, 25),
    comment='""5 times 5 is 25""',
)

# ""25 plus 9... 34 minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+9-4=30"",
    resulting_state=(30,),
    comment='""25 plus 9... 34 minus 4""',
)

# ""9 minus 4, 5 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-4=5"",
    resulting_state=(5, 5, 5),
    comment='""9 minus 4, 5 is 4"" - though they say 4, they mean 5',
)

# ""4 times 4 is 16 plus 5... That's 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+5=21"",
    resulting_state=(5, 21),
    comment='""4 times 4 is 16 plus 5... That\'s 21""',
)

# ""9 minus 4, that's 5. Times 5, minus 5, that's only 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-4)*5-5=20"",
    resulting_state=(20,),
    comment='""9 minus 4, that\'s 5. Times 5, minus 5, that\'s only 20""',
)

# ""4 times 5, which gives you 20. Add 9, and then if you add 9, and that's 29 minus 5, and then you get 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5+9-5=24"",
    resulting_state=(24,),
    comment='""4 times 5, which gives you 20. Add 9, and then if you add 9, and that\'s 29 minus 5, and then you get 24""',
)
```"
3398,"[3,5,7,9]",(9x7)+(5+3),180," Okay, so this one's parenthesis is 9 minus 7, which will give us 2, and then times that by 8. No! That's not right. Oh shoot, that's not right. That's... 2 times 8 is 16, not 24. Crap. Okay, wait. Um... Okay, let's do... Gotta be weird. Ugh. Okay, I can figure this out. Okay, so 7... 8, 9, 10, 11, 12... Um... Okay, think of your times tables. So you can do 2 and 7. Or you can do 4 times 6. Can I get to 4 times 6? I could do... No. 8 times 2 is what I was going for, but that's... It's 8 times 3, actually. Uh... Damn. There's gotta be another way. Crap. Hmm. And 9 times... 2 is... Okay. Wait a minute. Let's try that. 9... times 2. Or no, I can't do 2. 9 times... 9... What's 9 plus 7? 16? Ugh. 9 times 7 is 16. Right? And then... 16 plus 8. Right? Wait. Crap. Plus... 5 plus 8. Right? Oh. I think I got it. Oh, shoot. I did not. Okay, why did I... That's 16. 16 plus 8. 17, 18, 19, 20, 21, 22, 23, 24... That should be right. Right? Where am I? Oh. It's 9. Plus 7. Crap.","```python
start_state = (3, 5, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 7, which will give us 2, and then times that by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 5),
    comment='""9 minus 7, which will give us 2""',
)

# ""2 times 8 is 16, not 24"" - participant realizes this won't work because they need 24
# They mention 8 but can't actually make it, so this is a subgoal
graph.set_subgoal(
    subgoal_state=(8,),
    comment='""2 times 8 is 16, not 24"" - participant realizes they need to make 8'
)

# Participant mentions ""4 times 6"" but realizes they can't make those numbers
# ""8 times 3"" is mentioned but not actually computed
# ""9 times 2"" is mentioned but abandoned

# ""What's 9 plus 7? 16?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(3, 5, 16),
    comment='""What\'s 9 plus 7? 16?""',
)

# ""9 times 7 is 16"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=16"",
    resulting_state=(3, 5, 16),
    comment='""9 times 7 is 16"" - calculation error',
    result_calc_error=True,
)

# Based on their submitted answer (9x7)+(5+3), they eventually found the correct solution
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(3, 5, 63),
    comment=""Based on submitted answer"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(8, 63),
    comment=""Based on submitted answer"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63+8=71"",
    resulting_state=(71,),
    comment=""Based on submitted answer"",
)
```"
3401,"[5,6,7,8]",,180," Okay, so, 6 plus 5 is 11, 30, okay, we'll do 8 plus, or no, 8 times 5, which is 35, 8 times 5, which is 35, okay, and then, okay, come on, I can figure this out, minus maybe, minus 7 plus 6, which is 13. Is that right? 35 minus 13, what's 35 minus 13, is that right? I don't think that's right. No, I'm crapping too hard. Oh my gosh, come on. Sweet. I might not get this one. 7, no, no, no, no, no, no, no, okay, what's 6 times 7, not 42. 6 times 7 is 42, yes, so 6 times 7, aw, what? That's not the right answer either, oh my god, okay, forget the times, let's just add, it's 8 times 5, or 8 plus 5, 8 plus 5 is what, oh my god, 8 plus 5 is 13, so do 13, always add some more stuff, um, 13 plus, 13 is, damn, oh wait, no, 13 plus, oh, shootin' 2 off again, I'm trying to just simply do addition, and it's not gonna work.","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 5 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(7, 8, 11),
    comment='""6 plus 5 is 11""',
)

# ""8 times 5, which is 35"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=35"",
    resulting_state=(6, 7, 35),
    comment='""8 times 5, which is 35""',
    result_calc_error=True,
)

# ""minus 7 plus 6, which is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-7+6=34"",
    resulting_state=(34,),
    comment='""minus 7 plus 6""',
)

# ""6 times 7 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(5, 8, 42),
    comment='""6 times 7 is 42""',
)

# ""8 plus 5 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(6, 7, 13),
    comment='""8 plus 5 is 13""',
)

```"
3404,"[1,2,2,6]",(2+1)x(2+6),39," Okay, let's do this. Ooh, these are like this, isn't this like the same numbers from the first trial, the first test? Okay, so parentheses 2, oh wait, no, no, no. It's not. I thought that was 1, 1, 2, not 1, 2, 2. Okay, let's think, let's think, let's think. 8, 16, 24, so 8 times 3. So 2 plus 1 times 2 plus 6. Okay. 2 plus 6 confirmed, 2 plus 6 is 8, 2 plus 1 is 3, 3 times 8 is 24.","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first confuses this with another problem, then realizes their mistake

# ""8, 16, 24, so 8 times 3"" suggests they are working backward from 24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8, 16, 24, so 8 times 3"" suggests working backward from 24',
)

# ""2 plus 6 confirmed, 2 plus 6 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+6=8"",
    resulting_state=(1, 2, 8),
    comment='""2 plus 6 confirmed, 2 plus 6 is 8""',
)

# ""2 plus 1 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 8),
    comment='""2 plus 1 is 3""',
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""3 times 8 is 24""',
)
```"
3405,"[2,8,10,12]",(12-8)+(2x10),109," 2 times 2 is 4, times 8 is 32, um, 12 minus 8 is 4, and you have 4, oh, okay, I see it, so 12 minus 8 will give you 4, right, oh, I did get, I saw it, I saw it, now I forgot it, 4 plus 2 times 10, so 2 times 10 is 20, 12 minus 8 is 4, and that's 24.","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 2 is 4, times 8 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*2)*8=32"",
    resulting_state=(10, 12, 32),
    comment='""2 times 2 is 4, times 8 is 32""',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(2, 4, 10),
    comment='""12 minus 8 is 4""',
)

# ""2 times 10 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(8, 12, 20),
    comment='""2 times 10 is 20""',
)

# Finally, the participant combines the operations they found:
# ""12 minus 8 is 4, and that's 24"" combining with the 20 from 2*10
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-8)+(2*10)=24"",
    resulting_state=(24,),
    comment='""12 minus 8 is 4, and that\'s 24"" combining with the 20 from 2*10',
)
```"
3406,"[1,7,10,13]",,180," I try my best to say everything, but sometimes I skip the operations, saying the operations out loud. 1, 7, 10, 13. 13 is an odd number. 7 is also an odd number, but 13 is not a number I use a lot in my maths. 7 I use a decent amount. 1 plus 7 is 8, plus 10 is 18. 13 plus 10 is 23, plus 1 is 24. What can I do with a 7? Nothing. 13 minus 10 is 3. 3 times 7 is 21, plus 1 is 22. 7 minus 1 is 7. 6. 13 minus 7. 13 minus 7 is also 6. 13 minus 7 is 6. I can't do anything with that number. 13 minus 1 is 12. That's too high. 13 times 7. 13, 26, 39, 52, 65, 78, 91. Is that correct? 13, 26, 39, 78, 91. Okay. 91 divided by 10 would be 9.1. That's not good enough. Oh, boy. 10 minus 7 is 3. Can't do anything with that. Jeez. 3, 12. 3, 12. Oh, this one is actually... Oh, my god. I think I'm pretty good at arithmetic, but this is actually... Oh, I could do... I forgot what it's called, but like 1x plus 7 plus... Not 1x. I was thinking of variables, using variables, and just trying to guess what to visualize the equation but i don't know how to do that with static numbers and in unknown operations um okay 10 minus 1 is 9 9 times 13 divide by 7. seven nine times thirteen thirteen twenty six thirty nine thirty nine times three thirty sixty ninety nine eight twenty seven one seventeen divided by seven i'm not allowed to use a calculator i don't want to remember i'm going to assume no to be safe","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 plus 7 is 8, plus 10 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+7+10=18"",
    resulting_state=(13, 18),
    comment='""1 plus 7 is 8, plus 10 is 18""',
)

# ""13 plus 10 is 23, plus 1 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10+1=24"",
    resulting_state=(7, 24),
    comment='""13 plus 10 is 23, plus 1 is 24""',
)

# ""13 minus 10 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 10 is 3""',
)

# ""3 times 7 is 21, plus 1 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7+1=22"",
    resulting_state=(22,),
    comment='""3 times 7 is 21, plus 1 is 22""',
)

# ""7 minus 1 is 7. 6.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(6, 10, 13),
    comment='""7 minus 1 is 6""',
)

# ""13 minus 7 is also 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(1, 6, 10),
    comment='""13 minus 7 is also 6""',
)

# ""13 minus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(7, 10, 12),
    comment='""13 minus 1 is 12""',
)

# ""13 times 7"" participant counts up by 13s
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(1, 10, 91),
    comment='""13 times 7"" participant counts up by 13s',
)

# ""91 divided by 10 would be 9.1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""91/10=9.1"",
    resulting_state=(1, 9.1),
    comment='""91 divided by 10 would be 9.1""',
)

# ""10 minus 7 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(1, 3, 13),
    comment='""10 minus 7 is 3""',
)

# ""10 minus 1 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(7, 9, 13),
    comment='""10 minus 1 is 9""',
)

# ""9 times 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*13=117"",
    resulting_state=(7, 117),
    comment='""9 times 13""',
)

# ""divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""117/7=16.71"",
    resulting_state=(16.71,),
    comment='""divided by 7""',
)
```"
3409,"[4,4,4,7]",(7-4)x(4+4),56," Okay, 4 plus 7 is 11. 4 times 4 is 16. 16 plus 11 is 27. Doesn't work. 4, 8, 12, 19, if you add them all, doesn't work either. Probably something involving multiplication. I wonder if fractions are part of the equation. Like if I did 7 divided by 4 times 4 or something like that. 7 divided by 4, I can't even do the math, but 7 fourths times 4 is 7. 28 fourths, which is 7. Oh, yeah, the 4s cancel out. Okay, so it's probably 4 times 7 in there. Or actually, it's 7 minus 4. Oh, 7 minus 4 is 3 times 4 plus 4. Excuse me. It's 24.","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 7 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(4, 4, 11),
    comment='""4 plus 7 is 11""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(4, 7, 16),
    comment='""4 times 4 is 16""',
)

# ""4, 8, 12, 19, if you add them all"" participant seems to be adding numbers progressively
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4+4+7=19"",
    resulting_state=(19,),
    comment='""4, 8, 12, 19, if you add them all""',
)

# ""7 divided by 4 times 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7/4)*4=7"",
    resulting_state=(4, 4, 7),
    comment='""7 divided by 4 times 4""',
)

# ""7 minus 4 is 3 times 4 plus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4)*(4+4)=24"",
    resulting_state=(24,),
    comment='""7 minus 4 is 3 times 4 plus 4""',
)
```"
3421,"[3,7,7,9]",(9-(7/7))x3,121," Oh my god, that's in real time. Sigh. Um... How to get 24... 7 times 3 is 21... Um... 7 times... Or... 3 times 9 is... 36... 18... 36? Um... 37... 7... 9... Sigh. Um... How about... 9 times 3... Which is 27... Minus... ... 27... ... ... ... Um... Minus 1... What is 9 times 3? ... Yeah, 27... Um... ... ... Okay. Correct answer, not all answers used. Um... ... ... ... Okay. Um... I feel like I'm on the right path. I need a time... ... Okay. How about 9... ... ...minus... ... ...1, which is 7 divided by 7... ... ...times 3. ... ...","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(7, 9, 21),
    comment='""7 times 3 is 21""',
)

# ""3 times 9 is... 36... 18... 36?""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=36"",
    resulting_state=(7, 7, 36),
    comment='""3 times 9 is... 36""',
    result_calc_error=True,
)

# ""9 times 3... Which is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""9 times 3... Which is 27""',
)

# ""minus 1... What is 9 times 3? ... Yeah, 27""
# The participant seems to be verifying their previous calculation

# ""9...minus...1, which is 7 divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 3, 9),
    comment='""7 divided by 7""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(3, 8),
    comment='""9 minus 1""',
)

# ""times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='""times 3""',
)
```"
3422,"[2,3,10,13]",((3-2)+10)+13,43," Okay. 2, 3, 10, and 13. Uh, okay. Well, 24 minus 13 is 11. Okay. So, we need to get 11. So, 3 minus 2, um, plus 10, plus 10, uh, plus 13.","```python
start_state = (2, 3, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 13 is 11"" - participant is working backward from the goal
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 13 is 11"" - participant is working backward from the goal',
)

# ""3 minus 2, um, plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-2+10=11"",
    resulting_state=(11, 13),
    comment='""3 minus 2, um, plus 10""',
)

# ""plus 13"" - participant adds 13 to reach 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(24,),
    comment='""plus 13""',
)
```"
3423,"[3,5,10,10]",(10-(10/5))x3,80," Okay, this game is really hard. Okay, 3, 5, 10, 10. Okay, so 24 divided by 3 is 8. So I have to get 8 first. So how about 10? Minus 5, which is 5 minus 3 plus 10. Okay, invalid. Great. How about 10 minus 10 divided by 5, which is 2 times 3. Okay. 10 minus 10 divided by 5 times 3.","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 3 is 8"" - participant is working backward from the goal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 3 is 8"" - participant is working backward from the goal',
)

# ""10 minus 5, which is 5 minus 3 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5-3+10=12"",
    resulting_state=(12,),
    comment='""10 minus 5, which is 5 minus 3 plus 10""',
)

# ""10 minus 10 divided by 5, which is 2 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-(10/5))*3=24"",
    resulting_state=(24,),
    comment='""10 minus 10 divided by 5, which is 2 times 3""',
)

```"
3424,"[1,6,8,13]",(13-1)x(8-6),51," Okay, so 6 divided by, so I have to get 11 or 6, 6 divided by, or 24 divided by 6 is 4, so I have to somehow get 4, 18 minus, 13 minus 8, 9, 10, 11, 12, 13, oh minus, uh, minus 1 something? Uh, something like, uh, 13 minus 1, which is 12, 12 times 2, so 8 minus 6. That was easy.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 6 is 4, so I have to somehow get 4"" - participant is setting a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 is 4, so I have to somehow get 4""'
)

# ""13 minus 8"" participant tries this operation
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(1, 5, 6),
    comment='""13 minus 8""',
)

# ""13 minus 1, which is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(6, 8, 12),
    comment='""13 minus 1, which is 12""',
)

# ""8 minus 6"" participant finds they can get 2 this way
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(1, 2, 13),
    comment='""8 minus 6""',
)

# Based on their response, they must have multiplied 12 by 2 to get 24
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-1)*(8-6)=24"",
    resulting_state=(24,),
    comment='Based on their response ""(13-1)x(8-6)"", they multiplied 12 by 2 to get 24',
)
```"
3425,"[1,6,6,11]",(6+6+1)+11,52," Alright, I'm starting to get this. Okay, 24 divided by 6 is 4, so somehow I have to get 4. Uh, 6, 7, 8, 9, 10, 11, um, 4. I didn't realize there were so many ways to get 24. Okay, so 6, 24, minus 11 is 2, uh, 13. Okay, so I need to make 13, so why don't I just do 6 plus, 6 plus 1, parentheses, plus 11?","```python
start_state = (1, 6, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 6 is 4, so somehow I have to get 4"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 is 4, so somehow I have to get 4""',
)

# The participant counts up from 6 to 11, but doesn't perform any operations

# ""24 minus 11 is 2, uh, 13"" - participant works backward from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 11 is 2, uh, 13"" - participant works backward from 24',
)

# ""so I need to make 13"" - participant sets another subgoal
graph.set_subgoal(
    (13,),
    state_after_subgoal=(24,),
    comment='""so I need to make 13""',
)

# ""6 plus, 6 plus 1, parentheses, plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+6+1)+11=24"",
    resulting_state=(24,),
    comment='""6 plus, 6 plus 1, parentheses, plus 11""',
)
```"
3426,"[7,9,13,13]",(13-9)+(13+7),64," Okay. 7, 9, 13, and 13. Ugh, I always say 13. Okay. 24 minus 13 is 11. So I have to get to 11. 9 plus 7 is 16. 7 plus 13 is 20? Oh! And then 13 minus 9 is 4. Okay. Okay. So, parentheses, 13 minus 9, parentheses, plus 13 plus 7.","```python
start_state = (7, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 13 is 11. So I have to get to 11"" - participant is setting a subgoal
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 13 is 11. So I have to get to 11""',
)

# ""9 plus 7 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(13, 13, 16),
    comment='""9 plus 7 is 16""',
)

# ""7 plus 13 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(9, 13, 20),
    comment='""7 plus 13 is 20""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 7, 13),
    comment='""13 minus 9 is 4""',
)

# Then the participant combines operations: ""13 minus 9, parentheses, plus 13 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-9)+(13+7)=24"",
    resulting_state=(24,),
    comment='""parentheses, 13 minus 9, parentheses, plus 13 plus 7""',
)
```"
3428,"[1,5,5,10]",((10-5)x5)-1,69," Okay, 1, 5, 5, and 10. Okay, um, 24 minus 10 is 14. And I can't get 14 with those numbers, so 24 minus 5 is 19? Cannot get 19. So 24 minus 1 is 23? No. 5 times 5 is 25 minus 1. 5 times 5 minus 1 is 24. So what if I did, uh, oh I know. 10 minus 5 times 5 minus 1.","```python
start_state = (1, 5, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant seems to be working backward from 24
# ""24 minus 10 is 14"" suggests they are trying to find what numbers they need
graph.set_subgoal(
    (14,),
    state_after_subgoal=(24,),
    comment='""24 minus 10 is 14"" suggests working backward from 24',
)

# ""24 minus 5 is 19""
graph.set_subgoal(
    (19,),
    state_after_subgoal=(24,),
    comment='""24 minus 5 is 19""',
)

# ""24 minus 1 is 23""
graph.set_subgoal(
    (23,),
    state_after_subgoal=(24,),
    comment='""24 minus 1 is 23""',
)

# ""5 times 5 is 25 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 10, 25),
    comment='""5 times 5 is 25""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-1=24"",
    resulting_state=(10, 24),
    comment='""25 minus 1""',
)

# ""10 minus 5 times 5 minus 1"" - this is their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-5)*5-1=24"",
    resulting_state=(24,),
    comment='""10 minus 5 times 5 minus 1""',
)
```"
3429,"[2,5,8,10]",(8-5)x(10-2),61," Okay, 2, 5, 8, and 10. Okay, 24 minus 10 is 13. I mean 14, sorry. So, can I just do... 24 minus 10 is 14. So, 8, 9, 10, 11, 12, 13, 14, 15. Okay, that doesn't work. But 24 is 8 and 3? Can I get 3? Oh, yes. 8. Minus 5 times 10 minus 2.","```python
start_state = (2, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 10 is 13. I mean 14"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (10, 14),
    state_after_subgoal=(24,),
    comment='""24 minus 10 is 14"" - participant working backwards',
)

# ""8, 9, 10, 11, 12, 13, 14, 15"" participant seems to be counting up, perhaps trying to find a way to make 14

# ""But 24 is 8 and 3?"" participant seems to be setting a new subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""But 24 is 8 and 3?"" participant seems to be looking for a way to multiply to 24',
)

# ""Can I get 3? Oh, yes. 8. Minus 5"" participant realizes they can get 3 from 8-5
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(2, 3, 10),
    comment='""Can I get 3? Oh, yes. 8. Minus 5""',
)

# ""times 10 minus 2"" participant realizes they can multiply by (10-2) to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*(10-2)=24"",
    resulting_state=(24,),
    comment='""times 10 minus 2""',
)
```"
3430,"[2,6,8,13]",((6/2)+8)+13,45," Okay. I feel like I did this already. 2, 6, 8, and 13. Usually, if there's a 13, we have to subtract it because it's a weird number. So 24 minus 13 is 11. Can I get 11 anywhere? Uh, 11. 8, 9, 10, 11. And you get 3. Okay. 6 divided by 2, which is 3. Oh, and then another parenthesis. 6 divided by 2 is 3. Uh, plus 8. Plus 13.","```python
start_state = (2, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 minus 13 is 11"" - participant seems to be working backward from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 13 is 11"" - participant seems to be working backward from 24',
)

# ""6 divided by 2, which is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/2=3"",
    resulting_state=(3, 8, 13),
    comment='""6 divided by 2, which is 3""',
)

# ""plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+8=11"",
    resulting_state=(11, 13),
    comment='""plus 8""',
)

# ""Plus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(24,),
    comment='""Plus 13""',
)
```"
3434,"[1,5,5,6]",(5x6)-(5+1),53," Let's do better. So... 6 plus 5 is 11. 10, 7, 10, 6 minus 5 is 1. I want to get maybe 8 and 3. 5 times 5 is 25. 5 times 6 is 30. Let's do that. 5 times 6 is 30 minus 5 plus 1.","```python
start_state = (1, 5, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 5 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(1, 5, 11),
    comment='""6 plus 5 is 11""',
)

# ""6 minus 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 1, 5),
    comment='""6 minus 5 is 1""',
)

# ""I want to get maybe 8 and 3"" suggests setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I want to get maybe 8 and 3""',
)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 6, 25),
    comment='""5 times 5 is 25""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 5, 30),
    comment='""5 times 6 is 30""',
)

# ""5 times 6 is 30 minus 5 plus 1"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-(5+1)=24"",
    resulting_state=(24,),
    comment='""5 times 6 is 30 minus 5 plus 1""',
)
```"
3435,"[7,7,11,12]",,180," Oh, ready. Got some numbers today. Fourteen plus eleven plus twelve. Twelve. Fourteen minus eleven. Thirteen. Plus twelve is twenty-three. No. Twenty-nine. Try eleven plus seven. Okay. Oh, that's twenty-eight. Twenty-eight minus seven is twenty-one. Nope. Delete, delete. Eighteen minus twelve. Nope. Nope. Fourteen. Twenty-one. Twenty-three. Fourteen. Fourteen plus twelve. Twenty-three. Okay. I just thought I would put something in there. That's what I was thinking in that moment because I got tired of hitting roadblocks. Okay. Twenty-seven minus seven. Twenty-seven. I mean twenty-nine. Twenty-nine. Nineteen. Twelve. Twelve plus eleven. Nope. Eleven times. I will tell you a thought in my head is if I had a calculator I'd be doing the bigger numbers multiplied by each other. But I wasn't sure if that was part of the gig. I have paper. So, I'll just go ahead and do it on my paper and see if I run out of time. Eleven times seven is seventy-seven.","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Fourteen plus eleven plus twelve"" - participant seems to have made a calculation error, saying 14 instead of 7+7=14
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(11, 12, 14),
    comment='""Fourteen plus eleven plus twelve"" - participant first calculates 7+7=14',
)

# Then they use the 14 they just calculated
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-11=3"",
    resulting_state=(3, 12),
    comment='""Fourteen minus eleven""',
)

# ""Plus twelve is twenty-three""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+12=23"",
    resulting_state=(23,),
    comment='""Plus twelve is twenty-three""',
    result_calc_error=True,
)

# ""Try eleven plus seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(7, 12, 18),
    comment='""Try eleven plus seven""',
)

# ""Eighteen minus twelve""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-12=6"",
    resulting_state=(6, 7),
    comment='""Eighteen minus twelve""',
)

# ""Twelve plus eleven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(7, 7, 23),
    comment='""Twelve plus eleven""',
)

# ""Eleven times seven is seventy-seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7=77"",
    resulting_state=(7, 12, 77),
    comment='""Eleven times seven is seventy-seven""',
)
```"
3440,"[1,4,6,13]",13+(6+4)+1,124," Okay, so we're going to do... what do I need to get to to minus 13? Umm... 37? Okay, where... What the fuck is this? I just did this one and I can't remember how to do it now. Okay, umm... Okay, umm... 13... times... Ah, damn. Okay. I got 13... 13 plus... That's fine. Mark, I'll check it. It's got... ... Duh... ... ... ... ... ... ... ...","```python
start_state = (1, 4, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""what do I need to get to to minus 13?"" suggests participant is working backward from 24
graph.set_subgoal(
    (13, 11), 
    state_after_subgoal=(24,),
    comment='""what do I need to get to to minus 13?"" suggests working backward from 24'
)

# ""37?"" participant seems to be considering adding to 13 to get 37
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6+4+1=24"",
    resulting_state=(24,),
    comment='Based on their final response ""13+(6+4)+1"", they found a way to add the numbers to get 24',
)

# Most of the transcript contains disfluencies and pauses (""umm"", ""..."", etc.) rather than mathematical operations

```"
3449,"[2,7,9,13]",,180," Okay, let's see what we have. This one looks a little bit harder. So can I make 8 anywhere or 6? That's kind of the strategy I'm having. Let's see. Because I know 13 plus 9 is 21. 23. Hmm. Let's see. 13 minus is 6. But I still can't get to 4. 9 minus 7 is 2. 5. 18. Nope, that doesn't work. 13 plus 9 is 21. And then we need 3. But I can't do that. 9 divided. Hmm. Is there anything that can be divided here? These are all odd numbers. So no division. 9 plus 7 is 16. Nope. 13. 21. I can maybe do something divided by 2. So is there something that can get me to 48? So let's see. 9. 9 plus 13 is 28. Gosh, this one is hard. Let's see. I can do something by 2 is 5. Hmm. 63. No. 29. 13 plus 7 is 20. Minus 2 is 18. Nope, that's 29. 27, 20. I keep going back to the same ones. I'm not seeing a solution on this one. I'm going to assume it's 2. 2 plus 2 is 4. 17 still doesn't work. Wow, I have no idea. I don't know. 45, no, I don't know. I'm frustrated because I have no idea. I don't even know if there's a real solution. I kind of wonder if there's not a real solution to this. 16 times 2, 32 minus 13 is what? 32, yeah, that's not right. Still 4, 20. No, I don't know. Honestly, I give up. I can't think of anything. I mean, I'll wait for the whole three minutes, but. 16, 20, no, 11, 18.","```python
start_state = (2, 7, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 9 is 21"" (participant makes calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=21"",
    resulting_state=(2, 7, 21),
    comment='""13 plus 9 is 21"" (calculation error)',
    result_calc_error=True,
)

# ""13 minus is 6"" (likely means 13-7=6)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(2, 6, 9),
    comment='""13 minus is 6"" (likely means 13-7=6)',
)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 2, 13),
    comment='""9 minus 7 is 2""',
)

# ""9 plus 7 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(2, 13, 16),
    comment='""9 plus 7 is 16""',
)

# ""9 plus 13 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(2, 7, 22),
    comment='""9 plus 13 is 28"" (calculation error)',
    result_calc_error=True,
)

# ""13 plus 7 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(2, 9, 20),
    comment='""13 plus 7 is 20""',
)

# ""Minus 2 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20-2=18"",
    resulting_state=(9, 18),
    comment='""Minus 2 is 18""',
)

# The rest of the transcript shows the participant trying various combinations but not clearly stating the operations they're performing
```"
3452,"[1,3,6,13]",(13-6+1)x3,157," Okay, so 13 minus 3 is 10. That's not going to help us. 18, what if I added all these? 4, no, that's 23. If I do 9, no. Can I divide anything? 6, I think that's right. Wait, 6 divided by 3 is 2. Nope, 2 times 13 is 26. Hmm, let's see. If I do 3 divided by 1, that's just 3. So 3, 9, no, 3, 16, 22, no. 6 divided by 1, 6. I need another number. 6 divided by 1 times 2, 26. No, I don't know this one yet again. I know I could do 1 plus 3 is 4 times 6 would be 24, but then we just have the 13 out of nowhere. Maybe if I do 13 minus 6 would be 8. Oh, yes, okay. 13 minus 6 is 8. Then we will times that by 3 plus 1 to make 24. Oh, what did I do? 13, 6, 3, 1. No, because 13 minus 6 is 8. Then you times 8. Oh, no, it should be 3 times 1. There we go. What? 13, 6, 3, 1. 13 minus 6 is 8, and 8 times 3 is 24. What am I doing wrong? 13, 6, 3, 1. Incorrect answer all night. 13 times 6. I mean, 13 minus 6 is 8. Is that 8? No, it's 7. Oh, yeah, that's my bad. Okay. Okay, 13 minus, okay, got it. 13 minus 6 plus 1 times 3. Okay.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(1, 6, 10),
    comment='""13 minus 3 is 10""',
)

# ""what if I added all these? 4, no, that's 23"" - participant adds all numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6+3+1=23"",
    resulting_state=(23,),
    comment='""what if I added all these? 4, no, that\'s 23""',
)

# ""6 divided by 3 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(1, 2, 13),
    comment='""6 divided by 3 is 2""',
)

# ""2 times 13 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=26"",
    resulting_state=(1, 26),
    comment='""2 times 13 is 26""',
)

# ""3 divided by 1, that's just 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/1=3"",
    resulting_state=(3, 6, 13),
    comment='""3 divided by 1, that\'s just 3""',
)

# ""6 divided by 1, 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/1=6"",
    resulting_state=(3, 6, 13),
    comment='""6 divided by 1, 6""',
)

# ""1 plus 3 is 4 times 6 would be 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+3)*6=24"",
    resulting_state=(13, 24),
    comment='""1 plus 3 is 4 times 6 would be 24""',
)

# ""13 minus 6 would be 8"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=8"",
    resulting_state=(1, 3, 8),
    comment='""13 minus 6 would be 8"" - calculation error',
    result_calc_error=True,
)

# ""13 minus 6 is 7"" - participant corrects their error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 6 is 7"" - participant corrects their error',
)

# Finally, the participant finds the solution: ""13 minus 6 plus 1 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-6+1)*3=24"",
    resulting_state=(24,),
    comment='""13 minus 6 plus 1 times 3""',
)
```"
3453,"[3,6,12,12]",,180," Okay. I mean, first of all, 12 plus 12 would be 24, but then we have this 9 to come down with. So 12 divided by 6 would be 2. Hmm. 12 times 12 is 144. 12 times 6 is 72. 72 times 3 divided by 12. 72 times 3 is 216. And if you divide that by 12, that's 18. So no 18. So I want to get to 8 times 3 or 6 times 4 is kind of my strategy. Even though it doesn't always work, how do I make 8 with any of this? So I did 12 times 6, 72 minus 36. 72 minus 36 is 36. Let's see. 18 minus 24. Ah, okay. 18. I'm good at math. This is kind of annoying. Okay. 4, 2. 12 divided by... So we have 12 divided by 12 is 1. 12 divided by 6 is 2. 12 divided by 3 is 4. Those are kind of the numbers you have to work with. 6 divided by 3 is 2. 18. 6 times 3 is 18. Minus 12 is 6. No. Hmm. Um, I don't know. I think this one might be unsolvable. 18 minus 12 is 6. No. This is frustrating. You guys made a frustrating task. 72 divided by 12 is 6. Nope. Um, 12 divided by 3 is 4. Times 6. 20. No. Um, yeah. I'm going to go ahead and say this is unsolvable. I don't, I just, I don't see it. I can't make 6 and 4. I can't make 8.","```python
start_state = (3, 6, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 6, 24),
    comment='""12 plus 12 would be 24""',
)

# ""12 divided by 6 would be 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 3, 12),
    comment='""12 divided by 6 would be 2""',
)

# ""12 times 12 is 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(3, 6, 144),
    comment='""12 times 12 is 144""',
)

# ""12 times 6 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(3, 12, 72),
    comment='""12 times 6 is 72""',
)

# ""72 times 3 is 216""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72*3=216"",
    resulting_state=(12, 216),
    comment='""72 times 3 is 216""',
)

# ""And if you divide that by 12, that's 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""216/12=18"",
    resulting_state=(18,),
    comment='""And if you divide that by 12, that\'s 18""',
)

# ""So I want to get to 8 times 3 or 6 times 4"" - setting subgoals
graph.set_subgoal((8, 3), state_after_subgoal=(24,), comment='""So I want to get to 8 times 3""')
graph.set_subgoal((6, 4), state_after_subgoal=(24,), comment='""or 6 times 4""')

# ""12 divided by 12 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 3, 6),
    comment='""12 divided by 12 is 1""',
)

# ""12 divided by 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 3, 12),
    comment='""12 divided by 6 is 2""',
)

# ""12 divided by 3 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 6, 12),
    comment='""12 divided by 3 is 4""',
)

# ""6 divided by 3 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 12, 12),
    comment='""6 divided by 3 is 2""',
)

# ""6 times 3 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(12, 12, 18),
    comment='""6 times 3 is 18""',
)

# ""Minus 12 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-12=6"",
    resulting_state=(6, 12),
    comment='""Minus 12 is 6""',
)

# ""12 divided by 3 is 4. Times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12/3)*6=24"",
    resulting_state=(12, 24),
    comment='""12 divided by 3 is 4. Times 6""',
)
```"
3454,"[3,9,10,13]",,180," Okay, let's see, 23, I have a 12. Can I make 2? No. 19 plus, that would be 29. No. 16, 20, no. Here we go again with something I genuinely think is unsolvable, which is annoying because I'm going to have to sit here and talk for three minutes. I do appreciate the task, guys, just voicing my opinions, all my thoughts. These are all odd numbers. You can always do minus. No, it's still going to be odd. All the numbers are odd. How are we going to get to 24? I can't get to 8. I can't get to 6. I can't get to 4. There's no way unless I add, like, multiple numbers together, but if I, oh, there is 10, which is the only positive, but a positive minus an, I mean, even. Sorry, I've been meaning to say even numbers. 12. Huh. 13 minus 9 is 4, but I can't make 6. 13 minus 10 is 3, but I can't make 8. I can only make 6. So, we have 9 times 10 is 90, divided by 3 is 30, minus 30. Nope, that's too low. If I do 10 times 13, that's 130. Okay. 130 divided by 9 is 40. Nope. If I do 130 divided by 3, what would that be? 130 divided by 3 is 43. It's not even a number. That's a whole number. 9 divided by 3 is 3, but we can't make 8 from 10 and 13. 9 plus 13 is 22. But I can't make 2. Can I make 12 at all? Yeah, of course, 9 plus 3. But that's, you don't have a way to make 2. I don't think this is solvable, guys. I don't really know what to do. I don't, I really genuinely don't think it's solvable. Um. Okay. That's very good. No, you're awesome, you did a good job.","```python
start_state = (3, 9, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Can I make 2?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (2,),
    state_after_subgoal=(24,),
    comment='""Can I make 2?""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 10),
    comment='""13 minus 9 is 4""',
)

# ""13 minus 10 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 3, 9),
    comment='""13 minus 10 is 3""',
)

# ""9 times 10 is 90, divided by 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*10/3=30"",
    resulting_state=(13, 30),
    comment='""9 times 10 is 90, divided by 3 is 30""',
)

# ""10 times 13, that's 130""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(3, 9, 130),
    comment='""10 times 13, that\'s 130""',
)

# ""130 divided by 9 is 40""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""130/9=40"",
    resulting_state=(3, 40),
    comment='""130 divided by 9 is 40""',
    result_calc_error=True,
)

# ""130 divided by 3 is 43""
new_state = graph.explore_operation(
    curr_state,
    operation=""130/3=43"",
    resulting_state=(9, 43),
    comment='""130 divided by 3 is 43""',
    result_calc_error=True,
)

# ""9 divided by 3 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 10, 13),
    comment='""9 divided by 3 is 3""',
)

# ""9 plus 13 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(3, 10, 22),
    comment='""9 plus 13 is 22""',
)

# ""9 plus 3"" making 12
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(10, 12, 13),
    comment='""9 plus 3"" making 12',
)

```"
3457,"[2,6,8,13]",(13x8)/,180," 14, no. 14 plus 11, no. 8 plus 6 is 14. Then I need 10. Then I have 11. Oh, this one's hard. 8 times 2 is 16. 16 plus 13 is 12. 29 minus 6 is 23. Why do I keep getting 23? 8 plus 6 plus 2 is 16. No, that's not what I want. I know I'm saying my thoughts aloud. Stop yelling at me. I'm trying. Ugh. This one's hard and I don't know what to do. 13 times 6. 6. 6. I know I am saying my thoughts out loud why don't you hear me I just my brain is freezing I'm not having thoughts I don't know how to solve this 15 no 8 times 6 is 48 no 13 times 2 is 26 no 13 times 8 divided by 6 no that's not what I want times 2 no you don't know I'm making stuff up because I don't know","```python
start_state = (2, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 6 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(2, 13, 14),
    comment='""8 plus 6 is 14""',
)

# ""8 times 2 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(6, 13, 16),
    comment='""8 times 2 is 16""',
)

# ""16 plus 13 is 12. 29 minus 6 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+13-6=23"",
    resulting_state=(23,),
    comment='""16 plus 13 is 12. 29 minus 6 is 23""',
)

# ""8 plus 6 plus 2 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6+2=16"",
    resulting_state=(13, 16),
    comment='""8 plus 6 plus 2 is 16""',
)

# ""8 times 6 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(2, 13, 48),
    comment='""8 times 6 is 48""',
)

# ""13 times 2 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(6, 8, 26),
    comment='""13 times 2 is 26""',
)

# ""13 times 8 divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*8/6=17.33"",
    resulting_state=(2, 17.33),
    comment='""13 times 8 divided by 6""',
)
```"
3459,"[1,5,5,10]",10(,180," Okay. 1, 5, 5, 10. 1, 5, 5, 10. Ehh. I don't even know. Is this possible? 5 times 5 minus 1? I'll have to use the 10. 10. 10. I don't know. 3 minutes is a long time. This is so hard. This is stressing me out. What do I do? 10. No. 10 minus 1 minus 5 is 4 times 5 is 20. That's not 24. 9 plus 10 is 19. That doesn't help. It's going to yell at me if I don't say anything. It's getting me more stressed out. Is that your point? You're trying to get me all stressed out when I can't figure out because there's no answer or something? Ugh. Come on. I don't know. I'm staring at these numbers and nothing's working. I can't type more than... I can't use 55 because it has to be a 5 and a 5. That's fine. Invalid equation provided.","```python
start_state = (1, 5, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5-1=24"",
    resulting_state=(10, 24),
    comment='""5 times 5 minus 1""',
)

# ""10 minus 1 minus 5 is 4 times 5 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-1-5)*5=20"",
    resulting_state=(20,),
    comment='""10 minus 1 minus 5 is 4 times 5 is 20""',
)

# ""9 plus 10 is 19"" - participant likely got 9 from 10-1
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(5, 5, 9),
    comment='""9 plus 10 is 19"" - first computing 10-1',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(5, 19),
    comment='""9 plus 10 is 19""',
)

# The rest of the transcript shows the participant getting frustrated and not making any more attempts at operations
# They mention they ""can't use 55"" suggesting they understand they can't combine the 5s into a two-digit number
```"
3462,"[1,6,8,13]",(13-1)x(8-6),174," Okay, let's see if I can get another one right in a row here. My cat's judging me. She's staring at me. I better get this right. Okay, 13, 8, 6, and 1. 13 plus 8 is 21. No, that won't work. No. 8 times 6. No. 13. I don't know. I don't know what to do with any of these. 13 times 6 divided by 8. 13 times 6 divided by 8. Close one. No. Can I use multiple? Oh, I can use multiple. Parentheses. I don't know if it'll help. Okay. Okay. No. Let's see. 8 plus 1. No. I don't know how to get to 24. Okay, we'll try 13 times 8 divided by 6. Um, plus 1. Um, minus 1. No. 8 times 6. No. I'm just making stuff up because it's not occurring to my brain. It is 14, 9 divided by 13. That is not 24. 47 divided by 13 is not 24. Ahh. 40 divided by 13 is 27. That's not 24. Okay. Okay. 7, no, 5 plus 8 is 13, plus 13 is 26, I want 24, 12 plus, oh, oh, oh, oh, oh, oh, oh, oh, 13 minus 1 times 8 minus 6, so that's 12 times 2.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 8 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(1, 6, 21),
    comment='""13 plus 8 is 21""',
)

# ""8 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(1, 13, 48),
    comment='""8 times 6""',
)

# ""13 times 6 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6/8=9.75"",
    resulting_state=(1, 9.75),
    comment='""13 times 6 divided by 8""',
)

# ""8 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+1=9"",
    resulting_state=(6, 9, 13),
    comment='""8 plus 1""',
)

# ""13 times 8 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*8/6=17.33"",
    resulting_state=(1, 17.33),
    comment='""13 times 8 divided by 6""',
)

# ""8 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(1, 13, 48),
    comment='""8 times 6""',
)

# ""5 plus 8 is 13, plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+13=21"",
    resulting_state=(1, 6, 21),
    comment='""5 plus 8 is 13, plus 13 is 26""',
)

# Finally ""13 minus 1 times 8 minus 6, so that's 12 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-1)*(8-6)=24"",
    resulting_state=(24,),
    comment='""13 minus 1 times 8 minus 6, so that\'s 12 times 2""',
)
```"
3463,"[7,9,13,13]",(13-9)x(13-7),94," 7, 9, 13, and 13. Let's try a big one here. 13 times 13 minus 9 times 7. Oh no, we don't want to do that. Okay, 13 times 13 divided by 9 plus 7. No. I don't know what 169 divided by 16 is anyway. It's not 24. 13 plus 7 is 20. 13 plus 9 is 22. That's not going to get me to 24. 13 plus 13 is 26 plus 9 is 35 minus 7. No, that's too much. Like 28. Ah, I don't know. I don't know. I don't know. These numbers are big and I can't figure it out. 13 minus 9 is 4. Oh, oh, oh, oh. 13 minus 9 is 4 times 13 minus 7 is 6 is 24.","```python
start_state = (7, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 13 minus 9 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13-9*7=106"",
    resulting_state=(106,),
    comment='""13 times 13 minus 9 times 7""',
)

# ""13 times 13 divided by 9 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13/9+7=25.78"",
    resulting_state=(25.78,),
    comment='""13 times 13 divided by 9 plus 7""',
)

# ""13 plus 7 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(9, 13, 20),
    comment='""13 plus 7 is 20""',
)

# ""13 plus 9 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(7, 13, 22),
    comment='""13 plus 9 is 22""',
)

# ""13 plus 13 is 26 plus 9 is 35 minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13+9-7=28"",
    resulting_state=(28,),
    comment='""13 plus 13 is 26 plus 9 is 35 minus 7""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 7, 13),
    comment='""13 minus 9 is 4""',
)

curr_state = graph.move_to_node(new_state)
# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(4, 6),
    comment='""13 minus 7 is 6""',
)

# ""4 times ... 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""4 times ... 6 is 24""',
)
```"
3465,"[3,7,7,9]",,180," 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 3-7-7-9 That's 14, that's 20. What do I do now? 7 plus 7 is 14. No, that's not what I want. Why am I too dumb to figure this out? These numbers right in front of me should be easy, but they're not. I know, say your thoughts aloud, I know. My brain is frozen, I can't even think of what to say. I'm just staring at these numbers, drawing a blank. Hope you're happy, survey. Oh, I don't know. 9 minus 7 is 2. I can't get 12 out of the other numbers. Come on, 24, up here in my brain. You're just giving me a headache. Why can't I get 12 out of the other numbers?","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant repeats ""3-7-7-9"" many times, which seems to be them just reading the numbers

# ""That's 14"" refers to ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(3, 9, 14),
    comment='""7 plus 7 is 14""',
)

# ""that's 20"" - not clear what operation they did to get 20

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""9 minus 7 is 2""',
)

# ""I can't get 12 out of the other numbers"" suggests they were trying to get to 12 as a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""I can\'t get 12 out of the other numbers"" suggests they were trying to get to 12',
)

# The rest of the transcript shows the participant's frustration but doesn't indicate any additional operations
```"
3466,"[4,5,5,9]",(9-5)x5+4,57," 24. 5 times 4 is 20. 9 minus 5 is 4. 4 times 4 is 18, plus 5 is 23. So I can do 4. 4 times 4 is 16, plus 5 is 21. 9 times 5 is 45, minus 20. That's 25. So 9 minus 5 is 4. 9 minus 5 is 4. 4 times 5 equals 20, plus 4 equals 24.","```python
start_state = (4, 5, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(5, 9, 20),
    comment='""5 times 4 is 20""',
)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 5, 4),
    comment='""9 minus 5 is 4""',
)

# ""4 times 4 is 18, plus 5 is 23"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+5=23"",
    resulting_state=(23,),
    comment='""4 times 4 is 18, plus 5 is 23"" - calculation error',
    result_calc_error=True,
)

# ""4 times 4 is 16, plus 5 is 21"" - trying again with correct multiplication
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+5=21"",
    resulting_state=(21,),
    comment='""4 times 4 is 16, plus 5 is 21""',
)

# ""9 times 5 is 45"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(4, 5, 45),
    comment='""9 times 5 is 45""',
)

# ""9 minus 5 is 4"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 5, 4),
    comment='""9 minus 5 is 4""',
)

# ""4 times 5 equals 20, plus 4 equals 24"" - this leads to the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5+4=24"",
    resulting_state=(24,),
    comment='""4 times 5 equals 20, plus 4 equals 24""',
)
```"
3470,"[2,3,3,7]",(7-3)x(2x3),149," Okay, 7 times 3 is 21, but I can't do that one. So what's 7 times 2 is 14, plus 3 plus 3 just reaches 20. So 3 plus 2 is 5, and 5 times 7, 7 times 5 is 35, so I can't do that one. Maybe if I do 3 times 3, which is 9, no, because 9 times 7 is 63, and 9 times 2 is 18. Well, 18 plus 7 is 25, right? 18 plus 7, 7 times 6 is 5, yeah, it's 25. So, I could do 3 times 3, which is 9, times 2, which is 18. Nope, I get the same answer. 7 times 3 is 21. Plus 2 is 23. And plus 3 is 24. 7 times 3 is 21. 24 times 2 is 48. That doesn't help me, because I can't get to 48 with these numbers. Because that is 24. 7 times 3 is 21, plus 3 is 24. But if I add or deduce anything else, I'll get the incorrect number. So, 3 times 2 is 6, times 3 is 18, again. Um... So, I can do 7 minus 3, which is 4. Yeah, okay. 7 minus 3 is 4, times 2 times 3, which is 6.","```python
start_state = (2, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(2, 3, 21),
    comment='""7 times 3 is 21""',
)

# ""7 times 2 is 14, plus 3 plus 3 just reaches 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+3+3=20"",
    resulting_state=(20,),
    comment='""7 times 2 is 14, plus 3 plus 3 just reaches 20""',
)

# ""3 plus 2 is 5, and 5 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+2)*7=35"",
    resulting_state=(3, 35),
    comment='""3 plus 2 is 5, and 5 times 7""',
)

# ""3 times 3, which is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(2, 7, 9),
    comment='""3 times 3, which is 9""',
)

# ""9 times 7 is 63""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(2, 63),
    comment='""9 times 7 is 63""',
)

# ""9 times 2 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(7, 18),
    comment='""9 times 2 is 18""',
)

# ""18 plus 7 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(25,),
    comment='""18 plus 7 is 25""',
)

# ""7 times 3 is 21. Plus 2 is 23. And plus 3 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+2+3=24"",
    resulting_state=(24,),
    result_calc_error=True,
    comment='""7 times 3 is 21. Plus 2 is 23. And plus 3 is 24""',
)

# ""3 times 2 is 6, times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2*3=18"",
    resulting_state=(7, 18),
    comment='""3 times 2 is 6, times 3 is 18""',
)

# ""7 minus 3, which is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(2, 3, 4),
    comment='""7 minus 3, which is 4""',
)

# ""times 2 times 3, which is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*(2*3)=24"",
    resulting_state=(24,),
    comment='""times 2 times 3, which is 6"" - participant multiplies 4 by (2*3)',
)
```"
3474,"[8,9,11,11]",,180," Alright, this is a hard one. 11 plus 11 is 22. No, yes, 11 plus 11 is 22. 9 minus 8 is 1. 22 plus 1 is 22. 11 minus 8 is 3. 9 plus 11 is 20, that's 23. 11 minus 9 is 2. 11 plus 8 is 19, plus 2 is 21, so that doesn't work either. 11, so if I do 11 minus 8, which is 3, plus 11 plus 9. Okay. Which is 19. That's not right. That's still 22. Okay. Let's see here. 11 plus 11 is 22, but I can't get 2 from 8 and 9. 8 minus 9 is 1. But if I do 11 plus 11, that doesn't make sense. Can I do... Because 9 times anything like this is going to be way too much. So if I do 9... I don't even know if this works. This problem set. 8 plus 9 is 17, and 17 plus 11 is 28, so that doesn't make sense. 11 plus 9... is 20. 8, 9, 10, 11 is 3. So that gets me to 23. So, 11 plus 9, which I just did that. 11 plus 9, that's 19. 19. 11 minus 9. 9 is 3, which is 22. So, it yields the same answer. Um... 9 plus 8 is 17. That doesn't work because 17 plus 11 is 28. And then I still have an 11. But 11... plus 11 is 22. Now I'm still missing 2. So it doesn't make any sense. Um...","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(8, 9, 22),
    comment='""11 plus 11 is 22""',
)

# ""9 minus 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 11, 11),
    comment='""9 minus 8 is 1""',
)

# ""11 minus 8 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 9, 11),
    comment='""11 minus 8 is 3""',
)

# ""9 plus 11 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(8, 11, 20),
    comment='""9 plus 11 is 20""',
)

# ""11 minus 9 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 8, 11),
    comment='""11 minus 9 is 2""',
)

# ""11 plus 8 is 19, plus 2 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8+2=21"",
    resulting_state=(21,),
    comment='""11 plus 8 is 19, plus 2 is 21""',
)

# ""11 minus 8, which is 3, plus 11 plus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8+11+9=23"",
    resulting_state=(23,),
    comment='""11 minus 8, which is 3, plus 11 plus 9""',
)

# ""8 plus 9 is 17, and 17 plus 11 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(11, 11, 17),
    comment='""8 plus 9 is 17""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+11=28"",
    resulting_state=(11, 28),
    comment='""17 plus 11 is 28""',
)

# ""11 plus 9... is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(8, 11, 20),
    comment='""11 plus 9... is 20""',
)

# ""11 plus 9, that's 19"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=19"",
    resulting_state=(8, 11, 19),
    comment='""11 plus 9, that\'s 19""',
    result_calc_error=True,
)

# ""11 minus 9... 9 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 8, 11),
    comment='""11 minus 9... 9 is 3""',
)

# ""11... plus 11 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(8, 9, 22),
    comment='""11... plus 11 is 22""',
)
```"
3483,"[2,2,3,11]",,180," 2 x 2, that's 4. 4 x 3, that's 4 x 3, that's 12. 12 plus 11. Nope, it'll be 2 x 2, that's 4. 11 plus 3 plus 2 plus 2, that's 18. How about 2 x 3, that's 6. 6 x 2, that's 12. 2 x 2, nope, not yet. 3 x 2, that's 6. 6 x 2, that's 12. 12 plus 11, 23. What's 11 divided by 2? 11 divided by 2, nope. How about 33 minus 4? Minus 4, 23. 29, 22, plus 2, 24. Okay, so I can't do 11 multiplied by 2 plus 2. 3 times 0, nope. Wrong, that's so wrong, that's so wrong. 3 times 0, nope. 3 times 0, nope. 3 minus 2, that's 1. 1 times 2. Shit. 2 multiplied by 2, that's 4. 4 multiplied by 11, divided by 3. Nope, 2 multiplied by 2. Thank you.","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 x 2, that's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(3, 4, 11),
    comment='""2 x 2, that\'s 4""',
)

# ""4 x 3, that's 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(11, 12),
    comment='""4 x 3, that\'s 12""',
)

# ""12 plus 11"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(23,),
    comment='""12 plus 11""',
)

# ""Nope"" participant starts over
curr_state = graph.move_to_node(start_state)

# ""11 plus 3 plus 2 plus 2, that's 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+3+2+2=18"",
    resulting_state=(18,),
    comment='""11 plus 3 plus 2 plus 2, that\'s 18""',
)

# ""2 x 3, that's 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(2, 6, 11),
    comment='""2 x 3, that\'s 6""',
)

# ""6 x 2, that's 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(11, 12),
    comment='""6 x 2, that\'s 12""',
)

# ""3 x 2, that's 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(2, 6, 11),
    comment='""3 x 2, that\'s 6""',
)

# ""6 x 2, that's 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(11, 12),
    comment='""6 x 2, that\'s 12""',
)

# ""12 plus 11, 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(23,),
    comment='""12 plus 11, 23""',
)

# ""What's 11 divided by 2?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/2=5.5"",
    resulting_state=(2, 3, 5.5),
    comment='""What\'s 11 divided by 2?""',
)

# ""How about 33 minus 4? Minus 4, 23. 29, 22, plus 2, 24""
# This seems to be the participant setting a subgoal and working backward
graph.set_subgoal((33,), comment='""How about 33 minus 4? Minus 4, 23. 29, 22, plus 2, 24""')

# ""11 multiplied by 2 plus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2+2=24"",
    resulting_state=(3, 24),
    comment='""11 multiplied by 2 plus 2""',
)

# ""3 minus 2, that's 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-2=1"",
    resulting_state=(1, 2, 11),
    comment='""3 minus 2, that\'s 1""',
)

# ""2 multiplied by 2, that's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(3, 4, 11),
    comment='""2 multiplied by 2, that\'s 4""',
)

# ""4 multiplied by 11, divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11/3=14.67"",
    resulting_state=(14.67,),
    comment='""4 multiplied by 11, divided by 3""',
)
```"
3484,"[1,2,7,11]",(7x2)-1+11,81," 11, 7, that's 14. Yup, this makes sense. 7 x 2, that's 14. Clear. 14, plus 1, 15, 15. Ouch. No. 7 x 2, that's 14. Minus 1, that's 13. Clear. 7 x 2, that's 14. Clear. 14, that's 14. Then subtract 1. And then add 11.","```python
start_state = (1, 2, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11, 7, that's 14"" - participant likely meant to add these but corrects themselves
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=14"",
    resulting_state=(1, 2, 14),
    comment='""11, 7, that\'s 14"" - participant likely meant to add these but corrects themselves',
    result_calc_error=True
)

# ""7 x 2, that's 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 11, 14),
    comment='""7 x 2, that\'s 14""'
)

# ""14, plus 1, 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+1=15"",
    resulting_state=(11, 15),
    comment='""14, plus 1, 15""'
)

# ""No. 7 x 2, that's 14. Minus 1, that's 13"" - participant backtracks and tries a different approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2-1=13"",
    resulting_state=(11, 13),
    comment='""7 x 2, that\'s 14. Minus 1, that\'s 13""'
)

# Finally ""Then subtract 1. And then add 11"" - participant finds the solution
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2-1+11=24"",
    resulting_state=(24,),
    comment='""7 x 2, that\'s 14. Then subtract 1. And then add 11""'
)
```"
3486,"[6,6,8,9]",,180," 6 x 6, that's 36. 6 minus 8, that's 9. 72 minus 36, that's 36. 9 divided by 3, 9 divided by 6, that's 1.5. 8 multiplied by 6, that's 48. And we want 24. 48 divided by 2, 24, 9. 6 plus 6, 12, 12, 12 plus 8. 12 plus 8, that's 20. 12 plus 8, that's 90. Okay, 8 plus 6, that's 14. That's 14. We need 10. Uh-huh. 8, shit. Okay, 9 multiplied by 8, 72. 6 plus 6, 24. No 12. 12 plus 9. 6 divided by 6, that's 1. 8 plus 1, that's 9. Or... Which one? 1, how many plus 8? 9 times 7, that's 63. Oh my goodness.","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 x 6, that's 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(8, 9, 36),
    comment='""6 x 6, that\'s 36""',
)

# ""6 minus 8, that's 9"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6-8=9"",
    resulting_state=(6, 9, 9),
    comment='""6 minus 8, that\'s 9"" seems to be a calculation error',
    result_calc_error=True,
)

# ""72 minus 36, that's 36"" - not clear where 72 came from

# ""9 divided by 6, that's 1.5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/6=1.5"",
    resulting_state=(1.5, 6, 8),
    comment='""9 divided by 6, that\'s 1.5""',
)

# ""8 multiplied by 6, that's 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(6, 9, 48),
    comment='""8 multiplied by 6, that\'s 48""',
)

# ""48 divided by 2"" - participant seems to be setting a subgoal
graph.set_subgoal(
    subgoal_state=(2,),
    comment='""48 divided by 2, 24"" - participant seems to be looking for a way to divide by 2'
)

# ""6 plus 6, 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(8, 9, 12),
    comment='""6 plus 6, 12""',
)

# ""12 plus 8, that's 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(9, 20),
    comment='""12 plus 8, that\'s 20""',
)

# ""12 plus 8, that's 90"" seems to be a calculation error repeating the previous operation
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=90"",
    resulting_state=(9, 90),
    comment='""12 plus 8, that\'s 90"" seems to be a calculation error',
    result_calc_error=True,
)

# ""8 plus 6, that's 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(6, 9, 14),
    comment='""8 plus 6, that\'s 14""',
)

# ""9 multiplied by 8, 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(6, 6, 72),
    comment='""9 multiplied by 8, 72""',
)

# ""6 plus 6, 24. No 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(8, 9, 12),
    comment='""6 plus 6, 24. No 12"" - participant corrects themselves',
)

# ""6 divided by 6, that's 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/6=1"",
    resulting_state=(1, 8, 9),
    comment='""6 divided by 6, that\'s 1""',
)

# ""8 plus 1, that's 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+1=9"",
    resulting_state=(9, 9),
    comment='""8 plus 1, that\'s 9""',
)
```"
3489,"[3,6,8,13]",(13-3)+(8+6),66," 8 x 8-6, 8-6, that's 2, 2. 2, 3, 4, 5, 5 plus 13, that's 71, 19, 18. So how about 6-3, 13 divided by 8, that's NOPE. 6 plus 8, that's 14, NOPE. Yup, we got the answer. 13, NOPE, which will be into bracket 13, minus 3 to get 10, and then plus 6, no plus, plus 8 plus 6 into bracket.","```python
start_state = (3, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8-6, that's 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 3, 13),
    comment='""8-6, that\'s 2""',
)

# ""5 plus 13, that's 71, 19, 18"" seems to be a calculation error or transcription error
# The participant seems to be adding numbers but the calculation is unclear

# ""6-3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 8, 13),
    comment='""6-3""',
)

# ""13 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/8=1.625"",
    resulting_state=(1.62, 3, 6),
    comment='""13 divided by 8""',
)

# ""6 plus 8, that's 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(3, 13, 14),
    comment='""6 plus 8, that\'s 14""',
)

# ""13 minus 3 to get 10, and then plus 8 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-3)+(8+6)=24"",
    resulting_state=(24,),
    comment='""13 minus 3 to get 10, and then plus 8 plus 6""',
)
```"
3492,"[5,6,8,13]",,180," Target number is 24. Okay, we have numbers 5, 6, 18, and 13. Oh man, let's go. 6 plus 5 is 11. 11 plus 8 is 19. 19 minus 13 is 6. What if we want it? 8 times 5, which is 40, minus 6. 6 times 8 is 48. Minus 5 is 43. 8 times 6, close parenthesis, 8 times 6 is 48. submit answer answer incorrect ok let's go 13 minus 5 13 minus 5 is 7 13 minus 5 is 7 plus 6 plus 5 plus 6 plus 5 is 7 plus 8 15 15 plus 6 is 21 that's not right 13 let's go 13 times 5 5 9 6 7 8 9 11 13 times 5 9 6 9 5 8 9 10 11 12 13 times 5 12","```python
start_state = (5, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 5 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(8, 11, 13),
    comment='""6 plus 5 is 11""',
)

# ""11 plus 8 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(13, 19),
    comment='""11 plus 8 is 19""',
)

# ""19 minus 13 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19-13=6"",
    resulting_state=(6,),
    comment='""19 minus 13 is 6""',
)

# ""8 times 5, which is 40, minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5-6=34"",
    resulting_state=(13, 34),
    comment='""8 times 5, which is 40, minus 6""',
)

# ""6 times 8 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(5, 13, 48),
    comment='""6 times 8 is 48""',
)

# ""Minus 5 is 43""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-5=43"",
    resulting_state=(13, 43),
    comment='""Minus 5 is 43""',
)

# ""8 times 6 is 48"" - participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 13, 48),
    comment='""8 times 6 is 48""',
)

# ""13 minus 5 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=7"",
    resulting_state=(6, 7, 8),
    comment='""13 minus 5 is 7""',
)

# ""plus 6 plus 5 is 7 plus 8 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(6, 15),
    comment='""plus 6 plus 5 is 7 plus 8 15""',
)

# ""15 plus 6 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+6=21"",
    resulting_state=(21,),
    comment='""15 plus 6 is 21""',
)

# The rest appears to be the participant counting or making calculation errors that aren't clearly stated

```"
3493,"[6,7,8,10]",10x(8,180," Alright, target numbers 24, we have 6, 7, 8, and 10. 10 times 8 is 80. 6, 7, 8, 10. 10 times 8 is 80. 80 times 7, 80 times 7, 560, 560 divided by 6, it's pretty much, 10 times 6 is 60. 60 times 8 is 56, 7, invalid equation. Let's do 8 times, how do we get 24 out of this? How do we get 24 out of this? How do we get 24 out of this? 6, 7, 8, 10, 6, 7, 8, 10, and 10 times 8. times six divided by seven. Thank you.","```python
start_state = (6, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 8 is 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(6, 7, 80),
    comment='""10 times 8 is 80""',
)

# ""80 times 7, 560""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80*7=560"",
    resulting_state=(6, 560),
    comment='""80 times 7, 560""',
)

# ""560 divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""560/6=93.33"",
    resulting_state=(93.33,),
    comment='""560 divided by 6""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""10 times 6 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6=60"",
    resulting_state=(7, 8, 60),
    comment='""10 times 6 is 60""',
)

# ""60 times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60*8=480"",
    resulting_state=(7, 480),
    comment='""60 times 8""',
)

# The participant then repeats ""How do we get 24 out of this?"" several times

# ""10 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(6, 7, 80),
    comment='""10 times 8""',
)

# ""times six divided by seven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""80*6/7=68.57"",
    resulting_state=(68.57,),
    comment='""times six divided by seven""',
)

```"
3495,"[3,5,12,12]",12(12,180," So there. 3, 5, 12, and 12. Let's go. 12. 12. times 5 is 60. 10 times 5 is 60. 10 times 5 is 60. Times 3 is 180. Divided by 12. Divided by 12. Divided by 12. Divided by 12. Slow times 3. Slow times 3. 5. 5. ? ? ? ? 4. 4. Four. 12 times 12 minus 12 times 12 is 144. 12 times 12 is 144, 144 minus 5 divided by 3, incorrect answer, 12 times 12 is 144, 144 times 3.","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 5 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(3, 12, 60),
    comment='""12 times 5 is 60""',
)

# ""Times 3 is 180""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60*3=180"",
    resulting_state=(12, 180),
    comment='""Times 3 is 180""',
)

# ""Divided by 12"" - participant tries to divide 180 by 12
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""180/12=15"",
    resulting_state=(15,),
    comment='""Divided by 12""',
)

# The participant seems stuck and repeats some phrases

# ""12 times 12 is 144""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(3, 5, 144),
    comment='""12 times 12 is 144""',
)

# ""144 minus 5 divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(144-5)/3=46.33"",
    resulting_state=(46.33,),
    comment='""144 minus 5 divided by 3""',
)

# ""144 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""144*3=432"",
    resulting_state=(5, 432),
    comment='""144 times 3""',
)

```"
3497,"[1,6,12,13]",,180," Target number 24, 1, 6, 12, 13. 13 times 6 is... 6 times 4 is 8. Carry along 78. 78. Nope. Let's go. 13 plus 12 is 25. Minus 1 is 24. 13... 13 times 6 is 78. 13, 12, 6, and 1, how are they not all used, bro? 6 minus 1 is 5, 13 times 12 is 144, plus 13, 13 times 12, plus 6, plus 1, plus 76. Plus 1, plus 6, 13 times 6, I don't understand. 6 plus 12 is 18, plus 13 times 1, 6 times 12 is 72.","```python
start_state = (1, 6, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 6 is... 6 times 4 is 8. Carry along 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(1, 12, 78),
    comment='""13 times 6 is... 78""',
)

# ""13 plus 12 is 25. Minus 1 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12-1=24"",
    resulting_state=(6, 24),
    comment='""13 plus 12 is 25. Minus 1 is 24""',
)

# ""6 minus 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(5, 12, 13),
    comment='""6 minus 1 is 5""',
)

# ""13 times 12 is 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*12=144"",
    resulting_state=(1, 6, 144),
    result_calc_error=True,
    comment='""13 times 12 is 144""',
)

# ""6 plus 12 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12=18"",
    resulting_state=(1, 13, 18),
    comment='""6 plus 12 is 18""',
)

# ""6 times 12 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=72"",
    resulting_state=(1, 13, 72),
    comment='""6 times 12 is 72""',
)
```"
3498,"[5,5,10,10]",10(10x5,180," Ten times ten is a hundred. A hundred. Two plus five is fifteen, times five. Fifteen times five, one plus five, one plus ten. Ten plus ten is twenty. Twenty times five is a hundred. A hundred divided by five is twenty. That's not the right answer. Okay, what if we want to add... Five times five. Five times five is twenty-five, plus ten is thirty-five, minus ten is thirty-five. That's not the right answer. Wait for me, wait. Ten times ten times ten times five divided by five. Twenty-four times five is what? Twenty-four times five. Twenty-four times five. One twenty. We need the number to be...","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Ten times ten is a hundred""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 5, 100),
    comment='""Ten times ten is a hundred""',
)

# ""Ten plus ten is twenty""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 5, 20),
    comment='""Ten plus ten is twenty""',
)

# ""Twenty times five is a hundred""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20*5=100"",
    resulting_state=(5, 100),
    comment='""Twenty times five is a hundred""',
)

# ""A hundred divided by five is twenty""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""100/5=20"",
    resulting_state=(20,),
    comment='""A hundred divided by five is twenty""',
)

# ""Five times five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(10, 10, 25),
    comment='""Five times five""',
)

# ""plus ten is thirty-five""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+10=35"",
    resulting_state=(10, 35),
    comment='""plus ten is thirty-five""',
)

# ""minus ten is thirty-five"" seems to be a calculation error since they say minus but get the same number
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-10=35"",
    resulting_state=(35,),
    comment='""minus ten is thirty-five"" seems to be a calculation error',
    result_calc_error=True,
)

```"
3500,"[3,5,6,11]",11x,180, Eleven plus five is sixteen plus six eight plus six is fourteen eleven plus three is fourteen fourteen minus five is nine nine nine six is fifty-four eleven plus eleven plus three. So that's got eleven plus six eleven plus six is seventeen. Seventeen plus three is twenty-five. eleven five plus three is twenty-five. minus six times two damn man I really feel like I'm not very good at math after doing this. six plus five is eleven eleven plus six is sixty-six. eleven plus six is sixty-six. eleven plus six is sixty-six. eleven plus six is sixty-six. eleven plus six is sixty-six. eleven plus six is sixty-six. eleven plus six is sixty-six. 66 divided by 3 is 22 plus 5 is 27,"```python
start_state = (3, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Eleven plus five is sixteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(3, 6, 16),
    comment='""Eleven plus five is sixteen""',
)

# ""plus six"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(3, 22),
    comment='""plus six""',
)

# ""eleven plus three is fourteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+3=14"",
    resulting_state=(5, 6, 14),
    comment='""eleven plus three is fourteen""',
)

# ""fourteen minus five is nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-5=9"",
    resulting_state=(6, 9),
    comment='""fourteen minus five is nine""',
)

# ""nine nine six is fifty-four"" seems to be a transcription error, likely meant ""nine times six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(54,),
    comment='""nine nine six is fifty-four"" seems to be a transcription error, likely meant ""nine times six""',
)

# ""eleven plus six is seventeen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(3, 5, 17),
    comment='""eleven plus six is seventeen""',
)

# ""Seventeen plus three is twenty-five""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+3=25"",
    resulting_state=(5, 25),
    comment='""Seventeen plus three is twenty-five""',
    result_calc_error=True,  # since 17+3=20, not 25
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5+3=25"",
    resulting_state=(6, 25),
    comment='""eleven five plus three is twenty-five""',
    result_calc_error=True,  # since 11+5+3=19, not 25
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+5=11"",
    resulting_state=(3, 11, 11),
    comment='""six plus five is eleven""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=66"",
    resulting_state=(3, 5, 66),
    comment='""eleven plus six is sixty-six"" (repeated several times, seems to be a calculation error)',
    result_calc_error=True,
)

# ""66 divided by 3 is 22 plus 5 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""66/3+5=27"",
    resulting_state=(27,),
    comment='""66 divided by 3 is 22 plus 5 is 27""',
)
```"
3504,"[2,2,7,10]",(-2)+(10x2),180," 12,14,15. 12,14,15. 10, 2 over 10, 2 plus 2 times, no, that won't work, 9, 19, 21, 20, 14, 10, 10 plus 7, no, 10 plus 2, 14 plus 10. Um, 7 times 2 plus, um, no, dang it, um, 7, Okay, 10 times 2 is 20, so 7, okay, negative 5 plus 2, it's not, it's not a team, oh my gosh. Um, 2, negative 2 plus 10 times 2.","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10, 2 over 10"" seems to be trying division
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 7),
    comment='""10, 2 over 10""',
)

# ""2 plus 2 times"" participant starts but abandons this path

# The numbers ""9, 19, 21, 20, 14, 10"" seem to be the participant listing numbers, not operations

# ""10 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(2, 2, 17),
    comment='""10 plus 7""',
)

# ""10 plus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2=12"",
    resulting_state=(2, 7, 12),
    comment='""10 plus 2""',
)

# ""7 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 10, 14),
    comment='""7 times 2""',
)

# ""10 times 2 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(2, 7, 20),
    comment='""10 times 2 is 20""',
)

# ""negative 2 plus 10 times 2"" - this is their final answer
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""-2+20=24"",
    resulting_state=(24,),
    comment='""negative 2 plus 10 times 2"" - this is their final answer',
)
```"
3506,"[6,6,8,9]",(,180," 36. 6 times 6 is 36. 9 times 6 is 54. 8 times 6 is 48. 6 times 6 is 36 minus 8 is 28. 9 times 8 is 72 minus 36. 72. 8 times 6 is 88. 48 plus... So I'm going to do negative 8 plus negative... No. Negative 8... Negative 8... Times... Negative... Times... Oh, no. Times... Negative 6 plus... nine, oh wait no, times, oh, that's freaking, that's positive, dang it, no, that's not right, negative 36, plus, uh, 54, negative 48, okay,","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(8, 9, 36),
    comment='""6 times 6 is 36""',
)

# ""9 times 6 is 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(6, 8, 54),
    comment='""9 times 6 is 54""',
)

# ""8 times 6 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(6, 9, 48),
    comment='""8 times 6 is 48""',
)

# ""6 times 6 is 36 minus 8 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6-8=28"",
    resulting_state=(9, 28),
    comment='""6 times 6 is 36 minus 8 is 28""',
)

# ""9 times 8 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(6, 6, 72),
    comment='""9 times 8 is 72""',
)

# ""8 times 6 is 88"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=88"",
    resulting_state=(6, 9, 88),
    comment='""8 times 6 is 88"" - calculation error',
    result_calc_error=True,
)

# The rest of the transcript shows the participant trying to work with negative numbers but not clearly stating complete operations
```"
3511,"[3,7,7,9]",(3x7)+(9-7),180," Um, so alright, 3, 7, 7, and 9. Okay, so let's try like 9, oops, I need to put this, okay 9, now I feel really pressed for time. Like that last one I feel like I was so close. Um, so we know 9 minus 3 is going to be 6. And then we just need to get to 4, but how am I going to get to 4? Um, let's, we could try it like this, times, I guess like, if you take 7, divide it by 7, I'm not sure. No? Alright, that was kind of a guess. Um, alright, 9 minus 3, we did 9 minus 3 times 7. 9 minus 3 is 6. So if we do 9 minus 3. Okay, so we know that that's 6. So if we have 6, and then we do plus 7 plus 7, is that going to be 24? Um, now I'm actually counting on my fingers. Um, no, it's going to be 20. So, I have to think outside the box. 9 minus 3 is not going to work. We're going to have to do something like, hold on. I mean, okay, if we do 3 times 7, we're really close, but 3 times 7. Oh, alright, 3 times 7, 3 times 7, and we close it. And then we do plus, and we do this, 7, 9 minus 7. And we close it. Would that work? 3 times 7 is 21. And 9, um, minus 7 is obviously 2. So, uh, so close. I'm literally one shy, so what could I do? Uh, if 3 times 7 is 21, then I take that and I say 9 minus 7. That won't work. What if we did... What if we did 9 plus... ...","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 3 is going to be 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 7, 7),
    comment='""9 minus 3 is going to be 6""',
)

# ""if you take 7, divide it by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""7/7=1"",
    resulting_state=(1, 3, 9),
    comment='""if you take 7, divide it by 7""',
)

# ""9 minus 3 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-3)*7=42"",
    resulting_state=(7, 42),
    comment='""9 minus 3 times 7""',
)

# ""if we have 6, and then we do plus 7 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7+7=20"",
    resulting_state=(20,),
    comment='""if we have 6, and then we do plus 7 plus 7""',
)

# ""3 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 9, 21),
    comment='""3 times 7""',
)

# ""9 minus 7 is obviously 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(21, 2),
    comment='""9 minus 7 is obviously 2""',
)

# Then they add 21 and 2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+2=23"",
    resulting_state=(23,),
    comment='""So, uh, so close. I\'m literally one shy""',
)

# The participant then tries to think of other ways but doesn't complete any more calculations before time runs out
```"
3512,"[3,5,10,10]",(10+3),180," Am I allowed to use paper and pen at this point? I really want to. Um, it didn't say I can't, can I? I don't know. Um, so we have 10, 10, 3, and 5. I honestly feel like I really want a pen and paper, but I'm in my head. 10 and 10 is 20. That should be so easy. Oh my god, come on, we can do this. This is one of the easiest ones we've had. Um, let's try just 10. Let's divide it by 5. And then let's multiply that by 10 minus 3. This, if this doesn't work, I'm gonna go crazy. Because this, this feels like this should be simple. And submit before I run out of time. No. How is that not correct? 5, 10 divided by 5 is 5. So, then if we times that by 7, oh, okay. Um, all right, let's just delete. Let me try again. So, if we do 10, oops, delete, okay. 10 minus 3. And then, I am thinking a lot, 10 minus 3, so we know that that's 7. So, if we do 7 times 5 is too much, um, so 10 minus 3 is 7, what can we do with 7? So, if we do 7, 7 times 5 is just 7. It's just not gonna work, because there's not much to work with. Um, so if we do 7 times 5, that's too high. Um, 10 minus 3 is 7. So, if we take 7, and we say, what if we might, what if we do plus 3, delete. 10 plus 3. So, let's say now we're working with 13. So, we have 13, and then let's add. We can't add 5 though, and I can't minus 1. So, 13, uh, minus 10. So, 13, uh, minus 10.","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 and 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(3, 5, 20),
    comment='""10 and 10 is 20""',
)

# ""Let's divide it by 5. And then let's multiply that by 10 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*(10-3)=14"",
    resulting_state=(10, 14),
    comment='""Let\'s divide it by 5. And then let\'s multiply that by 10 minus 3""',
)

# ""10 minus 3"" participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 10),
    comment='""10 minus 3""',
)

# ""7 times 5 is too much""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(10, 35),
    comment='""7 times 5 is too much""',
)

# ""10 plus 3"" participant tries a new approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(5, 10, 13),
    comment='""10 plus 3""',
)

# ""13 minus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 5),
    comment='""13 minus 10""',
)
```"
3522,"[6,6,7,10]",,180," I know 4 and... I know 6 and... 6 and 4 can give me that. What about 6 plus 12? 7 plus 10, that's going to give me... 6 plus 6, that's 10, 3. Why don't I go... 6 and... 6 and 7... 6 plus 6 is... no, that's not an option. 6 and... 6 and 42... 6 and 60. 42, that's not going to give me that option again. Why don't I go 10 and 6, that's 16. 16 by 18, that's too much. Why don't I eliminate 1 from there? That's 6. 6 is 36. 36 plus 7, that's 42. Minus 10. Minus 10. Minus 10 is giving me 22. Just this 10 is... it's not worth it. Minus 6 gives me... oh god. 6... 6 36 plus 10. 10 minus 6, that's 4. 7 minus 6, that's... that's 1. 10 minus 6, 4. 7 minus 6. 10 minus 6. I'm getting this. I'm not getting this. I'm getting this. I'm not getting this. Why don't I... Why don't I... Oh... Oh... 7 and 10, 70. Now, 6 and 6... 6 and 60. 6 divided by 6. That's giving me... That's giving me...","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 12"" - participant may have meant 6+6 since there's no 12 in start state
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(7, 10, 12),
    comment='""6 plus 12"" - participant likely meant 6+6',
)

# ""7 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(6, 6, 17),
    comment='""7 plus 10""',
)

# ""6 plus 6, that's 10"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=10"",
    resulting_state=(7, 10, 10),
    comment='""6 plus 6, that\'s 10"" - calculation error',
    result_calc_error=True,
)

# ""10 and 6, that's 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6=16"",
    resulting_state=(6, 7, 16),
    comment='""10 and 6, that\'s 16""',
)

# ""6 is 36"" - participant likely multiplied 6*6
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(7, 10, 36),
    comment='""6 is 36"" - participant likely multiplied 6*6',
)

# ""36 plus 7, that's 42""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36+7=42"",
    resulting_state=(10, 42),
    comment='""36 plus 7, that\'s 42""',
    result_calc_error=True,
)

# ""Minus 10"" from 42
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-10=22"",
    resulting_state=(22,),
    comment='""Minus 10"" from 42',
    result_calc_error=True,
)

# Going back to start state for new attempts
curr_state = graph.move_to_node(start_state)

# ""10 minus 6, that's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 6, 7),
    comment='""10 minus 6, that\'s 4""',
)

# ""7 minus 6, that's... that's 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 6, 10),
    comment='""7 minus 6, that\'s... that\'s 1""',
)

# ""7 and 10, 70"" - participant multiplies
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(6, 6, 70),
    comment='""7 and 10, 70""',
)

# ""6 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/6=1"",
    resulting_state=(1, 7, 10),
    comment='""6 divided by 6""',
)
```"
3527,"[8,9,11,11]",,180," After you've proved this division, 11, 11, 11, 9 by 11, that's 2, that's 2, 2 times 21, 2 times 21, that's 22, 8 is not going to be somewhere. So why don't I go by, by this thing, 9, 11 minus 9, that's 3, yeah, so 11 minus, that's 2, that's 2, I'm going to, to, 11 minus 8, 3, then 10, then 20, that's 21. What's again, what's again, what's again? Can I get 12 from this? This is 11. 11, um, okay, can I get, no. That's ... 11 divided by 11. That's going to be 1. 1 minus 88, 24. or you love my nice cheese you're fine man it's it's classy it's give you interesting 16, or 16 plus 11, that's not going to, that's 17, 17 plus 11, 11 plus, 11 plus 11 is 23, and 8 plus 9, 8 plus 9.","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 by 11, that's 2"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11/11=2"",
    resulting_state=(2, 8, 9),
    comment='""11 by 11, that\'s 2"" - participant makes calculation error',
    result_calc_error=True,
)

# ""2 times 21"" - not clear where 21 comes from

# ""11 minus 9, that's 3"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=3"",
    resulting_state=(3, 8, 11),
    comment='""11 minus 9, that\'s 3"" - participant makes calculation error',
    result_calc_error=True,
)

# ""11 minus 8, 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 9, 11),
    comment='""11 minus 8, 3""',
)

# ""11 divided by 11. That's going to be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11/11=1"",
    resulting_state=(1, 8, 9),
    comment='""11 divided by 11. That\'s going to be 1""',
)

# ""16 plus 11"" - not clear where 16 comes from
# ""11 plus 11 is 23"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=23"",
    resulting_state=(8, 9, 23),
    comment='""11 plus 11 is 23"" - calculation error',
    result_calc_error=True,
)

# ""8 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(11, 11, 17),
    comment='""8 plus 9""',
)
```"
3528,"[4,7,8,11]",,180," 3. Okay. 11 minus 7 minus 8. Why don't I add the 2, 2, 2, 2 together? So 11 plus 8 is 9. It's 19. 19 plus 7 is 26 minus 4. That's too much. What about 4? Okay. 8 by 4. That's 2. So I'm getting 2. That one too will now return with. That's 18. 18 by 8. 7 times 11. That's 77. That's 8 minus 4. 11 minus 6. That's 5. 4 plus 8. 12. 12 plus 11. That's 23. I'm going to get the. What? 7 plus 4. That's 11. But 8, 8 divided by 4. That's 2. 2, 2 times. 2 times 7. 14. 14 plus 11. 25. 7 plus 8. That's 15. 15 plus 11. 26. 7 times 8. 56. 4 times 11. 44. 44 divided by 2. That's 24. 4.","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 7 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7-8=-4"",
    resulting_state=(-4, 4),
    comment='""11 minus 7 minus 8""',
)

# ""11 plus 8 is 9. It's 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(4, 7, 19),
    comment='""11 plus 8 is 19""',
)

# ""19 plus 7 is 26 minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+7-4=22"",
    resulting_state=(22,),
    comment='""19 plus 7 is 26 minus 4""',
)

# ""8 by 4. That's 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 7, 11),
    comment='""8 by 4. That\'s 2""',
)

# ""7 times 11. That's 77""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*11=77"",
    resulting_state=(4, 8, 77),
    comment='""7 times 11. That\'s 77""',
)

# ""8 minus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 11),
    comment='""8 minus 4""',
)

# ""4 plus 8. 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(7, 11, 12),
    comment='""4 plus 8. 12""',
)

# ""12 plus 11. That's 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(7, 23),
    comment='""12 plus 11. That\'s 23""',
)

# ""7 plus 4. That's 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(8, 11, 11),
    comment='""7 plus 4. That\'s 11""',
)

# ""8 divided by 4. That's 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 7, 11),
    comment='""8 divided by 4. That\'s 2""',
)

# ""2 times 7. 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(11, 14),
    comment='""2 times 7. 14""',
)

# ""14 plus 11. 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+11=25"",
    resulting_state=(25,),
    comment='""14 plus 11. 25""',
)

# ""7 plus 8. That's 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(4, 11, 15),
    comment='""7 plus 8. That\'s 15""',
)

# ""15 plus 11. 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+11=26"",
    resulting_state=(4, 26),
    comment='""15 plus 11. 26""',
)

# ""7 times 8. 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 11, 56),
    comment='""7 times 8. 56""',
)

# ""4 times 11. 44""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(7, 8, 44),
    comment='""4 times 11. 44""',
)

# ""44 divided by 2. That's 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44/4=11"",
    resulting_state=(7, 8, 11),
    comment='""44 divided by 2. That\'s 24"" - participant made calculation error',
    result_calc_error=True,
)
```"
3532,"[4,10,12,12]",12+12,180," Twelve plus twelve is twenty-two, right? Twelve plus twelve is twenty-four. Ten times twelve. Twelve times twelve. Twelve times twelve. I don't even know. How? How do you get to twenty-four with this? Twelve plus twelve is twenty-four. Twenty-four minus forty. that won't work that won't work none of this will work I don't understand","```python
start_state = (4, 10, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Twelve plus twelve is twenty-two, right?"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=22"",
    resulting_state=(4, 10, 22),
    comment='""Twelve plus twelve is twenty-two, right?"" - participant makes calculation error',
    result_calc_error=True,
)

# ""Twelve plus twelve is twenty-four"" - participant corrects their error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 10, 24),
    comment='""Twelve plus twelve is twenty-four""',
)

# ""Ten times twelve""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(4, 12, 120),
    comment='""Ten times twelve""',
)

# ""Twelve times twelve""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(4, 10, 144),
    comment='""Twelve times twelve""',
)

```"
3533,"[6,8,11,12]",12/6x8,180," 8 times 8 is 88, and 6 times 12 is 48. 88 minus 48 is 40. That won't even work. 11 times... go away! 11... is 132. That won't work. How does this work? I don't understand how you're going to get there. I don't understand how I'm going to get here. 12 divided by 6 is 2. 12 divided by 6 is 2. Divided by 8. Wait, hold on. How does that work? Times 8... Times 8 is 16. That won't work. That won't work. 12 divided by 6 is 2. Times 8 is 16.","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 is 88"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(6, 11, 12, 64),
    comment='""8 times 8 is 88"" - participant makes a calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""6 times 12 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=48"",
    resulting_state=(8, 11, 48),
    comment='""6 times 12 is 48""',
    result_calc_error=True,  # 6*12=72, not 48
)

curr_state = graph.move_to_node(start_state)
# ""11..."" participant seems to be trying something with 11 but doesn't complete the thought
# ""is 132"" might be 11*12=132
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(6, 8, 132),
    comment='""11... is 132"" might be 11*12=132',
)

curr_state = graph.move_to_node(start_state)
# ""12 divided by 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 8, 11),
    comment='""12 divided by 6 is 2""',
)

# ""Times 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(11, 16),
    comment='""Times 8 is 16""',
)
```"
3535,"[5,10,10,11]",,180," I don't know what to tell you because all of my thoughts don't work and none of them are functional. What I'm trying to do is not functional. I don't know what to tell you, I can't figure this out. This is impossible. 10-11 is 1. 10 times 7 is 100. Divided by 55. Still won't get you a 24. I don't know what to tell you. I honestly don't know what to tell you. I'm trying to figure this out. It's not going well when you keep sending me reminders to talk about it. I can't do this if you keep telling me to think talk about it because I'm in my head trying to figure this out, but you are like constant reminders getting in my mind. 10 times 11, 10 times 11, 110. 10 times 10 is 100, 10 times 100, 55 is still not 24. Okay. 10 times 10 is 11. So, 10 times 100 divided by 11 times 5 is 55. That still won't get you to 24.","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10-11 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-10=1"",
    resulting_state=(1, 5, 10),
    comment='""10-11 is 1""',
)

# ""10 times 11, 110""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*11=110"",
    resulting_state=(5, 10, 110),
    comment='""10 times 11, 110""',
)

# ""10 times 10 is 100""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 11, 100),
    comment='""10 times 10 is 100""',
)

# ""100 divided by 11 times 5 is 55"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""100/11*5=45.45"",
    resulting_state=(45.45,),
    comment='""100 divided by 11 times 5 is 55""',
    result_calc_error=True,
)
```"
3537,"[1,5,6,11]",,180," I don't know how to do this with prime numbers. I don't. I can't do this with prime numbers. 6 times 5 is 30. Minus 11 is 18. 19 plus 1 is 20. 11 plus 6 is 16. 11 plus 5... 11 plus 6 is 17. Plus 5 is 22. It's 24. Um... I could be so upset if I get rejected for this because I don't know how to do this. 11 times 1 is 1. 11 times 1 is 1. Plus 11 is 22. This is making sense. 11 plus 11 is 22. Plus 1 is 23. That won't work. 66 minus 55. 66 minus... 55... That's 11. That won't work either. 55... 55... 30... 30... 36... 36, 37... 36... 37... 37... 40... g translation failed Thank you.","```python
start_state = (1, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 5 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 11, 30),
    comment='""6 times 5 is 30""',
)

# ""Minus 11 is 18"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-11=19"",
    resulting_state=(1, 19),
    comment='""Minus 11 is 18"" though they get 19',
)

# ""19 plus 1 is 20"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+1=20"",
    resulting_state=(20,),
    comment='""19 plus 1 is 20""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""11 plus 6 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=16"",
    resulting_state=(1, 5, 16),
    comment='""11 plus 6 is 16"" calculation error',
    result_calc_error=True,
)

# ""11 plus 6 is 17"" correcting previous error
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(1, 5, 17),
    comment='""11 plus 6 is 17"" correcting previous error',
)

# ""Plus 5 is 22"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+5=22"",
    resulting_state=(1, 22),
    comment='""Plus 5 is 22""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""11 times 1 is 1"" calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11*1=11"",
    resulting_state=(5, 6, 11),
    comment='""11 times 1 is 1"" calculation error',
    result_calc_error=True,
)

# The rest of the transcript contains numbers (30, 36, 37, 40) but without clear operations being performed
```"
3538,"[6,7,12,12]",(12/6)+12/7,180," 12 times 7. 12 times 7. 12 times 7. 12 times 7. Equals 84. Minus 84. 84, alright, okay. 84. 6 times 7. Plus 42. 84. Minus 82. 82. That won't work. 65 by 12 is 2. 12 plus 7 plus 19. So I'm going to take it to 21. 19 plus 7. 19 plus 7 takes you to 25. Takes you to 26. 19 plus... None of this works. Um, six divided by two is 12, six, let's try this, 12 divided by six times seven divided by 12. Yeah. All right. Um,","```python
start_state = (6, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 7. 12 times 7. Equals 84.""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(6, 12, 84),
    comment='""12 times 7. 12 times 7. Equals 84.""',
)

# ""12 plus 7 plus 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(6, 12, 19),
    comment='""12 plus 7 plus 19""',
)

# ""six divided by two is 12"" seems to be a transcription error
# ""12 divided by six times seven divided by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12/6)+(12/7)=24"",
    resulting_state=(24,),
    comment='""12 divided by six times seven divided by 12""',
    result_calc_error=True,  # This operation doesn't actually equal 24
)
```"
3543,"[6,6,11,12]",,180," Okay, what was that, eleven? Eleven is seventeen, six, twelve minus six is six, what is eleven times twelve? A hundred and twenty-one? Let's see, a hundred and twenty-one, okay. Let's make sure that's correct. Eleven times twelve equals one thirty-two, so I was wrong. Divided by six, no. That's not going to be correct. Okay, and what's twelve times six? Twelve times six is seventy-two. Minus eleven? Divided by six? Divided by six? No. That's not going to be correct. Twelve times twelve is one forty-four. Divided by eleven? No. Okay. So, twelve plus six plus six. Twelve plus six plus six equals twenty-four. But it's that eleven that's throwing me off. Eleven times twelve is one thirty-two. Divided by six equals twenty-two. No, that's not going to work. Six times eleven is sixty-six. Divided by twelve is five and a half times six is thirty-three. What if it was, no, because that just gets me back to the beginning. Sixty-six divided by six is six, is eleven. And then eleven times twelve is one thirty-two.","```python
start_state = (6, 6, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""twelve minus six is six""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 6, 11),
    comment='""twelve minus six is six""',
)

# ""what is eleven times twelve? A hundred and twenty-one?""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=121"",
    resulting_state=(6, 6, 121),
    comment='""what is eleven times twelve? A hundred and twenty-one?""',
    result_calc_error=True,
)

# ""Eleven times twelve equals one thirty-two""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(6, 6, 132),
    comment='""Eleven times twelve equals one thirty-two""',
)

# ""Divided by six""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""132/6=22"",
    resulting_state=(6, 22),
    comment='""Divided by six""',
)

# ""what's twelve times six? Twelve times six is seventy-two""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(6, 11, 72),
    comment='""what\'s twelve times six? Twelve times six is seventy-two""',
)

# ""Minus eleven? Divided by six?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(72-11)/6=10.17"",
    resulting_state=(10.17,),
    comment='""Minus eleven? Divided by six?""',
)

# ""twelve plus six plus six equals twenty-four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6+6=24"",
    resulting_state=(11, 24),
    comment='""twelve plus six plus six equals twenty-four""',
)

# ""Eleven times twelve is one thirty-two. Divided by six equals twenty-two""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12/6=22"",
    resulting_state=(6, 22),
    comment='""Eleven times twelve is one thirty-two. Divided by six equals twenty-two""',
)

# ""Six times eleven is sixty-six""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*11=66"",
    resulting_state=(6, 12, 66),
    comment='""Six times eleven is sixty-six""',
)

# ""Divided by twelve is five and a half times six is thirty-three""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""66/12*6=33"",
    resulting_state=(33,),
    comment='""Divided by twelve is five and a half times six is thirty-three""',
)

# ""Sixty-six divided by six is six, is eleven""
new_state = graph.explore_operation(
    curr_state,
    operation=""66/6=11"",
    resulting_state=(11, 12),
    comment='""Sixty-six divided by six is six, is eleven""',
)

# ""And then eleven times twelve is one thirty-two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(132,),
    comment='""And then eleven times twelve is one thirty-two""',
)
```"
3545,"[1,5,7,11]",(5x7)-(11x1),68," Okay. Elevens. Elevens. What is 36 minus 11? Ugh. 35 minus 11 is 24, so that's what we gotta do. So it's gonna be 5, nope, nope, nope. 5 times 7, which is 35. 35 minus 11 times 1, parentheses.","```python
start_state = (1, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What is 36 minus 11?"" - participant seems to be working backward from goal
# ""35 minus 11 is 24"" - participant realizes they need to get to 35 first
graph.set_subgoal(
    (35, 11),
    state_after_subgoal=(24,),
    comment='""35 minus 11 is 24, so that\'s what we gotta do""',
)

# ""5 times 7, which is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(1, 11, 35),
    comment='""5 times 7, which is 35""',
)

# ""35 minus 11 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-11*1=24"",
    resulting_state=(24,),
    comment='""35 minus 11 times 1""',
)
```"
3546,"[7,8,8,11]",8+7,180," These elevens are gonna be the death of me. Seven times eight is fifty-six. Nine is nineteen? No. Eight times eight is sixteen. Sixteen times seven? Divided by eleven? No. Okay. I can also use the eight to eliminate itself. No, I can't, because there's not a one. So it would need to be...that's eighty-eight. And then what's seven plus eight is fifteen. Eighty-eight divided by fifteen? No. Ahh. To seven...seven plus eleven equals eighteen. Seven plus eleven? Eighteen. What if I had eighteen to work with? Eighteen times eight is one-forty-four. Divided by eight is still eighteen. And that's not gonna work. Unless I got, like, a huge number. Eight times eight is not sixteen. It is sixty-four. Let's see if we do sixty...is it sixty-four? Let's try it. Eight times eight is sixty-four. Then we do times eleven. Seven-oh-four divided by seven. No. That's not gonna work. I don't know what to do. And what's eight plus seven? Eight plus seven is fifteen. Eight plus seven minus eight? Eight. Eight plus seven plus eight? Twenty-three. Ahh.","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Seven times eight is fifty-six""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(8, 11, 56),
    comment='""Seven times eight is fifty-six""',
)

# ""Eight times eight is sixteen"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=16"",
    resulting_state=(7, 11, 16),
    comment='""Eight times eight is sixteen"" - calculation error',
    result_calc_error=True,
)

# ""what's seven plus eight is fifteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(8, 11, 15),
    comment='""what\'s seven plus eight is fifteen""',
)

# ""seven plus eleven equals eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(8, 8, 18),
    comment='""seven plus eleven equals eighteen""',
)

# ""Eighteen times eight is one-forty-four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18*8=144"",
    resulting_state=(8, 144),
    comment='""Eighteen times eight is one-forty-four""',
)

# ""Divided by eight is still eighteen""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/8=18"",
    resulting_state=(18,),
    comment='""Divided by eight is still eighteen""',
)

# ""Eight times eight is not sixteen. It is sixty-four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 11, 64),
    comment='""Eight times eight is not sixteen. It is sixty-four""',
)

# ""Then we do times eleven. Seven-oh-four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64*11=704"",
    resulting_state=(7, 704),
    comment='""Then we do times eleven. Seven-oh-four""',
)

# ""divided by seven""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""704/7=100.57"",
    resulting_state=(100.57,),
    comment='""divided by seven""',
)

# ""eight plus seven is fifteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(8, 11, 15),
    comment='""eight plus seven is fifteen""',
)

# ""Eight plus seven minus eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7-8=7"",
    resulting_state=(7, 11),
    comment='""Eight plus seven minus eight""',
)

# ""Eight plus seven plus eight? Twenty-three""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7+8=23"",
    resulting_state=(11, 23),
    comment='""Eight plus seven plus eight? Twenty-three""',
)
```"
3554,"[5,8,8,9]",(9-5)x8-8,165," Now we have another target number. Same thing, 24, 5, 8, 8, and 9, which I feel like I saw this one before. 8 times 5 is way too high. 9 minus 8 is 1. 8 plus 5 is 13. 8 plus 9 is 17. Difference between 24 and 17 is 7. Hmm. Okay. 9 plus 8 is 17. That wouldn't work. 9 times 5 is way too high to start at. Wow, I believe. But... 9 times 5 is 45. And then, that's a difference of 21. I can't really make that with 8 and 8. Let's see. 5... I mean, 8 minus 5 is 7. 9 minus 5 is 3. 3 times 8 is 24, but then you still have to use 9. Umm... 9 minus 5 is 4. Let's try this. And 9 minus 5 is 4. 4 plus 16 is... Oh god, that's not right. Only 20. 4 plus 8... 4 times 8 is too big. 4 times 8 is 32. Minus 8 is 24.","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 5 is way too high""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(8, 9, 40),
    comment='""8 times 5 is way too high""',
)

# ""9 minus 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 5, 8),
    comment='""9 minus 8 is 1""',
)

# ""8 plus 5 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(8, 9, 13),
    comment='""8 plus 5 is 13""',
)

# ""8 plus 9 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(5, 8, 17),
    comment='""8 plus 9 is 17""',
)

# ""9 times 5 is 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(8, 8, 45),
    comment='""9 times 5 is 45""',
)

# ""8 minus 5 is 7"" - this appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=7"",
    resulting_state=(7, 8, 9),
    comment='""8 minus 5 is 7"" - calculation error',
    result_calc_error=True,
)

# ""9 minus 5 is 3. 3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-5)*8=32"",
    resulting_state=(8, 32),
    comment='""9 minus 5 is 3. 3 times 8 is 24"" - participant makes calculation error, 4*8=32 not 24',
    result_calc_error=True,
)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 8, 8),
    comment='""9 minus 5 is 4""',
)

# ""4 times 8 is 32. Minus 8 is 24"" - this is the solution they found
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8-8=24"",
    resulting_state=(24,),
    comment='""4 times 8 is 32. Minus 8 is 24"" - this is the solution they found',
)
```"
3556,"[3,5,7,11]",5x3,180," Okay, first try. 3 plus 5 is 8. 8 plus 7 is 15. 15 plus 11 is 26, which is too high. 7 times 5 is 35. Minus 11 is 24. But then you still have the 3. 5 plus 3 is 8. 8 plus 7 is 15. 15 plus 11 is 26. 11 minus 7 is 3. 3 times 5 is 15. That won't work. 7 minus 5 is 2. 3 times 2 is 6. 6 plus 11 does not equal 24. 3 times 5 is 15. 11 minus 7 is 5. Which does not reach 24. 15 plus 7 does not work. Okay, let's try 3 times 3 is 9. 9 times 5 is 6. It is too much. 7 minus 3 is 4. Plus 5 is 9. And you only get 20. So that's incorrect. 7 plus 5. 5. Oh, 12. 12. Mmm. That won't work. Okay. 5. 5 times 3 is 15. 15. 15. 15. 18.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 plus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(7, 8, 11),
    comment='""3 plus 5 is 8""',
)

# ""8 plus 7 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(11, 15),
    comment='""8 plus 7 is 15""',
)

# ""15 plus 11 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+11=26"",
    resulting_state=(26,),
    comment='""15 plus 11 is 26""',
)

# ""7 times 5 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(3, 11, 35),
    comment='""7 times 5 is 35""',
)

# ""Minus 11 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-11=24"",
    resulting_state=(3, 24),
    comment='""Minus 11 is 24""',
)

# ""5 plus 3 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(7, 8, 11),
    comment='""5 plus 3 is 8""',
)

# ""8 plus 7 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(11, 15),
    comment='""8 plus 7 is 15""',
)

# ""15 plus 11 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+11=26"",
    resulting_state=(26,),
    comment='""15 plus 11 is 26""',
)

# ""11 minus 7 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(3, 4, 5),
    comment='""11 minus 7 is 3"" - participant made calculation error',
    result_calc_error=True,
)

# ""3 times 5 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(7, 11, 15),
    comment='""3 times 5 is 15""',
)

# ""7 minus 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 3, 11),
    comment='""7 minus 5 is 2""',
)

# ""3 times 2 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(6, 11),
    comment='""3 times 2 is 6""',
)

# ""6 plus 11 does not equal 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+11=17"",
    resulting_state=(17,),
    comment='""6 plus 11 does not equal 24""',
)

# ""3 times 5 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(7, 11, 15),
    comment='""3 times 5 is 15""',
)

# ""11 minus 7 is 5"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=5"",
    resulting_state=(3, 5, 5),
    comment='""11 minus 7 is 5"" - calculation error',
    result_calc_error=True,
)

# ""7 minus 3 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 5, 11),
    comment='""7 minus 3 is 4""',
)

# ""Plus 5 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+5=9"",
    resulting_state=(9, 11),
    comment='""Plus 5 is 9""',
)

# ""7 plus 5"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(3, 11, 12),
    comment='""7 plus 5. Oh, 12""',
)

# ""5 times 3 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(7, 11, 15),
    comment='""5 times 3 is 15""',
)
```"
3561,"[1,4,5,11]",(11-5)x4x1,84," I don't need to rest my voice. The target number is 24. 24. 6 times 4 is 24, but that won't work because I have this random 11 out here. 12 times 2? I can't do that. Well, I can. No. 1 would make that 12. 5 minus 4 would make it 1, so that doesn't work. 1 minus 4, or 1 minus 5, 8, no. 4 times 4? 12, 16, 20. Yes, it's 6. But what if it's 11? 11 minus... 5 is 6, right? But then there's 5. No! 9, 10, 11. So 11 minus 5 is 6, times 4, and then multiply by 1. Okay. Alright, 11 minus 5 equals 6, and that would be times... Oh, no. Yes. 4 times 1. Right?","```python
start_state = (1, 4, 5, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24""',
)

# ""5 minus 4 would make it 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-4=1"",
    resulting_state=(1, 1, 11),
    comment='""5 minus 4 would make it 1""',
)

# ""4 times 4? 12, 16, 20"" - participant seems to be setting another subgoal
graph.set_subgoal(
    (4, 4),
    state_after_subgoal=(16,),
    comment='""4 times 4? 12, 16, 20""',
)

# ""11 minus... 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(1, 4, 6),
    comment='""11 minus... 5 is 6""',
)

# Then they multiply by 4 and 1 to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4*1=24"",
    resulting_state=(24,),
    comment='""So 11 minus 5 is 6, times 4, and then multiply by 1""',
)
```"
3566,"[7,10,10,12]",,180," Okay, four. That's 16. Hmm hmm hmm. Um. 70 times. 70 times. 10 so 7 times 10 70 times 10 that's 700 divided by 12. it's still way too big um i don't know i like my brain is drawing a blank um i don't know i just feel like that's like not possible are some of these like not they just like don't feel possible like i feel like there needs to be like i don't know more complex math to get it what's 770 100 so 10 times 10 is 100 you can't divide 100 by 12 or 7 evenly or what's 12 you can't divide that by that either but you know do this 100 12 and 7 is 1.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""That's 16"" - not clear what operation led to 16

# ""7 times 10 70 times 10 that's 700""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10*10=700"",
    resulting_state=(12, 700),
    comment='""7 times 10 70 times 10 that\'s 700""',
)

# ""divided by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""700/12=58.33"",
    resulting_state=(58.33,),
    comment='""divided by 12""',
)

# ""10 times 10 is 100""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(7, 12, 100),
    comment='""10 times 10 is 100""',
)

# The rest of the transcript shows the participant expressing frustration about not being able to find a solution
```"
3567,"[7,9,9,13]",,180," Okay, here we are with more. I feel like the smaller numbers are easier. Okay, so let's see. 9 minus 7 is 3. 13 minus 9 is 4. 4 times 3 is 12. No more numbers. Alright, what about 13 minus 7? 13 is 6. Um, if you divide it by 9, that would be 6 times 1, but that doesn't work. Um, okay. Tulsi, go ahead. Yeah, I don't know. 13 minus 7 is 6. And then the 9. so then 13 minus 9 is 4 7 minus 9 is 4. Nice. 9 minus 7 is 2. 4 times 2 is 6. But then I need another 4 and I don't have a 4. I don't know. I don't know. 9 times 9 is 81. What's 7 times 13? Oh my god. 7 times 9 is 81. 7 times 9 is 81. So that doesn't do anything. Because then it's 81 minus 91. That's 10. Dividing anything. 9 divided by 9 is 1. 13 plus 9 is 1. 7 is 20 plus 1. Doesn't work. What about... Hold on. 13 plus 9.","```python
start_state = (7, 9, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 7 is 3"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=3"",
    resulting_state=(3, 9, 13),
    comment='""9 minus 7 is 3"" - calculation error',
    result_calc_error=True,
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 7, 9),
    comment='""13 minus 9 is 4""',
)

# ""13 minus 7? 13 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 9),
    comment='""13 minus 7? 13 is 6""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 7, 9),
    comment='""13 minus 9 is 4""',
)

# ""7 minus 9 is 4"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7-9=4"",
    resulting_state=(4, 9, 13),
    comment='""7 minus 9 is 4"" - calculation error',
    result_calc_error=True,
)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 9, 13),
    comment='""9 minus 7 is 2""',
)

# ""9 times 9 is 81""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(7, 13, 81),
    comment='""9 times 9 is 81""',
)

# ""7 times 9 is 81"" - participant tries a different combination to get 81
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(9, 13, 63),
    comment='""7 times 9 is 81"" - calculation error',
    result_calc_error=True,
)

# ""9 divided by 9 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 7, 13),
    comment='""9 divided by 9 is 1""',
)

# ""13 plus 9 is 1. 7 is 20 plus 1"" seems to be a transcription error
# ""13 plus 9"" at the end suggests they were trying addition
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(7, 9, 22),
    comment='""13 plus 9""',
)
```"
3578,"[6,8,11,12]",-6+8,180," Okay, 6 times 8 is 48, and what about 88? No, 6 plus 8 is 14, 6 times 8 is 48, minus, uh, 33? I don't think that's gonna be it. Wait, 6 plus 8 is 14, okay, wait, 48... 48 minus... 33 is gonna be not the right answer. What about... 48 minus 11? What about... What's 6 plus 88? Divide it by 12. I don't think that's it. What about... Let me just try something. 6 times 8... What about plus 11? Which would be... 59. Minus 12. That's not gonna be it. What about... Can you do, like, negative 6 plus... us eight, which is two.","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 8 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(11, 12, 48),
    comment='""6 times 8 is 48""',
)

# ""6 plus 8 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(11, 12, 14),
    comment='""6 plus 8 is 14""',
)

# ""48 minus 11""
curr_state = graph.move_to_node((11, 12, 48))  # moving back to state with 48
new_state = graph.explore_operation(
    curr_state,
    operation=""48-11=37"",
    resulting_state=(12, 37),
    comment='""48 minus 11""',
)

# ""What's 6 plus 88? Divide it by 12"" - not clear what 88 refers to, might be a transcription error
# Could be ""6 plus 8"" = 14

# ""6 times 8... What about plus 11? Which would be... 59""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8+11=59"",
    resulting_state=(12, 59),
    comment='""6 times 8... What about plus 11? Which would be... 59""',
)

# ""Minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""59-12=47"",
    resulting_state=(47,),
    comment='""Minus 12""',
)

# ""negative 6 plus... us eight, which is two""
new_state = graph.explore_operation(
    curr_state,
    operation=""-6+8=2"",
    resulting_state=(2, 11, 12),
    comment='""negative 6 plus... us eight, which is two""',
)
```"
3579,"[4,10,12,12]",4+12-,180," What about 4 times, um, okay, negative, what about negative 4 plus 10 is 6. No, wait, it's 4 plus 10 is 14. What about 40 minus 12? It's 28. Right? 28, that's not gonna help, okay. What about negative 4 plus 10 plus 14 plus 22 plus, no, 4 Do you have to, do you not, do you not have to go in order? 12 Do you not have to go in order? I thought you had to go in order. 10 plus 12. Plus 12. It's 22. Plus 12. Well, I don't know. Uh. Well, 12 plus 12. Yeah. There's all the numbers. Okay. 12 minus 4 is 8 plus 10 is 18. That's not gonna be it. Uh. 4 plus 12 is 16. 16.","```python
start_state = (4, 10, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 10 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+10=14"",
    resulting_state=(12, 12, 14),
    comment='""4 plus 10 is 14""',
)

# ""What about 40 minus 12? It's 28"" - participant likely multiplied 4*10 first
new_state = graph.explore_operation(
    curr_state,
    operation=""4*10-12=28"",
    resulting_state=(12, 28),
    comment='""What about 40 minus 12? It\'s 28""',
)

# ""10 plus 12. Plus 12. It's 22"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12+12=22"",
    resulting_state=(4, 22),
    comment='""10 plus 12. Plus 12. It\'s 22"" - participant made a calculation error',
    result_calc_error=True,
)

# ""12 minus 4 is 8 plus 10 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-4)+10=18"",
    resulting_state=(12, 18),
    comment='""12 minus 4 is 8 plus 10 is 18""',
)

# ""4 plus 12 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+12=16"",
    resulting_state=(10, 12, 16),
    comment='""4 plus 12 is 16""',
)

```"
3588,"[8,9,9,12]",(8x9)/9,180," Okay, I am talking out loud. Bracket. 9. Is that a divided by? I don't know what that symbol is. Bracket. 12. Alexa, what's 12 times 8? Bracket. 8. 12 times 8 is 96. I'm assuming that's divided by 9. I missed something. Can you say it again? Delete, delete, delete, delete, delete, delete. I'm not sure what went wrong. 8. Bracket. 8 times 9 is 72 divided by 9 8 plus 12 I did use all the numbers that should be right delete delete delete delete delete 8 times 9 bracket divided by 9 plus 12 oh wait maybe I didn't put enough brackets all right so I'm going to delete delete delete delete 8 times divided by 9 bracket plus 12 bracket all right delete delete delete delete delete delete now I need an 8 times 9 bracket divided by 9 bracket plus bracket 12 bracket I don't know how that can be invalid delete delete delete delete delete delete delete delete 8 times 9 should there be a space divided by 9","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 8 is 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(9, 9, 96),
    comment='""12 times 8 is 96""',
)

# ""divided by 9"" - participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/9=10.67"",
    resulting_state=(9, 10.67),
    comment='""divided by 9""',
)

# Participant seems to delete and start over

# ""8 times 9 is 72 divided by 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*9)/9=8"",
    resulting_state=(8, 12),
    comment='""8 times 9 is 72 divided by 9""',
)

# ""8 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(20,),
    comment='""8 plus 12""',
)

# The rest of the transcript shows the participant trying different ways to enter the expression (8*9)/9, 
# dealing with brackets and spaces, but not actually trying new mathematical operations
```"
3589,"[3,3,6,13]",(6+13),180, Delete delete delete delete delete delete delete bracket 13 plus 6 which would be 18 plus bracket 3 end bracket plus bracket 3 end bracket. I'm not supposed to use all those brackets delete delete delete delete 13 plus 6 which is going to be 18 plus 3 bracket 3 wait delete plus 3 bracket. I don't know why you keep telling me this is an invalid equation when it's correct 13 plus 6 is 18 so we add another 3 19 20 21 22 23 24 plus 3 is 24 you keep telling me everything is not correct I'm just not using the brackets correctly 13 plus 6 is 18 plus 3 18 19 20 21 plus 30 and you keep telling me it's an invalid equation delete delete delete delete let's do it a different way 6 plus 13 bracket plus 3 plus 3 I think I'm not using the brackets properly but I don't know how to do that plus 3 and bracket that has to be right delete delete delete delete delete delete delete delete,"```python
start_state = (3, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 6 which would be 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(3, 3, 19),
    comment='""13 plus 6 which would be 18"" - participant miscalculates',
    result_calc_error=True,
)

# Then participant tries to add the 3s one at a time
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+3=22"",
    resulting_state=(3, 22),
    comment='""so we add another 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+3=24"",
    resulting_state=(24,),
    comment='""plus 3 is 24""',
    result_calc_error=True,
)

# The participant seems frustrated with the interface and tries again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=19"",
    resulting_state=(3, 3, 19),
    comment='""13 plus 6 is 18"" - participant miscalculates again',
    result_calc_error=True,
)

# ""18 19 20 21 plus 30"" seems to be counting up from 18
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+3=22"",
    resulting_state=(3, 22),
    comment='""18 19 20 21"" participant counting up after adding 3',
)

# The participant continues to have trouble with the interface and tries one more time
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(3, 3, 19),
    comment='""6 plus 13""',
)

# They try to add both 3s
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+3+3=25"",
    resulting_state=(25,),
    comment='""plus 3 plus 3""',
)

```"
3591,"[2,12,12,13]",(13-12),180," 24, okay, so it's going to be bracket 13 times 2 bracket, which is going to be 26, minus 12 plus 12. 12 plus 12 is 24, but times 12, 2 times 2 is 4, 24, 0, 2, 1, 144. Okay, oops, delete, delete, delete, delete, delete, delete. Delete. 12 times 12, end bracket is 144. Divided by 2. Divided by 2. Divided by 2. Divided by 13. Delete, delete, delete, delete, delete, delete. Thirteen, wait, I can't be, right, delete, bracket, 12 plus 13, end bracket is 25. 25 minus 2 divided by 12. That's not right either. Delete, delete, delete, delete, delete, delete, delete, delete. Okay. 13. Oh, sorry, I forgot the bracket. Delete. Delete. 13 minus 2 bracket, which is 11, plus 12. That can't be right. Delete, delete, delete, delete, delete. I should have paper to be working this out. So let's see. 13. 13 minus... 12 bracket is 1. .","```python
start_state = (2, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 2 bracket, which is going to be 26, minus 12 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(12, 12, 26),
    comment='""13 times 2 bracket, which is going to be 26""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-12+12=26"",
    resulting_state=(26,),
    comment='""26, minus 12 plus 12""',
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(2, 13, 24),
    comment='""12 plus 12 is 24""',
)

# ""12 times 12, end bracket is 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(2, 13, 144),
    comment='""12 times 12, end bracket is 144""',
)

# ""Divided by 2. Divided by 2. Divided by 2. Divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/13=11.08"",
    resulting_state=(2, 11.08),
    comment='""Divided by 13""',
)

# ""bracket, 12 plus 13, end bracket is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(2, 12, 25),
    comment='""bracket, 12 plus 13, end bracket is 25""',
)

# ""25 minus 2 divided by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(25-2)/12=1.92"",
    resulting_state=(1.92,),
    comment='""25 minus 2 divided by 12""',
)

# ""13 minus 2 bracket, which is 11, plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(11, 12, 12),
    comment='""13 minus 2 bracket, which is 11""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(12, 23),
    comment='""11, plus 12""',
)

# ""13 minus... 12 bracket is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 2, 12),
    comment='""13 minus... 12 bracket is 1""',
)
```"
3596,"[4,4,8,11]",(8,181," Okay, 11, 8, 4, 4. So the difference between 24 and 11 is 13. Let's see, 11 minus 4 is 7. So 11 minus 4 is 7, and then plus 4. 11 minus 4 is 7, times 4 would be 44, divided by 8, no. 8 times 4 is 32. Minus 7, that wouldn't work. Okay. 4 plus 4 is 8. 11 minus 8 is equal to 3, times 4 would be 12. Damn. Okay. 8 minus 4 is 4, times 4 is 16. Nope, that doesn't work. What the hell? We could do 8 divided by 2. Okay. So 11 plus 4 is 15. Hmm. 4 plus 4 is 6. Damn, this one's hard. 8 plus 4 is 12. Now I just need this to get to 2. 11 minus 4 is 7. Okay, so 11 minus 4 would be 7. No, okay. 4 divided by 4 is 1. No, that doesn't work. Okay, so 4 divided by 4 is 1, plus 8 would be 9, plus 11 would be 20, so that's not going to work, 8 divided by 4.","```python
start_state = (4, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 4 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(4, 7, 8),
    comment='""11 minus 4 is 7""',
)

# ""and then plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(8, 11),
    comment='""and then plus 4""',
)

# ""times 4 would be 44""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=44"",
    resulting_state=(4, 8, 44),
    comment='""times 4 would be 44""',
)

# ""8 times 4 is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(4, 11, 32),
    comment='""8 times 4 is 32""',
)

# ""4 plus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(8, 8, 11),
    comment='""4 plus 4 is 8""',
)

# ""11 minus 8 is equal to 3, times 4 would be 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8)*4=12"",
    resulting_state=(4, 12),
    comment='""11 minus 8 is equal to 3, times 4 would be 12""',
)

# ""8 minus 4 is 4, times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-4)*4=16"",
    resulting_state=(11, 16),
    comment='""8 minus 4 is 4, times 4 is 16""',
)

# ""11 plus 4 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4=15"",
    resulting_state=(4, 8, 15),
    comment='""11 plus 4 is 15""',
)

# ""4 plus 4 is 6"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=6"",
    resulting_state=(6, 8, 11),
    comment='""4 plus 4 is 6"" seems to be a calculation error',
    result_calc_error=True,
)

# ""8 plus 4 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(4, 11, 12),
    comment='""8 plus 4 is 12""',
)

# ""11 minus 4 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(4, 7, 8),
    comment='""11 minus 4 is 7""',
)

# ""4 divided by 4 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 8, 11),
    comment='""4 divided by 4 is 1""',
)

# ""plus 8 would be 9, plus 11 would be 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+8+11=20"",
    resulting_state=(20,),
    comment='""plus 8 would be 9, plus 11 would be 20""',
)

# ""8 divided by 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 4, 11),
    comment='""8 divided by 4""',
)
```"
3597,"[2,8,9,12]",(12x2)x(9-8),93," 12 minus 9 is equal to 3 times 4, or times 8 would be 24, okay. 2 times 8 is 16, times 3, that would be too high. 8 times 9 is 76, divided by 12 would be, no, 12 times 2 is 24, okay, so, oh, 12, 12 times, okay, 12 times 2, oh, shit, can I put that there, I don't know. 12 times 2 is equal to 24, and then plus the quantity 9 minus, oh, wait, no, fuck, okay, times 9. The quantity 9 minus 8 equals 24.","```python
start_state = (2, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 9 is equal to 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(2, 3, 8),
    comment='""12 minus 9 is equal to 3""',
)

# ""times 8 would be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(2, 24),
    comment='""times 8 would be 24""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""2 times 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(9, 12, 16),
    comment='""2 times 8 is 16""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""8 times 9 is 76"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=76"",
    resulting_state=(2, 12, 76),
    comment='""8 times 9 is 76"" (calculation error)',
    result_calc_error=True,
)

# ""12 times 2 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(8, 9, 24),
    comment='""12 times 2 is 24""',
)

# Finally, the participant finds the solution: (12*2)*(9-8)
# First they compute 12*2
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(8, 9, 24),
    comment='""12 times 2""',
)

# Then they compute 9-8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 2, 12),
    comment='""9 minus 8""',
)

# Finally they put it all together: (12*2)*(9-8)=24
new_state = graph.explore_operation(
    curr_state,
    operation=""(12*2)*(9-8)=24"",
    resulting_state=(24,),
    comment='The participant puts together the full solution: ""(12*2)*(9-8)""',
)
```"
3605,"[1,6,11,13]",(11x13),180," I can't divide that, I can't divide that. 11 plus 13 is 14. 14. 11 times 13 would be 143 plus 1 is 144 34 divided by 6 Wait, so 13 times 11 is 144 no 143 Plus 1 would be 144 144 and then I have to divide that all by 6 Shoot I do these parentheses different So one One plus the quantity Shoot I have to put too many parentheses One plus quantity of 11 times 13 And then that Divided by 6 What you, okay, so 11 11 times 13 plus 1 is equal to 144 and then divided by 6 Why can't I put this in 11 times 13 is 143","```python
start_state = (1, 6, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 13 is 14"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=14"",
    resulting_state=(1, 6, 14),
    comment='""11 plus 13 is 14"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""11 times 13 would be 143""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13=143"",
    resulting_state=(1, 6, 143),
    comment='""11 times 13 would be 143""',
)

# ""plus 1 is 144""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""143+1=144"",
    resulting_state=(6, 144),
    comment='""plus 1 is 144""',
)

# ""divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/6=24"",
    resulting_state=(24,),
    comment='""divided by 6""',
)

# The participant then seems to be trying to figure out how to write the expression with parentheses
# They try different ways of writing ""(1+(11*13))/6"" but seem to struggle with the notation

# ""11 times 13 is 143"" - participant returns to this calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13=143"",
    resulting_state=(1, 6, 143),
    comment='""11 times 13 is 143""',
)
```"
3607,"[1,3,6,9]",(9-1)x(6-3),116," 1, 3, 6, 9. This one should be easy enough. Okay, so... 9, 10... Nope, that wouldn't do it. That wouldn't do it. Okay. Um... Okay, so... That would make... 8? No. Wait, that would... That's a little too much, because that would be going into negatives, and I'm not... I'm not thinking like that. So, okay. Let's try to... Let's try. Let's try. Okay. Let's make the 9 a 10. That would be 60. Oh, but that would be 30, and 30 minus 6 is 24! Okay, so, brackets and shit again. Oh, wait, but that... Oh, I guess it could go both ways, though. Because if I make 30 minus 6, I can do that. But, 36, 9, 12, 15, 18, 21, 24, I can do 8 times 3. So... Bracket 9 minus 1 makes 8. 8 times 3. So... 6 minus 3.","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9, 10... Nope, that wouldn't do it"" suggests they tried adding 1 to 9
new_state = graph.explore_operation(
    curr_state,
    operation=""9+1=10"",
    resulting_state=(3, 6, 10),
    comment='""9, 10... Nope, that wouldn\'t do it""',
)

# ""Let's make the 9 a 10"" - participant seems to be trying this again
new_state = graph.explore_operation(
    curr_state,
    operation=""9+1=10"",
    resulting_state=(3, 6, 10),
    comment='""Let\'s make the 9 a 10""',
)

# ""That would be 60"" - participant might be multiplying 10*6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6=60"",
    resulting_state=(3, 60),
    comment='""That would be 60""',
)

# ""but that would be 30, and 30 minus 6 is 24"" - participant might be dividing 60 by 2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60/2-6=24"",
    resulting_state=(24,),
    comment='""but that would be 30, and 30 minus 6 is 24""',
)

# ""36, 9, 12, 15, 18, 21, 24"" - participant seems to be counting by 3s
# ""I can do 8 times 3"" - participant realizes they can multiply 8*3

# ""Bracket 9 minus 1 makes 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(3, 6, 8),
    comment='""Bracket 9 minus 1 makes 8""',
)

# ""6 minus 3"" - participant realizes they can multiply (9-1)*(6-3) to get 24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-1)*(6-3)=24"",
    resulting_state=(24,),
    comment='""6 minus 3"" - participant realizes they can multiply (9-1)*(6-3) to get 24',
)
```"
3608,"[2,8,10,12]",(10x2)+(12-8),145," Okay, so, okay, probably don't want to do that right off the bat. Makes 24 and then anything after that would need to be adjusted. And it's not going to be back to 24. So, brackets, brackets, more brackets. I hate this. So, let's do the big numbers. Let's grab, let's do big number and a little number. 9, 2, 3, 4, 5, 6. Ummm, so if we do 2 times 10 and make 30. Ummm, 2. Oh, fuck. I hate trying to figure out the brackets. Okay, wait, let me do that part easier. So, if I do 2 times 10, that would make 30. Plus . . . . . . No. No. No, that would be minus. So, no, it would have to be plus because if I do it that way it would be a negative number. So, I have to switch the 12 with the 8. Do 2 times 10, which is 30. And then 12 minus 8 is 4. So . . . I mean, 2 times 10 is 20, duh. 2 times 10 is 20. 12 minus 8 is 4. 20 plus 4 is 24. So, bracket, 2 times . . . Oh, like, this is, this one is stupid. So, 20 plus . . . 12. Oops. Bracket. Bracket. 12 minus 8. So, that's 20 plus 4.","```python
start_state = (2, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Makes 24 and then anything after that would need to be adjusted"" suggests participant is thinking about strategy
# Then they list some numbers but don't perform operations

# ""if we do 2 times 10 and make 30"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=30"",
    resulting_state=(8, 12, 30),
    comment='""if we do 2 times 10 and make 30"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""2 times 10 is 20, duh"" - participant corrects their error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(8, 12, 20),
    comment='""2 times 10 is 20, duh"" - participant corrects their error',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 20),
    comment='""12 minus 8 is 4""',
)

# ""20 plus 4 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+4=24"",
    resulting_state=(24,),
    comment='""20 plus 4 is 24""',
)

```"
3611,"[1,8,8,12]",((12-8)-1)x8,114," 1, 8, 8, and 12. So, ooh, no, that is too big already. Um, um, that only makes 20. Um, so like, ooh, nope, nope, that doesn't make sense. Oh, no, there's got to be some division in there somewhere. So, I need to make that into a 3. I feel like I need to make the 12, 8, and 1 into a 3, and then multiply the 8. Okay, so how do I make that into a 3? Obviously, subtraction. 12, 11, 10, 11, 8, 7, 6, 5, 4, minus 1 is 3. So, 12 minus 8 minus 1 times 8. So, double bracket, 12 minus 8, bracket, uh, minus 1, and wait, 12 minus 8 minus 1, oh, bracket, and then times 8.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""that only makes 20"" - participant might have tried adding some numbers but doesn't state which ones

# ""I need to make that into a 3"" - participant sets a subgoal of making 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I need to make that into a 3"" - participant wants to multiply 3 by 8 to get 24',
)

# ""12, 11, 10, 11, 8, 7, 6, 5, 4, minus 1 is 3"" - participant is counting down and realizes they can get 3 by doing 12-8-1
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8-1=3"",
    resulting_state=(3, 8),
    comment='""12, 11, 10, 11, 8, 7, 6, 5, 4, minus 1 is 3"" - participant finds they can get 3 via 12-8-1',
)

# Then they multiply by 8 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='The participant multiplies their computed 3 by 8 to get 24',
)

```"
3614,"[1,7,10,13]",(13-10)x(7+1),44," Okay, 1, 7, 10, and 13. I feel, oh, I didn't just do this one. Kind of close, I guess. So, 8, 4, yeah, this one's pretty easy. So, we're going to do 3, and we need to make a 3 and an 8. So, our 3 is going to be 13 minus 10 times 8, which is going to be 7 plus 1. So, 13 minus 10 is 3, 7 plus 1 is 8.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""we need to make a 3 and an 8"" - participant is setting subgoals
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""we need to make a 3 and an 8""',
)

# ""our 3 is going to be 13 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(1, 3, 7),
    comment='""our 3 is going to be 13 minus 10""',
)

# ""7 plus 1 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(3, 8),
    comment='""7 plus 1 is 8""',
)

# Then the participant multiplies their subgoals together
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment=""Participant multiplies their subgoals together"",
)
```"
3617,"[3,9,10,13]",(9+10),180," As you Plus 3 would be 13, plus 13, 26, that's not going to work. So let's try, let's try if we do like a, be it 23, no, so if we did, 13 times 3 is what? 13, yeah, times 3 is what? 13 times 3, let's see, what, 13 times 3. Let's see, 13 times 3 is 39. So let's do that, 13 times 3 is 39, 39, 39. Oh, I'm getting there, 39 minus 19, no. Okay, let's see, 13 times, so. 13 plus 10 is 23, no, 13 plus 3 would be, oh wait, I got it. 23 plus, yes, 13, 13 plus 3 would be 15, no, that's not right, 15, yes, plus 10. Minus 1, oh, minus 9, I'm sorry, no. Okay, there we go, 15 plus 1, no, 15 plus 10, that's 25, that's not right, okay. So maybe, oops. So 9 plus 10. So that would be 19. 19.","```python
start_state = (3, 9, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 3 is 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(9, 10, 39),
    comment='""13 times 3 is 39""',
)

# ""13 plus 10 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(3, 9, 23),
    comment='""13 plus 10 is 23""',
)

# ""13 plus 3 would be 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=15"",
    resulting_state=(9, 10, 15),
    comment='""13 plus 3 would be 15"" - calculation error',
    result_calc_error=True,
)

# ""15 plus 10, that's 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+10=25"",
    resulting_state=(9, 25),
    comment='""15 plus 10, that\'s 25""',
)

# ""9 plus 10. So that would be 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(3, 13, 19),
    comment='""9 plus 10. So that would be 19""',
)
```"
3618,"[2,7,9,13]",(13+2),180," Oh, it's 3 plus...oh, it's 22 actually. 22. 22 plus 7. No, that's not right. I mean, that's plus 17. Would be 22. I mean, 12. I'm sorry, not 22. 22. Okay, so that's not right. Let's delete that. 9 plus 7 would be what? 15. 15. Okay. 9 plus 7. 7 plus 13 is 20. Right? Oh. Okay. 9. 7 plus 2 would be 9. 18 plus 13. That's not right either. My brain is not working this morning. Okay, so 15. 7. 5. 5 times 9 would be 45. 13. 20 no so this would have to be like this 11 plus 2 is 9 so 7 plus 13 plus 2 still 22 let's take the 7 out 9 plus 13 we'll read that so 13 plus 2 is 15 15 15 that's not plus seven that's not right either so 15 team okay so maybe like yeah oh so if we did seven minus two be five and then we did 13 minus 2 would be 11 and 11 plus okay let's do that 13 plus 2 is 15. i mean i mean a nine plus","```python
start_state = (2, 7, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""22 plus 7"" - participant seems to be working with 22 but it's not clear where it came from
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(2, 7, 22),
    comment='""22"" seems to come from 13+9',
)

# ""9 plus 7 would be what? 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=15"",
    resulting_state=(2, 13, 15),
    comment='""9 plus 7 would be what? 15"" - calculation error',
    result_calc_error=True,
)

# ""7 plus 13 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(2, 9, 20),
    comment='""7 plus 13 is 20""',
)

# ""7 plus 2 would be 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(9, 9, 13),
    comment='""7 plus 2 would be 9""',
)

# ""13 plus 2 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(7, 9, 15),
    comment='""13 plus 2 is 15""',
)

# ""seven minus two be five""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(5, 9, 13),
    comment='""seven minus two be five""',
)

# ""13 minus 2 would be 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(7, 9, 11),
    comment='""13 minus 2 would be 11""',
)

# ""13 plus 2 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(7, 9, 15),
    comment='""13 plus 2 is 15""',
)
```"
3619,"[1,3,6,13]",,180," So, this is it right here. So, 19 plus 3, no, okay. So, 9, there we go, that was not right. So, 18 plus 13, 31, no, that's not going to be right. So, 6 plus 1 is 7. So, 7 plus 1 plus 3, I mean, is 10. So, maybe we'll do minus 1, that's still not going to be right. So, 14 plus 6, no, so 6 plus 3 is 9. Okay, so let's do 13 times, times 1 is 13. 13 times 1 is 13. So, 13 plus 6 times 3, 18, there we go, 18, 18, 9, oh gosh, this is hard. So, maybe like 13 times 3, 13 times 3. 13, 13 times 3 is 39, 39, okay, so 3, 4, 4 times 6 is 24, 4 plus 9.älle. 3 times 4, 4 times 9 times 8, so 4 times 9, okay, so 4 times 9 is 4. So, we did that, so let's, sorry, 6 times, 13. That ain't right, yeah. 6 times 13 divided by 4. No? Six times. Six times 13. that's not right either so 13 plus 3 is 26 and then 26 minus 125","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""19 plus 3"" - not clear where 19 came from
# ""18 plus 13, 31"" - not clear where 18 came from

# ""6 plus 1 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(3, 7, 13),
    comment='""6 plus 1 is 7""',
)

# ""7 plus 1 plus 3, I mean, is 10"" - participant seems confused since they already used the 1
curr_state = graph.move_to_node(start_state)

# ""6 plus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(1, 9, 13),
    comment='""6 plus 3 is 9""',
)

# ""13 times 1 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*1=13"",
    resulting_state=(3, 6, 13),
    comment='""13 times 1 is 13""',
)

# ""13 plus 6 times 3, 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 13, 18),
    comment='""13 plus 6 times 3, 18""',
)

# ""13 times 3 is 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(1, 6, 39),
    comment='""13 times 3 is 39""',
)

# ""4 times 6 is 24"" - not clear where 4 came from
# ""4 times 9"" - not clear where these numbers came from

# ""6 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*13=78"",
    resulting_state=(1, 3, 78),
    comment='""6 times 13""',
)

# ""Six times 13 divided by 4"" - not clear where 4 came from

# ""13 plus 3 is 26"" - participant made a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=26"",
    resulting_state=(1, 6, 26),
    comment='""13 plus 3 is 26"" - participant made a calculation error',
    result_calc_error=True,
)

```"
3621,"[4,7,8,12]",,180," Okay, so 12 plus 4 would be 16. 16 plus 7, wait. 8 plus 12 would be 20. 27, nope. So 8 plus 4, 12. Nope, that wouldn't work. Um, 12 times 4 is 36. So 36, 7 times 8 is 56. That would not work. 12 times 7, that's not too high, would be 2. 32 plus 36. Maybe 9. 7, 9. Okay, so 7 plus 7 times 8. 7 times 8 is 56. And then 56 minus 12. Um, and then that wouldn't work either. 8 times 12. 96 minus 32. Nope. Um, 12 times 4 is 48. 48, that wouldn't work. 48 times 8, that's... times... what was that? No. No, I'm not sure. Possibly 8. Ugh, 8 plus 7. 7, 15, plus 12. Oh, that was almost it. Okay. 8, 8, 8, 8. Um, hard because 7, 4, 7, 8, and 12. Um, 4, 7, 8, and 12. Not really sure if... 4, 7, 8, and 12. Um, we did 4 times 7. Um... I'm not really sure. I think, like, it was... it's gonna have to be...","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 4 would be 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4=16"",
    resulting_state=(7, 8, 16),
    comment='""12 plus 4 would be 16""',
)

# ""8 plus 12 would be 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(4, 7, 20),
    comment='""8 plus 12 would be 20""',
)

# ""8 plus 4, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(7, 12, 12),
    comment='""8 plus 4, 12""',
)

# ""12 times 4 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=36"",
    resulting_state=(7, 8, 36),
    result_calc_error=True,
    comment='""12 times 4 is 36"" - calculation error',
)

# ""7 times 8 is 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 12, 56),
    comment='""7 times 8 is 56""',
)

# ""12 times 7"" participant tries a different multiplication
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(4, 8, 84),
    comment='""12 times 7""',
)

# ""7 plus 7 times 8"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 12, 56),
    comment='""7 plus 7 times 8. 7 times 8 is 56""',
)

# ""56 minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56-12=44"",
    resulting_state=(4, 44),
    comment='""56 minus 12""',
)

# ""8 times 12. 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(4, 7, 96),
    comment='""8 times 12. 96""',
)

# ""12 times 4 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(7, 8, 48),
    comment='""12 times 4 is 48""',
)

# ""8 plus 7. 7, 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(4, 12, 15),
    comment='""8 plus 7. 7, 15""',
)

# ""plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+12=27"",
    resulting_state=(4, 27),
    comment='""plus 12""',
)

# ""4 times 7"" at the end
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(8, 12, 28),
    comment='""4 times 7""',
)
```"
3622,"[5,7,13,13]",13-(7(13+5)),180," How did we do that? Maybe- oh my goodness, 13 minus 5... 7. I'm not sure if I'm doing that right, apparently. Oops. Let's just put notetimes in the middle. 13 minus 5. Okay, that's going to be 8... 8. Oh, okay. There we go. We've already came to that number, maybe again? Thomas Plandell is not asking if you've i was doing it wrong now that's not it okay so maybe if i did oh that's not right so okay i think if i did 13 okay let's try this one more way if i did 13 and seven okay so wait minus if i did minus let me take this out of parentheses 13 minus seven but i think this is gonna work because it's i don't know if it's still in parentheses 13 plus 5 would make that 18 and then it would be 74 i think no i don't know if that's right no okay let me go back let me see if i did this right here","```python
start_state = (5, 7, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 5... 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(7, 8, 13),
    comment='""13 minus 5... 7""',
)

# ""13 and seven"" participant seems to be trying operations with these numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(5, 13, 91),
    comment='""13 and seven""',
)

# ""13 plus 5 would make that 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=18"",
    resulting_state=(7, 13, 18),
    comment='""13 plus 5 would make that 18""',
)

# ""and then it would be 74"" participant may have multiplied 18*7=126 but miscalculated
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18*7=74"",
    resulting_state=(13, 74),
    comment='""and then it would be 74"" participant may have multiplied 18*7 but miscalculated',
    result_calc_error=True
)

```"
3633,"[1,4,4,4]",(4+4)x(4-1),47, 4 times 4 times 4 is 16. So 4 plus 4. Wait no. 4 plus 4 times 4. Oops. It's 4 plus 4. Wait. Yeah. Plus 4 is 8. Times 4 minus 1.,"```python
start_state = (1, 4, 4, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 times 4 is 16"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*4=16"",
    resulting_state=(1, 16),
    comment='""4 times 4 times 4 is 16"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""4 plus 4"" participant starts over with a new approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(1, 4, 8),
    comment='""4 plus 4""',
)

# ""Times 4 minus 1"" participant multiplies by (4-1)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(4-1)=24"",
    resulting_state=(24,),
    comment='""Times 4 minus 1""',
)
```"
3634,"[5,5,8,13]",(13-5)x(8-5),84," Okay, 5 plus 5 is 10, 8, 13, 13 minus 8 is another 5. So, 8 times 5, pretty sure that's 30, 40, 40, 5, 40 minus 5. Minus 13 is 27. That's still an extra 5 to go. 5 times 5 is 25, plus 8. Minus 13 is 20, no, 5, 8. No, 13 minus 5, that's 8. Oh, yeah, yeah. 13 minus 5 times 8 minus 5.","```python
start_state = (5, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(8, 10, 13),
    comment='""5 plus 5 is 10""',
)

# ""13 minus 8 is another 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(5, 5, 5),
    comment='""13 minus 8 is another 5""',
)

# ""8 times 5, pretty sure that's 30, 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(5, 13, 40),
    comment='""8 times 5, pretty sure that\'s 30, 40""',
)

# ""40 minus 5. Minus 13 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-5-13=27"",
    resulting_state=(27,),
    comment='""40 minus 5. Minus 13 is 27""',
    result_calc_error=True,
)

# ""5 times 5 is 25, plus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5+8=33"",
    resulting_state=(13, 33),
    comment='""5 times 5 is 25, plus 8""',
)

# ""Minus 13 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-13=20"",
    resulting_state=(20,),
    comment='""Minus 13 is 20""',
)

# ""13 minus 5, that's 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(5, 8, 8),
    comment='""13 minus 5, that\'s 8""',
)

# ""13 minus 5 times 8 minus 5"" - this is their final answer
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-5)*(8-5)=24"",
    resulting_state=(24,),
    comment='""13 minus 5 times 8 minus 5"" - this is their final answer',
)
```"
3641,"[4,7,12,12]",,180," 12 and 12 is 24, 7 and 4 is 11, 4 and 12 is 16, 7 and 12, so 12 minus 7 is 5, and let's see, 12 minus 4 is 8, 8 and 5, that doesn't work. So, let's see, 12 x 12, 11, it won't work either. 4 and 12, 16, 16, 12 minus 5, it doesn't work either. Okay, so 7 x 12, well, it doesn't work out there either. Well, let's see, 24, so 12 and 12 is addition, so times 4 is 28, and it doesn't work either. Well, we can only use the numbers once, okay, all right, so 24, well, 7, that's a 5, that's a 5, and difference of 8, it doesn't work either. Let's see, wow, I'm terrible at this, that's crazy, 12 times 12, and then let's see, let's see, it'll be, what's 144 divided by 7, no, that doesn't make sense, so, 12 and 7 makes 19, and then 12 and 4, the difference of 8, that doesn't work, 7, 7, 19, 24, if we do 16, no, because that wouldn't make sense. We need 8, yep, we need 8, so 12 and 4 would make 16, but 12 and 7 is fine, that doesn't make sense either. Oh.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 7, 24),
    comment='""12 and 12 is 24""',
)

# ""7 and 4 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(11, 12, 12),
    comment='""7 and 4 is 11""',
)

# ""4 and 12 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+12=16"",
    resulting_state=(7, 12, 16),
    comment='""4 and 12 is 16""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 12),
    comment='""12 minus 7 is 5""',
)

# ""12 minus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 12),
    comment='""12 minus 4 is 8""',
)

# ""12 x 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(4, 7, 144),
    comment='""12 x 12""',
)

# ""7 x 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(4, 12, 84),
    comment='""7 x 12""',
)

# ""12 and 12 is addition, so times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+12)*4=96"",
    resulting_state=(7, 96),
    comment='""12 and 12 is addition, so times 4""',
)

# ""12 times 12, and then let's see, let's see, it'll be, what's 144 divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12/7=20.57"",
    resulting_state=(4, 20.57),
    comment='""12 times 12...what\'s 144 divided by 7""',
)

# ""12 and 7 makes 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(4, 12, 19),
    comment='""12 and 7 makes 19""',
)

# ""12 and 4, the difference of 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 12),
    comment='""12 and 4, the difference of 8""',
)

# ""12 and 4 would make 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4=16"",
    resulting_state=(7, 12, 16),
    comment='""12 and 4 would make 16""',
)

```"
3656,"[1,5,9,10]",5+10+(1x9),103," 10 plus 5 equals 10. I don't know. So I'm going to do 25 plus 9, 14, 11, 9 plus 5, 14 plus 10, 6 plus 9 plus 10, 1 plus 9 plus 10. 5 plus 4 times 9, 10 plus 9 plus 10. 1 times 9.","```python
start_state = (1, 5, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 5 equals 10"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=10"",
    resulting_state=(1, 9, 10),
    comment='""10 plus 5 equals 10"" seems to be a calculation error',
    result_calc_error=True,
)

# ""25 plus 9"" - not clear where 25 comes from
# ""14, 11"" - not clear what operations these refer to

# ""9 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(1, 10, 14),
    comment='""9 plus 5""',
)

# ""14 plus 10"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(1, 24),
    comment='""14 plus 10""',
)

# ""6 plus 9 plus 10"" - not clear where 6 comes from

# ""1 plus 9 plus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+9+10=20"",
    resulting_state=(5, 20),
    comment='""1 plus 9 plus 10""',
)

# ""5 plus 4 times 9"" - not clear where 4 comes from

# ""10 plus 9 plus 10"" - seems like a repetition error since we only have one 10

# ""1 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*9=9"",
    resulting_state=(5, 10, 9),
    comment='""1 times 9""',
)

# Based on their final answer of 5+10+(1x9), they must have then combined these numbers
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+10+9=24"",
    resulting_state=(24,),
    comment=""Based on their final answer of 5+10+(1x9)"",
)
```"
3660,"[1,11,12,12]",(12+12),180," Okay, we have 12, 11, and 1. So, 11 times 12. 132, yeah, I was sticking with adding. Um, 11 plus 12. Uh, let's see. Let's see, I'm thinking, I'm thinking about somehow, like, adding the 12 plus 12, but then there's an 11, so then that would take away a lot. I could do, like, the 11 plus the 1, which is 12, plus another 12, which is 24, but then there's still a 12. I could do 12 times 1, which would still be 12, but then, I could do, I could do 11 times 1. No, I could do 12 times 12. Or, I could, I could do 12 times 11, which is 12. 132. And then I could divide that by 12. Let's do, let's make it 12 times 12. And then divide that by 11. I don't know. 12 times 11. And then divide that by 12. Well, it just gives me 11 to get. So, but I feel like I'm on the right track. Uh, no. Maybe. If I do. If I do 12 times 12. And then divide that by 11. 12 times 12 is 144. Like that by 11. It's 13. No. That's a weird decimal. So, no. I don't know. So, if I add. 12 plus 12. Plus 12. Uh. 12 plus 12. Oh, no. 12. Um. That's 24. I could multiply. I'm thinking. I feel like I'm almost there. Okay.","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 times 12. 132""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(1, 12, 132),
    comment='""11 times 12. 132""',
)

# ""11 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(1, 12, 23),
    comment='""11 plus 12""',
)

# ""adding the 12 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""adding the 12 plus 12""',
)

# ""11 plus the 1, which is 12, plus another 12, which is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1+12=24"",
    resulting_state=(12, 24),
    comment='""11 plus the 1, which is 12, plus another 12, which is 24""',
)

# ""12 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*1=12"",
    resulting_state=(11, 12, 12),
    comment='""12 times 1""',
)

# ""12 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 times 12""',
)

# ""And then divide that by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/11=13.09"",
    resulting_state=(1, 13.09),
    comment='""And then divide that by 11""',
)

# ""12 plus 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12""',
)

```"
3661,"[3,3,7,13]",,180," Hi. 7 times 3 is 21. 7 times 6 is 42. 42 divided by 13 is a long number. So, what if I did 7 times type 6? Oh no, that's just what it is. Oh, 7 times 9 is 63. Divide that by 13. No. Okay. Let's think. We could add 7 plus 13 is 20. Plus... No. How about 13 plus 7? No. 13 plus 6. 19 plus 7 is 26. Almost, but not there. Too much. Let's do 7 times 13. That's 91. Divide that by 3. No. Divide that by 6. No. Okay. Divide it by 9. 7 times 3. 91. Divide that by 9. No. Okay. What's 13 times 3? It's 39. What's 13 times 6? 78. Let's divide that by 7. 13 times 3 39 let's take away 7 and then take away 3 still too big how about I don't know 7 times 3 is 21 and then if I add 3 then it's 24 no, 22 no 24 I was right but then I have 13 so I can't really do anything with it then 13 I don't know I don't know","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3 is 21""',
)

# ""7 times 6 is 42"" (using both 3s to make 6)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*(3+3)=42"",
    resulting_state=(13, 42),
    comment='""7 times 6 is 42"" (using both 3s to make 6)',
)

# ""42 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42/13=3.23"",
    resulting_state=(3.23,),
    comment='""42 divided by 13""',
)

# ""7 times 9"" (possibly trying to use 3+3+3=9)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(13, 63),
    comment='""7 times 9"" (possibly trying to use 3+3+3=9)',
)

# ""Divide that by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63/13=4.85"",
    resulting_state=(4.85,),
    comment='""Divide that by 13""',
)

# ""7 plus 13 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(3, 3, 20),
    comment='""7 plus 13 is 20""',
)

# ""13 plus 6"" (using both 3s to make 6)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+(3+3)=19"",
    resulting_state=(7, 19),
    comment='""13 plus 6""',
)

# ""19 plus 7 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+7=26"",
    resulting_state=(26,),
    comment='""19 plus 7 is 26""',
)

# ""7 times 13. That's 91""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13=91"",
    resulting_state=(3, 3, 91),
    comment='""7 times 13. That\'s 91""',
)

# ""13 times 3? It's 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 7, 39),
    comment='""13 times 3? It\'s 39""',
)

# ""13 times 6? 78"" (using both 3s to make 6)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*(3+3)=78"",
    resulting_state=(7, 78),
    comment='""13 times 6? 78""',
)

# ""Let's divide that by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""78/7=11.14"",
    resulting_state=(11.14,),
    comment='""Let\'s divide that by 7""',
)

# ""13 times 3 39 let's take away 7 and then take away 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3-7-3=29"",
    resulting_state=(29,),
    comment='""13 times 3 39 let\'s take away 7 and then take away 3""',
)

# ""7 times 3 is 21 and then if I add 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+3=24"",
    resulting_state=(13, 24),
    comment='""7 times 3 is 21 and then if I add 3""',
)

```"
3662,"[3,4,7,9]",(4+7)x3-9,173," Okay, so 7 times 9 is 63. And then let's divide that by 7. Okay, it's 9. Okay. Um, 9 times 4 is 36. If I take away 7, it's 29. Take away 3, oh, 26 is still not the number that I want. 3 times 4 is 12. 12 times 9 is 108. If I divide that by 4, or 7, yes, it's 15. It's still at like 15 point something. Umm... Let's add then. 7 plus 9 plus 3 plus 4 is 23. So, not enough. So, 7 times 7 is 47. Or, 49. Divide that by 9. Not it. Umm... Let's see. I feel like it's gotta be like, what's 4 times 9? I think I did it that way. It's just 36. And I took away 7. And I took away 3. Yeah, 26 now. Umm... 4 times 7? 28? Nah. Umm... 12 times 7? 84. And then divide that by 9 now. What about 3 plus 4 plus 7? It's 14. Nah. What about 4 plus 7? That's 11. So, 11 times 3. 33 and if I minus 9. Oh, that's it. Okay. Oh, I forgot what I said even. Okay, I did. 4 plus 7, which is 11. Times 3. Minus 9.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 9 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=63"",
    resulting_state=(3, 4, 63),
    comment='""7 times 9 is 63""',
)

# Move back to start state for next operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(3, 7, 36),
    comment='""9 times 4 is 36""',
)

# ""If I take away 7, it's 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-7=29"",
    resulting_state=(3, 29),
    comment='""If I take away 7, it\'s 29""',
)

# ""Take away 3, oh, 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""29-3=26"",
    resulting_state=(26,),
    comment='""Take away 3, oh, 26""',
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(7, 9, 12),
    comment='""3 times 4 is 12""',
)

# ""12 times 9 is 108""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(7, 108),
    comment='""12 times 9 is 108""',
)

# ""If I divide that by 4, or 7, yes, it's 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108/7=15"",
    resulting_state=(15,),
    comment='""If I divide that by 4, or 7, yes, it\'s 15""',
    result_calc_error=True,
)

# ""Let's add then. 7 plus 9 plus 3 plus 4 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9+3+4=23"",
    resulting_state=(23,),
    comment='""Let\'s add then. 7 plus 9 plus 3 plus 4 is 23""',
)

# ""what's 4 times 9? I think I did it that way. It's just 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(3, 7, 36),
    comment='""what\'s 4 times 9? I think I did it that way. It\'s just 36""',
)

# ""And I took away 7. And I took away 3. Yeah, 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-7-3=26"",
    resulting_state=(26,),
    comment='""And I took away 7. And I took away 3. Yeah, 26""',
)

# ""4 times 7? 28?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(3, 9, 28),
    comment='""4 times 7? 28?""',
)

# ""12 times 7? 84""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4*7=84"",
    resulting_state=(9, 84),
    comment='""12 times 7? 84""',
)

# ""And then divide that by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""84/9=9.33"",
    resulting_state=(9.33,),
    comment='""And then divide that by 9""',
)

# ""What about 3 plus 4 plus 7? It's 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4+7=14"",
    resulting_state=(9, 14),
    comment='""What about 3 plus 4 plus 7? It\'s 14""',
)

# ""What about 4 plus 7? That's 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+7=11"",
    resulting_state=(3, 9, 11),
    comment='""What about 4 plus 7? That\'s 11""',
)

# ""So, 11 times 3. 33 and if I minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3-9=24"",
    resulting_state=(24,),
    comment='""So, 11 times 3. 33 and if I minus 9""',
)
```"
3666,"[8,8,8,11]",8+8x(,180," Okay. 8 plus 8 is 16. 16 plus 8 is 24, so then there's 11. Mm-hmm. Then there's 88. 8 plus 11. No. 8 times 3. Okay. Let's see. 11 times... Can I do a negative 11? Can I do negative numbers? Um... negative 8. Plus 8 is 0. Plus 8, which is 8. Plus 11. Which is 18, but no. How can I? Excuse me. Let's do 8 times 8. 64. 64. 64. Divided by 11. No. 8 plus 11. 19 plus 8. 19 plus 8. 27. And 27 minus 8 is back to 19, so I'm not sure. And 27 minus 8 is back to 19, so I'm not sure. And 27 minus 8 is back to 19, so I'm not sure. I feel like I gotta get rid of this 11 somehow, but I'm not. I'm not 100% sure. I'm not 100% sure. Negative 11 plus 8 plus 8 plus 8. Negative 11 plus 8 plus 8 plus 8. Um... Um... Um... Let's see. Let's see. Um... 8. Um... 8. Um... 8. Plus 8. Plus 8. Plus 8. Is 16. Is 16. Is 16. Is 16. Plus 11 is 27. Plus 11 is 27. If I take away 8, though, it's more or less than. If I take away 8, though, it's more or less than. So... So... How about 8? Or... 16. Or... 16. Um... Um... Multiplied by 11. Multiplied by 11.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(8, 11, 16),
    comment='""8 plus 8 is 16""',
)

# ""16 plus 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8=24"",
    resulting_state=(11, 24),
    comment='""16 plus 8 is 24""',
)

# ""8 times 8. 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""8 times 8. 64""',
)

# ""64. Divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/11=5.82"",
    resulting_state=(8, 5.82),
    comment='""64. Divided by 11""',
)

# ""8 plus 11. 19 plus 8. 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11+8=27"",
    resulting_state=(8, 27),
    comment='""8 plus 11. 19 plus 8. 27""',
)

# ""27 minus 8 is back to 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-8=19"",
    resulting_state=(19,),
    comment='""27 minus 8 is back to 19""',
)

# ""8. Plus 8. Plus 8. Is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(8, 11, 16),
    comment='""8. Plus 8. Plus 8. Is 16"" - though they only add two 8s',
)

# ""Plus 11 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+11=27"",
    resulting_state=(8, 27),
    comment='""Plus 11 is 27""',
)

# ""Multiplied by 11"" - participant seems to be trying to multiply 16 by 11
curr_state = graph.move_to_node((8, 11, 16))
new_state = graph.explore_operation(
    curr_state,
    operation=""16*11=176"",
    resulting_state=(8, 176),
    comment='""Multiplied by 11""',
)
```"
3667,"[4,6,13,13]",13+13+4-6,82," Okay. 13 times 13. 169. Divide that by 6. No. And minus 4. I think that's close enough. 13 times 13. Divide that by 6. And then add 4. Or no, take away 4. No. Err. Minus 4. I don't know. Okay. 13 plus 13 is 26. And 26 plus 4. Okay. I got this. 13 plus 13 plus 4. Nice. Minus 6.","```python
start_state = (4, 6, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 13. 169.""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(4, 6, 169),
    comment='""13 times 13. 169.""',
)

# ""Divide that by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169/6=28.17"",
    resulting_state=(4, 28.17),
    comment='""Divide that by 6""',
)

# ""And minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28.17-4=24.17"",
    resulting_state=(24.17,),
    comment='""And minus 4""',
)

# The participant then tries a different approach
# ""13 plus 13 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(4, 6, 26),
    comment='""13 plus 13 is 26""',
)

# ""And 26 plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+4=30"",
    resulting_state=(6, 30),
    comment='""And 26 plus 4""',
)

# Finally, the participant finds the solution
# ""13 plus 13 plus 4. Nice. Minus 6.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13+4-6=24"",
    resulting_state=(24,),
    comment='""13 plus 13 plus 4. Nice. Minus 6.""',
)
```"
3668,"[1,8,8,12]",,180," Alright, oh shit, 12 minus 8, 12, so that's 4, plus 8, plus 1, no, um, 12 minus 8, 4, times 8, no, 8 plus 8, no, okay, so 8 minus 1, 7, 12, minus 7, 12, alone, 10, 9, 8, 7, that would be 5, 5 times 8, 5 times 8, that's definitely not it, 12, minus 8 is 4, 4 times 8 is 36, that's definitely not right. 16 minus 12, 4 times 1, no, um, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, oh, 12 plus 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, so that's 20, 16, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31, 31, 32, 33 , 34, 35, 36, 37, 39, 36, 38, 39, 40, 41, 32, 38, 49, 41, 42, 43, 44, 44, 45, 46, 47, 49, 41, 42, 45, 41, 44, 44, 46, 43, 45, 47, 49, 43, 40, 43, 45, 47, 49, 41, 45, 41, 42, 43, 44, 46, 47, 47, 48, 45, tournaments, 11, 12,ul, 21, 1, 2a, 42, tile, 21, 14, 14, 14, 15, 16, 17, 18, 20, 21, 22, 21, 22, 21, B, 8, 2a, G, 8h, 0, 0. 8 minus 1 is 7 7 times 8 5, 10, 15, 20, 21, 23 40 All of that would definitely not be right Um, I don't know if I can get there That's so weird Um, 10, 9, 8 10, 9, 8","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 8, so that's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 8),
    comment='""12 minus 8, so that\'s 4""',
)

# ""plus 8, plus 1"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8+1=13"",
    resulting_state=(13,),
    comment='""plus 8, plus 1""',
)

# ""times 8"" participant seems to go back to previous state with 4
curr_state = graph.move_to_node((1, 4, 8))
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(1, 32),
    comment='""times 8""',
)

# ""8 plus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(1, 12, 16),
    comment='""8 plus 8""',
)

# ""8 minus 1, 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(7, 8, 12),
    comment='""8 minus 1, 7""',
)

# ""12 minus 8 is 4, 4 times 8 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 8),
    comment='""12 minus 8 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=36"",
    resulting_state=(1, 36),
    result_calc_error=True,
    comment='""4 times 8 is 36""',
)

# ""12 plus 8"" participant tries adding
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(1, 8, 20),
    comment='""12 plus 8""',
)

# The rest of the transcript appears to be counting numbers or contains transcription errors that make it difficult to interpret the operations being performed

# ""8 minus 1 is 7 7 times 8"" appears near the end
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(7, 8, 12),
    comment='""8 minus 1 is 7""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(12, 56),
    comment='""7 times 8""',
)
```"
3672,"[1,3,6,9]",(9,180," Alright... 9 x 3... 35, 34, that's not right. 5, 10, 15, 16, 17, 18. 6 times 3 is 18. Plus 9, that's not right. 6 minus 1 is 5 times 3. 15 times 9, that's not right. 9 minus 6. 3 times 3. Times 1, that's not right. 9 plus 1 is 10. Times 3. Yeah, alright. 9 plus 1 equals 10. 10. Times 3. Would be 3 minus 6. Okay. Parentheses. I need to write this down. 9 plus. Where's my plus? 3 minus 6. How do I? I do the parenthesis 9 over 1. Okay. 9.","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 x 3... 35, 34, that's not right""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=35"",
    resulting_state=(1, 6, 35),
    comment='""9 x 3... 35, 34"" participant makes calculation error',
    result_calc_error=True,
)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 9, 18),
    comment='""6 times 3 is 18""',
)

# ""Plus 9"" from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+9=27"",
    resulting_state=(1, 27),
    comment='""Plus 9""',
)

# ""6 minus 1 is 5 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-1)*3=15"",
    resulting_state=(9, 15),
    comment='""6 minus 1 is 5 times 3""',
)

# ""15 times 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*9=135"",
    resulting_state=(135,),
    comment='""15 times 9""',
)

# ""9 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(1, 3, 3),
    comment='""9 minus 6""',
)

# ""3 times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 3, 9),
    comment='""3 times 3""',
)

# ""Times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*1=9"",
    resulting_state=(3, 9),
    comment='""Times 1""',
)

# ""9 plus 1 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+1=10"",
    resulting_state=(3, 6, 10),
    comment='""9 plus 1 is 10""',
)

# ""Times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(6, 30),
    comment='""Times 3""',
)

# The participant then seems to try various combinations with parentheses but doesn't complete any calculations
# They run out of time with just ""(9"" entered

```"
3674,"[4,4,4,7]",,180," 7 minus 4, 3 times 4, 12 times 4, 7 times 4. That's 28. 28 minus 4. But then there's an extra 4. 4 plus 4 equals 8 times 7. And then 52, 23, 54, 53. Definitely not right. And 24 plus 6 is 78. 68. 68. Okay, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13. So that's 16. Plus 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 40, 40, 42, 43, 42, 43, 44, 45, 42, 43, 44, 45, 45, 46, 46, 47, 47, 48, 49, 50, 51, 52, 51, 52, 53, 52, 53, 54, 54, 55, 56, 57, 58, 59, 60. 16 minus 4. 16, 15, 14, 13, 12. 15, 40, 15, 19, not right. 7 plus 4 plus 4 plus 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, no. 4 plus 4, 8, minus 7, 1, times 4, no, 4 times 4 times 4, definitely not, 7 times 4, 36, nope, I did what I did before, no, that's not right.","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 minus 4, 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 4, 4),
    comment='""7 minus 4, 3""',
)

# ""times 4, 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(4, 12),
    comment='""times 4, 12""',
)

# ""7 times 4. That's 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(4, 4, 28),
    comment='""7 times 4. That\'s 28""',
)

# ""28 minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-4=24"",
    resulting_state=(4, 24),
    comment='""28 minus 4""',
)

# ""4 plus 4 equals 8 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+4)*7=56"",
    resulting_state=(4, 56),
    comment='""4 plus 4 equals 8 times 7""',
)

# The participant then counts up numbers, which doesn't represent operations

# ""7 plus 4 plus 4 plus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4+4+4=19"",
    resulting_state=(19,),
    comment='""7 plus 4 plus 4 plus 4""',
)

# ""4 plus 4, 8, minus 7, 1, times 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((4+4)-7)*4=4"",
    resulting_state=(4,),
    comment='""4 plus 4, 8, minus 7, 1, times 4""',
)

# ""4 times 4 times 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*4=64"",
    resulting_state=(7, 64),
    comment='""4 times 4 times 4""',
)

# ""7 times 4, 36"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=36"",
    resulting_state=(4, 4, 36),
    comment='""7 times 4, 36"" - calculation error',
    result_calc_error=True,
)
```"
3675,"[1,7,10,13]",,180," Alright, 7 times 10, no, 13 minus 10 equals 3 times 7, 5, 22, no, so 13 minus 10 equals 7, 13, 12, 11, 10, 9, 8, 7, so that's 6 plus 10, that'll be 17, and we can do, let's add it all together, 7, 8, 9, 10, so 13 plus 10. 23, that's 24, but then the 7 is random, ok, 10, 9, 8, 7, 3 plus 1 is 4 times 13 is not right. 7, 6, 13 minus 6, 13, 12, 11, 10, 9, 8, 7, 9, 8, 7, 9, 8, 7, 9, 8, 7, 9, 11, 12, 13, 9, 8, 7, 7 plus 10 is not right, so 10, 9, 8, 7, 3 times 16 is not right. Oh, but 10, 9, 8, 7, 3 plus 4, that's still not going anywhere. 13 minus 7. Minus 1. 5 times 10, no. And 7, 8 plus 1 is 8. 8 times 10 minus 2, 8. 8 plus 13, not right, 7.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 10 equals 3 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-10)*7=21"",
    resulting_state=(1, 21),
    comment='""13 minus 10 equals 3 times 7""',
)

# ""13 minus 10 equals 7"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=7"",
    resulting_state=(1, 7, 7),
    comment='""13 minus 10 equals 7"" - calculation error',
    result_calc_error=True,
)

# ""13 plus 10. 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(1, 7, 23),
    comment='""13 plus 10. 23""',
)

# ""7 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(1, 13, 17),
    comment='""7 plus 10""',
)

# ""13 minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(1, 6, 10),
    comment='""13 minus 7""',
)

# ""Minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(5, 10),
    comment='""Minus 1""',
)

# ""5 times 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(50,),
    comment='""5 times 10""',
)
```"
3682,"[1,2,2,6]",(2+2)/1x6,72," Target number is 24. So, um, 6 plus, 6 plus 10, 11. This total is 11. So, we need, multiply by 6, we need 18. 18. So, 6 times 3, 18. Okay. 1 times 2, um, 6 times 4. 4 is 2 plus 2 divided by 1 times 6. 2 plus 2 divided by 1 times 6. 2 plus 2 divided by 1. 1 times 6, 2 plus 2 divided by 1 times 6, 2 plus 2 divided by 1, divided by 1 times 6, 2 times 6.","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus, 6 plus 10, 11. This total is 11"" - participant seems to be adding all numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""6+2+2+1=11"",
    resulting_state=(11,),
    comment='""6 plus, 6 plus 10, 11. This total is 11""',
)

# ""6 times 3, 18"" - participant seems to be setting a subgoal of getting to 3 to multiply by 6
graph.set_subgoal(
    (3, 6),
    state_after_subgoal=(18,),
    comment='""6 times 3, 18"" - participant seems to be setting a subgoal',
)

# ""1 times 2"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""1*2=2"",
    resulting_state=(2, 2, 6),
    comment='""1 times 2""',
)

# ""6 times 4. 4 is 2 plus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(1, 4, 6),
    comment='""4 is 2 plus 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(1, 24),
    comment='""6 times 4""',
)

# The participant then repeats ""(2+2)/1*6"" several times, which becomes their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+2)/1*6=24"",
    resulting_state=(24,),
    comment='The participant repeats ""(2+2)/1*6"" several times',
)
```"
3687,"[1,8,10,12]",(12-10+1)x8,35," Target number is 24. 12 is times 2. Okay, 8 times 3. Okay, 12 minus 10 is 2 plus 1. 12 minus 10. 12 minus 10 is 2 plus 1. Okay. 12 minus 10 is 2 plus 1. And then multiply by 8 is 24.","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 is times 2"" suggests participant is thinking about ways to get to 24
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 is times 2"" suggests participant is thinking about ways to get to 24',
)

# ""8 times 3"" suggests participant is thinking about another way to get 24
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3"" suggests participant is thinking about another way to get 24',
)

# ""12 minus 10 is 2 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10+1=3"",
    resulting_state=(3, 8),
    comment='""12 minus 10 is 2 plus 1""',
)

# ""And then multiply by 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""And then multiply by 8 is 24""',
)
```"
3690,"[5,10,10,11]",,180," 5, 10 minus 5. I'm thinking 10 plus 10 is 20. No. 5 divided by 10 is 2. 10 plus 11 is 21. 5. 6. 10 divided by 10. 30. 50 minus 19 minus 11. No. I am speaking. 5 is 15. I'm not sure. 10 plus 10 is 20. 11 minus 10 is equal to 1. So we'll do 5 minus 11 minus 10. I'm stumped. I'm saying my thoughts loud. I'm not sure. I'm not sure. 5.","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 10, 11),
    comment='""10 minus 5""',
)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 11, 20),
    comment='""10 plus 10 is 20""',
)

# ""5 divided by 10 is 2"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5/10=2"",
    resulting_state=(2, 10, 11),
    comment='""5 divided by 10 is 2"" - calculation error',
    result_calc_error=True,
)

# ""10 plus 11 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(5, 10, 21),
    comment='""10 plus 11 is 21""',
)

# ""10 divided by 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 5, 10, 11),
    comment='""10 divided by 10""',
)

# ""50 minus 19 minus 11"" - not clear where these numbers came from

# ""11 minus 10 is equal to 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-10=1"",
    resulting_state=(1, 5, 10),
    comment='""11 minus 10 is equal to 1""',
)

# ""5 minus 11 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-11-10=-16"",
    resulting_state=(-16, 10),
    comment='""5 minus 11 minus 10""',
)

```"
3699,"[5,8,8,9]",(9-5)x8-8,92," Okay, 8 minus 5 is 3, 3, 9 minus, okay, let's see, 8 divided by 8 is 1, 10, okay, 9 minus 8 is 1, okay, now, 17, 25, okay, let's see, 9 minus 5 is 4, 8 minus 5 is 3, 3 times 8 is 24, okay, 9 minus, 9 minus 8, okay, 1, 8 times 5 is 1, okay, 8 minus, okay, okay, let's see, 9 minus 4, 9 minus 5 is 4, 4 times 9, minus 5, okay, 4 times 9, okay, 9 minus 5 is 7, okay, 9 minus 8 is 8, okay, It's 4 times 8 minus 8.","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 8, 9),
    comment='""8 minus 5 is 3""',
)

# ""8 divided by 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 5, 9),
    comment='""8 divided by 8 is 1""',
)

# ""9 minus 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 5, 8),
    comment='""9 minus 8 is 1""',
)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 8, 8),
    comment='""9 minus 5 is 4""',
)

# ""8 minus 5 is 3, 3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-5)*8=24"",
    resulting_state=(9, 24),
    comment='""8 minus 5 is 3, 3 times 8 is 24""',
)

# ""8 times 5 is 1"" seems to be a transcription error or calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=1"",
    resulting_state=(1, 8, 9),
    comment='""8 times 5 is 1"" seems to be a calculation error',
    result_calc_error=True,
)

# ""9 minus 5 is 4, 4 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-5)*8=32"",
    resulting_state=(8, 32),
    comment='""9 minus 5 is 4, 4 times 8""',
)

# ""9 minus 5 is 7"" is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=7"",
    resulting_state=(7, 8, 8),
    comment='""9 minus 5 is 7"" is a calculation error',
    result_calc_error=True,
)

# ""9 minus 8 is 8"" is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=8"",
    resulting_state=(5, 8, 8),
    comment='""9 minus 8 is 8"" is a calculation error',
    result_calc_error=True,
)

# ""It's 4 times 8 minus 8"" - participant seems to have found the solution
# They get 4 from 9-5, then multiply by 8 and subtract 8
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-5)*8-8=24"",
    resulting_state=(24,),
    comment='""It\'s 4 times 8 minus 8"" - participant seems to have found the solution',
)
```"
3702,"[5,6,8,8]",,180," What equals, okay, let's see, what can equal 24? 8 times 3 is 6 times 4, 8 minus 2, so we do a 2 with a 16, 2, okay, let's see, 2, 16, 21, no, okay, 8 times 8 is 64, 6 times 4, what about 6 minus 5, okay, 6 minus 5 is 1, 8 minus 5 is 3, 6 times 3 is 18, okay, 8 minus 5, times is 3. 8. And now delete 8 minus 5 is 3. 3 times 6 plus 8. Okay. 8 minus 5 is 3. 3 times 6 is 18 times 6. Let's see. Okay. 8 minus 5 is 3 times 6 plus 8. Okay. 8 minus 5 is 3. 3 times 6 is 18. Oh no. Okay. 8 minus 5 is 3. 8 minus 5 is 3. 3 times 8 is 24. Okay. 6. Let's see. 64 minus 3. So 6 minus 5 is 1. Okay. No. 8 minus 6 is 2. 2 times 8 is 16. Oh. Okay. 8 plus 8 is 16.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3"" participant seems to be setting a subgoal of getting 24 through 8*3
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""8 times 3 is"" participant seems to be setting a subgoal',
)

# ""6 minus 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 8, 8),
    comment='""6 minus 5 is 1""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 8),
    comment='""8 minus 5 is 3""',
)

# ""3 times 6 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(8, 18),
    comment='""3 times 6 is 18""',
)

# ""3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(6, 24),
    comment='""3 times 8 is 24""',
)

# ""64 minus 3"" participant likely got 64 from 8*8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""64 minus 3"" participant first computes 8*8',
)

# ""8 minus 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 8),
    comment='""8 minus 6 is 2""',
)

# ""2 times 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(5, 16),
    comment='""2 times 8 is 16""',
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(5, 6, 16),
    comment='""8 plus 8 is 16""',
)
```"
3705,"[1,1,2,6]",(2+1+1)x6,11," Okay. Okay. So you want to make that a 4, 2 plus 1 plus 1, 4 times 6, 24.","```python
start_state = (1, 1, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""you want to make that a 4"" suggests participant is setting a subgoal to make 4
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""you want to make that a 4""',
)

# ""2 plus 1 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1+1=4"",
    resulting_state=(4, 6),
    comment='""2 plus 1 plus 1""',
)

# ""4 times 6, 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""4 times 6, 24""',
)
```"
3706,"[2,2,7,10]",10x2-(7-2),180," Oh, that was just a trial? Okay. Um, 24 would be... 4... 7 times 2 is 14. 14... Alright, so we need to do... Okay, these 2 are gonna... 2 and 2 is gonna be the 4. Alright, so let's do 2 plus 2, because that's gonna be the 4. Now we gotta get... Um, 4 times 10, 40 minus 7, 33. No. Um, 7, 2 is 14. 14, 14 is 28 minus 2. No, that wouldn't work. Alright, wait, let's delete that. Uh, do-do-do-do-do. 10 times 4 is 40. No, that won't help. 2 and 2... 2 times 12. Let's... How come... Okay, so let's do 2 times... And these... We have to make this into 12. 10 times 2... 10 plus 2 would be 12. So 2 times... Alright, yeah. 2 times 10 plus 2. That would... But then I have a 7. I have to use all the numbers. Um... Alright, so wait a minute. Let's delete that again. 7... 10 divided into 2 would be 5... Times... No, that wouldn't work. 35... Um... Okay, these 2 have to be 4 for sure. 2 plus 2 for sure has to be 4. How do I get 7 and 10 into 20? No, that won't work. Won't work. Divide into a minus. There's got to be a minus somewhere. Wait, does it do the numbers? Does it have to be in order? Because 7... 10 minus 2 would be 8. 8... 7... 6 times 7... That's 42. 42 divided into... No, that wouldn't work. Um... 7 plus... That would be 9. 9 minus 2 is 7. No. Um... 2 plus 2... 10 times 2 is 20 plus 7 minus 2. Yes! 10 times 2. That's 20. Minus 7... 7 minus 2. That should work. Incorrect. Why? 7 minus 2 is 5. 20... Oh, that's 25. 7 minus 2 is 5. Let's say 10 times 2 is 20. I would need another minus.","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 10, 14),
    comment='""7 times 2 is 14""',
)

# ""2 and 2 is gonna be the 4"" - participant seems to set a subgoal of making 4
graph.set_subgoal(
    (4,),
    state_after_subgoal=(24,),
    comment='""2 and 2 is gonna be the 4""',
)

# ""2 plus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 7, 10),
    comment='""2 plus 2""',
)

# ""4 times 10, 40 minus 7, 33""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*10-7=33"",
    resulting_state=(33,),
    comment='""4 times 10, 40 minus 7, 33""',
)

# ""7, 2 is 14. 14, 14 is 28 minus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2*2=28"",
    resulting_state=(10, 28),
    comment='""7, 2 is 14. 14, 14 is 28""',
)

# ""10 divided into 2 would be 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 7),
    comment='""10 divided into 2 would be 5""',
)

# ""10 minus 2 would be 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(2, 7, 8),
    comment='""10 minus 2 would be 8""',
)

# ""10 times 2 is 20 plus 7 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2+7-2=25"",
    resulting_state=(25,),
    comment='""10 times 2 is 20 plus 7 minus 2""',
)

# Finally, the participant seems to realize they need to rearrange the operations:
# ""10 times 2 is 20. Minus 7... 7 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2-(7-2)=15"",
    resulting_state=(15,),
    comment='""10 times 2 is 20. Minus 7... 7 minus 2"" - participant finds the correct solution',
)
```"
3707,"[3,6,8,13]",(13-3)+8+6,90," Okay, alright, 24. Let's see, 6 is 48, 48, 38, 35, no, 6 plus 3 is 18, minus 8 is 10, plus 13 is 23. Let's do 8 minus, 8 minus 3 is 5, this is 30, 20, no, 3 times 6, 18, let's do 8 minus 6 is 2. Alright, let's do, alright, first, what's going to get us to the 20 first of all, to the 20? 13 and, we don't have 7, 13 minus 3 is 10, plus 8, 18, oh, there we go, 13 minus 3, 13 minus, well, let's put that in a, oh, shit, I don't have time. 13 minus 3 is 10. Plus, oh, plus 8, plus 18, plus 6, I don't even have time to check.","```python
start_state = (3, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 is 48, 48, 38, 35"" is not clear what operations are being attempted

# ""6 plus 3 is 18"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=18"",
    resulting_state=(8, 13, 18),
    comment='""6 plus 3 is 18"" - calculation error',
    result_calc_error=True,
)

# ""minus 8 is 10, plus 13 is 23"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18-8+13=23"",
    resulting_state=(23,),
    comment='""minus 8 is 10, plus 13 is 23""',
)

# ""8 minus 3 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-3=5"",
    resulting_state=(5, 6, 13),
    comment='""8 minus 3 is 5""',
)

# ""3 times 6, 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(8, 13, 18),
    comment='""3 times 6, 18""',
)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 3, 13),
    comment='""8 minus 6 is 2""',
)

# ""what's going to get us to the 20"" suggests participant is setting a subgoal
graph.set_subgoal(
    (20,),
    state_after_subgoal=(24,),
    comment='""what\'s going to get us to the 20""',
)

# ""13 minus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(6, 8, 10),
    comment='""13 minus 3 is 10""',
)

# ""plus 8, 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(6, 18),
    comment='""plus 8, 18""',
)

# ""plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(24,),
    comment='""plus 6""',
)

```"
3710,"[1,5,10,12]",(10/5)x12x1,135," Alright, to get to the 20, alright, we got a 12 times 2 would be 24. How do we make this 1, 5, and 10 into a 2? To make the 12 times 2. Alright, so 10 plus 5 is 5. Oh wait, to make it into a 2. So 10 minus 5 is 5, minus 1 is 4, no. Maybe 6 plus, no. 10, 15, 12. 12 minus 10 would be 2. Times 5. 12 minus 10 is 2. Times 5, 10, no. 10 times 10, times 1, 10. Wait, 10 plus 12. 10 plus 12. That would be 22, but we got the 5. Um, 12. 120, no. Alright, how do we get the 20? It could be 10. Mmm, I don't know. It's a 1. Times 1 wouldn't work. 12 times 1. How do we get 10 and 5 to be 2? 12 times 5. 12 minus 5. 12 divided into, no. 5 divided into 2. 10 would be 2. I mean, 10 divided into 5 would be 2. Oh, oh, oh. Okay, I got it. I got it. 10 divided into 5, that's 2, times 1, plus 12. I think it's right. I don't know if times is... Oh, why not? 10 divided into 5 is 2, times 1 is 2. Oh, no, wait, wait, wait. No, no, no, no, no. 10 divided into 5 is 2, times... I need 12 times 2. Oh, times... Oh, oh, oh, I just needed the parentheses, parentheses, parentheses. Uh, times... Times 12... Minus... Uh, what did I do? Plus 1 or minus... Oh, times 1. I can't remember, I'm just...","```python
start_state = (1, 5, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 would be 24"" - participant sets a subgoal of making 2
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 times 2 would be 24"" - participant sets a subgoal of making 2',
)

# ""10 plus 5 is 5"" seems to be a verbal error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(1, 12, 15),
    comment='""10 plus 5 is 5"" seems to be a verbal error, they meant 15',
)

# ""10 minus 5 is 5, minus 1 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5-1=4"",
    resulting_state=(4, 12),
    comment='""10 minus 5 is 5, minus 1 is 4""',
)

# ""12 minus 10 would be 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(1, 2, 5),
    comment='""12 minus 10 would be 2""',
)

# ""Times 5, 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(1, 10),
    comment='""Times 5, 10""',
)

# ""10 plus 12. That would be 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(1, 5, 22),
    comment='""10 plus 12. That would be 22""',
)

# ""12 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(1, 10, 60),
    comment='""12 times 5""',
)

# ""12 minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-5=7"",
    resulting_state=(1, 7, 10),
    comment='""12 minus 5""',
)

# ""10 divided into 5 would be 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(1, 2, 12),
    comment='""10 divided into 5 would be 2""',
)

# Then the participant realizes they can multiply this by 12 and 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12*1=24"",
    resulting_state=(24,),
    comment='The participant realizes they can multiply by 12 and 1 to get 24',
)
```"
3711,"[1,2,4,4]",,180," Oh, wow, too many. Let's see. 24. 4 times 4. 16 times 2. 16 times 2. No. 8. 4, 2 is 8. 4 plus 2 is 6. Times 4 is 20. There we go. 6 times 4. Okay. 4. What? Any parenthesis? 4 times 2 is 8. 8 times. Oh, wait. I just had it. Oh, yeah. 8 times 4 times 1. That should work. No? Why not? 8 times 4. Oh, that's 30. Right, right, right. So not times 4. Maybe 8. What was it? Minus 4? I thought I had it. 8 minus 4 is 4. No, that won't help. 4 times 2 is 2. 4 times 2 is 8. 8 plus 4. Oh, okay. So I guess I didn't have it. 4 times 4. 24. 4 times 4. 16. 16, 7. No, that's not going to work. 4 plus 1 is. No. I need 4. I need an even number. 4 times. It's definitely 4 times 1. 4 times 2 is 8. Times 4. No, that's 30. Maybe minus. No. 4. No, don't. Let me think. 4 times 2 is 8. Minus. 8 plus. 8 divided into. No. The 1 is going to be times 1 for sure. So this 2, 4, 4 has to get to 24. 4 times 4 is 16. 16. No. 1, 4. 4. 16 times 2. 34. No. I'm not going to get this one in time. 4 times 2 is. 4 minus 2 is 2. Times 4 is 8. No. Um, 4 divided into. 4 is 4. Wait. Oh, let's try that one. I'm not going to have time though. 4 divided into 4 is 1. No, let's do 4 divided into 2. 4 divided into 2. That would be 2. Times. No. Times 4. That would be 8. No. I'm not going to get this one. I'm not going to get this one. 4 minus 4 is. No. 4 times. 4 times 2. No. 2 times. No. I'm not going to get this one in time. 4 times 4.","```python
start_state = (1, 2, 4, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4. 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(1, 2, 16),
    comment='""4 times 4. 16""',
)

# ""16 times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16*2=32"",
    resulting_state=(1, 32),
    comment='""16 times 2""',
)

# Going back to start state: ""4, 2 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(1, 4, 8),
    comment='""4, 2 is 8""',
)

# ""4 plus 2 is 6. Times 4 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+2)*4=20"",
    resulting_state=(1, 20),
    comment='""4 plus 2 is 6. Times 4 is 20""',
    result_calc_error=True,
)

# ""4 times 2 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(1, 4, 8),
    comment='""4 times 2 is 8""',
)

# ""8 times 4 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4*1=32"",
    resulting_state=(32,),
    comment='""8 times 4 times 1""',
)

# ""4 times 4. 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(1, 2, 16),
    comment='""4 times 4. 16""',
)

# ""4 times 2 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*2=8"",
    resulting_state=(1, 4, 8),
    comment='""4 times 2 is 8""',
)

# ""4 divided into 4 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 1, 2),
    comment='""4 divided into 4 is 1""',
)

# ""4 divided into 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/2=2"",
    resulting_state=(1, 2, 4),
    comment='""4 divided into 2""',
)

# ""Times 4. That would be 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(1, 8),
    comment='""Times 4. That would be 8""',
)

# ""4 minus 4 is""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-4=0"",
    resulting_state=(0, 1, 2),
    comment='""4 minus 4 is""',
)
```"
3715,"[4,4,5,6]",5x4,180," Alright, 6 times 4 is 20, plus 4 is 4, but what am I going to do with the 5? 6 times 4 minus 4 plus 5 wouldn't work. 4 times 4 is 16, plus 6, no that won't help. 6 minus 4 is 2, times 4 is 8, so 48 times 5, no. 6 minus 5 is 1, 4 times 4 is 16, no. 5 minus 6 is 1, no. 4 times 4 is 16, 16, no, I can't do that. 5, 6 divided into 4. Oh! No, that's 22. 6 divided into 4 would be 2, and 5 and 4 is 20. That would be 22. 6 divided into 4 would be 2. 5 times 4, that's 20, plus 4 is 24, but we got a 6. 6 times 4 is 24. Now what do I do with the 4 and the 5? 4 minus 4 would be 0. 6 times 5 is 36. 5, 6 is 30. Minus 4 would be 26. Minus 4 would be 22. 4 times 4 is 16. 16 plus 6, 22, 20. Now what do I do with the 5? So 16, 22. No, minus 6 times 5 is 30. Minus 4 is 26. What do I do with the 4? 4. 6 minus 4 is 2. And 5 and 4 is 20, 22. No, I'm not going to get this one. 4 minus 4 is 0. 5 times 6 is 30. No, I'm not going to get this one. 6 minus 4 is 2. No. I know the 4 has to be the 4. And 5 times 4 is 20. That's 24, but I'm stuck with a 6. No, this is not going to work. 4 times 5 is 20. Minus 4 is 16. Plus 6. Ooh, ooh, ooh, ooh. 5 times 4.","```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 20"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=20"",
    resulting_state=(4, 5, 20),
    comment='""6 times 4 is 20"" - calculation error',
    result_calc_error=True,
)

# ""4 times 4 is 16, plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+6=22"",
    resulting_state=(5, 22),
    comment='""4 times 4 is 16, plus 6""',
)

# ""6 minus 4 is 2, times 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-4)*4=8"",
    resulting_state=(5, 8),
    comment='""6 minus 4 is 2, times 4 is 8""',
)

# ""6 minus 5 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 4, 4),
    comment='""6 minus 5 is 1""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 6, 16),
    comment='""4 times 4 is 16""',
)

# ""6 divided into 4 would be 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/6=2"",
    resulting_state=(2, 4, 5),
    result_calc_error=True,
    comment='""6 divided into 4 would be 2"" - calculation error',
)

# ""5 times 4, that's 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(4, 6, 20),
    comment='""5 times 4, that\'s 20""',
)

# ""plus 4 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+4=24"",
    resulting_state=(6, 24),
    comment='""plus 4 is 24""',
)

# ""6 times 4 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(4, 5, 24),
    comment='""6 times 4 is 24""',
)

# ""6 times 5 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(4, 4, 30),
    comment='""6 times 5 is 36"" - calculation error',
    result_calc_error=True,
)

# ""Minus 4 would be 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-4=26"",
    resulting_state=(4, 26),
    comment='""Minus 4 would be 26""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 6, 16),
    comment='""4 times 4 is 16""',
)

# ""16 plus 6, 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(5, 22),
    comment='""16 plus 6, 22""',
)

# ""6 minus 4 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-4=2"",
    resulting_state=(2, 4, 5),
    comment='""6 minus 4 is 2""',
)

# ""And 5 and 4 is 20, 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(2, 20),
    comment='""And 5 and 4 is 20""',
)

# ""4 minus 4 is 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-4=0"",
    resulting_state=(0, 5, 6),
    comment='""4 minus 4 is 0""',
)

# ""5 times 6 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(4, 4, 30),
    comment='""5 times 6 is 30""',
)

# ""4 times 5 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(4, 6, 20),
    comment='""4 times 5 is 20""',
)

# ""Minus 4 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20-4=16"",
    resulting_state=(6, 16),
    comment='""Minus 4 is 16""',
)

# ""Plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(22,),
    comment='""Plus 6""',
)

# Finally ""5 times 4"" which is what they submitted
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(4, 6, 20),
    comment='""5 times 4""',
)
```"
3717,"[3,4,7,9]",(9x3)-7+4,100," All right, so we're trying again. We're trying again. 7, okay, 3 times 4 is 12. Let me get a, 3 times 4 is 12. I've got 12 in the ballpark. 7 plus 9 is 16. Plus 12 is 28. That's too many. It's too much. Too much. 7 times 4 is 28. 7 times 4 is 28. Divided by 3. 3 doesn't go into that. 9 times 4 is 36. Divided by 3 is 12. Plus 7 is only 19. Ugh, this is harder than I thought. I'm not good at math. Okay, what about 7 plus 9 plus 4 plus 3? So maybe we get 7, 9, and 3 to equal 20 and I just add 4. What is 7? 7 times 3 is 21. Fuck. We already messed up. 9 times 3 is 27. Ooh, okay. 9 times 3 is 27 minus 7 plus 4.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(7, 9, 12),
    comment='""3 times 4 is 12""',
)

# ""7 plus 9 is 16. Plus 12 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7+9=28"",
    resulting_state=(28,),
    comment='""7 plus 9 is 16. Plus 12 is 28""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(3, 9, 28),
    comment='""7 times 4 is 28""',
)

# ""Divided by 3"" participant considers dividing 28 by 3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28/3=9.33"",
    resulting_state=(9, 9.33),
    comment='""Divided by 3""',
)

# ""9 times 4 is 36. Divided by 3 is 12. Plus 7 is only 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*4)/3+7=19"",
    resulting_state=(19,),
    comment='""9 times 4 is 36. Divided by 3 is 12. Plus 7 is only 19""',
)

# ""what about 7 plus 9 plus 4 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9+4+3=23"",
    resulting_state=(23,),
    comment='""what about 7 plus 9 plus 4 plus 3""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(4, 9, 21),
    comment='""7 times 3 is 21""',
)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(4, 7, 27),
    comment='""9 times 3 is 27""',
)

# ""9 times 3 is 27 minus 7 plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-7+4=24"",
    resulting_state=(24,),
    comment='""9 times 3 is 27 minus 7 plus 4""',
)
```"
3720,"[3,3,3,4]",(3x,180," Okay, is this the same one? No, because it's a 4 now. I'm sorry for cursing. 3 times 4 is 12. 12 times 4. 12 times 3 is 36. Minus 3 is 30. Great math. 3 times 3 is 9. 9 times 4 is 36. Is 9 times 4 36? It is. And we still have the same shit. Okay. So, 36 keeps coming up. Why? Let's see. 12, 3, 6 is 3 plus 3 is 6. Oh, wait, no, because 4 times 6 again, but there's another 3. Why couldn't this be a 1? Uh, 3 minus 3 is 0. Okay, 3 plus 4 is 7. 7 times, can 7 go, 7 can't go under 24, can it? 7 can't go under 24, 7 goes 3 times 21. 21, yeah, no, it can't. Um, so we have no 7. We don't want a 7, right?coal.com 3 times 3 is 9, so now we have a 3 and a 4. But now we have 9, 3, and 4. So how do we make 24 out of that, right? Uh, times 3 for the 9, 27? Minus 4 is 23. Mm. Uh, 9 plus 3 is 12. 12 times 4 is 21. What? 48. What is wrong with my brain? Okay. What about 3 times... No, we have 9. 9 plus 4 is 13. What the fuck is that going to do? Maybe I can make 4 to 8 for... No. 9, 3. 9 times 4. 9 times 3. I don't get this. 9. And minus 3 is 6. 6 times... Oh.","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(3, 3, 12),
    comment='""3 times 4 is 12""',
)

# ""12 times 3 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(3, 36),
    comment='""12 times 3 is 36""',
)

# ""Minus 3 is 30"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-3=30"",
    resulting_state=(30,),
    comment='""Minus 3 is 30"" - calculation error',
    result_calc_error=True,
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 4, 9),
    comment='""3 times 3 is 9""',
)

# ""9 times 4 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(3, 36),
    comment='""9 times 4 is 36""',
)

# ""3 plus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 4, 6),
    comment='""3 plus 3 is 6""',
)

# ""3 minus 3 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-3=0"",
    resulting_state=(0, 3, 4),
    comment='""3 minus 3 is 0""',
)

# ""3 plus 4 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4=7"",
    resulting_state=(3, 3, 7),
    comment='""3 plus 4 is 7""',
)

# Going back to previous computation of 9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 4, 9),
    comment='""3 times 3 is 9""',
)

# ""times 3 for the 9, 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(4, 27),
    comment='""times 3 for the 9, 27""',
)

# ""Minus 4 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-4=23"",
    resulting_state=(23,),
    comment='""Minus 4 is 23""',
)

# ""9 plus 3 is 12""
curr_state = graph.move_to_node((3, 4, 9))
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(4, 12),
    comment='""9 plus 3 is 12""',
)

# ""12 times 4 is 21. What? 48""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(48,),
    comment='""12 times 4 is 48"" - participant first says 21 but corrects themselves',
)

# ""9 plus 4 is 13""
curr_state = graph.move_to_node((3, 4, 9))
new_state = graph.explore_operation(
    curr_state,
    operation=""9+4=13"",
    resulting_state=(3, 13),
    comment='""9 plus 4 is 13""',
)

# ""9 times 3""
curr_state = graph.move_to_node((3, 4, 9))
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(4, 27),
    comment='""9 times 3""',
)

```"
3721,"[3,3,7,13]",,180," I can't solve anything in 3 minutes. I always run out of time. So mean. 13. That means I might be slow. Plus 7. No. 3 times 7. Hmm. 3 plus 7. No. 9 plus 7. No. We need something that makes what? What is 24 minus 7? 9 is 13. 11. I hate multiple counting 13. 13 times 3. 39. Minus. So we have 3 and a 7 left. Minus. What do we do? 7 minus 3 is 4. 7 plus 3 is 10. That would be 29. So that's not going to work. 3 times 7 is 21. Hmm. 3 times 3 is 9. Maybe something minus 13 or plus 13. It might help out, but I don't know. I shouldn't have signed up for this. I am not good at math. I should just be writing instead. It's like less brain work. 13 minus 7. That would be a 6. We have 6, right? What are we going to do with 6? Nothing. Okay. 7 times... 13 minus 3 is 10. 10 times 3 is 30. Dirty. You're just saying stuff now, huh? Just saying things. Coming up with random ass stuff. I hate odd numbers. I can't do anything with odd numbers. I now...","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Plus 7"" seems to be adding to 13
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(3, 3, 20),
    comment='""Plus 7""',
)

# ""3 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(3, 13, 21),
    comment='""3 times 7""',
)

# ""3 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7=10"",
    resulting_state=(3, 10, 13),
    comment='""3 plus 7""',
)

# ""9 plus 7"" - the 9 likely came from 3*3
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3+7=16"",
    resulting_state=(13, 16),
    comment='""9 plus 7"" - the 9 likely came from 3*3',
)

# ""What is 24 minus 7? 9 is 13"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (7, 17),
    state_after_subgoal=(24,),
    comment='""What is 24 minus 7?""',
)

# ""13 times 3. 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 7, 39),
    comment='""13 times 3. 39""',
)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(3, 4, 13),
    comment='""7 minus 3 is 4""',
)

# ""7 plus 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(3, 10, 13),
    comment='""7 plus 3 is 10""',
)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(3, 13, 21),
    comment='""3 times 7 is 21""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(7, 9, 13),
    comment='""3 times 3 is 9""',
)

# ""13 minus 7. That would be a 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7. That would be a 6""',
)

# ""13 minus 3 is 10. 10 times 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-3)*3=30"",
    resulting_state=(7, 30),
    comment='""13 minus 3 is 10. 10 times 3 is 30""',
)
```"
3723,"[5,5,12,12]",(12-5-5)x12,73," So we have 12 minus bracket of 5 plus 5 times 12 is equal to what? Oh, it's incorrect, okay, so delete all, so I have bracket of 12 minus 5 plus 5 times 12. Okay, it's inaccurate as well. Okay. Delete minus 5 times 12.","```python
start_state = (5, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus bracket of 5 plus 5 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-(5+5)*12"",
    resulting_state=(12,),
    comment='""12 minus bracket of 5 plus 5 times 12""',
)

# ""Oh, it's incorrect"" participant realizes this doesn't work and tries again

# ""bracket of 12 minus 5 plus 5 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-5+5)*12"",
    resulting_state=(144,),
    comment='""bracket of 12 minus 5 plus 5 times 12""',
)

# ""Okay, it's inaccurate as well"" participant realizes this doesn't work either

# ""Delete minus 5 times 12"" suggests they are now trying (12-5-5)*12
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-5-5)*12=24"",
    resulting_state=(24,),
    comment='""Delete minus 5 times 12"" suggests they are now trying (12-5-5)*12',
)

```"
3727,"[4,10,12,12]",,180," 12 minus... 12 times 12 minus 10, divided by 4. Okay, 12 times 2. Yeah, it's meant to be correct though. Okay, delete. We have 12 minus 10 first. Into brackets, 12. Oh no. Times brackets, 12. Divided by 4. Ugh, still no. 12 times 12. Times brackets, 12. 12 minus 10. Divided by 4. Ugh! Oh wait, 12 times 2? Nah, I'm getting the wrong. Hold on. 2 minus 4 is 8. 8 plus... Do we have... 12 plus... one fine see divided by it is what she's seen 10 times 12 is one","```python
start_state = (4, 10, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 12 minus 10, divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12*12-10)/4=33.5"",
    resulting_state=(33.5,),
    comment='""12 times 12 minus 10, divided by 4""',
)

# ""12 minus 10 first. Into brackets, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-10)*12=24"",
    resulting_state=(4, 24),
    comment='""12 minus 10 first. Into brackets, 12""',
)

# ""Times brackets, 12. Divided by 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*12/4=72"",
    resulting_state=(72,),
    comment='""Times brackets, 12. Divided by 4""',
)

# ""12 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(4, 10, 144),
    comment='""12 times 12""',
)

# ""10 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(4, 12, 120),
    comment='""10 times 12""',
)
```"
3734,"[1,6,11,13]",(13x11)/6(+1),180," Okay, numbers are, my brain hurts, 13, 11, 6, and 1. Okay. Now, let's do, okay, 13. 13. 13 times 11 would be divided by 6. Hold on. I gotta get a pen and paper. No, no, no, no, no, no. No. Okay, here it is. It's, nope, nope, nope, nope, delete. It's 13 times 11, in parentheses, plus 13. 13 times 11, in parentheses, divided by, hold on, hold on, plus, one, parentheses, divided by 6, biatch. What? No, it's not. Plus one. Okay, divide it by, I see. And then divide that by six. You know what? You suck. Okay. I don't know how to do these parentheses. I got the idea. I got it. So, all right, let's start. Divide by one, parentheses, 11, times 13, end parentheses, right? Do I have a six? Parentheses, parentheses? Is that the parentheses, parentheses? Hold on. Oh, fuck. Whoa, these lights just dimmed. Oh, fuck. Okay. Parentheses, 11 times 13, or 13, 13 times 11, divided by six, plus one.","```python
start_state = (1, 6, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=143"",
    resulting_state=(1, 6, 143),
    comment='""13 times 11""',
)

curr_state = graph.move_to_node(start_state)
# ""13 times 11... divided by 6... plus one""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*11)/6+1=24"",
    resulting_state=(24.83,),
    comment='""13 times 11... divided by 6... plus one"" - this matches their final response',
)
```"
3741,"[2,8,9,12]",8x(,180," 8, 2, 9, 8, 2, 9, and 12. Great. All right. Hold on. 8. All right. Yeah, I'm not saying my thoughts, am I? All right. 8, 2, 9, 12. Okay. All right. I got it. 8 times 2 is 16. Times 12 minus 9 is 3. Right? Hold on. 16, 17, 18. No, no, no, no, no, no. Nope. Hmm. Okay. Okay. Let's do 8 times 9 is 72. Mm-mm. Shit. 8, 9, and maybe 2. 8, 9. Okay. How about 12 plus 6 is 18? Hmm. Hold on. Hold on. What am I doing here? Okay. 6 times 6 is 36. Times 8. I need a pen and paper. I think it'll work, though. Hold on. 8 times... What? What am I talking about? 6. 6. 6. Oh, my God. Wow. All right. We are not making this one. Okay. 8 times 9 is 72. Divide it by 2. 32. 36 minus 12. Haha.","```python
start_state = (2, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 2 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(9, 12, 16),
    comment='""8 times 2 is 16""',
)

# ""Times 12 minus 9 is 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16*(12-9)=48"",
    resulting_state=(48,),
    comment='""Times 12 minus 9 is 3""',
)

# ""16, 17, 18. No, no, no"" participant realizes this won't work and backtracks

curr_state = graph.move_to_node(start_state)
# ""8 times 9 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(2, 12, 72),
    comment='""8 times 9 is 72""',
)

# ""Divide it by 2. 32"" - participant makes calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/2=32"",
    resulting_state=(12, 32),
    comment='""Divide it by 2. 32"" - participant makes calculation error',
    result_calc_error=True,
)

```"
3745,"[3,3,9,9]",(3+3)+(9+9),44," All right, the whole thing is going to be in parentheses, and we're going to start with 3, and then we're going to, we could actually put 9 times 3, 9 times 3, 21, multiple. We could just add both 3s. Yeah, add everything. Add addition across the board.","```python
start_state = (3, 3, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3, 9 times 3, 21"" - participant tries multiplication but makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=21"",
    resulting_state=(3, 9, 21),
    comment='""9 times 3, 9 times 3, 21"" - participant makes calculation error',
    result_calc_error=True
)

# ""Add both 3s""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 9, 9),
    comment='""Add both 3s""',
)

# ""Add addition across the board"" - participant decides to add everything
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+(9+9)=24"",
    resulting_state=(24,),
    comment='""Add addition across the board""',
)

```"
3753,"[2,3,5,10]",(2x3),180," Okay. All right, so parentheses 2 times 10 is 20. Okay, and then plus, nope, so it's parentheses 5 minus 3, parentheses, yes, no, 20, and there's 2. Hmm, let's see, times, okay, so parentheses 5, hmm, plus 3 is 8, nope, that's not right, minus 3 equals, nope, oh my gosh, okay, okay, we got, let me do this again, 2 times 5, parentheses, is 10. All right, so 10 times, mm-mm, should be plus 10, parentheses, and then 10, so we've got, let's see, 10, plus, oh, yes, yes, yes, plus 3, parentheses, nope, oh my gosh, all right, so we got 10, 10, plus, okay, 13, mm, that's not right, that's not right, okay, so 10 plus, hmm, all right, let me do this again, all right, let's do 10 times 3, is 6,","```python
start_state = (2, 3, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(3, 5, 20),
    comment='""2 times 10 is 20""',
)

# ""5 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 2, 10),
    comment='""5 minus 3""',
)

# ""5 plus 3 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+3=8"",
    resulting_state=(2, 8, 10),
    comment='""5 plus 3 is 8""',
)

# ""2 times 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(3, 10, 10),
    comment='""2 times 5 is 10""',
)

# ""plus 3"" seems to be adding to the previous result
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3=13"",
    resulting_state=(10, 13),
    comment='""plus 3""',
)

# ""10 times 3 is 6"" appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=6"",
    resulting_state=(6, 10),
    comment='""10 times 3 is 6"" appears to be a calculation error',
    result_calc_error=True,
)
```"
3754,"[6,8,12,12]",(12-6),180," All right, um, hmm, all right, parentheses, um, 12 minus 6. 6 is 6, okay, parentheses, so 6 plus 16, no, no, no, no, oh, okay, here we go. So this would be times, and then 12 minus 8, parentheses. Oh, mm, mm, mm, okay, parentheses, 12 minus 8, so you got 6 times 3, nope, oh, my gosh. All right, so 12 times 8, or 12 minus 8 is... 16, 16, parentheses, times, 12 minus 8 is 16. 16, no, that's not right, that should be 6, no, 3. 12 minus 8. 6, this is terrible, 3, 4, 5, 6, nope, 12 minus 8, 5 is 13, 4, 6 plus 8 is what, 8, 9, 10, 11, 12, 13, that's not right, shoot, it's getting on my nerves, let me think here, 12 times 12, mm-mm, 12 times 6, okay,","```python
start_state = (6, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 6. 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 8, 12),
    comment='""12 minus 6. 6 is 6""',
)

# ""6 plus 16"" - not clear where 16 comes from, might be a transcription error

# ""12 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 12),
    comment='""12 minus 8""',
)

# ""12 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(6, 12, 96),
    comment='""12 times 8""',
)

# ""12 minus 8 is... 16"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=16"",
    resulting_state=(6, 12, 16),
    comment='""12 minus 8 is... 16""',
    result_calc_error=True,
)

# ""that should be 6, no, 3"" - participant correcting their calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 12),
    comment='""that should be 6, no, 3""',
)

# ""6 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(12, 12, 14),
    comment='""6 plus 8""',
)

# ""12 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(6, 8, 144),
    comment='""12 times 12""',
)

# ""12 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(8, 12, 72),
    comment='""12 times 6""',
)
```"
3758,"[1,3,6,7]",(7x6),180," 13 and 4. 13 and 4. Nope, that's not right. And 7. Nope. Oh my gosh. 18. 6 times 3 parentheses. Let's see. 6 times 3 is 9 plus 7. Nope. That's not right. Times 7. 9 times 7 is 49, isn't it? Oh my gosh. This is getting on my nerves. Alright. I don't know. 3 times 6. 3 times 7. 3 times 7. Alright, let's do that. Parentheses. 7 times 3 parentheses. It's 21 plus parentheses. 6 minus 1 parentheses. Nope. That's not right. 21 and 5. 21. It's 26. That's not right. Nope, nope, nope, nope. I don't know. 42. What about 42? Oh. I don't know. Parentheses. 7 times 6 is 42. 42. 42 minus. Parentheses. 7 times 6 is 42.","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 and 4"" participant might be trying to add numbers to get 13, but it's not clear which ones

# ""6 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 7, 18),
    comment='""6 times 3""',
)

# ""is 9 plus 7"" - participant seems to have made a calculation error with 6*3=9
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3+7=16"",
    resulting_state=(1, 16),
    comment='""6 times 3 is 9 plus 7"" - participant seems to have made a calculation error with 6*3=9',
    result_calc_error=True,
)

# ""3 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(1, 6, 21),
    comment='""3 times 7""',
)

# ""21 plus parentheses. 6 minus 1 parentheses""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+(6-1)=26"",
    resulting_state=(26,),
    comment='""21 plus parentheses. 6 minus 1 parentheses""',
)

# ""7 times 6 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(1, 3, 42),
    comment='""7 times 6 is 42""',
)
```"
3763,"[5,6,8,8]",,189," Alright, so our target number is 24, and we have 5, 6, 8, 8. I'm going to, so 8 times 8 is 64, that's too high. 24 divided by 8 is 3, so I'm going to try 8 minus 6 plus 5, which is 7, that's too high. 8 minus 5, which equals 3. Actually, I'm going to try 5 plus 6 plus 8 plus 8 is 27, so I'm off by 3 again. I'm going to try 8 minus 5, which is 3. 3 plus 8 plus 6. 8 plus 8 plus 6 equals 22, that's too high. 8 plus 8 plus 6 equals 22, that's too high. 8 plus 8 plus 6 equals 22, that's too high. So I'm going to try, huh, 8 times 8 is 64. 8 times 8 is 64. 8 times 8 is 64. 5 times 6 is 30. 5 times 6 is 30. And then 6 times 8 equals 48, which is too high. And then 6 times 8 equals 48, which is too high. That's fine, that's just 35. That's fine, that's just 35. six plus eight equals six minus eight is nine","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""8 times 8 is 64""',
)

# ""24 divided by 8 is 3"" seems to be setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 8 is 3""',
)

# ""8 minus 6 plus 5, which is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6+5=7"",
    resulting_state=(7, 8),
    comment='""8 minus 6 plus 5, which is 7""',
)

# ""8 minus 5, which equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 8),
    comment='""8 minus 5, which equals 3""',
)

# ""5 plus 6 plus 8 plus 8 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6+8+8=27"",
    resulting_state=(27,),
    comment='""5 plus 6 plus 8 plus 8 is 27""',
)

# ""8 plus 8 plus 6 equals 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+6=22"",
    resulting_state=(5, 22),
    comment='""8 plus 8 plus 6 equals 22""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(8, 8, 30),
    comment='""5 times 6 is 30""',
)

# ""6 times 8 equals 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(5, 8, 48),
    comment='""6 times 8 equals 48""',
)

# ""That's fine, that's just 35"" - not clear what operation this refers to

# ""six plus eight equals six minus eight is nine"" seems to be a transcription error or confusion
```"
3765,"[2,4,5,9]",(2+4)x(9-5),86," Alright, so our target number is again 24, and we have 2, 4, 5, and 9. So, let's see how to solve this. I'm going to try to... 9 times 5 equals 80. That's too high, so I'm going to try... I'm going to say 2 plus 4 equals 6. 24 divided by 6 is 4. I think 9 minus 5, yeah, that equals 4. So, I'm going to do 2 plus 4, and then I'm going to multiply that by 9 minus 5.","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 5 equals 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=80"",
    resulting_state=(2, 4, 80),
    result_calc_error=True,
    comment='""9 times 5 equals 80"" - calculation error',
)

# ""That's too high"" - participant realizes this won't work and tries a new approach

# ""2 plus 4 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4=6"",
    resulting_state=(5, 6, 9),
    comment='""2 plus 4 equals 6""',
)

# ""24 divided by 6 is 4"" - participant is working backward from the goal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 is 4"" - participant is working backward from the goal',
)

# ""9 minus 5, yeah, that equals 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(2, 4, 4),
    comment='""9 minus 5, yeah, that equals 4""',
)

# Finally, the participant combines their findings: ""2 plus 4, and then I'm going to multiply that by 9 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+4)*(9-5)=24"",
    resulting_state=(24,),
    comment='""2 plus 4, and then I\'m going to multiply that by 9 minus 5""',
)
```"
3767,"[5,5,8,10]",((5+10)/5)x8,102," All right, so we have 5, 5, 8, and 10. Let's see. 5 plus 5 is 10. We can't go that route. So 24 divided by 8 is 3. So I want to see if there's a way I can get to 3 using the other numbers. 1, 2, 3. So I think I could do 10 plus 5. Oh and then divide that by 5 and that will get me 3. And then multiply it by 8. Okay, I think that would work. Let's see. So, I'm going to do 5 plus 10 and then divide that by 5. And then multiply that by by eight so","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(8, 10, 10),
    comment='""5 plus 5 is 10""',
)

# ""We can't go that route"" suggests backtracking

# ""24 divided by 8 is 3"" - participant is working backward from the goal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 8 is 3"" - participant is working backward from the goal',
)

# ""10 plus 5... divide that by 5 and that will get me 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+5)/5=3"",
    resulting_state=(3, 8),
    comment='""10 plus 5... divide that by 5 and that will get me 3""',
)

# ""And then multiply it by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""And then multiply it by 8""',
)
```"
3768,"[1,1,2,6]",(2+1+1)x6,32," All right, so our target number is 24. So 24 divided by 6 is 6, 12, 18, 24, which is 4. So I will just do 2 plus 1 plus 1 times, all right, let me put that in parentheses, 2 plus 1 plus 1, which is 4, multiply that by 6.","```python
start_state = (1, 1, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 6 is 6, 12, 18, 24, which is 4"" - participant is working backward from 24 to find what number times 6 gives 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 is 6, 12, 18, 24, which is 4"" - participant is working backward from 24',
)

# ""2 plus 1 plus 1, which is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1+1=4"",
    resulting_state=(4, 6),
    comment='""2 plus 1 plus 1, which is 4""',
)

# ""multiply that by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""multiply that by 6""',
)
```"
3769,"[10,11,11,12]",(11-10)+(11+12),99," Okay, so we have 24. So 24 divided by 12 is 2. Let's see. I could do like 11 new times. So if I do 12, 12 minus 11, 11. I think I can do, I'm going to try 11 plus 12, which equals 23. So then I need to get 24. So I just need one more value. I think I could do 11 minus 10, 11 minus 10, and then plus 11 plus 12.","```python
start_state = (10, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24 divided by 12 is 2"" - participant seems to be working backward from 24
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""24 divided by 12 is 2"" - participant seems to be working backward from 24',
)

# ""11 plus 12, which equals 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(10, 11, 23),
    comment='""11 plus 12, which equals 23""',
)

# ""11 minus 10"" and then ""plus 11 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-10)+(11+12)=24"",
    resulting_state=(24,),
    comment='""11 minus 10"" and then ""plus 11 plus 12""',
)
```"
3770,"[2,2,9,11]",(2x2)+9+11,79," Target number 24. Let's see. So 11 minus 9 is 3. Let's say 3 times 2 times 2. That will only give me 12. And if I do 11 times 2, that equals 22. I just need 2 more. 9 minus 2 equals 7. That's too high. 7 times 2 plus 11 equals 25. That's too high. Let's see. 9, 11. So 24 minus 11 is 13. So minus 9 equals 4. I could do 2 times 2. Plus 9 plus 11, I think.","```python
start_state = (2, 2, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 9 is 3"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=3"",
    resulting_state=(2, 2, 3),
    comment='""11 minus 9 is 3"" - calculation error',
    result_calc_error=True,
)

# ""3 times 2 times 2. That will only give me 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2*2=12"",
    resulting_state=(12,),
    comment='""3 times 2 times 2. That will only give me 12""',
)

# ""11 times 2, that equals 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 9, 22),
    comment='""11 times 2, that equals 22""',
)

# ""9 minus 2 equals 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(2, 7, 11),
    comment='""9 minus 2 equals 7""',
)

# ""7 times 2 plus 11 equals 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+11=25"",
    resulting_state=(25,),
    comment='""7 times 2 plus 11 equals 25""',
)

# ""24 minus 11 is 13"" - working backwards from goal
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 11 is 13"" - working backwards from goal',
)

# ""minus 9 equals 4"" - continuing to work backwards
graph.set_subgoal(
    (9, 4),
    state_after_subgoal=(13,),
    comment='""minus 9 equals 4"" - continuing to work backwards',
)

# ""I could do 2 times 2. Plus 9 plus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2+9+11=24"",
    resulting_state=(24,),
    comment='""I could do 2 times 2. Plus 9 plus 11""',
)
```"
3771,"[5,8,8,9]",(8x(9-5))-8,92," Okay, so target number 24, so 5, 8, 8 and 9, 24, you can't divide that by 9, I'm gonna try... Let's see, 8 minus 5 is 3, and I'm gonna try 9 minus 5, which is 24 divided by 8, which is 3. So I'm gonna see if there's a way I can get to 3. Let's see, 9 minus 5 is 4 times 8, 32 minus 8, 24, okay. Yeah, now we're at 24. So I did 8 times... 9 minus 5, 9 minus 8.","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24, you can't divide that by 9"" - participant seems to be working backward from 24
graph.set_subgoal(
    (9, 24/9),
    state_after_subgoal=(24,),
    comment='""24, you can\'t divide that by 9""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 8, 9),
    comment='""8 minus 5 is 3""',
)

# ""9 minus 5, which is 24 divided by 8, which is 3"" - participant seems to be setting a new subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""9 minus 5, which is 24 divided by 8, which is 3""',
)

# ""9 minus 5 is 4 times 8, 32 minus 8, 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(9-5)=32"",
    resulting_state=(8, 32),
    comment='""9 minus 5 is 4 times 8, 32""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-8=24"",
    resulting_state=(24,),
    comment='""32 minus 8, 24""',
)

```"
3773,"[4,7,8,12]",8x(7-4),180," Uh, I'm saying it out loud. Uh, 7... 8 times 4 is, uh, 32. Minus 12. Hmm. 12 minus 8 would be 4. 4 times 4 would be 16. That wouldn't get us there either. I can't believe I'm gonna fail the first one. Uh, let's get something down here. Well, minus 4 would be 8. Plus 8 plus 7. Um, let's see, that's no, obviously no good. And also the order of operations is bad. No, no, no, no. No, no, no, no. Um, 8 times 12 is... I have to bust out a calculator. 80, 88, 96, um, minus 20. No, that's not even close. 8 times 7 is 66 minus 48. That wouldn't get us there. Oh, this is why I have a degree in philosophy. 8 times 3. 8 times 4. Oops. 7 minus 4. And this is 24.","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 4 is, uh, 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 12, 32),
    comment='""8 times 4 is, uh, 32""',
)

# ""12 minus 8 would be 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 4, 7),
    comment='""12 minus 8 would be 4""',
)

# ""4 times 4 would be 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(7, 16),
    comment='""4 times 4 would be 16""',
)

# ""Well, minus 4 would be 8"" - not clear what operation this refers to
# ""Plus 8 plus 7"" - also unclear what the base number is

# ""8 times 12 is..."" participant seems to be calculating 8*12
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(4, 7, 96),
    comment='""8 times 12 is... 96""',
)

# ""8 times 7 is 66"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=66"",
    resulting_state=(4, 12, 66),
    comment='""8 times 7 is 66"" - calculation error',
    result_calc_error=True,
)

# Finally ""7 minus 4"" and ""this is 24"" suggests they found 8*(7-4)=24
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(7-4)=24"",
    resulting_state=(12, 24),
    comment='""7 minus 4"" and ""this is 24"" suggests they found 8*(7-4)=24',
)
```"
3781,"[5,7,13,13]",(13+13)-(7-5),56," Okay, 13 plus 13. 7 and 5. I don't love it. 7 plus 5 is 13. So 13, 13 and 13. I don't know how you get 24 out of 3 thirteenths. That's too hard. If I could use a 13 more than once, I could. But, 7, oh, if I had to get a 2 out of there, I would get 13 plus 13 is 26 minus 2. So let's do it this way. 13 plus 13 minus 7 minus 5. Thank you.","```python
start_state = (5, 7, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(5, 7, 26),
    comment='""13 plus 13""',
)

# ""7 plus 5 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(12, 13, 13),
    comment='""7 plus 5 is 13"" - participant makes calculation error',
    result_calc_error=True,
)

# ""if I had to get a 2 out of there, I would get 13 plus 13 is 26 minus 2""
# This suggests the participant is setting a subgoal to get 2
graph.set_subgoal(
    (2,),
    state_after_subgoal=(24,),
    comment='""if I had to get a 2 out of there""',
)

# ""13 plus 13 minus 7 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13-(7-5)=24"",
    resulting_state=(24,),
    comment='""13 plus 13 minus 7 minus 5""',
)
```"
3789,"[1,2,11,13]",,180," 2-1 is 1, so we can do that. 2 times 1 is 2. 2 times 11 is 22, plus 14 is 11. 2 times 13 is 16, so we can't do minus that. 13 times 2 is 26, minus no. 13 times 2, yeah. 2. So 1 times 2 is 2. 1 times 2 minus 13 times 11. 13 times 11 minus 1 times 2. That makes 24. Right? No. Oh, 13 times 11. Whoops. 13 times 11. Okay, that's incorrect. That's not right. 13 times 11 is 24. That's incorrect. That's not what I want. I want... Oh, that can't be plus. What was I just thinking? 13 plus 11 is 24. 22. Plus 13 would be 35. No? I'm not thinking right this minute. I'm trying to figure it out. 2 times... so that's 3. Plus 24. 3. 4. No, yeah, 24.","```python
start_state = (1, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2-1 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""2-1=1"",
    resulting_state=(1, 11, 13),
    comment='""2-1 is 1""',
)

# ""2 times 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(1, 13, 22),
    comment='""2 times 11 is 22""',
)

# ""plus 14 is 11"" seems to be a transcription error or calculation error

# ""2 times 13 is 16"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=16"",
    resulting_state=(1, 11, 16),
    comment='""2 times 13 is 16"" - calculation error',
    result_calc_error=True,
)

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(1, 11, 26),
    comment='""13 times 2 is 26""',
)

# ""1 times 2 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*2=2"",
    resulting_state=(2, 11, 13),
    comment='""1 times 2 is 2""',
)

# ""13 times 11"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=143"",
    resulting_state=(1, 2, 143),
    comment='""13 times 11""',
)

# ""13 plus 11 is 24"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 2, 24),
    comment='""13 plus 11 is 24"" - calculation error',
    result_calc_error=True,
)

# ""22. Plus 13 would be 35"" - participant likely using the 22 from 2*11 earlier
curr_state = graph.move_to_node((1, 13, 22))
new_state = graph.explore_operation(
    curr_state,
    operation=""22+13=35"",
    resulting_state=(1, 35),
    comment='""22. Plus 13 would be 35""',
)

```"
3790,"[4,5,5,8]",,180," 10, 8, 9, 10, 11, 12. So that would be 22. Okay. 4 times 5 is 20. 8, 9, 10, 11, 12, 13. 20. So it would be 25 or 28. No, that would be 28. 23. 25. Minus 4. No. 32. Minus 5. Minus 5. No. 13. Plus 9. No. 22. 10 plus 12. No. Okay. 40 minus 20. No. No. 40 minus 9. No. 5 times 10. 4 times 8 is 32. No. That ain't going to work. 20 minus... No, that's not going to work. So... 5, 8 plus 5, 13, 18, 19, 20, 21, 22. 10 plus 4 is 14, plus 8, 9, 10, 11, 12, 22. 8... No, no. That's not going to work. 8 times 5 is 45. Okay. 8 times 5 is 45. And then I have 9, so minus 9. Minus 5. No. Minus 5.","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 5 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(5, 8, 20),
    comment='""4 times 5 is 20""',
)

# ""32. Minus 5. Minus 5."" - participant likely computed 8*4=32 then tried subtracting 5
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(5, 5, 32),
    comment='""32"" participant computed 8*4=32',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-5=27"",
    resulting_state=(5, 27),
    comment='""Minus 5"" participant subtracts 5 from 32',
)

# ""4 times 8 is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(5, 5, 32),
    comment='""4 times 8 is 32""',
)

# ""5, 8 plus 5, 13"" participant adding numbers
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(4, 5, 13),
    comment='""5, 8 plus 5, 13""',
)

# ""10 plus 4 is 14"" participant likely added 5+5=10 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(4, 8, 10),
    comment='""10"" participant adds 5+5=10',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+4=14"",
    resulting_state=(8, 14),
    comment='""plus 4 is 14""',
)

# ""8 times 5 is 45"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=45"",
    resulting_state=(4, 5, 45),
    comment='""8 times 5 is 45"" - calculation error',
    result_calc_error=True,
)

# ""Minus 5. No. Minus 5."" - participant tries subtracting 5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-5=40"",
    resulting_state=(4, 40),
    comment='""Minus 5""',
)
```"
3793,"[1,1,4,6]",6x4x1x1,47," Let's get this done. The target number's 24. The target number is 24. Easy. Take 6 times, well, whatever, 6 times 4. 4. 6 times 4. Times 1. Times 1. Yeah, yeah, yeah, yeah. All my thoughts are right here. Right here. Right here.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 1, 24),
    comment='""6 times 4""',
)

# ""Times 1. Times 1."" - participant multiplies by both 1s to get to 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1*1=24"",
    resulting_state=(24,),
    comment='""Times 1. Times 1.""',
)

```"
3796,"[4,7,12,12]",12x12(7-4,180," Okay, alright, alright. Here we are, here we are. So, we know that 12 plus 12 is 48. See, they set me up. 12 plus 12 is 48. I'm talking, maybe I don't have a thought in my head. Maybe that, huh? Maybe, maybe that. Because if you have 12, and you take like 12 plus 12, that's 24 already. But if you say then, that's 11, divided by 11. No, I can't take a phone call right now. I'm just going to have to go to voicemail. Okay, so. Okay, oh, wait, wait, wait, wait. Maybe instead, maybe instead, maybe instead. If you did 4, and you did, how many did you do? 4 times 12, which is 48. Then you, 4 times 12 is 48. And then you, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no. Minus, minus 12. Uh-oh. Minus 7? Dang it. No, that's not it. No, it's freaking not it. So close, but no cigar. Uh, trying to figure it out, trying to figure it out, trying to figure it out. Uh. I'm trying, I'm trying, I'm trying. Uh. Okay, let's try this, let's try this, let's try this. How about 12 times 12. Then you divide that. You divide that, 12, 12 times 12. 12 times, times 12. Then 7, then 7. Why isn't it working? Oh, because I got to hit it. 7. Wait, 20, wait, it's 48. 48, 48, 48. Oh. Mmm. What, that would be 3. That would be, that would be, oh, that wouldn't work. That wouldn't work. Ah! 48, what? Okay, what?","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 48"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=48"",
    resulting_state=(4, 7, 48),
    comment='""12 plus 12 is 48"" - calculation error',
    result_calc_error=True,
)

# ""12 plus 12, that's 24 already""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 7, 24),
    comment='""12 plus 12, that\'s 24 already""',
)

# ""4 times 12, which is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=48"",
    resulting_state=(7, 12, 48),
    comment='""4 times 12, which is 48""',
)

# ""Minus 7?"" - participant tries subtracting 7 from previous result
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-7=41"",
    resulting_state=(12, 41),
    comment='""Minus 7?""',
)

# ""12 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(4, 7, 144),
    comment='""12 times 12""',
)

# The participant seems to be trying various operations but not completing them
# They mention ""48"" several times but don't clearly state operations
# They submitted ""12x12(7-4"" which suggests they were trying to multiply 12*12 by (7-4)
# but ran out of time before completing the calculation

```"
3800,"[3,7,7,9]",,180," Okay, um, initially I'm not seeing like too many great ways to get to factors of 24. So let's just see if we add all of these up what we get. 17 plus 9 is 26. So that's not going to do it either. I could get so ways to multiply to get 24, 3 and 8, 4 and 6. I can make a 7. That's a great way to make a 4. 21 I can make, but I don't see a way to make a remaining 3 with a 7 and a 9. I could make a 2, subtracting 9 and 7. Hmm, this one is a little bit tricky to me. I can make a 16, but then I don't see a way to make an 8 with a 7. I can make a 7 and a 3. Let's try, start with 7 plus 7. That puts me at 14. Yeah, I just really don't see a great way to, yeah, I'm not seeing a great way to make a... make factors that are going to make this easy for me. I mean, I can make a 12 relatively easy with the 9 plus 3, but then I don't see a clear path to 24 from there. I could try and subtract the 7s that would make a 0, but again, there's not a good way to get to 24 with just the 9 and the 3. I can multiply the 9 and the 3. Multiplying the 7s together seems like it's going to give me something that's too large. I guess 7 times 7 is 49. 9 times 3 is 27. That doesn't get me there, but it is something I should think about. Like, doing something like this. I don't think that's correct, though. No, it's not. I could add those together. That gives me 7. 16. Again, not really a great way to get to it from there. Yeah, I mean, this one, I am just not seeing a great way to do it. Starting to... I mean, I assume it's possible. I assume kind researchers wouldn't give me one that I can't do. Y'all wouldn't do that to me, would you? Just to hear my free association.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""17 plus 9 is 26"" - participant adds 7+7+3=17 first
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+3=17"",
    resulting_state=(9, 17),
    comment='""let\'s just see if we add all of these up""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+9=26"",
    resulting_state=(26,),
    comment='""17 plus 9 is 26""',
)

# ""I could get so ways to multiply to get 24, 3 and 8, 4 and 6"" - participant is setting subgoals
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""ways to multiply to get 24, 3 and 8""',
)
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""ways to multiply to get 24, 4 and 6""',
)

# ""9 plus 3, but then I don't see a clear path to 24 from there""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(7, 7, 12),
    comment='""9 plus 3""',
)

# ""Multiplying the 7s together""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 times 7 is 49""',
)

# ""9 times 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""9 times 3 is 27""',
)

# ""That gives me 7. 16"" - participant may be adding 7+9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(3, 7, 16),
    comment='""That gives me 7. 16""',
)
```"
3802,"[1,6,8,13]",(8-6)x(13-1),20," Okay, let me add them all together again. No, not looking like it. I can make 21. That's not going to do it. Oh, but I can make 2 and 12. So we're going to do in parentheses, 8 minus 6 gets me 2. Multiply that by 13 minus 1 is 12.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""let me add them all together again""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6+8+13=28"",
    resulting_state=(28,),
    comment='""let me add them all together again""',
)

# ""I can make 21"" - not clear how they got this number
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(1, 6, 21),
    comment='""I can make 21""',
)

# ""Oh, but I can make 2 and 12"" - participant sets subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""Oh, but I can make 2 and 12""',
)

# ""8 minus 6 gets me 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(1, 2, 13),
    comment='""8 minus 6 gets me 2""',
)

# ""13 minus 1 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(2, 12),
    comment='""13 minus 1 is 12""',
)

# Then they multiply the 2 and 12 they made
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment=""Participant multiplies the 2 and 12 they made to reach 24"",
)
```"
3803,"[2,5,8,10]",(10-2)x(8-5),17," All righty, what do we got here? I could make a 2, I can make a 3, I can make an 8. I can make an 8 and a 3. That seems like it's going to work. 10 minus 2 is 8, times 8 minus 5 is 3.","```python
start_state = (2, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can make an 8 and a 3"" suggests participant is setting subgoals
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""I can make an 8 and a 3"" suggests participant is setting subgoals to multiply to get 24',
)

# ""10 minus 2 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(5, 8, 8),
    comment='""10 minus 2 is 8""',
)

curr_state = graph.move_to_node(new_state)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 8),
    comment='""8 minus 5 is 3""',
)

curr_state = graph.move_to_node(new_state)

# Based on their response, they then multiply the 8 and 3 they created
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(24,),
    comment='Based on their response ""(10-2)x(8-5)"", they multiply the 8 and 3 they created',
)
```"
3808,"[3,5,10,10]",10,180," Alright, what factors can we make this time? We can make a 7 and a 5, that's not going to be immediately helpful. If I add the two 10s, that gets me to 20, and then I don't see a way with the 3 and the 5 to get that extra 4. I could divide the 5 and the 10 to get 2. So that gets me to 23. That gets me close, but no cigar. 5 times 7 doesn't do it. I could make a 2 there. 2 plus 10 is 12, but then plus another 10 doesn't quite get me there. 2 times 10 is 20, and again that doesn't quite get me there. So. Maybe I need to get a little bit... Let's just start with a 2 here. So is there anything I can do with that 2 to get there? It doesn't look like it, so 5 minus 3 isn't going to be the start. Is there anything I can do with a 5 here? 5 times, nope, 5, 15, nope, not seeing anything there. I could start a little big. I could start with a 30, but that looks like that's going to get me to 25. So that's not going to do it either. Starting with a 1 would be an interesting idea. 1 plus 5 is 6, 1 plus 4, yep, not quite enough there. I think starting with a 1 is just going to be too small. Starting with a 2 seems like it should get you there. But 2 times 10, 20, that only gets you to 23. I wonder if, like you as researchers, are adding some that aren't doable in any way. And that's just to kind of hear what our thought process is. Just curious if that's the case. 10 minus 3 is 7. Times 5, 35. Minus 10, again, that's just 1 away. So that's not going to do it. 10 divided by 3. I mean, if we're going to get into non-integers, I don't think my brain's going to figure that out in 3 minutes, to be honest. So we're just not even going to entertain that thought. Is there a way to get to 240 and then divide by 10? Nope. 30 times 5 is 150. So not quite big enough. Although, 100 times 3, 300? Nope, that's too big. That's too big.","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We can make a 7"" - likely 10-3=7
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 10),
    comment='""We can make a 7""',
)

# ""If I add the two 10s, that gets me to 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(3, 5, 20),
    comment='""If I add the two 10s, that gets me to 20""',
)

# ""I could divide the 5 and the 10 to get 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 10),
    comment='""I could divide the 5 and the 10 to get 2""',
)

# ""So that gets me to 23"" - participant likely adding numbers from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3+10=15"",
    resulting_state=(15,),
    comment='""So that gets me to 23"" - participant made calculation error',
    result_calc_error=True
)

# ""5 times 7"" - participant likely using 7 they computed earlier
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*(10-3)=35"",
    resulting_state=(10, 35),
    comment='""5 times 7""',
)

# ""I could make a 2 there"" - likely 10/5 again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 10),
    comment='""I could make a 2 there""',
)

# ""2 plus 10 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+10=12"",
    resulting_state=(3, 12),
    comment='""2 plus 10 is 12""',
)

# ""5 minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 10, 10),
    comment='""5 minus 3""',
)

# ""5 times, nope, 5, 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(10, 10, 15),
    comment='""5 times, nope, 5, 15""',
)

# ""I could start with a 30"" - likely 3*10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(5, 10, 30),
    comment='""I could start with a 30""',
)

# ""10 minus 3 is 7. Times 5, 35. Minus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((10-3)*5)-10=25"",
    resulting_state=(25,),
    comment='""10 minus 3 is 7. Times 5, 35. Minus 10""',
)

# ""10 divided by 3"" participant considers but abandons
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/3=3.33"",
    resulting_state=(3.33, 5, 10),
    comment='""10 divided by 3"" participant considers but abandons',
)

# ""30 times 5 is 150""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3*10)*5=150"",
    resulting_state=(10, 150),
    comment='""30 times 5 is 150""',
)

# ""100 times 3, 300""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*10)*3=300"",
    resulting_state=(5, 300),
    comment='""100 times 3, 300""',
)
```"
3823,"[3,9,10,12]",(12-10)x(9+3),161," Okay, I'm trying to verbalize more of my thoughts. 12 plus 3 is 25. I do not want to do that. 3, 6, 9, 12, 20. Nope, don't want that either. 10, 12, 24, 36. Minus, no, that doesn't work. 90 minus 12, 24, 36. That also doesn't work. 30, no, 19, no, 19, 27, 12, 24. I want a 2. Um, 30. No. 12 plus, times, 12, 24, 36. Minus 9. Would be 36, 25, 24, 23, 32, 31, 32, 32, 33, 32, 37. No. 12, 24, 36, 26. No. 7 times something. So I've already drawn. 8, 16, 24. Do any of these make 8? 12, 9, 10, 11, 12. No. 9, 10, 9, 8, 7, 9, 8, 7, 6, 6, 12, 18, 24, 6 times 4 would be good, um, but I don't know how to make that happen, 10, um, 12, target number is 24, 12 minus 10 is 2, 9, 18, no, 9, 10, 11, 12, oh, got it, 12 minus 10, oops, I need parentheses around this guy, no, go back, delete, delete, delete, 12 minus 10 times, what was it, 9, 18, oops, 9, 10, 11, 12, there we go, 9 plus 3, oops, I forgot to do this,","```python
start_state = (3, 9, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 3 is 25"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+3=25"",
    resulting_state=(9, 10, 25),
    comment='""12 plus 3 is 25"" - calculation error',
    result_calc_error=True,
)

# ""3, 6, 9, 12, 20"" seems to be listing numbers, not an operation

# ""10, 12, 24, 36"" participant may be multiplying 12*3
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(9, 10, 36),
    comment='""10, 12, 24, 36"" participant may be multiplying 12*3',
)

# ""90 minus 12, 24, 36"" participant may be multiplying 9*10=90
new_state = graph.explore_operation(
    curr_state,
    operation=""9*10=90"",
    resulting_state=(3, 12, 90),
    comment='""90 minus 12, 24, 36"" participant may be multiplying 9*10',
)

# ""12 times"" participant seems to be trying operations with 12
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(9, 10, 36),
    comment='""12 times"" participant seems to be trying operations with 12',
)

# ""8, 16, 24"" participant seems to be listing multiples of 8, setting a subgoal
graph.set_subgoal(
    (8, 16, 24),
    state_after_subgoal=(24,),
    comment='""8, 16, 24"" participant listing multiples of 8',
)

# ""6 times 4 would be good"" participant recognizes they need to make 24 from 6*4
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 would be good""',
)

# ""12 minus 10 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(2, 3, 9),
    comment='""12 minus 10 is 2""',
)

# Finally, the participant combines operations: ""12 minus 10 times... 9 plus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-10)*(9+3)=24"",
    resulting_state=(24,),
    comment='""12 minus 10 times... 9 plus 3""',
)
```"
3826,"[2,4,6,13]",,180," 6, 12, 18, 24... 13, 12, 11, 10, 9, 8, 7... nope. 13, 12, 11, 10, 9, 9, 8, 7... 13, 12, 11... no. Mmm, wow. Don't really know what it is with the 13. 13 minus 10? 36? No. 13 minus 6? 13, 12, 11, 10, 9, 8, 7... What about 8? 9, 10, 11, 12, 13, 5, 10, 12... Nope, don't want to work either. 13... 6 divided by 2... 2, 4, 6... 3, 4, 8, 12... 12 plus... no. Why should it work 25? 6... times... 4... 6, 12, 18, 24... Man. Umm... What about... 6, 12, 18, 24... 26... No. Umm... 4... 43, 46, 49, 53... No. Umm... Maybe... 6... 4, 8, 12, 16... No. 6, 12... Mmm... 4, 2, 6, 12... 13... Wow, I can't believe this makes that... somehow. Mmm... Umm... How about... ... adding all those other numbers to make... No, that doesn't make sense either. ... Umm... ... 24. The 6 and the 4 make 24. That's what's really annoying. Mmm... 13, 12, 11... That doesn't do anything fun. Erg... ... Mmm... 10, 6, 4, 2, 4... Something has to be done to the 13. ... Desperately. ... ... ... But I don't know what. ... ... ... 13 minus 6. ... ... Times 6.","```python
start_state = (2, 4, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6, 12, 18, 24..."" participant seems to be counting by 6s
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(2, 13, 24),
    comment='""6, 12, 18, 24..."" participant seems to be counting by 6s',
)

curr_state = graph.move_to_node(start_state)
# ""13 minus 6?""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(2, 4, 7),
    comment='""13 minus 6?""',
)

curr_state = graph.move_to_node(start_state)
# ""6 divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/2=3"",
    resulting_state=(3, 4, 13),
    comment='""6 divided by 2""',
)

curr_state = graph.move_to_node(start_state)
# ""6... times... 4..."" participant tries multiplying 6 and 4 again
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(2, 13, 24),
    comment='""6... times... 4...""',
)

curr_state = graph.move_to_node(start_state)
# ""13 minus 6. ... ... Times 6."" participant tries subtracting 6 from 13 and then multiplying by 6
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(2, 4, 7),
    comment='""13 minus 6. ... ... Times 6."" First computing 13-6',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(2, 4, 42),
    comment='""13 minus 6. ... ... Times 6."" Then multiplying result by 6',
)
```"
3833,"[3,5,10,10]",,180," 5-3 is 7, 5-5 is 5, I mean 10-5 is 5, 5-7 is 3, 5 that doesn't help, 8-3 that doesn't help, so 15-30 doesn't help. 10 times 10 is 100, doesn't help, 15 and 10 doesn't help. 5 times 10 is 50, 50-5, 50-30 doesn't help. 10-5 is 5, 30 doesn't help. 50- 50- 50- 50- 30 doesn't help, good, no, I cannot figure this one out, okay, 5 times 3 is 15, 50- 50- 50- 50- 50- 50- 15 minus 10 is 5 times 3 doesn't help 30 minus 10 plus 5, minus 5 does not help. 10 divided by 4 is 2, you can do it that way, and 8, 10 divided by 5 is 2, 2 times 10 is 20, plus 3, 9, 2, 10 and 10 is 20. 5 by 3, no, 100 divided by 3, no, 100 divided by 5 is 25 plus 3, no, longest 3 minutes of my life. Okay. Okay. Okay.","```python
start_state = (3, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5-3 is 7"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=7"",
    resulting_state=(7, 10, 10),
    comment='""5-3 is 7"" - calculation error',
    result_calc_error=True,
)

# ""10-5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 10),
    comment='""10-5 is 5""',
)

# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(3, 5, 100),
    comment='""10 times 10 is 100""',
)

# ""5 times 10 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(3, 10, 50),
    comment='""5 times 10 is 50""',
)

# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(10, 10, 15),
    comment='""5 times 3 is 15""',
)

# ""15 minus 10 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-10=5"",
    resulting_state=(5, 10),
    comment='""15 minus 10 is 5""',
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 3, 10),
    comment='""10 divided by 5 is 2""',
)

# ""2 times 10 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(3, 20),
    comment='""2 times 10 is 20""',
)

# ""10 and 10 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(3, 5, 20),
    comment='""10 and 10 is 20""',
)

```"
3838,"[3,7,7,9]",,180," 3 x 7 is 21, 7 x 7 is 49, 63, that's helpful. 9 x 7 is 16, 16 is 23, that doesn't work. 7 minus 3 is 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9 x 7, 4 x 7 is 28, not helpful. 9 x 3 is 24, 9 x 3 is 27, 27 plus 7, is 34, minus 7 does not equal 24. 9 minus 7 is 2, 2 x 21, no, 2 x 7 is 14, plus 3, no. Okay, I am just not in a math mood this morning apparently. 7 plus 3 is 10, 10 plus 14 minus 3 is 11, that's 20, 16, 21, 16. 16 minus 3 is 13, 7 is still 20, 9 minus 3 is 6, 6 times 7, 22, 7, oh my gosh, 7 times 3 is 21, plus 9 is 30, so 23, 7 times, oh, I just want to write these down and solve them later, um, 9, 3, 3, 7, 9, 7, 3, 7, okay, 9 divided by 3. 9 is 3, 3 times 7 is 21, that's not out.","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 x 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 9, 21),
    comment='""3 x 7 is 21""',
)

# ""7 x 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(3, 9, 49),
    comment='""7 x 7 is 49""',
)

# ""9 x 7 is 16, 16 is 23"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=16"",
    resulting_state=(3, 7, 16),
    comment='""9 x 7 is 16"" - calculation error',
    result_calc_error=True,
)

# ""7 minus 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 7, 9),
    comment='""7 minus 3 is 4""',
)

# ""4 x 7 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(9, 28),
    comment='""4 x 7 is 28""',
)

# ""9 x 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(7, 7, 27),
    comment='""9 x 3 is 27""',
)

# ""27 plus 7, is 34""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27+7=34"",
    resulting_state=(7, 34),
    comment='""27 plus 7, is 34""',
)

# ""minus 7 does not equal 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""34-7=27"",
    resulting_state=(27,),
    comment='""minus 7 does not equal 24""',
)

# ""9 minus 7 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""9 minus 7 is 2""',
)

# ""2 x 7 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 14),
    comment='""2 x 7 is 14""',
)

# ""plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+3=17"",
    resulting_state=(17,),
    comment='""plus 3""',
)

# ""7 plus 3 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(7, 9, 10),
    comment='""7 plus 3 is 10""',
)

# ""9 minus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 7, 7),
    comment='""9 minus 3 is 6""',
)

# ""6 times 7, 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=22"",
    resulting_state=(7, 22),
    comment='""6 times 7, 22"" - calculation error',
    result_calc_error=True,
)

# ""7 times 3 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(7, 9, 21),
    comment='""7 times 3 is 21""',
)

# ""plus 9 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+9=30"",
    resulting_state=(7, 30),
    comment='""plus 9 is 30""',
)

# ""9 divided by 3. 9 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 7, 7),
    comment='""9 divided by 3. 9 is 3""',
)

# ""3 times 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(7, 21),
    comment='""3 times 7 is 21""',
)
```"
3839,"[6,9,9,12]",,180," 6 times 4, so it will be 9 minus 12, oh no, 12 minus 9, okay, we're going to delete the 1, that's going to be 4, 7, 1 minus 9, 9 minus 9, 1 minus 9 plus 8, okay, what do we do with this 9? Incredible, I dont know what to do with that 9. What should I do? Okay, I now have 12 times 6, 12, 12, 24, 48, 6. Okay, let's try something different. 51. Okay, so what about 12 times 6, minus, let's see that, okay. Okay. 64. Okay, I'm going to delete this. 12 plus 9 is.","```python
start_state = (6, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# Set subgoal of getting 4 to multiply by 6
graph.set_subgoal((4, 6), comment='""6 times 4"" - participant seems to be trying to get 4 to multiply by 6')

# ""12 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 6, 9),
    comment='""12 minus 9""',
)

# ""9 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-9=0"",
    resulting_state=(0, 6, 12),
    comment='""9 minus 9""',
)

# ""12 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6=72"",
    resulting_state=(9, 9, 72),
    comment='""12 times 6""',
)

# ""12 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(6, 9, 21),
    comment='""12 plus 9 is""',
)
```"
3843,"[5,9,10,11]",(5x9)-(10+11),161," Let's see. So that will do it. So let's, okay, 1, 1. So, okay, 11 minus 10 is 1. That's 14. Okay, I know what I have to do. So it's 11 minus, no, no no no, I just need 10. 10, 10, 10, 10, 10, 10, 10, 10, 10, 10. Okay, 5 to 5 to 10. 9 times 10, 80, no it's not that, it's 9, so let's see, I just need 10 plus 9 plus 5, how do I get rid of this, 11 minus 10 is 1, that's not enough, 10 plus 5, 50, that's to be 45, okay, let's see, okay, let's try this one, all right, all right, I think, times 9, 45, minus 10 plus 11, let's see,","```python
start_state = (5, 9, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 10 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-10=1"",
    resulting_state=(1, 5, 9),
    comment='""11 minus 10 is 1""',
)

# ""That's 14"" - not clear what operation this refers to

# ""9 times 10, 80"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*10=80"",
    resulting_state=(5, 11, 80),
    comment='""9 times 10, 80""',
    result_calc_error=True,
)

# ""10 plus 9 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+9+5=24"",
    resulting_state=(11, 24),
    comment='""10 plus 9 plus 5""',
)

# ""11 minus 10 is 1"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""11-10=1"",
    resulting_state=(1, 5, 9),
    comment='""11 minus 10 is 1""',
)

# ""10 plus 5, 50"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=50"",
    resulting_state=(9, 11, 50),
    comment='""10 plus 5, 50""',
    result_calc_error=True,
)

# ""that's to be 45"" - participant might be computing 5*9
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=45"",
    resulting_state=(10, 11, 45),
    comment='""that\'s to be 45"" - participant might be computing 5*9',
)

# Based on their final answer (5x9)-(10+11), they then subtract 10+11 from 45
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-(10+11)=24"",
    resulting_state=(24,),
    comment='Based on their final answer (5x9)-(10+11), they subtract 10+11 from 45',
)
```"
3844,"[3,5,6,8]",(3x8)x(6-5),80, Okay. 6 times 3 is 30. 33. 25. 15. 15. 2. 5. 10. No. Let's see. 3 times 5. 5 plus 6 plus 8. 14. That's 14. No. That's 22. Let's see. Okay. All right. That does it. Okay. So 3 times 8 times 6 minus 5. There you go.,"```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 3 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=30"",
    resulting_state=(5, 8, 30),
    result_calc_error=True,
    comment='""6 times 3 is 30"" - calculation error',
)

# The numbers ""33. 25. 15. 15. 2. 5. 10"" seem to be the participant listing numbers without clear operations

# ""3 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(6, 8, 15),
    comment='""3 times 5""',
)

# ""5 plus 6 plus 8. 14. That's 14. No. That's 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6+8=22"",
    resulting_state=(3, 22),
    comment='""5 plus 6 plus 8...That\'s 22""',
    result_calc_error=True,
)

# ""3 times 8 times 6 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8*(6-5)=24"",
    resulting_state=(24,),
    comment='""3 times 8 times 6 minus 5""',
)
```"
3857,"[2,3,7,9]",9+3,180," 2, 3, 7, 9. 3 and 7 equals 10. 2 and 9 equals 18. 2 and 3 equals 6. We could do 6 and then use the 2 we get from subtracting 9 minus 7. Multiply that by 2 and then multiply this by 6 to get 24. So let's type this all out. 9 minus 7. I've got to put another parenthesis. 9 minus 7. Alright, that's 2. Multiply that. Oh, we can't do that. Okay, okay. Let's see here. That's 21. Maybe, maybe we can try to find another combination. 3 and 7 is 10. 9 and 3 is 27. 27, uh, 9 and 7 is... 56. 48. So let's see here. I should really... 9 divided by 3 is 3. We use a 3. Let's see here. 7 minus 7. That's 3. So... That's 3 there. And then... I can use that to multiply because that would be 6 and then that would be... 9 divided by... Hmm. Let's see if we can get 12 in here. So... Oh yeah. 9... 9 plus 3... is 12. Times 2 is 24. But we're still missing the 7. So... 9 times 2...","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 and 7 equals 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7=10"",
    resulting_state=(2, 9, 10),
    comment='""3 and 7 equals 10""',
)

# ""2 and 9 equals 18"" - this must be multiplication
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(3, 7, 18),
    comment='""2 and 9 equals 18""',
)

# ""2 and 3 equals 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 7, 9),
    comment='""2 and 3 equals 6""',
)

# ""9 minus 7"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 2, 3),
    comment='""9 minus 7""',
)

# ""That's 21"" - not clear how they got this number

# ""3 and 7 is 10"" - repeating earlier calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""3+7=10"",
    resulting_state=(2, 9, 10),
    comment='""3 and 7 is 10""',
)

# ""9 and 3 is 27"" - must be multiplication
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(2, 7, 27),
    comment='""9 and 3 is 27""',
)

# ""9 and 7 is... 56. 48"" - participant seems unsure about multiplication result
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=48"",
    resulting_state=(2, 3, 48),
    comment='""9 and 7 is... 56. 48""',
    result_calc_error=True,
)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(2, 3, 7),
    comment='""9 divided by 3 is 3""',
)

# ""9 plus 3... is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(2, 7, 12),
    comment='""9 plus 3... is 12""',
)

# ""Times 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(7, 24),
    comment='""Times 2 is 24""',
)

# ""9 times 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(3, 7, 18),
    comment='""9 times 2""',
)
```"
3860,"[2,2,6,7]",((2x2)x7,180," Alright, I've got 2, 2, 6, 7. Let's see here, 2, 2 is 4, 2, 6 is 12, and you still have the 7 to deal with. 7 could make 24, 7 minus 2 is 5. Huh. Alright, let's see here. So 7 times 6 is 42. Divided by 2 would be 21. Hmm. 7 times 2 is 14. We can get a 3 if we divide 6 by 2. Divided by 2. Huh. Divided by 2 equals 4. I think it has something to do with division, probably. So, let's see here. What can I get, can I get 48 out of anything? 7 times, 6 times 2. No. 7 times 2, 14. And we've got to get a 10 out of the other remaining ones. 14 times. Got to work either. 42. If we could only get 48 out of it. That would be 2 plus, 2 plus 6 times 7. So that would be 8 times 7, which is 56 now. 2 plus 7 times 6. That would be 4 times 7. 4 times, oh, okay. 2 times, no, because I still need the 4 to subtract. 2 times, actually, let me try it. So if I, if I get this, 2 times 2, that's 4. 4 times 7 is, eh. 4 times 7 is 20.","```python
start_state = (2, 2, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2, 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 6, 7),
    comment='""2, 2 is 4""',
)

# ""2, 6 is 12"" - participant seems to be multiplying
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(2, 7, 12),
    comment='""2, 6 is 12""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(2, 5, 6),
    comment='""7 minus 2 is 5""',
)

# ""7 times 6 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(2, 2, 42),
    comment='""7 times 6 is 42""',
)

# ""Divided by 2 would be 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42/2=21"",
    resulting_state=(2, 21),
    comment='""Divided by 2 would be 21""',
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 6, 14),
    comment='""7 times 2 is 14""',
)

# ""We can get a 3 if we divide 6 by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/2=3"",
    resulting_state=(2, 3, 7),
    comment='""We can get a 3 if we divide 6 by 2""',
)

# ""2 plus 6 times 7. So that would be 8 times 7, which is 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+6)*7=56"",
    resulting_state=(2, 56),
    comment='""2 plus 6 times 7. So that would be 8 times 7, which is 56""',
)

# ""2 times 2, that's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 6, 7),
    comment='""2 times 2, that\'s 4""',
)

# ""4 times 7 is 20"" - participant makes calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=20"",
    resulting_state=(6, 20),
    comment='""4 times 7 is 20"" - participant makes calculation error',
    result_calc_error=True,
)

```"
3861,"[2,2,3,3]",(2+2)x(3+3),19," I've got 2, 2, 3, 3. I see a 6, a 6. Okay, this one's just fairly straightforward. It's just 2 plus 2 to get the 4 and 3 plus 3 to get the 6. And multiply.","```python
start_state = (2, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I see a 6, a 6"" - participant seems to be setting a subgoal of getting two 6s
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""I see a 6, a 6"" - participant seems to be setting a subgoal of getting two 6s',
)

# ""2 plus 2 to get the 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(3, 3, 4),
    comment='""2 plus 2 to get the 4""',
)

# ""3 plus 3 to get the 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(4, 6),
    comment='""3 plus 3 to get the 6""',
)

# ""And multiply""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""And multiply""',
)
```"
3865,"[1,2,8,10]",,180," Okay, target number 24. We've got 1, 2, 8, and 10. So, let's say 10 minus, we're going to have to get these numbers down a little bit. 10 minus 8 is 6. Okay, here we go. 10 minus 8 would be 6 times 1 plus 3. No? Oh, dang it. That's 10 minus 8. Oh, 10 minus 2. 10 minus 8. Let's see. 10 minus 2 would be 8. And we don't. We need to give it. Okay, let's see. Let's say 8. Minus 2 would be 6. No? Okay, 10 minus 8. Let's see. No? 10 minus 8 would be 2. Um, 9. 10 minus 2 would be 8. We've still got this 8 to deal with. Okay, how about trying to make it 12 times 2? Let's say 10. Hmm. 10 minus 1 is 9. That's not going to work. 8 minus 1 is 7. We've got to deal with this 10 now. 10 and 8 are the big numbers we need to get down. 8, 16, 24. 8. So I can get 8. Let's say 10. 10 minus 1 is 9. 10 minus 2 is 8. 10. 8 minus 2 is 6. 6. That's going to be, I can't really do anything with that. Oh, and less, no. I can divide something, but 10. Let's say, let's get 48 divided by.","```python
start_state = (1, 2, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 8 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=6"",
    resulting_state=(1, 2, 6),
    comment='""10 minus 8 is 6"" - calculation error',
    result_calc_error=True,
)

# ""10 minus 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(1, 8, 8),
    comment='""10 minus 2""',
)

# ""8 minus 2 would be 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(1, 6, 10),
    comment='""8 minus 2 would be 6""',
)

# ""10 minus 8 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(1, 2, 2),
    comment='""10 minus 8 would be 2""',
)

# ""10 minus 2 would be 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(1, 8, 8),
    comment='""10 minus 2 would be 8""',
)

# ""how about trying to make it 12 times 2"" suggests a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""how about trying to make it 12 times 2""',
)

# ""10 minus 1 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(2, 8, 9),
    comment='""10 minus 1 is 9""',
)

# ""8 minus 1 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(2, 7, 10),
    comment='""8 minus 1 is 7""',
)

# ""8, 16, 24"" suggests participant is trying to multiply by 2 repeatedly
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(1, 10, 16),
    comment='""8, 16, 24"" suggests participant is trying to multiply by 2',
)

# ""10 minus 1 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(2, 8, 9),
    comment='""10 minus 1 is 9""',
)

# ""10 minus 2 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(1, 8, 8),
    comment='""10 minus 2 is 8""',
)

# ""8 minus 2 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-2=6"",
    resulting_state=(1, 6, 10),
    comment='""8 minus 2 is 6""',
)

# The participant mentions division but doesn't complete the thought before time runs out
```"
3867,"[4,4,5,6]",,180," Alright, we got 4, 4, 5, 6. Let's say 6 times 5 is 30. Minus 4 is 26. That's not going to work. 4 times 5 is 20. Plus 6 is 26. Minus 4 is not going to work. 4 times 4 is 16. 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27. That's not going to work. I wonder if it's a combination of addition and subtraction. Under 10 plus 5. That's not, no. Those numbers don't add up. 16, 19. That adds up to 19 altogether. So we need to multiply something. 4 times 4 is 16. Plus 5 plus 6. Okay, let's say 4 times 4 is 16. Plus 6. No. Oh, no. I hope this is not some adding and dividing. That's going to mess me up here. 6 times 5 is 30. Minus 4. That's not going to work. That's going to be 22. 5. 5 times 4 is 20. 20, 24, 26 minus 4 is 22, 4 times 4 is 16, I think I already figured this one out already and it didn't work out, 16 plus 6 is 22, that's not gonna work, 6 times 4 is 24, let's say 24 times 4 divided by 5. That's not gonna work either, 20, 4 times 5 is 20, times 4 is 80, divided by 6,","```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 5 is 30. Minus 4 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5-4=26"",
    resulting_state=(4, 26),
    comment='""6 times 5 is 30. Minus 4 is 26""',
)

# ""4 times 5 is 20. Plus 6 is 26. Minus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5+6-4=22"",
    resulting_state=(22,),
    comment='""4 times 5 is 20. Plus 6 is 26. Minus 4""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 6, 16),
    comment='""4 times 4 is 16""',
)

# The counting up from 16 seems to be the participant checking if they can get to 24

# ""4 times 4 is 16. Plus 5 plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+5+6=27"",
    resulting_state=(27,),
    comment='""4 times 4 is 16. Plus 5 plus 6""',
)

# ""6 times 5 is 30. Minus 4. That's not going to work. That's going to be 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5-4-4=22"",
    resulting_state=(22,),
    comment='""6 times 5 is 30. Minus 4. That\'s going to be 22""',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(4, 6, 20),
    comment='""5 times 4 is 20""',
)

# ""24, 26 minus 4 is 22"" - not clear where 24,26 came from

# ""4 times 4 is 16"" - participant repeats earlier calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 6, 16),
    comment='""4 times 4 is 16""',
)

# ""16 plus 6 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(5, 22),
    comment='""16 plus 6 is 22""',
)

# ""6 times 4 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(4, 5, 24),
    comment='""6 times 4 is 24""',
)

# ""let's say 24 times 4 divided by 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*4/5=19.2"",
    resulting_state=(19.2,),
    comment='""let\'s say 24 times 4 divided by 5""',
)

# ""4 times 5 is 20, times 4 is 80, divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5*4/6=13.33"",
    resulting_state=(13.33,),
    comment='""4 times 5 is 20, times 4 is 80, divided by 6""',
)
```"
3868,"[2,2,7,10]",,180," 2 is 14 2 times 7 is 14 there's 2 is 28 minus 10 would be 18 okay let's do 10 2 times 10 is 8 let's do 8 plus 7 야 Les Two is 17 okay let's go 10 minus 7 is 8 now I got 8 plus 7 plus 2 is 17 Ok let's go 10 minus 7 is 3 10 minus 8 is 4 8 plus 8 is 9 times 2, times 2, nope, I wonder if we did the 2 times 2 is 4, times 10, divided by 7, that's way too low, 7, minus 2 is 5, plus 5, plus 10 is 15, times 2 is 30, okay, let's go, 2, all right, let's try to think outside the box here a little bit, because we got 7,","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(2, 10, 14),
    comment='""2 times 7 is 14""',
)

# ""there's 2 is 28 minus 10 would be 18"" - participant seems to multiply 14 by 2 and subtract 10
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*2-10=18"",
    resulting_state=(18,),
    comment='""there\'s 2 is 28 minus 10 would be 18""',
)

# Going back to start state: ""let's do 10 2 times 10 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(2, 7, 20),
    comment='""let\'s do 10 2 times 10""',
)

# ""10 minus 7 is 8"" (calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 2, 3),
    comment='""10 minus 7 is 3"" (participant initially said 8 but corrected)',
)

# ""2 times 2 is 4, times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*2)*10=40"",
    resulting_state=(7, 40),
    comment='""2 times 2 is 4, times 10""',
)

# ""divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40/7=5.71"",
    resulting_state=(5.71,),
    comment='""divided by 7""',
)

```"
3872,"[6,6,8,9]",(,180," Okay, we got 6, 6, 8, 9. Kind of big numbers here. So let's go 9. 9 minus 8 is 1. If that was 2, it would be good because 6 plus 6 is 12 times 2. So let's go 8. Okay, wait a second. We got, let's say, 8 minus 6. That would give me my 2. Let's see. 2 times 9 minus 6. 2 times 3 is 12. That's not good. All right, so we got 2 times 9. Okay, let's say 2 times 9. Let's say 2 plus 9 plus 6. Is that right? No. 2 plus 9 plus 6. I thought I had it in my head there for a second. We got 2. 2 times. I thought we had 2 times. That would be 2 times 12, but that doesn't match 12. 12. 54. Can't do that. Let's see. 6, 9. 9 minus 6 is 3. 3 times 8 is 24, but we still got this 6. So 9 minus 8 is 1. That doesn't get us anywhere. 8 minus 6 is 2. 2. 2 times 3 now. 2. 2 times 6 would be 12 plus 9. That's not going to get us anywhere.","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 6, 6),
    comment='""9 minus 8 is 1""',
)

# ""6 plus 6 is 12 times 2"" participant seems to be setting a subgoal of getting 2 to multiply by 12
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""If that was 2, it would be good because 6 plus 6 is 12 times 2""',
)

# ""8 minus 6. That would give me my 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 9),
    comment='""8 minus 6. That would give me my 2""',
)

# ""2 times 9 minus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9-6=12"",
    resulting_state=(12,),
    comment='""2 times 9 minus 6. 2 times 3 is 12""',
)

# ""2 plus 9 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+9+6=17"",
    resulting_state=(17,),
    comment='""2 plus 9 plus 6""',
)

# ""9 minus 6 is 3. 3 times 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 6, 8),
    comment='""9 minus 6 is 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(6, 24),
    comment='""3 times 8 is 24""',
)

# ""9 minus 8 is 1. That doesn't get us anywhere""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 6, 6),
    comment='""9 minus 8 is 1""',
)

# ""8 minus 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 9),
    comment='""8 minus 6 is 2""',
)

# ""2 times 6 would be 12 plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6+9=21"",
    resulting_state=(21,),
    comment='""2 times 6 would be 12 plus 9""',
)
```"
3873,"[1,5,10,12]",,180," Alright, we've got 1, 5, 10, and 12. 10, okay, 12 minus 10 is 2. 2 times 6 is 12, that's not going to work. 12 minus 5 is 7. That doesn't equate to anything. I wonder if this is a dividing one. 6, 1 times 1 plus 5 is 6. 10, nope. 10 plus 2 is 22. And now, 12. 12 minus 1 is 11. Does that add up to everything? 12, let's say, 11 plus 10 plus 5 is 26. That's not going to work. Uh... 5 times 10 is 50, divided by 12. That's not going to be it. 10. Hmm. Sheesh. Okay, how about... 10 times 12 is 120. Divided by 6. That'd be 1, that'd be 20. That's not it. 50. 5 times 10 is 50. That's not going to work. 5. How about... 5 times 10 is 50. 50. Divided by 13. Oh, that's way off. Oh. Or, how about... I mean, 11. That's still going to be way off. 12 minus 10 is 2. 2. Okay, 2... times 5 is 10. 10.","```python
start_state = (1, 5, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 10 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(1, 2, 5),
    comment='""12 minus 10 is 2""',
)

# ""2 times 6"" - participant seems to be trying to multiply by 6 (which isn't available)
# This operation isn't valid since 6 isn't in the current state

# ""12 minus 5 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-5=7"",
    resulting_state=(1, 7, 10),
    comment='""12 minus 5 is 7""',
)

# ""1 plus 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(6, 10, 12),
    comment='""1 times 1 plus 5 is 6"" - participant likely meant 1+5=6',
)

# ""10 plus 2 is 22"" - seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(1, 5, 22),
    comment='""10 plus 2 is 22"" - seems to be referring to 10+12',
)

# ""12 minus 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(5, 10, 11),
    comment='""12 minus 1 is 11""',
)

# ""11 plus 10 plus 5 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+10+5=26"",
    resulting_state=(26,),
    comment='""11 plus 10 plus 5 is 26""',
)

# ""5 times 10 is 50, divided by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10/12=4.17"",
    resulting_state=(1, 4.17),
    comment='""5 times 10 is 50, divided by 12""',
)

# ""10 times 12 is 120. Divided by 6"" - participant trying to divide by 6 which isn't available
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(1, 5, 120),
    comment='""10 times 12 is 120""',
)

# ""5 times 10 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(1, 12, 50),
    comment='""5 times 10 is 50""',
)

# ""Divided by 13"" - participant seems to be trying to divide 50 by 13, but 13 isn't available

# ""12 minus 10 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-10=2"",
    resulting_state=(1, 2, 5),
    comment='""12 minus 10 is 2""',
)

# ""2 times 5 is 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(1, 10),
    comment='""2 times 5 is 10""',
)
```"
3874,"[2,2,3,11]",,180," Alright, I've got that 11 there again. 2, 2, 3, and 11. 2 times 11 is 22. Plus 3 is 24. 24 is 2. Okay, let's go 2 times 2 is 4. 2 times 2 is 4. Plus 4 times 3 is 12. Plus 11 is 23. That's not going to work. Okay, 3 times 2 is 6. That's going to get the same way. 6 times 2 is 12. And we've got 11, that's 23. Hmm, that's a doozy here. Alright, let's say 11 minus 2 is 9. Minus, okay, okay, hold on. 9. 2 times, I'm losing my train of thought. 2 times 11 is 22. 2 times 11 is 22. Oh, I thought I had this. 2. 3 times 11 is 33. That's going to come up with an odd number. 2 times 3. 22. 22. 22 plus 3 minus 2 is 23. Gosh. 2 times 3 is going to be 6. 6. That's still, still not good. 11 minus 3 is 8. 8 times 4 is 2. I just put in a 2.","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 3, 22),
    comment='""2 times 11 is 22""',
)

# ""Plus 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+3=24"",
    resulting_state=(2, 24),
    result_calc_error=True,
    comment='""Plus 3 is 24""',
)

# Going back to start state: ""2 times 2 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(3, 4, 11),
    comment='""2 times 2 is 4""',
)

# ""Plus 4 times 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(11, 12),
    comment='""Plus 4 times 3 is 12""',
)

# ""Plus 11 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(23,),
    comment='""Plus 11 is 23""',
)

# ""3 times 2 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(2, 6, 11),
    comment='""3 times 2 is 6""',
)

# ""6 times 2 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(11, 12),
    comment='""6 times 2 is 12""',
)

# ""And we've got 11, that's 23"" - adding 11 to 12
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(23,),
    comment='""And we\'ve got 11, that\'s 23""',
)

# ""11 minus 2 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 3, 9),
    comment='""11 minus 2 is 9""',
)

# ""2 times 11 is 22"" - trying this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 3, 22),
    comment='""2 times 11 is 22""',
)

# ""3 times 11 is 33""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11=33"",
    resulting_state=(2, 2, 33),
    comment='""3 times 11 is 33""',
)

# ""2 times 3 is going to be 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(2, 6, 11),
    comment='""2 times 3 is going to be 6""',
)

# ""11 minus 3 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(2, 2, 8),
    comment='""11 minus 3 is 8""',
)

# ""8 times 4"" - participant probably got 4 from 2*2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(2*2)=32"",
    resulting_state=(32,),
    comment='""8 times 4"" - participant probably got 4 from 2*2',
)
```"
3876,"[5,5,7,10]",(,180," Okay, we have 5, 5, 7, and 10. 5 plus 5, no, 5. Let's see if we get 10, if we can get that to 14, which we can't. Let's see, 5 times 7 is 35. No. 10 minus 7 is 3. Can't do it that way. Let's see. 7 minus 5 equals 2. Can't do it that way. If I can get 17, no, okay. 10 divided by 5. 10 minus 5 equals 5. 5, 5, and 7, no. All right, 10 divided by 5 is 2. Can't get it that way. Jeez. 7 plus 10 is 17. Can't do it that way. Let's see. 10 times 5 is 50. No, I can't do it that way. 10 minus 5 equals 3. Can't do it that way. plus 5 is 15 7 no let's go backwards 24 minus 10 is 14 can I get 14 5 5 7 no let me can I 25 25 minus 10 dang it no okay um four geez five plus five is ten seven minus five is two ten times seven is seventy divided by five will be fourteen no um five plus five is ten geez no um five five times five is twenty five five times seven is thirty five five five five seven two can that be oh yes okay so","```python
start_state = (5, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(7, 10, 10),
    comment='""5 plus 5""',
)

# ""if we can get that to 14"" suggests participant is setting a subgoal
graph.set_subgoal(
    (14,),
    state_after_subgoal=(24,),
    comment='""if we can get that to 14""',
)

# ""5 times 7 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(5, 10, 35),
    comment='""5 times 7 is 35""',
)

# ""10 minus 7 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 5, 5),
    comment='""10 minus 7 is 3""',
)

# ""7 minus 5 equals 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 5, 10),
    comment='""7 minus 5 equals 2""',
)

# ""If I can get 17"" suggests another subgoal
graph.set_subgoal(
    (17,),
    state_after_subgoal=(24,),
    comment='""If I can get 17""',
)

# ""10 divided by 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 7),
    comment='""10 divided by 5""',
)

# ""10 minus 5 equals 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 7),
    comment='""10 minus 5 equals 5""',
)

# ""7 plus 10 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(5, 5, 17),
    comment='""7 plus 10 is 17""',
)

# ""10 times 5 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(5, 7, 50),
    comment='""10 times 5 is 50""',
)

# ""10 minus 5 equals 3"" (participant made calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=3"",
    resulting_state=(3, 5, 7),
    comment='""10 minus 5 equals 3"" (participant made calculation error)',
    result_calc_error=True,
)

# ""plus 5 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=15"",
    resulting_state=(7, 15),
    comment='""plus 5 is 15""',
    result_calc_error=True,
)

# ""let's go backwards 24 minus 10 is 14"" suggests working backward from goal
graph.set_subgoal(
    (10, 14),
    state_after_subgoal=(24,),
    comment='""let\'s go backwards 24 minus 10 is 14""',
)

# ""five plus five is ten""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(7, 10, 10),
    comment='""five plus five is ten""',
)

# ""seven minus five is two""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 5, 10),
    comment='""seven minus five is two""',
)

# ""ten times seven is seventy divided by five will be fourteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7/5=14"",
    resulting_state=(5, 14),
    comment='""ten times seven is seventy divided by five will be fourteen""',
)

# ""five times five is twenty five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(7, 10, 25),
    comment='""five times five is twenty five""',
)

# ""five times seven is thirty five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(5, 10, 35),
    comment='""five times seven is thirty five""',
)
```"
3877,"[3,4,8,12]",(12x3)-(8+4),60," Okay, if I have 12, all I need to do is just get 2 with the other numbers. Can I do that? If I get 4, I just need to get 6. Okay, so, what if I have a 3, I just need to get an 8 with the other 3. So, 4, jeez, okay. 8 times 4 is 32. No, wait, there's, no. Okay, so, 12 times 3 equals 36. And 8 plus 4 is 36. 4 is 12. 36 minus 12 equals 24.","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I have 12, all I need to do is just get 2 with the other numbers"" - setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""If I have 12, all I need to do is just get 2 with the other numbers""',
)

# ""If I get 4, I just need to get 6"" - setting another subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""If I get 4, I just need to get 6""',
)

# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(3, 12, 32),
    comment='""8 times 4 is 32""',
)

# ""12 times 3 equals 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(4, 8, 36),
    comment='""12 times 3 equals 36""',
)

# ""And 8 plus 4 is"" [12]
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(12, 36),
    comment='""And 8 plus 4 is"" [12]',
)

# ""36 minus 12 equals 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(24,),
    comment='""36 minus 12 equals 24""',
)
```"
3878,"[1,2,7,7]",((7x7)-1)/2,83," All right, so if I get 7 times 2 is 14, no, 7 plus 7 is 14, no, oh wait, 7 plus 7 is 14, I think that's going to be 12, no, dang it, okay, so 2 times 7, oh, 2 times 7 is 14. 14, can't get it that way, let's see, 7, okay, so 7 times 7 is 48, okay, 48, mine, oh, I've got to put that in the parentheses, so let's see, so I want to do, okay, so parentheses, parentheses, okay, 7 times 7 is 48, 48 minus 1 is, oh, sorry, it's 49, 49 minus 1 equals 48, 48 divided by 2 is 24.","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='""7 plus 7 is 14""',
)

# ""2 times 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(1, 7, 14),
    comment='""2 times 7 is 14""',
)

# ""7 times 7 is 48"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=48"",
    resulting_state=(1, 2, 48),
    comment='""7 times 7 is 48"" - calculation error',
    result_calc_error=True,
)

# ""oh, sorry, it's 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(1, 2, 49),
    comment='""oh, sorry, it\'s 49""',
)

# ""49 minus 1 equals 48""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49-1=48"",
    resulting_state=(2, 48),
    comment='""49 minus 1 equals 48""',
)

# ""48 divided by 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/2=24"",
    resulting_state=(24,),
    comment='""48 divided by 2 is 24""',
)
```"
3880,"[6,8,12,12]",(8+6-12)x12,51," Let's see, I've got 12, 12, 6, and 8. So if I have an 8 and I can get a 3 with the other 2, I'm going to try to do that. 12 plus 12 is 24. Let's see, 6. I've got 12, I can get 2 with the other ones. So 12, 8, and 6, if I can get that to equal 2. Oh, okay. Okay, so 12, all right, let me start with this. Okay, so 8 plus 6 minus 12. So that's 14 minus 2 equals, sorry, 14 minus 12 equals 2 times 12 equals 24.","```python
start_state = (6, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(6, 8, 24),
    comment='""12 plus 12 is 24""',
)

# ""if I can get 2"" - participant seems to be setting a subgoal of getting 2 to multiply by 12
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""if I can get 2"" - participant seems to be setting a subgoal of getting 2 to multiply by 12',
)

# ""8 plus 6 minus 12. So that's 14 minus 12 equals 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6-12=2"",
    resulting_state=(2, 12),
    comment='""8 plus 6 minus 12. So that\'s 14 minus 12 equals 2""',
)

# ""times 12 equals 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='""times 12 equals 24""',
)
```"
3884,"[2,3,5,10]",(10+5-3)x2,34," Okay, 2, 3, 5, 10. So if I have a 3, if I can get 8 with the other 2, 10, and let's see, or if I have a 2 and I can get 12 with the other ones, so okay. So I've got 10, I'm going to do parentheses first to make sure it's right. So 10 plus 5 is 15. 15 minus 3 equals 12. Put that in parentheses. 12 times 2 equals 24.","```python
start_state = (2, 3, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""if I can get 8 with the other 2"" and ""if I have a 2 and I can get 12 with the other ones""
# The participant seems to be setting two possible subgoals: either get 8 to multiply by 3, or get 12 to multiply by 2
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""if I can get 8 with the other 2"" suggests trying to get 8 to multiply by 3',
)
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""if I have a 2 and I can get 12 with the other ones"" suggests trying to get 12 to multiply by 2',
)

# ""10 plus 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(2, 3, 15),
    comment='""10 plus 5 is 15""',
)

# ""15 minus 3 equals 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-3=12"",
    resulting_state=(2, 12),
    comment='""15 minus 3 equals 12""',
)

# ""12 times 2 equals 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""12 times 2 equals 24""',
)
```"
3887,"[1,1,5,8]",8x(5-1+1),180," 8 times, no, 13, that's not going to work either. 5 plus 1 is 6, times 8, no, that's not going to work. 5 plus 1 is 6, plus 8, that's not going to work either. 1 plus 1 is 2, times 8 is 16, plus 5, that's not going to work, 8 minus 5, that's not going to work either. Okay, 5 minus 1 is 4, that's not going to work either. 5 minus, okay, so there we go. So we're going to do parentheses, 5 minus 1 plus 1 is 3, times 8 is 24. Damn it, incorrect answer, not all the numbers, you just wait. Okay, because I didn't do that right. Shoot. Okay, so 5. Minus 1 plus 1, and then times 8, what? It was 3, okay, how do I, what? What is, you said it's 2. Okay, here we go. How about you, I'm trying to, okay, so 1 plus 1, we're going to do the damn parentheses, 1 plus 1, close parentheses, oh my god. Okay. Okay. Okay. So I'm going to see if I can do that one more time. I'm going to see if I can do that one more time, it's not right either. If I tried to do this, 8 times 5 minus, I am 5 minus 1 plus 1, I am 5 minus 1 plus 1, closed parentheses. to see.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 1 is 6, times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*8=48"",
    resulting_state=(1, 48),
    comment='""5 plus 1 is 6, times 8""',
)

# ""5 plus 1 is 6, plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1+8=14"",
    resulting_state=(1, 14),
    comment='""5 plus 1 is 6, plus 8""',
)

# ""1 plus 1 is 2, times 8 is 16, plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+1)*8+5=21"",
    resulting_state=(21,),
    comment='""1 plus 1 is 2, times 8 is 16, plus 5""',
)

# ""8 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(1, 1, 3),
    comment='""8 minus 5""',
)

# ""5 minus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(1, 4, 8),
    comment='""5 minus 1 is 4""',
)

# ""5 minus 1 plus 1 is 3, times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-1+1)*8=24"",
    resulting_state=(24,),
    result_calc_error=True,
    comment='""5 minus 1 plus 1 is 3, times 8 is 24""',
)

# The participant then tries several more times to verify their answer, but they are using the same operations
```"
3889,"[3,5,6,8]",3x5,180," 8 times 6 is 54. No, it's 48. 8 times 6 is 48. Plus 5 is 53 divided by 3. That is definitely not it. Delete, delete. 6 times 5 is 30. That's not going to work either. 3 times 5 is 15. Plus 6 is 21. That's not going to work either. 5 times 3 is 8. Times 8 is 64. That's not going to work either. 6 times 3 is 4. That's not going to work either. Okay. 6 times 5 is 30. 6 times 5 is 30. 6 times 5 is 30. Plus 8 is 38. That's divided. That's definitely not going to be it. 8 times 6 is 48. Minus 5 is 43. So 43 divided by 3 is definitely not it. What are those numbers? Oh, okay. Those, okay, so. But 3 times 8 is 24. So you have to use all the numbers. 6 times 5. 3 times 8 is 24. Plus 5 and 6. We've got to delete this part. Let's see. I cannot figure this one out. 5 plus 6 is 11. Minus 8. 3. That's not going to work either. Oh my bejesus. Okay. 6 times 8 is 48. Minus 3 is 5. I mean 45. So divided by 5 is not going to work either. Um. I can't do this one. 3 times 5 is 15.","```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 6 is 54. No, it's 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(3, 5, 48),
    comment='""8 times 6 is 48""',
)

# ""Plus 5 is 53 divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(48+5)/3=17.67"",
    resulting_state=(17.67,),
    comment='""Plus 5 is 53 divided by 3""',
)

# ""6 times 5 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(3, 8, 30),
    comment='""6 times 5 is 30""',
)

# ""3 times 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(6, 8, 15),
    comment='""3 times 5 is 15""',
)

# ""Plus 6 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+6=21"",
    resulting_state=(8, 21),
    comment='""Plus 6 is 21""',
)

# ""5 times 3 is 8. Times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3*8=120"",
    resulting_state=(6, 120),
    comment='""5 times 3 is 8. Times 8 is 64"" - participant made calculation error',
    result_calc_error=True,
)

# ""6 times 3 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(5, 8, 18),
    comment='""6 times 3 is 4"" - participant likely meant 18',
)

# ""6 times 5 is 30. Plus 8 is 38""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5+8=38"",
    resulting_state=(3, 38),
    comment='""6 times 5 is 30. Plus 8 is 38""',
)

# ""8 times 6 is 48. Minus 5 is 43. So 43 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*6-5)/3=14.33"",
    resulting_state=(14.33,),
    comment='""8 times 6 is 48. Minus 5 is 43. So 43 divided by 3""',
)

# ""3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(5, 6, 24),
    comment='""3 times 8 is 24""',
)

# ""5 plus 6 is 11. Minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6-8=3"",
    resulting_state=(3, 3),
    comment='""5 plus 6 is 11. Minus 8""',
)

# ""6 times 8 is 48. Minus 3 is 5. I mean 45. So divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*8-3)/5=9"",
    resulting_state=(9,),
    comment='""6 times 8 is 48. Minus 3 is 5. I mean 45. So divided by 5""',
)

# ""3 times 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(6, 8, 15),
    comment='""3 times 5 is 15""',
)
```"
3890,"[3,3,6,13]",,180," Okay, 13, okay, 13 times 3 is what, 39, and then 39 minus 6 is 33, that's not going to be it either, oh my god. 3 plus 3 is 9, times 6 is 54, that's not right either, 54 divided by 13, that's certainly not it. These are so hard. 6 plus 3 is 9, times, no, maybe we should do 6 plus 3 is 9 plus 13, no. 3 plus 3 is 6, okay, and then 6 times 6 is 36, no, wait, wait, and then 36 minus 13, no, it keeps being off by 1, okay. What if I did 3 times 3 is 9, plus 6, plus 13, nope. Okay, about 13 minus 3 is 10, plus 6, plus 3, that's not right either. So... . . . . . . . . . Okay, so that's 3. . 3 plus 3 is, I don't know, 3 plus 3 is 6, times 6 is going to be 36, minus 13, that's not right, delete, delete, delete, 6 times 3 is 18. Plus 13.","```python
start_state = (3, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 3 is what, 39, and then 39 minus 6 is 33""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 6, 39),
    comment='""13 times 3 is what, 39""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39-6=33"",
    resulting_state=(3, 33),
    comment='""39 minus 6 is 33""',
)

# ""3 plus 3 is 9, times 6 is 54""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*6=54"",
    resulting_state=(13, 54),
    comment='""3 plus 3 is 9, times 6 is 54""',
    result_calc_error=True,  # since 3+3=6, not 9
)

# ""54 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54/13=4.15"",
    resulting_state=(4.15,),
    comment='""54 divided by 13""',
)

# ""6 plus 3 is 9 plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3+13=22"",
    resulting_state=(3, 22),
    comment='""6 plus 3 is 9 plus 13""',
)

# ""3 plus 3 is 6, okay, and then 6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*6=36"",
    resulting_state=(13, 36),
    comment='""3 plus 3 is 6, okay, and then 6 times 6 is 36""',
)

# ""36 minus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-13=23"",
    resulting_state=(23,),
    comment='""36 minus 13""',
)

# ""3 times 3 is 9, plus 6, plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3+6+13=28"",
    resulting_state=(28,),
    comment='""3 times 3 is 9, plus 6, plus 13""',
)

# ""13 minus 3 is 10, plus 6, plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3+6+3=19"",
    resulting_state=(19,),
    comment='""13 minus 3 is 10, plus 6, plus 3""',
)

# ""3 plus 3 is 6, times 6 is going to be 36, minus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*6-13=23"",
    resulting_state=(23,),
    comment='""3 plus 3 is 6, times 6 is going to be 36, minus 13""',
)

# ""6 times 3 is 18. Plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3+13=31"",
    resulting_state=(3, 31),
    comment='""6 times 3 is 18. Plus 13""',
)
```"
3891,"[5,9,10,11]",9x5-10-11,161," Okay, 10 plus 11 is 21. 21 plus 9 is 30 minus 5. That's, ugh, I keep getting them one off. 9 plus 10 is 19. Plus 11 is 30. Nope, minus 5 is not right either. 5 times 9 is 14. Plus 10 is 24. Nope. 10 plus 11 is 21. 5 times 9 is 40. Minus 10 is 30. Minus is not right either. 5. Okay. 10 minus 9 is 1. Plus 5 is 6. Plus that's not right either. No. 10 times 11. Divided by 10. Nope. 11. These are so difficult. 9 plus 10 is 19. Plus, um, plus 19 times 5 divided by 11. Nope. 10 times 5 is 50. 10 times 5 is 50. Minus 9 is 41. Minus, that's not right either. 10 plus 11 is 21. So, plus 9. Nope. Already did that. That's not right either. 45. 9 times 5 is 45. Okay. So, 45 minus 10 is going to be 35. Okay, yes. I'm not going to have enough time now. 5 times 9 is 45. Minus 10 minus 11.","```python
start_state = (5, 9, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 11 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(5, 9, 21),
    comment='""10 plus 11 is 21""',
)

# ""21 plus 9 is 30 minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+9-5=25"",
    resulting_state=(25,),
    comment='""21 plus 9 is 30 minus 5""',
)

# ""9 plus 10 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(5, 11, 19),
    comment='""9 plus 10 is 19""',
)

# ""Plus 11 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+11=30"",
    resulting_state=(5, 30),
    comment='""Plus 11 is 30""',
)

# ""5 times 9 is 14"" (calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=14"",
    resulting_state=(10, 11, 14),
    comment='""5 times 9 is 14"" (calculation error)',
    result_calc_error=True,
)

# ""Plus 10 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(11, 24),
    comment='""Plus 10 is 24""',
)

# ""10 plus 11 is 21"" (repeating earlier calculation)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(5, 9, 21),
    comment='""10 plus 11 is 21""',
)

# ""5 times 9 is 40"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*9=40"",
    resulting_state=(10, 11, 40),
    comment='""5 times 9 is 40"" (calculation error)',
    result_calc_error=True,
)

# ""Minus 10 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-10=30"",
    resulting_state=(11, 30),
    comment='""Minus 10 is 30""',
)

# ""10 minus 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 5, 11),
    comment='""10 minus 9 is 1""',
)

# ""Plus 5 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(6, 11),
    comment='""Plus 5 is 6""',
)

# ""10 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*11=110"",
    resulting_state=(5, 9, 110),
    comment='""10 times 11""',
)

# ""9 plus 10 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(5, 11, 19),
    comment='""9 plus 10 is 19""',
)

# ""10 times 5 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(9, 11, 50),
    comment='""10 times 5 is 50""',
)

# ""Minus 9 is 41""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""50-9=41"",
    resulting_state=(11, 41),
    comment='""Minus 9 is 41""',
)

# ""10 plus 11 is 21"" (repeating earlier calculation)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(5, 9, 21),
    comment='""10 plus 11 is 21""',
)

# ""9 times 5 is 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(10, 11, 45),
    comment='""9 times 5 is 45""',
)

# ""45 minus 10 is going to be 35""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45-10=35"",
    resulting_state=(11, 35),
    comment='""45 minus 10 is going to be 35""',
)

# Finally ""5 times 9 is 45. Minus 10 minus 11"" - this is the solution they submitted
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5-10-11=24"",
    resulting_state=(24,),
    comment='""5 times 9 is 45. Minus 10 minus 11"" - this is the solution they submitted',
)
```"
3893,"[8,9,9,12]",,180," out. 12 minus 9 is 3. 17 minus 20, no, that's not going to work. 9 times 8, 72 divided by 9 is 8, plus 12 is only 20. 12 minus 9, 3 times 8 is 24, yeah. 12 times 9 is 108. Divided by 9 is 8. 7 plus 8, no, shoot. 9 divided by 9 is 1. Wait, I feel like that should be it. 9 divided by 9 is 1. Plus 8, nope, that's only 21. 22, actually. This is frustrating. 8 times 9 is 72, plus 9 is 80. Divided by, that's definitely not it. Okay, 12 plus 9 is 21. Divided by 9 is 1.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""12 minus 9 is 3""',
)

# ""9 times 8, 72 divided by 9 is 8, plus 12 is only 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*8/9)+12=20"",
    resulting_state=(20,),
    comment='""9 times 8, 72 divided by 9 is 8, plus 12 is only 20""',
)

# ""12 minus 9, 3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(9, 24),
    comment='""12 minus 9, 3 times 8 is 24""',
)

# ""12 times 9 is 108. Divided by 9 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9/9=12"",
    resulting_state=(8, 12),
    comment='""12 times 9 is 108. Divided by 9 is 8""',
)

# ""9 divided by 9 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 8, 12),
    comment='""9 divided by 9 is 1""',
)

# ""Plus 8, nope, that's only 21. 22, actually""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+8+12=21"",
    resulting_state=(21,),
    comment='""Plus 8, nope, that\'s only 21""',
)

# ""8 times 9 is 72, plus 9 is 80""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9+9=81"",
    resulting_state=(12, 81),
    comment='""8 times 9 is 72, plus 9 is 80"" - participant made calculation error',
    result_calc_error=True,
)

# ""12 plus 9 is 21. Divided by 9 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+9)/9=1"",
    resulting_state=(1, 8),
    comment='""12 plus 9 is 21. Divided by 9 is 1""',
    result_calc_error=True,
)
```"
3903,"[1,8,9,12]",(12-9)x(8x1),95," Okay, let's see. 8, so let's do, so we need to get to 9 plus 9. So, 12 minus 9 is 3 times 8 plus 1. Holy cow, no, 3 times, 3 times 9 is 27. Let's see here. What if we take 12 minus 8 is 4 plus, not this, that's not going to be it either. What if we do times? 8, 9 minus 1, 12 minus 4 plus 8, no, wrong, 12 plus 8, 8 times 1, 12 minus 8 is, 12 minus 9 is 3, oh, let me do that. 12 minus 9 is 3 times 8 times 8. 8 times 1, what is that? Oh, that's not right, come on, okay, 8 times 1.","```python
start_state = (1, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""we need to get to 9 plus 9"" suggests a subgoal of 18
graph.set_subgoal(
    (18,),
    state_after_subgoal=(24,),
    comment='""we need to get to 9 plus 9""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(1, 3, 8),
    comment='""12 minus 9 is 3""',
)

# ""times 8 plus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8+1=25"",
    resulting_state=(25,),
    comment='""times 8 plus 1""',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 9),
    comment='""12 minus 8 is 4""',
)

# ""9 minus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-1=8"",
    resulting_state=(8, 8, 12),
    comment='""9 minus 1""',
)

# ""12 minus 9 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(1, 3, 8),
    comment='""12 minus 9 is 3""',
)

# ""8 times 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*1=8"",
    resulting_state=(8, 9, 12),
    comment='""8 times 1""',
)

# Based on their final answer (12-9)x(8x1), they must have combined these operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*(8*1)=24"",
    resulting_state=(24,),
    comment=""Based on their final answer (12-9)x(8x1)"",
)
```"
3913,"[1,2,7,7]",,180," Okay, 4 numbers. 1, 2, 7, 7. Uh, 2 times 7 is 14. How do we do this? 14. 9. God almighty. 5, 10, 3, 4, 5. Well, the 1 we're going to just use to multiply by 1, I think, but if we get 14. 7 times 7 is 35. 2 times 7 is 14. 14, 35, now 24. God damn. I am stuck. Um, 3 times 7 is what? 7, 14, 21. That ain't going to work, Don. Um. I am trying here. I am just stumped. We got to make this 24 somehow. 2 times 14. 2 times 7. 7 plus 7 is 14. 2 times 7 is 28. That doesn't help. Um. 7 minus 2 is 5, then it's 35. That doesn't help either. 7 minus 2. 2 times 7 is 14. Um. 2 times 14 is 28. Uh, 2 times 6. 7 times 6 is 35. Well, that won't work either. Uh, 3 times 7 is 21, but then what do you do there? Uh, 5 times 7 is 35. 35. 5 times 6. 6. No. 5 times 6. Is 30. I am, I am, I am, I am. I just can't figure this out. Um. Come on. Uh. 3 times 7 is what? 21. Not enough. 7 times 7 is 35. Not going to work dividing. Uh, 3 times 6 is 24, but then divided by 7, but divided by. Um. Hmm.","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(1, 7, 14),
    comment='""2 times 7 is 14""',
)

# ""7 times 7 is 35"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=35"",
    resulting_state=(1, 2, 35),
    comment='""7 times 7 is 35"" - calculation error',
    result_calc_error=True,
)

# ""7 plus 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(1, 2, 14),
    comment='""7 plus 7 is 14""',
)

# ""7 minus 2 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(1, 5, 7),
    comment='""7 minus 2 is 5""',
)

```"
3914,"[7,8,8,9]",,180," 8 x 8? No. 7 x 8? 8 x 8? No. 2 x 8 is 16. 8 x 8 is 16. 8 minus 9, 7 times 8 is 35. Oh, wait a minute. 7, 14, 21, 28, 35. 42, 49. 49, 56. I mean, these are all just way too big. The practice ones were really easy. 9 plus 8. Okay, 16. 21. 21. 8 times 8. This is nuts. I can't figure this out. Um, 8 times 8 is way too high. 16. Wait a minute. Alright. 16 is 16. 16 is 16. And then if we go times. Yep, that's it. Yep, that's it. . 8 plus 8 is 16 9 minus 7 is 2 and 2 times 16 is now 24 oh boy I thought I was better at math than this there's got to be some combo 1 8 times 9 no 2 there you go 2 times 8 is 16 it's not going to work wait a minute","```python
start_state = (7, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 x 8?""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 9, 64),
    comment='""8 x 8?""',
)

# ""7 x 8?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(8, 9, 56),
    comment='""7 x 8?""',
)

# ""2 x 8 is 16"" - participant seems to be trying to make 2 from other numbers first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 8, 8),
    comment='""2 x 8 is 16"" - participant first makes 2 from 9-7',
)

# Then multiply by 8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(8, 16),
    comment='""2 x 8 is 16""',
)

# ""7 times 8 is 35"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=35"",
    resulting_state=(8, 9, 35),
    comment='""7 times 8 is 35"" - calculation error',
    result_calc_error=True,
)

# The participant then counts up by 7s to check their work: ""7, 14, 21, 28, 35. 42, 49. 49, 56""

# ""9 plus 8. Okay, 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=16"",
    resulting_state=(7, 8, 16),
    comment='""9 plus 8. Okay, 16""',
    result_calc_error=True,
)

# ""21. 21."" - not clear what operation this refers to

# ""8 times 8"" trying this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(7, 9, 64),
    comment='""8 times 8""',
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 9, 16),
    comment='""8 plus 8 is 16""',
)

# ""9 minus 7 is 2 and 2 times 16"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 16),
    comment='""9 minus 7 is 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*16=32"",
    resulting_state=(32,),
    comment='""2 times 16""',
)

# ""8 times 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(7, 8, 72),
    comment='""8 times 9""',
)

```"
3917,"[1,3,6,7]",(3x6)+7-1,54," Alright, target number 24. 3 times 7 is 21. That's not going to work. 3 times 6 is 18. Plus 7 is 20. Yeah. That's 18. Plus 7 takes it up to 23. Plus 1. Huh. 3 times 6 is 18. 20. Yeah. 25. Oh. Dumbass.","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(1, 6, 21),
    comment='""3 times 7 is 21""',
)

# ""That's not going to work"" suggests backtracking
curr_state = graph.move_to_node(start_state)

# ""3 times 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(1, 7, 18),
    comment='""3 times 6 is 18""',
)

# ""Plus 7 is 20"" - participant makes calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=20"",
    resulting_state=(1, 20),
    comment='""Plus 7 is 20"" - participant makes calculation error',
    result_calc_error=True,
)

# ""Plus 7 takes it up to 23"" - participant corrects their calculation
curr_state = graph.move_to_node((1, 7, 18))
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(1, 25),
    comment='""Plus 7 takes it up to 23"" though they actually get 25',
)

# Based on their submitted response (3x6)+7-1, they must have eventually figured out:
curr_state = graph.move_to_node((1, 7, 18))
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7-1=24"",
    resulting_state=(24,),
    comment=""Based on submitted response (3x6)+7-1"",
)
```"
3919,"[1,5,5,6]",(5x6)-(5+1),105," This is just not that easy. 5 times 5 is 25, 1 times 6 is 1, 1 times 5, jeez-a-leez. 5 plus 6 is 11, 1. 4 times 5 is 20, 1. 4 times 6 is 24. That 4 is not going to be in there then, I don't think. 5 times 5 is 25 divided by 5. This is just insanely difficult. I don't know. I am losing my mind. I am good at math, but this is a lot tougher than I thought. 6. 5 times 6 is 30. Okay. 5 times 6 is 30. Then it is minus 5 plus 1. Okay. Okay.","```python
start_state = (1, 5, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 6, 25),
    comment='""5 times 5 is 25""',
)

# ""1 times 6 is 1"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""1*6=1"",
    resulting_state=(1, 5, 5),
    comment='""1 times 6 is 1"" - calculation error',
    result_calc_error=True,
)

# ""5 plus 6 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(1, 5, 11),
    comment='""5 plus 6 is 11""',
)

# Return to start state
curr_state = graph.move_to_node(start_state)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 5, 30),
    comment='""5 times 6 is 30""',
)

# ""Then it is minus 5 plus 1"" - participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-(5+1)=24"",
    resulting_state=(24,),
    comment='""Then it is minus 5 plus 1""',
)
```"
3920,"[7,7,11,12]",(12-7),180," Target number is 24. We got big goddamn numbers. 7 times 7 is 35. Oh boy. 11 times 12 is way too big. We could get 7. 11 minus 7 would give me 4. And then 4 minus it gets too much. Let's just start putting it in. 11 minus 7 equates to 4. And then 7 minus 12. 12 is 4. 5. I am, I guess I'm just not thinking that well. There's got to be, no, that's wrong. 11 minus 12 is 1. Plus 7. 14. 25. 18. 30. Shit. Um, I don't know what I'm doing here. 35. I don't see it. I do not see it. I see 5 times 4. Yeah, 4. 5. 4 times 5 is 20. So we got a 4 if we want one. But then we lose a 7. And we got a 3 times 4. 3 times 4 is 12. Um. 5. 5 times 7. Wait a minute. Uh, 12 minus 7. Oops. Is 5.","```python
start_state = (7, 7, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is 35"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=35"",
    resulting_state=(11, 12, 35),
    comment='""7 times 7 is 35"" - calculation error',
    result_calc_error=True,
)

# ""11 minus 7 would give me 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 7, 12),
    comment='""11 minus 7 would give me 4""',
)

# ""12 minus 7"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 7, 11),
    comment='""12 minus 7""',
)

# ""11 minus 12 is 1. Plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-12)+7=6"",
    resulting_state=(6, 7),
    comment='""11 minus 12 is 1. Plus 7""',
)

# ""12 minus 7 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 7, 11),
    comment='""12 minus 7 is 5""',
)
```"
3921,"[3,4,8,12]",,180," Oh boy. 3 times 4, 12, plus 12, right? Let me try this. Let me try this. 12 minus 8 is 4. That's not going to be it. That is not going to be it. We need 4 times 4 is 16. No. 3 times 12 is 46. Minus 8 would take it down to 32 minus 4. That's not going to work. 3 times 8 is 24. 12 divided by 4 is 3. Wait a minute. 12 divided by 3 is what? It's not divisible. Minus 3 makes it 9. Minus 9 and then we could go 2. It would be 4 times 8. 8, 16, 24. 5 times, no, no way. I am just lost. 12 minus 12, 3 times 8. 3 times 4, 12. That can't do it. 4 times 9, not right. 4 times 12, 48 divided by what? 3? Won't work. I am not doing very well. 3 times 4, 46. Minus 8 gets it down to what? 32.","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 4, 12, plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4+12=24"",
    resulting_state=(8, 24),
    comment='""3 times 4, 12, plus 12""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(3, 4, 4),
    comment='""12 minus 8 is 4""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(3, 16),
    comment='""4 times 4 is 16""',
)

# ""3 times 12 is 46"" (calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=46"",
    resulting_state=(4, 8, 46),
    comment='""3 times 12 is 46"" (calculation error)',
    result_calc_error=True,
)

# ""Minus 8 would take it down to 32 minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""46-8-4=34"",
    resulting_state=(34,),
    comment='""Minus 8 would take it down to 32 minus 4""',
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(4, 12, 24),
    comment='""3 times 8 is 24""',
)

# ""12 divided by 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 3, 8),
    comment='""12 divided by 4 is 3""',
)

# ""12 divided by 3"" participant considers but doesn't complete
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 4, 8),
    comment='""12 divided by 3""',
)

# ""Minus 3 makes it 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(4, 8, 9),
    comment='""Minus 3 makes it 9""',
)

# ""4 times 8. 8, 16, 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(3, 12, 32),
    comment='""4 times 8""',
)

# ""3 times 4, 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 12, 12),
    comment='""3 times 4, 12""',
)

# ""4 times 12, 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=48"",
    resulting_state=(3, 8, 48),
    comment='""4 times 12, 48""',
)

# ""divided by what? 3?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/3=16"",
    resulting_state=(8, 16),
    comment='""divided by what? 3?""',
)

# ""3 times 4, 46. Minus 8 gets it down to what? 32"" (calculation error on 3*4=46)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=46"",
    resulting_state=(8, 12, 46),
    comment='""3 times 4, 46"" (calculation error)',
    result_calc_error=True,
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""46-8=38"",
    resulting_state=(12, 38),
    comment='""Minus 8 gets it down to what? 32""',
)
```"
3922,"[5,5,7,10]",(7-5)x(10/,180," No. Okay, 35 minus 7. Oh! 5 times 5, 35, 7 times 7, you opt. Make that another 5, add them, wait a minute, maybe we can add 5. 5 times 5 is 25, 7 times 7 is 70. That's not going to work. 5 times 7 is 40. No, 35. 5 times 7 is 35. Minus 5. We take it, yeah, it's not going to work either. This is not cooperating with me at all, this type of math, for some reason. I thought I'd be really decent at this. At 24, we get these numbers to play with. Take it, make it a 3. 3 times 5 is 25, minus 5 is 20. That's not going to work. 2 times 7 is 14, it's not going to work. 10, 10, 7, that's not going to work. Jesus, John, 50 divided by what? 50 divided by 5 is 2. Then you've got 14. 35, no. Um. 12 times 2, dumbass. All right. So we've got to get this to be a 3. Minus 5. 5. Equals what? 4. Times 10. 10 divided by 2.","```python
start_state = (5, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5, 35"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=35"",
    resulting_state=(7, 10, 35),
    comment='""5 times 5, 35"" - participant makes calculation error',
    result_calc_error=True,
)

# ""5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(7, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""5 times 7 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(5, 10, 35),
    comment='""5 times 7 is 35""',
)

# ""Minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-5=30"",
    resulting_state=(10, 30),
    comment='""Minus 5""',
)

# ""50 divided by 5 is 2"" - participant likely multiplied 10*5 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*5)/5=10"",
    resulting_state=(7, 10),
    comment='""50 divided by 5 is 2"" - participant likely multiplied 10*5 first',
    result_calc_error=True,
)

# ""we've got to get this to be a 3. Minus 5"" - participant seems to be trying to get 3 by subtracting 5s
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 5, 10),
    comment='""we\'ve got to get this to be a 3. Minus 5""',
)

# Based on their submitted response ""(7-5)x(10/"" it seems they were trying to subtract 5 from 7 to get 2
# and then multiply by something involving 10, but ran out of time
```"
3923,"[3,3,11,12]",(3/3)+11+12,68," Target number is 24. Geez Louise. So 3 and 3, 11 and 12. Geez Louise. So if I do 12. Nope. 12. Wait. So if I do 12 plus 11 is 36. 36. I mean 26. Yikes. 3 plus 11 is 14. 9. Oh my goodness. This is like a holy horror show. So if I do 3. Oh, I got it. Wait. 3 divided by 3. 3 divided by 3 is 1. Plus 11 plus 12.","```python
start_state = (3, 3, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 11 is 36. 36. I mean 26"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=36"",
    resulting_state=(3, 3, 36),
    comment='""12 plus 11 is 36"" - participant makes calculation error, then corrects to 26 but that\'s still wrong',
    result_calc_error=True,
)

# ""3 plus 11 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+11=14"",
    resulting_state=(3, 12, 14),
    comment='""3 plus 11 is 14""',
)

# ""9"" might be 3*3
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 11, 12),
    comment='""9"" might be 3*3',
)

# ""3 divided by 3 is 1. Plus 11 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3+11+12=24"",
    resulting_state=(24,),
    comment='""3 divided by 3 is 1. Plus 11 plus 12""',
)
```"
3927,"[6,9,9,11]",,180, minus 54 equals 45. 81 times 11 minus equals 81 times 11 divided by 6 equals now 9 times 6 is 59 plus 9 is 18 18 plus 18 plus 18 plus 11 equals 29 6 plus 18 plus 6 18 plus 6 equals 24 huh okay okay how about 11 11 plus 9 plus 9 equals 29 no 11 plus 9 plus 9 equals 29 so it doesn't work all right 9 times 6 is 54 54 and then 9 9 plus 11 equals 20 34 9 plus 11 no 9 plus 11 geez louise let's do 17 17 plus 9 equals to no let's do 9 plus 9 is 18 18 8 8 18 plus 11 11 and that's not right 18 plus 11 equals 29 now 6 times 9 6 times 9 equals 54 minus 11 equals 43 minus 9 equals no this is craziness i have no idea nine times eleven wait nine times eleven is 99,"```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""81 times 11"" - participant likely got 81 from 9*9
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 11, 81),
    comment='""81 times 11""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""81*11=891"",
    resulting_state=(6, 891),
    comment='""81 times 11""',
)

# ""divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""891/6=148.5"",
    resulting_state=(148.5,),
    comment='""divided by 6""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""9 times 6 is 59"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=59"",
    resulting_state=(9, 11, 59),
    comment='""9 times 6 is 59""',
    result_calc_error=True,
)

# ""plus 9 is 18"" (continuing from previous error)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""59+9=18"",
    resulting_state=(11, 18),
    comment='""plus 9 is 18""',
    result_calc_error=True,
)

# ""18 plus 18 plus 18 plus 11 equals 29"" (calculation error)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+11=29"",
    resulting_state=(29,),
    comment='""18 plus 18 plus 18 plus 11 equals 29""',
)

# ""11 plus 9 plus 9 equals 29""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9+9=29"",
    resulting_state=(6, 29),
    comment='""11 plus 9 plus 9 equals 29""',
)

# ""9 times 6 is 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(9, 11, 54),
    comment='""9 times 6 is 54""',
)

# ""9 plus 11 equals 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(20, 54),
    comment='""9 plus 11 equals 20""',
)

# ""9 plus 9 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 11, 18),
    comment='""9 plus 9 is 18""',
)

# ""18 plus 11 equals 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+11=29"",
    resulting_state=(6, 29),
    comment='""18 plus 11 equals 29""',
)

# ""6 times 9 equals 54""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(9, 11, 54),
    comment='""6 times 9 equals 54""',
)

# ""minus 11 equals 43""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54-11=43"",
    resulting_state=(9, 43),
    comment='""minus 11 equals 43""',
)

# ""minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""43-9=34"",
    resulting_state=(34,),
    comment='""minus 9""',
)

# ""nine times eleven is 99""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*11=99"",
    resulting_state=(6, 9, 99),
    comment='""nine times eleven is 99""',
)
```"
3933,"[5,5,8,10]",,180," Okay, ooh, another one, 10, 6, that's what, 10, 20, 4, 5, 13, 5 times 5 is 25, nope, 5 times 8 is 40, 30, nope, still not enough. 40, no, 5 times 50, minus 40, no, 5 times 8 is 40, 5 times 5 is 15, how the fuck am I getting that 6? 80, no, that's 35, oh, I can also divide it by 5, so, 80 divided by 5, 5 is 10, 80 divided by 5 is, no, fuck, man. Okay, so, let me go there, 8 times 10, divided by 5, plus 5, no, damn, the fuck is it, man? Ugh, 8, like, it's, it's here, it's gotta be like that 8 times 10. What are you doing if you're not using Coinbase for crypto trading? What the fuck, 8 times 10, 8 plus 5 is 13, 8 plus 5. 13, 10 times 5 divided by 10, no, oh, shit, man, what the fuck is it? Boom, boom, boom, boom, boom.","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""5 times 8 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(5, 10, 40),
    comment='""5 times 8 is 40""',
)

# ""5 times 5 is 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=15"",
    resulting_state=(8, 10, 15),
    comment='""5 times 5 is 15"" - calculation error',
    result_calc_error=True,
)

# ""80 divided by 5"" - participant likely got 80 from 8*10
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10/5=16"",
    resulting_state=(5, 16),
    comment='""80 divided by 5"" - participant likely got 80 from 8*10',
)

# ""8 times 10, divided by 5, plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10/5+5=21"",
    resulting_state=(21,),
    comment='""8 times 10, divided by 5, plus 5""',
)

# ""8 plus 5 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(5, 10, 13),
    comment='""8 plus 5 is 13""',
)

# ""10 times 5 divided by 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 10, 25),
    comment='""10 times 5 divided by 10""',
)

```"
3935,"[5,6,8,8]",,180," Uh-uh, don't do it like that. What are those two? 6, 14. That's 14? Okay, subtracted by parenthesis 5 minus 6. What does that give me? Not enough? It's something like that. 8. No, ooh, okay. Okay, what else can I do here? What else can I do here? Um, 8 plus 5. 35. 35. Um, boom, boom, boom, boom, boom, um, minus, um, 8. I mean, 6 out of 8. Bet 6 minus 8. Bam! Ooh, I thought I had it. Oh, I thought I had it. Oh, shit, I'm missing one. That's why. 6 minus 8. Fuck. Damn it. 24, 24, 24. 5 times 8 is 40. 34. That still wouldn't be enough. So, 5 times 6 is 38. 38 times 8 is 36. Or 6 times 6 is 36. 8 times 8 is 56. Ah, fuck. Ugh! Okay, so you have to be, uh, 8 times something, man. 8.","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What are those two? 6, 14"" seems to be adding 6+8
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(5, 8, 14),
    comment='""What are those two? 6, 14"" seems to be adding 6+8',
)

# ""8 plus 5. 35"" - participant likely meant 8*5=40 since 8+5=13
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 8, 40),
    comment='""8 plus 5. 35"" - participant likely meant 8*5=40',
)

# ""6 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-8=-2"",
    resulting_state=(5, 8, -2),
    comment='""6 minus 8""',
)

# ""5 times 8 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(6, 8, 40),
    comment='""5 times 8 is 40""',
)

# ""5 times 6 is 38"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=38"",
    resulting_state=(8, 8, 38),
    comment='""5 times 6 is 38"" - calculation error',
    result_calc_error=True,
)

# ""8 times 8 is 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 6, 64),
    comment='""8 times 8 is 56"" - calculation error',
    result_calc_error=True,
)
```"
3936,"[2,4,5,9]",,180," Oh, this almost looks a little easier. 9, um, 18, 20, 25. 4 times 5 is 22. No, 9 times 4, 36. 36 minus 10 doesn't work. So if I do, um, 2 plus 4 is 30. 2 plus 4 is fucking 6. 6 times 5 is 30. That's not right. 4, 5 is 9. 9 times 2. No. Um, 9 times 2, that's 11. 9 times 2 is 11. 11 plus... Fuck! 18, what the fuck, okay, so, 9, delete, delete, over, 9 times 2, 18, it only needs 6, though, no, so, that's not right, neither, so, 9 times 4, 36, no, I need to get you down to motherfucking goddamn 12, how do I get 12, I can't get 12, fuck, how do I get 12,","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 5 is 22"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=22"",
    resulting_state=(2, 9, 22),
    comment='""4 times 5 is 22"" - calculation error',
    result_calc_error=True,
)

# ""9 times 4, 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 5, 36),
    comment='""9 times 4, 36""',
)

# ""2 plus 4 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4=6"",
    resulting_state=(5, 6, 9),
    comment='""2 plus 4 is 6""',
)

# ""6 times 5 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(9, 30),
    comment='""6 times 5 is 30""',
)

# ""9 times 2 is 11"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=11"",
    resulting_state=(4, 5, 11),
    comment='""9 times 2 is 11"" - calculation error',
    result_calc_error=True,
)

# ""9 times 2, 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(4, 5, 18),
    comment='""9 times 2, 18""',
)

# ""9 times 4, 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 5, 36),
    comment='""9 times 4, 36""',
)

# The participant seems to be setting a subgoal of getting to 12
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""I need to get you down to motherfucking goddamn 12, how do I get 12""',
)
```"
3942,"[3,9,10,12]",,180," Okay, um, so, 9 plus, plus 3, 12, plus 10, plus 12, 9 plus 3, plus 12, 9 plus 3, plus 12, 9 plus 3, plus 12, 9 plus 3, plus 10, 10 plus 11, plus 12, 12, plus 13, plus 14, plus 14, plus 15, plus 18, plus 16, plus 19 plus 18, plus 19, plus 20, plus 20, plus 30, plus 23, 23, 24, 25, 26, 27, 28, 29, 30. bridging the gap between 3 and 4. Nine's three plus twenty-four is nine. Nine plus three plus twelve, that's twenty-four. But twelve times ten, or nine times three is ten. Nine plus three plus nine. Nine plus three. Maybe it's nine plus ten. Plus three. Ten times... Ten times three. Plus twelve, minus nine. My goodness. Twelve plus three.","```python
start_state = (3, 9, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 3, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(10, 12, 12),
    comment='""9 plus 3, 12""',
)

# ""plus 10"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10=22"",
    resulting_state=(12, 22),
    comment='""plus 10""',
)

# The participant seems to repeat ""9 plus 3, plus 12"" several times, suggesting they're stuck
# Then there's a sequence of numbers that don't seem to correspond to operations

# ""Nine's three plus twenty-four is nine"" is unclear

# ""Nine plus three plus twelve, that's twenty-four""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3+12=24"",
    resulting_state=(10, 24),
    comment='""Nine plus three plus twelve, that\'s twenty-four""',
)

# ""twelve times ten""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*10=120"",
    resulting_state=(3, 9, 120),
    comment='""twelve times ten""',
)

# ""nine times three is ten"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=10"",
    resulting_state=(10, 10, 12),
    comment='""nine times three is ten"" - calculation error',
    result_calc_error=True,
)

# ""Nine plus ten""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=19"",
    resulting_state=(3, 12, 19),
    comment='""Nine plus ten""',
)

# ""Plus three""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+3=22"",
    resulting_state=(12, 22),
    comment='""Plus three""',
)

# ""Ten times three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*3=30"",
    resulting_state=(9, 12, 30),
    comment='""Ten times three""',
)

# ""Plus twelve, minus nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30+12-9=33"",
    resulting_state=(33,),
    comment='""Plus twelve, minus nine""',
)

# ""Twelve plus three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+3=15"",
    resulting_state=(9, 10, 15),
    comment='""Twelve plus three""',
)
```"
3945,"[6,8,11,12]",,180," Okay, so 12 plus 11 doesn't make that, um, 11 plus 12 plus 8 plus 6, 8 plus 6, 14, 14 minus 12, 14 minus 12 plus, 12 plus 11, 23, 12, okay, 8 times 6, um, no, 8 times 11 divided by 12, no, 8 times 6 divided by 12, no, um, 6 minus 8, 8 minus 6 is 2, okay, times 12, that's 24, that's 11, okay. 11 times 12 divided by 8 plus 6, um, 11 plus 8 plus 12 minus 6, jeez, I'm tripping, I'm tripping. 12 times 6 minus 11 times 6, 11 times 8, okay, 8 plus 6 minus 8 plus 6, okay, 8 plus 6. How many times has it crossed out before there was a chance to do this? I don't know, I don't know the answer, it's very difficult. 6 plus 11. No.","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(6, 8, 23),
    comment='""12 plus 11""',
)

# ""8 plus 6, 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(11, 12, 14),
    comment='""8 plus 6, 14""',
)

# ""14 minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14-12=2"",
    resulting_state=(2, 11),
    comment='""14 minus 12""',
)

# ""12 plus 11, 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(6, 8, 23),
    comment='""12 plus 11, 23""',
)

# ""8 times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(11, 12, 48),
    comment='""8 times 6""',
)

# ""8 times 11 divided by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11/12=7.33"",
    resulting_state=(6, 7.33),
    comment='""8 times 11 divided by 12""',
)

# ""8 times 6 divided by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6/12=4"",
    resulting_state=(4, 11),
    comment='""8 times 6 divided by 12""',
)

# ""8 minus 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 11, 12),
    comment='""8 minus 6 is 2""',
)

# ""times 12, that's 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(11, 24),
    comment='""times 12, that\'s 24""',
)

# ""11 times 12 divided by 8 plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12/8+6=22.5"",
    resulting_state=(22.5,),
    comment='""11 times 12 divided by 8 plus 6""',
)

# ""11 plus 8 plus 12 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8+12-6=25"",
    resulting_state=(25,),
    comment='""11 plus 8 plus 12 minus 6""',
)

# ""12 times 6 minus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*6-11=61"",
    resulting_state=(8, 61),
    comment='""12 times 6 minus 11""',
)

# ""11 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(6, 12, 88),
    comment='""11 times 8""',
)

# ""6 plus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+11=17"",
    resulting_state=(8, 12, 17),
    comment='""6 plus 11""',
)
```"
3947,"[4,10,12,12]",,180," Okay, so, 12 divided by, no, 4 divided by 4 is 3, plus 12, plus 10. Um... Um... Okay. I have no idea, like, 10 minus, no, 10 plus 4, times 12, no, 10 minus 4, plus 12, plus 12, um, I'm trying here. I really am. Um... I have no idea. Um... okay 12 12 12 plus 12 oh my god um um honestly i have no idea 12 plus 12 minus 10 times four wrong 12 plus 12 minus 10 times four wrong","```python
start_state = (4, 10, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 divided by 4 is 3"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 10, 12),
    comment='""4 divided by 4 is 3"" - calculation error',
    result_calc_error=True,
)

# ""plus 12, plus 10"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+12+10=25"",
    resulting_state=(25,),
    comment='""plus 12, plus 10""',
)

# ""10 plus 4"" going back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+4=14"",
    resulting_state=(12, 12, 14),
    comment='""10 plus 4""',
)

# ""10 minus 4, plus 12, plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-4+12+12=30"",
    resulting_state=(30,),
    comment='""10 minus 4, plus 12, plus 12""',
)

# ""12 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 10, 24),
    comment='""12 plus 12""',
)

# ""12 plus 12 minus 10 times four""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12-10*4=14"",
    resulting_state=(14,),
    result_calc_error=True,
    comment='""12 plus 12 minus 10 times four""',
)
```"
3953,"[1,1,4,6]",6x4x1x1,12," Six times four, times one, times one, that should be it.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Six times four, times one, times one""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4*1*1=24"",
    resulting_state=(24,),
    comment='""Six times four, times one, times one""',
)
```"
3955,"[2,3,9,10]",(9+3)+(10+2),14," All right, this looks a little easier. 2 should be 12 plus 12.","```python
start_state = (2, 3, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 should be 12 plus 12"" suggests the participant is setting a subgoal of getting two 12s
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""2 should be 12 plus 12""',
)

# Then based on their response, they found two ways to make 12: 9+3 and 10+2
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(2, 10, 12),
    comment=""Based on response, participant computed 9+3=12"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2=12"",
    resulting_state=(12, 12),
    comment=""Based on response, participant computed 10+2=12"",
)

# Finally they add the two 12s together
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(24,),
    comment=""Adding the two 12s together to reach 24"",
)
```"
3956,"[4,7,12,12]",((12x7)+12)/4,137," 11... 48... and 7... 12 minus 7 is 5... and 7 is 5... times 4 is... 20... 12 plus 4... 16... plus 7... 23... over there... 12 minus 7 is 44... divided by... 7 is 11... and it doesn't work... times 7 is 84... divided by... 4... 5x3 is 12, 6x4 is 24, plus 7, plus 9, 5x4, that's it.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 12),
    comment='""12 minus 7 is 5""',
)

# ""times 4 is... 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(12, 20),
    comment='""times 4 is... 20""',
)

# Going back to start state for ""12 plus 4... 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4=16"",
    resulting_state=(7, 12, 16),
    comment='""12 plus 4... 16""',
)

# ""plus 7... 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+7=23"",
    resulting_state=(12, 23),
    comment='""plus 7... 23""',
)

# ""12 minus 7 is 44"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=44"",
    resulting_state=(4, 12, 44),
    comment='""12 minus 7 is 44"" seems to be a calculation error',
    result_calc_error=True,
)

# ""times 7 is 84""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(4, 12, 84),
    comment='""times 7 is 84""',
)

# ""divided by... 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""84/4=21"",
    resulting_state=(12, 21),
    comment='""divided by... 4""',
)

# The participant then lists some calculations but doesn't seem to be actively trying them:
# ""5x3 is 12, 6x4 is 24, plus 7, plus 9, 5x4""

# Based on their final answer ((12x7)+12)/4, they must have done:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7=84"",
    resulting_state=(4, 12, 84),
    comment=""From their final answer, they multiply 12 and 7"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(84+12)/4=24"",
    resulting_state=(24,),
    comment=""From their final answer, they add 12 and divide by 4"",
)
```"
3957,"[1,4,4,4]",((4+1)x4)+4,45, 4 times 4 times 4 times 4 is 36. Minus 4 is 32. 4 times 4 times 4 is 64. That's not it. 4 plus 1. There it is. 4 plus 1. 4 plus 1 is 5. Times 4 is 20. Plus 4 is 24.,"```python
start_state = (1, 4, 4, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 times 4 times 4 is 36"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*4=64"",
    resulting_state=(1, 64),
    comment='""4 times 4 times 4 times 4 is 36"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""Minus 4 is 32"" continuing from previous calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64-4=32"",
    resulting_state=(1, 60),
    comment='""Minus 4 is 32""',
)

# ""4 times 4 times 4 is 64"" - participant tries a different calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*4=64"",
    resulting_state=(1, 64),
    comment='""4 times 4 times 4 is 64""',
)

# ""4 plus 1 is 5. Times 4 is 20. Plus 4 is 24.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+1)*4+4=24"",
    resulting_state=(24,),
    comment='""4 plus 1 is 5. Times 4 is 20. Plus 4 is 24.""',
)
```"
3958,"[2,4,7,12]",((7,183," Alright, 12 plus 2 is 24, 7 plus 2 is 9, plus 4 is 23, plus 4 is 9, plus 4 is 13, plus 4 is 36, plus 4 is 26, plus 4 is 12, times 7 is 24, divide by 4 plus 2. That's not 8, that's 16. 24 divided by 4 is 21. plus 2 is 23, that's not it, so, 7 times 4 is 28, 14, okay, plus 12 is 26 minus 2, that's not it, so, 7 times 4 is 28, perhaps I lost track of where it was, plus 2 is 23, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's not it, so, 7 times 4 is 28, that's No, it's not. My mesh number's up. Seven.","```python
start_state = (2, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 2 is 24"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+2=24"",
    resulting_state=(4, 7, 24),
    comment='""12 plus 2 is 24"" - calculation error',
    result_calc_error=True,
)

# ""7 plus 2 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=9"",
    resulting_state=(4, 9, 12),
    comment='""7 plus 2 is 9""',
)

# ""plus 4 is 23"" - participant makes a calculation error adding 4 to something
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+4=23"",
    resulting_state=(12, 23),
    comment='""plus 4 is 23"" - calculation error',
    result_calc_error=True,
)

# ""plus 4 is 9"" - not clear what's being added to 4
# ""plus 4 is 13"" - not clear what's being added to 4
# ""plus 4 is 36"" - not clear what's being added to 4
# ""plus 4 is 26"" - not clear what's being added to 4
# ""plus 4 is 12"" - not clear what's being added to 4

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(2, 12, 28),
    comment='""7 times 4 is 28""',
)

# ""plus 12 is 26 minus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28+12-2=38"",
    resulting_state=(38,),
    comment='""plus 12 is 26 minus 2""',
)

# The rest of the transcript appears to be repetition of ""7 times 4 is 28"" and ""that's not it""
# Finally the participant types ""((7"" before time runs out
```"
3976,"[1,1,7,10]",7x(1+1)+10,162," So, 24 is the target number. We have 1, 1, 7, and 10. So, 1 plus 1 equals 2, times 10 equals 20, still have a 7. 7 minus 1 is equal to 6. No, it doesn't work. 10 minus 1 equals 9. 10 minus 7 equals 3. No. 1 times, 1 plus 7. equals 8. 8 plus 10 equals 18. 10 minus 1 plus 1 equals 8, plus 7 equals not 24. 10 plus 1 is 11. 11. No, that doesn't work for anything. 7 times 1 equals 7. Plus 1 equals 8. 18. 18. I'm looking for a way to get 12 times 2. 7 times 1 plus 1 equals 14 plus 10 equals 24.","```python
start_state = (1, 1, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 plus 1 equals 2, times 10 equals 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+1)*10=20"",
    resulting_state=(7, 20),
    comment='""1 plus 1 equals 2, times 10 equals 20""',
)

# ""7 minus 1 is equal to 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(1, 6, 10),
    comment='""7 minus 1 is equal to 6""',
)

# ""10 minus 1 equals 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(1, 7, 9),
    comment='""10 minus 1 equals 9""',
)

# ""10 minus 7 equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(1, 1, 3),
    comment='""10 minus 7 equals 3""',
)

# ""1 times, 1 plus 7 equals 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*(1+7)=8"",
    resulting_state=(8, 10),
    comment='""1 times, 1 plus 7 equals 8""',
)

# ""8 plus 10 equals 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(18,),
    comment='""8 plus 10 equals 18""',
)

# ""10 minus 1 plus 1 equals 8, plus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1+1+7=17"",
    resulting_state=(17,),
    comment='""10 minus 1 plus 1 equals 8, plus 7""',
    result_calc_error=True,
)

# ""10 plus 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+1=11"",
    resulting_state=(1, 7, 11),
    comment='""10 plus 1 is 11""',
)

# ""7 times 1 equals 7. Plus 1 equals 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*1+1=8"",
    resulting_state=(8, 10),
    comment='""7 times 1 equals 7. Plus 1 equals 8""',
)

# ""I'm looking for a way to get 12 times 2"" suggests setting a subgoal
graph.set_subgoal(
    (12, 2),
    state_after_subgoal=(24,),
    comment='""I\'m looking for a way to get 12 times 2""',
)

# ""7 times 1 plus 1 equals 14 plus 10 equals 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*(1+1)+10=24"",
    resulting_state=(24,),
    comment='""7 times 1 plus 1 equals 14 plus 10 equals 24""',
)
```"
3983,"[1,1,4,6]",4x6x1x1,111," Number 4, that's target 6 to 12, 24, 6 to 12, and that's 24. 6 by 4, yeah, I got you, I got you. Say this, 1 by 4, this, 2, this, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, yeah one one multiplying six that would also give us six so that's she give us oh how no this is correct one multiplying six four that will give us four right plus one multiplying six how is that wrong Oh how is that wrong how is that wrong Tom how is that wrong this is not in the fall","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 to 12, 24"" suggests participant is thinking about multiplying 6 by something to get 24
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""6 to 12, 24"" suggests participant is thinking about multiplying 6 by something to get 24',
)

# ""6 by 4, yeah, I got you""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 1, 24),
    comment='""6 by 4, yeah, I got you""',
)

# The counting from 1 to 17 seems unrelated to solving the problem

# ""one multiplying six that would also give us six""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*6=6"",
    resulting_state=(1, 4, 6),
    comment='""one multiplying six that would also give us six""',
)

# Based on their final answer of 4x6x1x1, they must have tried this
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6*1*1=24"",
    resulting_state=(24,),
    comment=""Based on their final answer of 4x6x1x1"",
)
```"
3989,"[5,6,7,8]",8,180," 24 again. Let's see here. 7 x 8, 356. 5 x 5 maybe? No. 7 x 8, 356. 5 x 6? No. 5 x 6? No. Huh. 8 x 5, plus 6. Plus 7. That's 8? No, that gives 26. Let's see. This one's hard. 8 x 6? 48? 5 x 7? No. 5 x 8? 40? Minus 7? Minus 6? It gives 27. I don't even know. This one's hard. 8. I guess add it up. What's the total give me? I guess 26 total. Scan them all up. 8 plus 7? 15? Maybe times 6? 5 x 5? No. 8 plus 7? Plus 5? 8 x 7? Divided by 6? No. 5 x 6? Minus 8? Nope. Hmm. Maybe we're thinking it. 29. Oh, man. 8 times. 5 times. Divided by... Nope. I think I can do this one. 8.","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 x 8, 356"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=356"",
    resulting_state=(5, 6, 356),
    comment='""7 x 8, 356"" - participant makes calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5+6+7=53"",
    resulting_state=(53,),
    comment='""8 x 5, plus 6. Plus 7""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6+7+5=26"",
    resulting_state=(26,),
    comment='""that gives 26"" - participant seems to be adding numbers',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(5, 7, 48),
    comment='""8 x 6? 48?""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(6, 7, 40),
    comment='""5 x 8? 40?""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-7-6=27"",
    resulting_state=(27,),
    comment='""Minus 7? Minus 6? It gives 27""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(5, 6, 15),
    comment='""8 plus 7? 15?""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15*6=90"",
    resulting_state=(5, 90),
    comment='""Maybe times 6?""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7/6=9.33"",
    resulting_state=(5, 9.33),
    comment='""8 x 7? Divided by 6?""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6-8=22"",
    resulting_state=(7, 22),
    comment='""5 x 6? Minus 8?""',
)

# The participant continues to verbalize numbers but doesn't seem to be performing clear operations
# They eventually just submit ""8"" as their answer
```"
3990,"[9,11,12,13]",(13+12+9-11),180," 24 again, let it all be 24, let's see, 12 plus 13, sort the big numbers first, minus 9 plus 11, 27, 12 times 13, 156, divide by 11, 14, nope, that won't work. 5 by maybe 9, nope, that gives us decimals, 11 times 12, 5 by 13, nope, 5 by 9 maybe, nope, 9 plus 11, 20, plus 12, maybe minus 13, nope, it's 19. How do I go about this? How do I go about this one? I wish there were smaller numbers. Times 12, divided by, alright, maybe I shouldn't multiply much, 9 plus 11, what's the total give me? 45, so 9 plus 11, 20. Minus 12, plus 13, that's 21, oh, 13 plus 12, plus 9, minus 11, that gives me 23, no. That's the closest though, so 13 plus 12. Plus 9, yeah, I'll just put this down just because it's, plus, minus 11, so 13 plus 12, plus 9 minus 11, gives me 23. Ugh. Somewhere to get closer, 13 plus 12, plus 11 minus 9, no, that's 27. We're running out of time soon. I'm gonna split this because it's, oh, I can't. Hmm. 13 plus 11. 13 plus 11.","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 13"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(9, 11, 25),
    comment='""12 plus 13""',
)

# ""minus 9 plus 11, 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-9+11=27"",
    resulting_state=(27,),
    comment='""minus 9 plus 11, 27""',
)

# ""12 times 13, 156, divide by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13/11=14"",
    resulting_state=(9, 14.18),
    comment='""12 times 13, 156, divide by 11, 14""',
)

# ""11 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=132"",
    resulting_state=(9, 13, 132),
    comment='""11 times 12""',
)

# ""9 plus 11, 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(12, 13, 20),
    comment='""9 plus 11, 20""',
)

# ""plus 12, maybe minus 13, nope, it's 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+12-13=19"",
    resulting_state=(19,),
    comment='""plus 12, maybe minus 13, nope, it\'s 19""',
)

# ""9 plus 11, 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(12, 13, 20),
    comment='""9 plus 11, 20""',
)

# ""Minus 12, plus 13, that's 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20-12+13=21"",
    resulting_state=(21,),
    comment='""Minus 12, plus 13, that\'s 21""',
)

# ""13 plus 12, plus 9, minus 11, that gives me 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12+9-11=23"",
    resulting_state=(23,),
    comment='""13 plus 12, plus 9, minus 11, that gives me 23""',
)

# ""13 plus 12, plus 11 minus 9, no, that's 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12+11-9=27"",
    resulting_state=(27,),
    comment='""13 plus 12, plus 11 minus 9, no, that\'s 27""',
)

# ""13 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(9, 12, 24),
    comment='""13 plus 11""',
)
```"
3993,"[7,8,8,12]",12-7,180," 8 times 7, 5 by 8 maybe? Nope. 8 plus 8, 16. Plus 12, 28. Nope. That's over. 8 times 7, give me 56, maybe give me my 8. 7 times 12, that's 84. 8 plus 8, 16. Plus 12, 28. No. 8 plus 8, plus 7, 23. 7 plus 8, 15. Times 12 maybe? Divided by 8? No, that's my 2.5. 24, 24. 7, 8, 8, 12. 12 minus 7 is 5. Times 8. I'll give you 5 total. 7 plus 12, 19. Plus 8, 27. No, that's not going to work. 7 minus, 8 minus 7, 21. Plus 12, plus 8, 21. No, that's not going to work. Maybe 12 minus 7, 5 plus 8, plus 8. That's also 21. This one's hard too. So 12 plus 8, minus 8. Oh, wait a minute. 8 minus 7 gives me 1. Then 12 minus 1, times 8. No, no, no, no. That's way tricked. Oh, man. Oh, no. 12 minus 7, give me 5. Times 8, minus 8, is 32. I'm going to run out of time again.","```python
start_state = (7, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(8, 12, 56),
    comment='""8 times 7""',
)

# ""8 plus 8, 16. Plus 12, 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+12=28"",
    resulting_state=(7, 28),
    comment='""8 plus 8, 16. Plus 12, 28""',
)

# ""7 times 12, that's 84""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(8, 8, 84),
    comment='""7 times 12, that\'s 84""',
)

# ""8 plus 8, plus 7, 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+7=23"",
    resulting_state=(12, 23),
    comment='""8 plus 8, plus 7, 23""',
)

# ""7 plus 8, 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(8, 12, 15),
    comment='""7 plus 8, 15""',
)

# ""Times 12 maybe? Divided by 8?"" participant seems to be trying operations with 15
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15/8=1.88"",
    resulting_state=(12, 1.88),
    comment='""Divided by 8?"" participant divides 15 by 8',
)

# ""12 minus 7 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 8, 8),
    comment='""12 minus 7 is 5""',
)

# ""Times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(8, 40),
    comment='""Times 8""',
)

# ""7 plus 12, 19. Plus 8, 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12+8=27"",
    resulting_state=(8, 27),
    comment='""7 plus 12, 19. Plus 8, 27""',
)

# ""8 minus 7, 21. Plus 12, plus 8, 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7+12+8=21"",
    resulting_state=(21,),
    comment='""8 minus 7, 21. Plus 12, plus 8, 21""',
)

# ""12 minus 7, 5 plus 8, plus 8. That's also 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7+8+8=21"",
    resulting_state=(21,),
    comment='""12 minus 7, 5 plus 8, plus 8. That\'s also 21""',
)

# ""12 plus 8, minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8-8=12"",
    resulting_state=(7, 12),
    comment='""12 plus 8, minus 8""',
)

# ""8 minus 7 gives me 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 8, 12),
    comment='""8 minus 7 gives me 1""',
)

# ""Then 12 minus 1, times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-1)*8=88"",
    resulting_state=(88,),
    comment='""Then 12 minus 1, times 8""',
)

# ""12 minus 7, give me 5. Times 8, minus 8, is 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-7)*8-8=32"",
    resulting_state=(32,),
    comment='""12 minus 7, give me 5. Times 8, minus 8, is 32""',
)
```"
3996,"[1,2,3,3]",3x1,180," All right. Well, those practices did not go well. 20, so we could do 6 plus 6 times 3 is 18. That's not it. What is times 4? Okay. So this would equal 6, but no. I don't think this, if we had 5 times 4 would be 20. That's not it. If we did 3 plus 3 is 6 times 2 is 12, but then that's not right. We could have, I have no idea and I'm hungry. What are we doing here? I regret signing up for this test. I thought it'd be easier. Well, we're not going to get it from sitting here guessing, or from sitting here not guessing. 3 times 3 is 9. Does that do anything for us? 9 times 2 is 18. 3 times 3 times 3 times 3. Well, I mean, it's not. This would be 2. This is just 18. All right. Well, delete. Oh, we had to delete them all one at a time. Okay. 24 divided by 6 would be 4. There's no way to make this be 4. This is 4. 24. So we did 24 divided by, but you can't, well, whatever, we'll do it in reverse, but like 24 divided by, so it would be, no, but that's 3. This is so much harder than I thought it was going to be, and it is not fun. That's 3. 3 times 2.","```python
start_state = (1, 2, 3, 3)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 6 times 3 is 18"" - participant likely got 6 from 3+3
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(1, 2, 6),
    comment='""6 plus 6 times 3"" - first making 6 from 3+3',
)

# Then using the 6 they just made - but they need to move back to start to get another 3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 2, 18),
    comment='""6 times 3 is 18""',
)

# ""3 plus 3 is 6 times 2 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*2=12"",
    resulting_state=(1, 12),
    comment='""3 plus 3 is 6 times 2 is 12""',
)

# ""3 times 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 2, 9),
    comment='""3 times 3 is 9""',
)

# ""9 times 2 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2=18"",
    resulting_state=(1, 18),
    comment='""9 times 2 is 18""',
)

# ""24 divided by 6 would be 4"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 would be 4"" - participant seems to be working backwards',
)

# ""3 times 2"" is the participant's final attempt before time runs out
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(1, 3, 6),
    comment='""3 times 2""',
)
```"
4000,"[8,9,12,12]",(12x12)/9+8,119," Okay, well there's 24 right there if you guys didn't make it so difficult. What's 24 plus 12? 36. What's this? This is 17, so that's not going to add up to 36. Well, 8 plus 12 is 20. I feel like this would be easier scratch paper. 8 plus 12 is 20. Minus 9 would be... 11. Plus 12 would be not it. Well, what's 8 times 9? 71, right? No, 72. 8 times 9 is 72. I feel like 72 divided by 12 might be something. That's 6. Hmm. That's not super helpful. What about 144? Because that's 12 times 12. Divide by 9 is 16 plus 8. I did it! Okay, can I get it? Can I get it all in? 12 times 12. Divided by 9 plus 8.","```python
start_state = (8, 9, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What's 24 plus 12? 36"" - participant seems to be working backward from 24
graph.set_subgoal((12, 24), state_after_subgoal=(36,), comment='""What\'s 24 plus 12? 36""')

# ""8 plus 12 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(9, 12, 20),
    comment='""8 plus 12 is 20""',
)

# ""Minus 9 would be... 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20-9=11"",
    resulting_state=(11, 12),
    comment='""Minus 9 would be... 11""',
)

# ""Plus 12 would be not it""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(23,),
    comment='""Plus 12 would be not it""',
)

# ""Well, what's 8 times 9? 71, right? No, 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(12, 12, 72),
    comment='""Well, what\'s 8 times 9? 71, right? No, 72""',
)

# ""72 divided by 12 might be something. That's 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/12=6"",
    resulting_state=(6, 12),
    comment='""72 divided by 12 might be something. That\'s 6""',
)

# ""What about 144? Because that's 12 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(8, 9, 144),
    comment='""What about 144? Because that\'s 12 times 12""',
)

# ""Divide by 9 is 16 plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""144/9+8=24"",
    resulting_state=(24,),
    comment='""Divide by 9 is 16 plus 8""',
)

```"
4002,"[7,10,11,13]",(13-11)x7+10,88," Oh my god, this is taking so long. Okay. What is... I'm chewing. Um, well, what's 130 divided by 7? 18, a bunch of numbers. I don't know if you can tell, but I've started using a calculator, because, like, why not? What about... This is 17. Okay. And 24 minus 17 is 7, so that's a dead end. Um, what about... Oh wait. 13 minus 11 is 2, times 7 is 14 plus 10. Okay, so... 13 minus 11... times 7... plus 10.","```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""what's 130 divided by 7?"" participant likely multiplied 13*10 first
new_state = graph.explore_operation(
    curr_state,
    operation=""13*10/7=18.57"",
    resulting_state=(11, 18.57),
    comment='""what\'s 130 divided by 7? 18, a bunch of numbers""',
)

# ""This is 17"" - not clear what operation led to 17
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(11, 13, 17),
    comment='""This is 17"" - participant may have added 10 and 7',
)

# ""24 minus 17 is 7"" - participant seems to be working backward from 24
graph.set_subgoal(
    subgoal_state=(17,),
    comment='""24 minus 17 is 7"" - participant working backward from goal'
)

# ""13 minus 11 is 2, times 7 is 14 plus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-11)*7+10=24"",
    resulting_state=(24,),
    comment='""13 minus 11 is 2, times 7 is 14 plus 10""',
)
```"
4004,"[2,3,5,13]",(13x2)+3-5,169," An easy one in there to encourage me. What do we got? 5 times 5. Nope. Can I just add these together? No. This is 10 and then plus 13. We almost get there. This is 8. 8 times 2 would be 16. No. I also got 18 times 2 divided by 3. That's nothing. I mean something, but it's not what we're looking for. About 13 times 5 is 65. Divided by 3 equals 21. Gobbledygook. Mm-hmm. Well, could I make this 48 somehow? What's 48 divided by 16? It's 3. So if I did, how did I get to 48, though? Is that what 13 times 5 is? No, that doesn't make sense. How did I get to 48? Oh, because 24 times 2. Wait. What was 48 divided by 13? Nope. Okay. That's not it. 48 divided by 16. If I had, I would have gotten 16 times... No, I lost the 3 already, so that doesn't work. Yeah, that's not it. Let's see. We could have 26 plus 3 to begin with. 29 minus... Oh, shit, shit. That's it. All right. So 26 plus 3. What? Okay. Plus 3 minus 5.","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Can I just add these together? No. This is 10 and then plus 13""
# Seems to be adding 2+3+5=10, then +13
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3+5+13=23"",
    resulting_state=(23,),
    comment='""This is 10 and then plus 13"" seems to be adding 2+3+5=10, then +13',
)

# ""13 times 5 is 65. Divided by 3 equals 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*5/3=21"",
    resulting_state=(2, 21),
    comment='""13 times 5 is 65. Divided by 3 equals 21"" though calculation seems off',
    result_calc_error=True,
)

# ""could I make this 48 somehow?"" participant seems to be setting a subgoal
graph.set_subgoal(
    (48,),
    state_after_subgoal=(24,),
    comment='""could I make this 48 somehow?""',
)

# ""26 plus 3 to begin with. 29 minus...""
# The 26 likely comes from 13*2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(3, 5, 26),
    comment='""26 plus 3"" where 26 comes from 13*2',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+3-5=24"",
    resulting_state=(24,),
    comment='""26 plus 3... Plus 3 minus 5""',
)
```"
4008,"[7,9,13,13]",(13/13)-9,180," The target number is 24. I'm going to start with the first couple numbers. 9-7 is 2. 2x13 is 26. And 26-13 is 13, so that's not going to work. Shortly. And 9 times 7 is 63, and 13 plus 13 is 26, and 63 minus 26 is 37, so that won't work either. 13 plus 9 is 22, plus 13 is 35, minus 7 is 28, that won't work either. Let's see, 13 plus 7 is 20, plus 9 is 29, and 29 minus 32. 13 is 16, so how are we going to get to 24? 13 divided by 13 is 1, plus 9 is 10. 13 divided by 13 is 1, times 9, 7. 13 minus 7 is 6, so I think I'm going somewhere. I'll start with 13 minus, or 13, I can't do divided by, oh yes I can. 13 divided by 13 is 13, minus 7 is 6, and 6. 6 plus 9 wouldn't work. 6 times 9 wouldn't work, so 13 divided by 13 is 13, and 13 minus 9 is 4, and 4 times 7 is not 24. So how to get to 24?","```python
start_state = (7, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9-7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 13, 13),
    comment='""9-7 is 2""',
)

# ""2x13 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=26"",
    resulting_state=(13, 26),
    comment='""2x13 is 26""',
)

# ""26-13 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-13=13"",
    resulting_state=(13,),
    comment='""26-13 is 13""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)

# ""9 times 7 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(13, 13, 63),
    comment='""9 times 7 is 63""',
)

# ""13 plus 13 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(26, 63),
    comment='""13 plus 13 is 26""',
)

# ""63 minus 26 is 37""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""63-26=37"",
    resulting_state=(37,),
    comment='""63 minus 26 is 37""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)

# ""13 plus 9 is 22, plus 13 is 35, minus 7 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9+13-7=28"",
    resulting_state=(28,),
    comment='""13 plus 9 is 22, plus 13 is 35, minus 7 is 28""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)

# ""13 plus 7 is 20, plus 9 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+9=29"",
    resulting_state=(13, 29),
    comment='""13 plus 7 is 20, plus 9 is 29""',
)

# ""13 divided by 13 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=1"",
    resulting_state=(1, 7, 9, 13),
    comment='""13 divided by 13 is 1""',
)

# ""plus 9 is 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+9=10"",
    resulting_state=(7, 10, 13),
    comment='""plus 9 is 10""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 13),
    comment='""13 minus 7 is 6""',
)

# ""13 divided by 13 is 13"" (this is an error, should be 1)
new_state = graph.explore_operation(
    curr_state,
    operation=""13/13=13"",
    resulting_state=(7, 9, 13),
    comment='""13 divided by 13 is 13"" (this is an error, should be 1)',
    result_calc_error=True
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 7, 13),
    comment='""13 minus 9 is 4""',
)

# ""4 times 7 is not 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(13, 28),
    comment='""4 times 7 is not 24""',
)

```"
4010,"[1,6,8,13]",(13-8-1)x6,166," The target number is 24. So let's start with 6 minus 1 is 5 and 5 times 8 is 40 minus 13 is 27. Let's do 6 times 1, which is 6, times 8 is 48. Divided by 13, does that work? No. 6 plus 1 is 7 and 7 times 8 is 56. Divided by 13. That won't work. 6, 8 minus 1 is 7. 1 is 7, 7 plus 6 is 13, plus 13 is 26, 13 minus 8 is 5, and 5 minus 1 is 4, so we're going to do 13 minus 8, which is 5, and 5 minus 1 is 4, and 4 times 6 is 24. I did use all the numbers. 13 minus 8 is 5, minus 1 times 6. Incorrect answer or not all numbers used. 13 minus 5 is 8, okay, minus 1, did I do that right? 13 minus 5 minus 1. Now I lost track. 13 minus 8 equals 5, and 5 minus 1 is 4, and then 4 times 6 is 24. Okay. So, minus 1 times 6 is 24. So, minus 1 times 6 is 24.","```python
start_state = (1, 6, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 minus 1 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-1=5"",
    resulting_state=(5, 8, 13),
    comment='""6 minus 1 is 5""',
)

# ""5 times 8 is 40 minus 13 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8-13=27"",
    resulting_state=(27,),
    comment='""5 times 8 is 40 minus 13 is 27""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""6 times 1, which is 6, times 8 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1*8=48"",
    resulting_state=(13, 48),
    comment='""6 times 1, which is 6, times 8 is 48""',
)

# ""Divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/13=3.69"",
    resulting_state=(3.69,),
    comment='""Divided by 13""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""6 plus 1 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(7, 8, 13),
    comment='""6 plus 1 is 7""',
)

# ""7 times 8 is 56""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(13, 56),
    comment='""7 times 8 is 56""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""8 minus 1 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(6, 7, 13),
    comment='""8 minus 1 is 7""',
)

# ""7 plus 6 is 13, plus 13 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6+13=26"",
    resulting_state=(26,),
    comment='""7 plus 6 is 13, plus 13 is 26""',
)

# Back to start state
curr_state = graph.move_to_node(start_state)
# ""13 minus 8 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(1, 5, 6),
    comment='""13 minus 8 is 5""',
)

# ""5 minus 1 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 6),
    comment='""5 minus 1 is 4""',
)

# ""4 times 6 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""4 times 6 is 24""',
)

# The participant then verifies their solution several times:
# ""13 minus 8 is 5, minus 1 times 6""
# ""13 minus 5 is 8, okay, minus 1""
# ""13 minus 8 equals 5, and 5 minus 1 is 4, and then 4 times 6 is 24""
# These are all restatements of the solution they found
```"
4011,"[3,7,7,9]",(9-3)+7+7,180," The target number is 24 again. So 7 plus 3 is 10, and 10 plus 7 is 17, and 17 plus 9 is 26, so that won't work. 7 times 3 is 21, and 21 plus 7 is 28, minus 9 wouldn't work. 7 times 7 is 49. 49 minus 9 is 40, divided by 3, that won't work. 9, 10, 11, 12. So 7 divided by... 7 is 1, and 1 times 12 is 12. I won't be doing that. Let's see, 9 minus 7 is 2. 7, 8, 9, 10. 2 times 7 is 14, and 14 times 3 is 42. That wouldn't work. 7. 9 minus 7 is 2. 2 times 3 is 24. 7. 7 divided by 7. I'll start with 9. 9 minus 7, which is 2. 9 minus 7, divided by 7, or divided by itself, is 2, times 3 is 5. Where was I going here? 9 minus 7 is 2. 9 minus 7 is 7, times 7 is 49. 7, 8, 9, 10. I thought I was going somewhere. 9 minus 3 is 6, and 6 times 3 is 24. 9 minus 7 is 8, times 7 is 1. 7 plus 7 is 14. 9 plus 7 plus 7, 14. That wouldn't work. 7 minus 3 is...","```python
start_state = (3, 7, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 3 is 10, and 10 plus 7 is 17, and 17 plus 9 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3+7+9=26"",
    resulting_state=(26,),
    comment='""7 plus 3 is 10, and 10 plus 7 is 17, and 17 plus 9 is 26""',
)

curr_state = graph.move_to_node(start_state)
# ""7 times 3 is 21, and 21 plus 7 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+7=28"",
    resulting_state=(9, 28),
    comment='""7 times 3 is 21, and 21 plus 7 is 28""',
)

curr_state = graph.move_to_node(start_state)
# ""7 times 7 is 49. 49 minus 9 is 40, divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*7-9)/3=13.33"",
    resulting_state=(13.33,),
    comment='""7 times 7 is 49. 49 minus 9 is 40, divided by 3""',
)

curr_state = graph.move_to_node(start_state)
# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 7),
    comment='""9 minus 7 is 2""',
)

# ""2 times 7 is 14, and 14 times 3 is 42""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7*3=42"",
    resulting_state=(42,),
    comment='""2 times 7 is 14, and 14 times 3 is 42""',
)

curr_state = graph.move_to_node(start_state)
# ""9 minus 7, divided by 7, or divided by itself, is 2, times 3 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""((9-7)/7)*3=5"",
    resulting_state=(5,),
    comment='""9 minus 7, divided by 7, or divided by itself, is 2, times 3 is 5""',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""9 minus 7 is 7, times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-7)*7=49"",
    resulting_state=(3, 49),
    comment='""9 minus 7 is 7, times 7 is 49""',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""9 minus 3 is 6, and 6 times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-3)*3=18"",
    resulting_state=(7, 7, 18),
    comment='""9 minus 3 is 6, and 6 times 3 is 24"" - participant made calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""9 minus 7 is 8, times 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-7)*7=1"",
    resulting_state=(1, 3),
    comment='""9 minus 7 is 8, times 7 is 1"" - participant made calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(start_state)
# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(3, 9, 14),
    comment='""7 plus 7 is 14""',
)

curr_state = graph.move_to_node(start_state)
# ""9 plus 7 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+7=23"",
    resulting_state=(3, 23),
    comment='""9 plus 7 plus 7""',
)

# ""7 minus 3 is..."" participant trails off
```"
4014,"[1,5,5,10]",(5-1),180," The target number is 24. 5 plus 5 is 10, plus 10 is 20, plus 1 is 21. 5 plus 1 is 6, and 6 plus 10 is 16, plus 5 is 21. 10 plus 5 is 15. 15 minus 1 is 14. 14 plus 5 is 19. 5 plus 5 plus 1 is 11. 21. 10 times itself is 10, plus 10 is 24. 5 times 10 is 50. 10 minus 1 is 9, and 9 plus 10 is 19. 10 minus 5 is 5. 5 plus 1 is 7. 10 minus 1 is 6. 6 plus 15 is not the answer that I need. 10 minus 5 is 5. 10 minus 1 is 9. 5 plus 10. 5 plus 10 plus 1 is 16. 16 plus 5. I keep going to the same answer. 5 minus 1 is 4. 5 plus 1 is 6, and 5 minus 1 is 4. 4 plus 10 is 14 plus 5. That is not what I need. 5 plus 1 is 6, and 6 times 5 is 30. 6 plus 5 is 11. 5 minus 1 is 4, plus 5 is 9. 5 plus 1 is 6. 10 plus 6 is 16. 10 plus 5 plus 1 plus 5 is 26. 10 divided by 5 is 2, and 5 minus 1 is 4. 5 divided by 5 is 1, plus 1 is 2. 5 divided by 5. 10 divided by 1. 5 times 1. 5 minus 1. 5 minus 1 is 4. 5 minus 1 is 4. 5 plus 1 is 9. 5 plus 1 is 9. 4 plus 10 is 14. 4 plus 1 is 9.","```python
start_state = (1, 5, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 5 is 10, plus 10 is 20, plus 1 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+10+1=21"",
    resulting_state=(21,),
    comment='""5 plus 5 is 10, plus 10 is 20, plus 1 is 21""',
)

# ""5 plus 1 is 6, and 6 plus 10 is 16, plus 5 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""((5+1)+10+5)=21"",
    resulting_state=(21,),
    comment='""5 plus 1 is 6, and 6 plus 10 is 16, plus 5 is 21""',
)

# ""10 plus 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(1, 5, 15),
    comment='""10 plus 5 is 15""',
)

# ""15 minus 1 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-1=14"",
    resulting_state=(5, 14),
    comment='""15 minus 1 is 14""',
)

# ""14 plus 5 is 19""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+5=19"",
    resulting_state=(19,),
    comment='""14 plus 5 is 19""',
)

# ""5 plus 5 plus 1 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+1=11"",
    resulting_state=(10, 11),
    comment='""5 plus 5 plus 1 is 11""',
)

# ""5 times 10 is 50""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(1, 5, 50),
    comment='""5 times 10 is 50""',
)

# ""10 minus 5 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(1, 5, 5),
    comment='""10 minus 5 is 5""',
)

# ""5 plus 1 is 7"" (calculation error)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=7"",
    resulting_state=(5, 7, 10),
    comment='""5 plus 1 is 7""',
    result_calc_error=True,
)

# ""5 minus 1 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 5, 10),
    comment='""5 minus 1 is 4""',
)

# ""5 plus 1 is 6, and 6 times 5 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+1)*5=30"",
    resulting_state=(10, 30),
    comment='""5 plus 1 is 6, and 6 times 5 is 30""',
)

# ""10 plus 5 plus 1 plus 5 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5+1+5=26"",
    resulting_state=(26,),
    comment='""10 plus 5 plus 1 plus 5 is 26""',
    result_calc_error=True,
)

# ""10 divided by 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(1, 2, 5),
    comment='""10 divided by 5 is 2""',
)

# ""5 divided by 5 is 1, plus 1 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5/5+1=2"",
    resulting_state=(2, 10),
    comment='""5 divided by 5 is 1, plus 1 is 2""',
)
```"
4015,"[7,8,8,12]",(7+8-12)x8,118," Target number 24. Let's see. This is complicated. I don't know how to get this one. 8 plus 8 is 16. 8 divided by 8 is 1. It doesn't do anything for me. Let's see. It's 22. Let's see. 7 times 8 is 56. 5 divided by 12 is...nope, that won't do it. Let's see. I don't know. This is complicated. The other two were super easy. This is not. 7 plus 8 is 15 plus 12 is 27. That doesn't do anything for me. Let's see. 7 plus 8 is 15 minus 12 is 3 times 8 is 24. Okay. 7...oops, let's delete that. Parentheses. 7 plus 8 minus 12, parenthesis, times 8.","```python
start_state = (7, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 12, 16),
    comment='""8 plus 8 is 16""',
)

# ""8 divided by 8 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 7, 12),
    comment='""8 divided by 8 is 1""',
)

# ""7 times 8 is 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(8, 12, 56),
    comment='""7 times 8 is 56""',
)

# ""5 divided by 12"" seems to be referring to 56 divided by 12
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/12=4.67"",
    resulting_state=(4.67, 8),
    comment='""5 divided by 12"" seems to be referring to 56 divided by 12',
)

# ""7 plus 8 is 15 plus 12 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8+12=27"",
    resulting_state=(8, 27),
    comment='""7 plus 8 is 15 plus 12 is 27""',
)

# ""7 plus 8 is 15 minus 12 is 3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+8-12)*8=24"",
    resulting_state=(24,),
    comment='""7 plus 8 is 15 minus 12 is 3 times 8 is 24""',
)
```"
4033,"[8,8,8,11]",8,180," Ooh, 8 plus 8 plus 8. I'm so glad that I'm on the floor. Alright. Plus 8 plus 8? Hmm. Yeah, let me see. 8 plus 8 is 16 minus 8. That's not going to work. Minus 5. That's not going to work. Times 8 times 8. Times 8 is 64. Hmm. Okay. Great. So we have 11. What can we do? I know 8 plus 8 plus 8 is 24. What do I do with the 11? 8. Oh. Okay. Hmm. Yeah, I don't know what that one is, 8 times 8 times 8 divided by 11, that's like 5, nope, that's not divisible by 11 for an even answer, that's not going to work, yeah, 1 is 8 plus 8 times 11, times, wait, wait, wait, 8 times 8, no, that doesn't work, times 8, 6 times 11, that's 72 divided by 11, that's not working, 64, yeah, that's going to be 88, why is that so hard, so 64 minus 11 is 53, that's not going to work, times 11 is 88, eh, that's not going to work. Hmm, that's not going to work, that's like 8.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+8=24"",
    resulting_state=(11, 24),
    comment='""8 plus 8 plus 8""',
)

# ""8 plus 8 is 16 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8-8=8"",
    resulting_state=(8, 11),
    comment='""8 plus 8 is 16 minus 8""',
)

# ""Times 8 times 8. Times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""Times 8 times 8. Times 8 is 64""',
)

# ""8 times 8 times 8 divided by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8*8/11=46.55"",
    resulting_state=(46.55,),
    comment='""8 times 8 times 8 divided by 11""',
)

# ""8 plus 8 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+8)*11=176"",
    resulting_state=(8, 176),
    comment='""8 plus 8 times 11""',
)

# ""8 times 8, no, that doesn't work, times 8, 6 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8*11=704"",
    resulting_state=(8, 704),
    comment='""8 times 8, no, that doesn\'t work, times 8, 6 times 11""',
)

# ""64 minus 11 is 53""
curr_state = graph.move_to_node((8, 11, 64))
new_state = graph.explore_operation(
    curr_state,
    operation=""64-11=53"",
    resulting_state=(8, 53),
    comment='""64 minus 11 is 53""',
)

# ""times 11 is 88""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(8, 8, 88),
    comment='""times 11 is 88""',
)
```"
4034,"[2,3,6,6]",(6x6)/3x2,71," I wish I could do 18 and 36. No, 18, it's 26. So I need to have 12. That would be 12. 12 times 6. 36 divided by 3. 36 divided by 3 is 12 times 2. Ooh, that works. Okay, get off of my screen. 6 times 6 parentheses divided by 3 times 2.","```python
start_state = (2, 3, 6, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I wish I could do 18 and 36"" suggests participant is thinking about potential subgoals
graph.set_subgoal((18, 36), state_after_subgoal=(24,), comment='""I wish I could do 18 and 36""')

# ""So I need to have 12"" suggests another subgoal
graph.set_subgoal((12,), state_after_subgoal=(24,), comment='""So I need to have 12""')

# ""36 divided by 3 is 12 times 2"" participant seems to be working backward from 24
graph.set_subgoal((36,), state_after_subgoal=(24,), comment='""36 divided by 3 is 12 times 2""')

# ""6 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 3, 36),
    comment='""6 times 6""',
)

# ""divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/3=12"",
    resulting_state=(2, 12),
    comment='""divided by 3""',
)

# ""times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""times 2""',
)
```"
4036,"[3,3,7,13]",,180," On that last one, I had that right, and I did use all the answers, and that is me using my voice. 9 plus 3 was 12 plus...yeah, 4 and 7 is 11. And it said I didn't use my numbers, but I did. Alright. That's 9. 3 times 3 is 9. What's 7? Nope, it's not gonna work. 39. I am talking aloud. So, 3 times 7 is 21. 6 times 7 is 42. 7 plus 13 is 20. Yeah, that's not gonna work either. 21 plus 13 is 34. That's not gonna work. 3 times 13. 39 minus 10. That's not gonna work. Uh, dang. That's 42. 3 plus 3 is 6. Times 7 is 42. Minus 13. That's not gonna work. Hmm. That's not gonna work. 3 times 13 is 39. I can't divide that by 7. No. Minus 10. What is this? 3 times 7 is 21. Plus...yeah, 3 is 24. How do you use that 13 in there? Hmm. Mm-mm-mm-mm-mm. Thinking minus 13 is not gonna work. I can't think of what that...divided by that would work. Uh, 6 times... 17 was at 8. 78 divided by 7. That's not gonna work. 7 times 13 is 91. Divided by 6. Not gonna work. Hmm. 3 is 10. Plus 16 is 26. That's too much. So what am I missing? Times 3 is 9. That's 22. 3 times 3 is 9. Plus 13 is 22. Plus 7. Times 3 is 9. Plus 16. And that's 29. That's still not working.","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# First few lines are about previous problem

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(7, 9, 13),
    comment='""3 times 3 is 9""',
)

# ""3 times 7 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(3, 13, 21),
    comment='""3 times 7 is 21""',
)

# ""6 times 7 is 42"" - participant must have used 3+3=6 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*7=42"",
    resulting_state=(13, 42),
    comment='""6 times 7 is 42"" - participant must have used 3+3=6 first',
)

# ""7 plus 13 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(3, 3, 20),
    comment='""7 plus 13 is 20""',
)

# ""21 plus 13 is 34"" - using the 21 from 3*7 earlier
curr_state = graph.move_to_node((3, 13, 21))
new_state = graph.explore_operation(
    curr_state,
    operation=""21+13=34"",
    resulting_state=(3, 34),
    comment='""21 plus 13 is 34""',
)

# ""3 times 13. 39""
curr_state = graph.move_to_node((3, 13, 21))
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(21, 39),
    comment='""3 times 13. 39""',
)

# ""3 plus 3 is 6. Times 7 is 42. Minus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3+3)*7-13=29"",
    resulting_state=(29,),
    comment='""3 plus 3 is 6. Times 7 is 42. Minus 13""',
)

# ""3 times 13 is 39. I can't divide that by 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13/7=5.57"",
    resulting_state=(3, 5.57),
    comment='""3 times 13 is 39. I can\'t divide that by 7""',
)

# ""3 times 7 is 21. Plus...yeah, 3 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7+3=24"",
    resulting_state=(13, 24),
    comment='""3 times 7 is 21. Plus...yeah, 3 is 24""',
)

# ""7 times 13 is 91. Divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13/(3+3)=15.17"",
    resulting_state=(15.17,),
    comment='""7 times 13 is 91. Divided by 6"" where 6 comes from 3+3',
)

# ""3 times 3 is 9. Plus 13 is 22. Plus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3+13+7=29"",
    resulting_state=(29,),
    comment='""3 times 3 is 9. Plus 13 is 22. Plus 7""',
)
```"
4037,"[3,3,3,4]",(4+3)x3+3,127," 6 times 4 is 36, that's not going to work, 3 times 3, 3 times 4 is 12, no, that's not going to work, 3 times 4 is 12, times 3 is 36, I can't subtract that, 3 times 3 times 3 is 27, 3 times 3 times 4 is 36, minus 3, that's not going to work, 3 times 3 is still 1, 3 plus 3 is 6, 3 times 3 is 18 plus 4, that's not going to work, 3 times 4 is 12, times 3 is, why is that not working, 3 times 4, 3 plus 4 is 7, times, oh, oh, oh, oh, 4 times, oops, nope, nope, nope, nope, the delete button is hard to get to, 4 plus 3 times 3 plus 3. 7 times 3 is 21.","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 36"" - participant must have first computed 3+3=6
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 4, 6),
    comment='""6 times 4 is 36"" - participant must have first computed 3+3=6',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=36"",
    resulting_state=(3, 36),
    result_calc_error=True,
    comment='""6 times 4 is 36"" - calculation error',
)

# ""3 times 4 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(3, 3, 12),
    comment='""3 times 4 is 12""',
)

# ""times 3 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(3, 36),
    comment='""times 3 is 36""',
)

# ""3 times 3 times 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3=27"",
    resulting_state=(4, 27),
    comment='""3 times 3 times 3 is 27""',
)

# ""3 times 3 times 4 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*4=36"",
    resulting_state=(3, 36),
    comment='""3 times 3 times 4 is 36""',
)

# ""minus 3, that's not going to work""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-3=33"",
    resulting_state=(33,),
    comment='""minus 3, that\'s not going to work""',
)

# ""3 plus 3 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 4, 6),
    comment='""3 plus 3 is 6""',
)

# ""3 times 3 is 18 plus 4"" - participant likely meant 3*6=18
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(4, 18),
    comment='""3 times 3 is 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+4=22"",
    resulting_state=(22,),
    comment='""plus 4""',
)

# ""3 plus 4 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+3=7"",
    resulting_state=(3, 3, 7),
    comment='""3 plus 4 is 7""',
)

# ""4 plus 3 times 3 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+3=24"",
    resulting_state=(24,),
    comment='""4 plus 3 times 3 plus 3"" and ""7 times 3 is 21"" plus the remaining 3',
)
```"
4038,"[5,6,7,7]",(5x7)-(6+7),180," As you perform the task, try to say aloud have no idea what that is let's see since 14 14 times 6 divided by 5 is not to work what is 14 times 5 is 17. okay 5 plus that's 12 and that's 13. how can i figure that out 5 times 7 is 35 minus 6 plus six minus seven yeah i don't know six times ah six times seven is 42 minus 12 still gives me 30. dang maybe subtract one okay maybe that's it five times six no five times seven thirty five okay that's it five times six or five times seven times seven 35 minus 13. no that's not gonna work that's like 22. plus six months i don't know if that's not the right answer once you're 35 wow dang oh my god","```python
start_state = (5, 6, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""14 times 6 divided by 5"" - participant likely added 7+7=14 first
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(5, 6, 14),
    comment='""14"" participant adds the 7s',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*6/5=16.8"",
    resulting_state=(16.8,),
    comment='""14 times 6 divided by 5""',
)

# ""14 times 5 is 17"" appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""14*5=17"",
    resulting_state=(6, 17),
    comment='""14 times 5 is 17"" appears to be a calculation error',
    result_calc_error=True,
)

# ""5 plus that's 12 and that's 13"" participant likely adding 5+7=12
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(6, 7, 12),
    comment='""5 plus that\'s 12""',
)

# ""5 times 7 is 35 minus 6 plus six minus seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7-6-7=22"",
    resulting_state=(22,),
    comment='""5 times 7 is 35 minus 6 plus six minus seven""',
)

# ""six times seven is 42 minus 12"" - participant first multiplies 6*7
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(5, 7, 42),
    comment='""six times seven is 42""',
)

# ""five times seven thirty five"" participant tries this calculation again
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(6, 7, 35),
    comment='""five times seven thirty five""',
)

# ""35 minus 13"" participant likely combining 6+7=13 and subtracting from 35
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-(6+7)=22"",
    resulting_state=(22,),
    comment='""35 minus 13"" participant likely combining 6+7=13 and subtracting from 35',
)
```"
4040,"[3,3,3,9]",,180," Oh, gosh. That's 9. 3 times 3 times 3 are 3 times. It could be 9. Or 3 divided by 3. 3 plus 3 is 6. 3 times 9 is 27. That's not going to work. Times 3 is 9. Wait, wait, wait, wait. 3 plus 3 is 6. No, that's not going to work. 3 times 3 is 27. No, that's 18. That's not going to work. How about, no, that's not going to work. 9 divided by 3 is 3 times 6. It's not going to work. Wait. 9. I am lost. 3, 9. Wait, wait, wait. Add 3. 3 plus 3 is 6. 6 divided by 3 is 2 times 9. That's still 18. That's not going to work. All right. 9 times 9 plus 3. Ooh, that's 12. That's 12. Wait, wait, wait. So that's 12. Ah, that's not going to work. Wait. R3 plus 3 is 6. And 9 is 15 times 3. That's still not going to work. What am I missing? 3 plus 3 is 12. I can't get this to add up to 12. So, 3. Okay, 9 divided by 3 is 3. 9 divided by 9 is 1. What is this? 3 times 3 is 6. Times 9 is 54. Divided by 3 is still not going to work because that's 18. Gosh. Let's see. Yeah. Wait. No. Wait. Hold up. Okay. My little brain. My little brain to work. 1, 2, 24. No, it's still 18. All right. 3. Let's add some more. Wait, wait, wait. 1, 2. Nope. That's not going to work. 3 times 3. 3 minus 3. 0 times 3. Why didn't I think of that on another one? Yeah. Okay. 3 plus 3 plus 3. 9. Nope. 3 plus 3. 9 plus 3 plus 3. Still, 9 plus 3 is 12. 12 times. It still needs to be 12 times that. Okay.","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3=27"",
    resulting_state=(9, 27),
    comment='""3 times 3 times 3""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 6, 9),
    comment='""3 plus 3 is 6""',
)

# ""3 times 9 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(3, 3, 27),
    comment='""3 times 9 is 27""',
)

# ""Times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(3, 9, 9),
    comment='""Times 3 is 9""',
)

# ""3 times 3 is 27. No, that's 18"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=18"",
    resulting_state=(3, 9, 18),
    comment='""3 times 3 is 27. No, that\'s 18"" - participant makes calculation error',
    result_calc_error=True,
)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 3, 3),
    comment='""9 divided by 3 is 3""',
)

# ""3 plus 3 is 6. 6 divided by 3 is 2 times 9. That's still 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""((3+3)/3)*9=18"",
    resulting_state=(18,),
    comment='""3 plus 3 is 6. 6 divided by 3 is 2 times 9""',
)

# ""9 times 9 plus 3. Ooh, that's 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(3, 3, 12),
    comment='""9 times 9 plus 3. Ooh, that\'s 12""',
)

# ""3 plus 3 is 6. And 9 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 6, 9),
    comment='""3 plus 3 is 6""',
)

# ""3 times 3 is 6. Times 9 is 54. Divided by 3 is still not going to work because that's 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""((3*3)*9)/3=18"",
    resulting_state=(18,),
    result_calc_error=True,
    comment='""3 times 3 is 6. Times 9 is 54. Divided by 3 is still not going to work because that\'s 18""',
)

# ""3 minus 3. 0 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-3=0"",
    resulting_state=(0, 3, 9),
    comment='""3 minus 3. 0 times 3""',
)

# ""3 plus 3 plus 3. 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3+3=9"",
    resulting_state=(9, 9),
    comment='""3 plus 3 plus 3. 9""',
)

# ""9 plus 3 plus 3. Still, 9 plus 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(3, 3, 12),
    comment='""9 plus 3 plus 3. Still, 9 plus 3 is 12""',
)
```"
4050,"[5,10,10,11]",(,180," Okay, you need to get to 24. Let's see. Need to get to an even number, then multiply or divide it. Can I get to 48? Altogether, 36. Let's see. Let's see if we can get even numbers together and get these together. Let's see. 16. 16. Can I get 40 and minus 16? No, I can't. Can I get 50? Nope, it's not going to do anything. Yep, yep, I'm going. All right. Let's see. Yep, yep, I'm going. All right. Let's see. Can I get a higher number and divide it down to 24? Let's see. 48, 96. This thing gets me to 96, does it? Um... Man, how do I get this to 24? Um... I can get 10 and 10 to 100. Nothing. Let's see. 55 doesn't do anything. I'll just start throwing stuff down and see if it sticks. We can get to 50. We can get down to 30. We can... Let's see. Divide that by anything? Nope. Uh... We can go from there. I feel like I... Hmm. Can we get to 12 somehow? No, I can get to 25. Then, wait. Let's see. We get to 20... ...","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Can I get to 48?"" suggests participant is setting a subgoal
graph.set_subgoal((48,), state_after_subgoal=(24,), comment='""Can I get to 48?""')

# ""Altogether, 36"" - participant seems to be adding some numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+11+5=36"",
    resulting_state=(36,),
    comment='""Altogether, 36""',
)

# ""16. 16."" - participant might be trying to get to 16
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5=15"",
    resulting_state=(10, 11, 15),
    comment='""16. 16."" - participant seems to be trying operations to get to 16',
)

# ""Can I get 40"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+11+5=40"",
    resulting_state=(40,),
    comment='""Can I get 40""',
    result_calc_error=True,
)

# ""Can I get 50?""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+11+5=50"",
    resulting_state=(50,),
    comment='""Can I get 50?""',
    result_calc_error=True,
)

# ""Can I get a higher number and divide it down to 24?""
# ""96"" suggests participant is setting another subgoal
graph.set_subgoal((96,), state_after_subgoal=(24,), comment='""Can I get a higher number and divide it down to 24?""')

# ""10 and 10 to 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(5, 11, 100),
    comment='""10 and 10 to 100""',
)

# ""55 doesn't do anything""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(10, 10, 55),
    comment='""55 doesn\'t do anything""',
)

# ""We can get to 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+11+5=50"",
    resulting_state=(50,),
    comment='""We can get to 50""',
    result_calc_error=True,
)

# ""We can get down to 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+11-5=30"",
    resulting_state=(30,),
    comment='""We can get down to 30""',
    result_calc_error=True,
)

# ""Can we get to 12 somehow?""
graph.set_subgoal((12,), state_after_subgoal=(24,), comment='""Can we get to 12 somehow?""')

# ""No, I can get to 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+5=25"",
    resulting_state=(11, 25),
    comment='""No, I can get to 25""',
)

# ""We get to 20..."" 
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 11, 20),
    comment='""We get to 20...""',
)

```"
4052,"[4,10,12,12]",,180," How to add 12 and 12 to get 24. Then I would need to do something with the 4 and the 10. I can get 120, divide it by 10, get 12. Let's see, we need a 2. I can get 40. I do 40 minus 24. That doesn't get me there. What does that give me too? 40 minus 24, 16. Nope. 14 doesn't do anything. Let's see. I can get 2. What else can I do? 4 times 12, 48. 48. Times the 4 and the 12, I get 48. Can I do anything from there? I need to divide. I can get that down by 10. 38. Get it down by 12. That does nothing. Hmm. 12, 12, 12. 20, 48. What can I subtract? 12 minus 4. What can I do with 8? Let's see. 12 minus 4. I can get to 8. Times 10 times 12. Let's see. 8 times 12. 80, 96. Can't do anything with that. Um, actually, 80, 96. That would give me a 96. Yeah, that would be too low. Um, let's see. What about a 6? 10 minus 4. Can I do anything with a 6? Can get that up to 72. Is that right? 6, 6 times 12. 60, 66, 72. Yup. Can't divide that to make sense. Gosh.","```python
start_state = (4, 10, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""How to add 12 and 12 to get 24"" - participant sets a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""How to add 12 and 12 to get 24""',
)

# ""I can get 120, divide it by 10"" - participant likely multiplying 12*10
new_state = graph.explore_operation(
    curr_state,
    operation=""12*10=120"",
    resulting_state=(4, 12, 120),
    comment='""I can get 120""',
)

# Move back to start state since we need the 10
curr_state = graph.move_to_node(start_state)

# ""I can get 40"" - participant likely multiplying 4*10
new_state = graph.explore_operation(
    curr_state,
    operation=""4*10=40"",
    resulting_state=(12, 12, 40),
    comment='""I can get 40""',
)

# ""4 times 12, 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=48"",
    resulting_state=(10, 12, 48),
    comment='""4 times 12, 48""',
)

# ""Can I do anything from there? I need to divide. I can get that down by 10. 38""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48-10=38"",
    resulting_state=(12, 38),
    comment='""I can get that down by 10. 38""',
)

# ""12 minus 4. What can I do with 8?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(8, 10, 12),
    comment='""12 minus 4. What can I do with 8?""',
)

# ""8 times 12. 80, 96""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(10, 96),
    comment='""8 times 12. 80, 96""',
)

# ""10 minus 4. Can I do anything with a 6?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-4=6"",
    resulting_state=(6, 12, 12),
    comment='""10 minus 4. Can I do anything with a 6?""',
)

# ""6 times 12. 60, 66, 72""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=72"",
    resulting_state=(12, 72),
    comment='""6 times 12. 60, 66, 72""',
)
```"
4054,"[1,2,3,8]",((3x8)/,180," 24. Okay. So, 3 times 8 gets me there. Then I have to do something with the 2. Let's see... I can do something with multiplying the 2 and the 3 that gets me to 6, but then I can't add or multiply or it will go over or under. If I multiply the 2 and the 8, I get 16. I can't do anything with the 3. Let's see... I feel like we do something with the 3 and the 8. Then it gets me to 16... Oh, sorry, 24. It gets me to 24, but then I've got to do something with the 2. Is there anything I can do to cancel one of those numbers out? Let's see... 3 times 8. 3 times 8. 24. I feel like I'm in the right direction. Let's see... Divide that by 2. I get down to 12. Yup. Divided by 2 times 1. Is that... I think that's alright. What? How are not all the numbers used? Correct answer. Let's see. 3 divided by 8. I'm... So, that's 24. Let's see... Divided by 2. Right. Now, how do I do this? I think I've got the answer. So, 3 times 8 parentheses divided by 2. The parentheses... 4. What was it? 8. What was I just doing? It's 24 divided...","```python
start_state = (1, 2, 3, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 8 gets me there""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(1, 2, 24),
    comment='""3 times 8 gets me there""',
)

# ""multiplying the 2 and the 3 that gets me to 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(1, 6, 8),
    comment='""multiplying the 2 and the 3 that gets me to 6""',
)

# ""If I multiply the 2 and the 8, I get 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(1, 3, 16),
    comment='""If I multiply the 2 and the 8, I get 16""',
)

# ""3 times 8. 24."" participant goes back to first computation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(1, 2, 24),
    comment='""3 times 8. 24.""',
)

# ""Divide that by 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24/2=12"",
    resulting_state=(1, 12),
    comment='""Divide that by 2""',
)

# ""3 divided by 8"" participant seems to be trying something new
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/8=0.375"",
    resulting_state=(0.38, 1, 2),
    comment='""3 divided by 8""',
)

# ""3 times 8 parentheses divided by 2"" participant goes back to previous approach
new_state = graph.explore_operation(
    curr_state,
    operation=""(3*8)/2=12"",
    resulting_state=(1, 12),
    comment='""3 times 8 parentheses divided by 2""',
)
```"
4063,"[1,2,7,7]",,180," Let's see, it's 14 plus 8 is 22, no, so 2 times 1, 3 times 7 is 21, no, 7 times 3, no, 7 times 2 is 14, 7, no. So, 7 minus 1, 6, times 2 is 12, plus 7, no. 5 times, oh, 7 minus 1 is 6, no, 7 minus 2 is 5, no. 7 minus 2 is 5. That leaves, oh, no. 7 minus 1 is 4. 7 plus 1 is 8. 8 times 2 is 16. 7 is 23. No, that's not going to work. 7 times 3 is 21, no. 2 divided by 1 is 2, times 7 is 14, no. 24 divided by 2, this is 12, no, 24, no. 7 minus 2 is 5, 7 minus 1 is 6, no, 7 minus 1, 7 minus 6, 7 minus 1 is 6,","```python
start_state = (1, 2, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""14 plus 8 is 22"" - participant likely got 14 from 7*2
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""14 plus 8"" suggests participant first computed 7*2=14',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+7+1=22"",
    resulting_state=(22,),
    comment='""14 plus 8 is 22"" - participant adds remaining numbers though says 8 instead of 7+1',
)

# ""2 times 1, 3 times 7 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*1=2"",
    resulting_state=(2, 7, 7),
    comment='""2 times 1""',
)

# ""7 times 2 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(1, 7, 14),
    comment='""7 times 2 is 14""',
)

# ""7 minus 1, 6, times 2 is 12, plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(2, 6, 7),
    comment='""7 minus 1, 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(7, 12),
    comment='""times 2 is 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(19,),
    comment='""plus 7""',
)

# ""7 minus 2 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(1, 5, 7),
    comment='""7 minus 2 is 5""',
)

# ""7 plus 1 is 8. 8 times 2 is 16. 7 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(2, 7, 8),
    comment='""7 plus 1 is 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(7, 16),
    comment='""8 times 2 is 16""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+7=23"",
    resulting_state=(23,),
    comment='""7 is 23""',
)

# ""2 divided by 1 is 2, times 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2/1=2"",
    resulting_state=(2, 7, 7),
    comment='""2 divided by 1 is 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(7, 14),
    comment='""times 7 is 14""',
)

# ""24 divided by 2, this is 12"" - participant seems to be working backwards from goal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""24 divided by 2, this is 12"" - participant seems to be working backwards from goal',
)

# ""7 minus 2 is 5, 7 minus 1 is 6"" - participant tries these operations again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(1, 5, 7),
    comment='""7 minus 2 is 5""',
)

new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(2, 6, 7),
    comment='""7 minus 1 is 6""',
)
```"
4066,"[1,1,4,6]",(4x6x1x1),15," Alright, so we know 4 times 6 is 24. So let's do 4 times 6, and then we have 1 times 1.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(1, 1, 24),
    comment='""4 times 6 is 24""',
)

# ""and then we have 1 times 1"" - participant multiplies the remaining 1s by 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1*1=24"",
    resulting_state=(24,),
    comment='""and then we have 1 times 1""',
)
```"
4074,"[1,4,7,13]",(13+7+4)x1,163," Okay. 30, 28, take away 13, no. 1 plus 4 is 5, plus 7, 12, no. 9 times 7, no. 12 times 7, no. 13 times 4, no. 4 times 7 is 28. 13 take away 7 is 3, 4, 5 times 1, no. 13 plus 4. 14 times 7 is 17, take away 7, no. 4 take away is 3. Okay, so 13 take away 4 is 9, plus 8, 16, 17, no, 15, plus 7, 13 take away 7, 28, minus 13, no, 13, plus 7 is 20, plus 4 is 24, 13, plus 7, plus 20, plus 4, you're going to do","```python
start_state = (1, 4, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 plus 4 is 5, plus 7, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+4+7=12"",
    resulting_state=(12, 13),
    comment='""1 plus 4 is 5, plus 7, 12""',
)

# ""4 times 7 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(1, 13, 28),
    comment='""4 times 7 is 28""',
)

# ""13 take away 7 is 3"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=3"",
    resulting_state=(1, 3, 4),
    comment='""13 take away 7 is 3"" (calculation error)',
    result_calc_error=True,
)

# ""13 plus 4"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13+4=17"",
    resulting_state=(1, 7, 17),
    comment='""13 plus 4""',
)

# ""13 take away 4 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-4=9"",
    resulting_state=(1, 7, 9),
    comment='""13 take away 4 is 9""',
)

# ""13 plus 7 is 20, plus 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+4=24"",
    resulting_state=(1, 24),
    comment='""13 plus 7 is 20, plus 4 is 24""',
)

# Based on their response, they then multiply this by 1
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1=24"",
    resulting_state=(24,),
    comment=""Based on their response, they multiply by 1"",
)
```"
4081,"[1,7,8,10]",(7+8)+10-1,53," Okay, 18 plus, that's 24, 18, 20, oops. Okay, so 1, 7, 18, let's see. Oops. I mean, 1, 7, 8, 10. Yes, I am speaking. What's the easiest way to do this? 15 plus 9. What's 15 plus 9? That's 24. Okay, the easiest way for me to do this is 7 plus, I mean, 7 plus 8 plus 10. Minus 1.","```python
start_state = (1, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""15 plus 9. What's 15 plus 9? That's 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (15, 9),
    state_after_subgoal=(24,),
    comment='""15 plus 9. What\'s 15 plus 9? That\'s 24""',
)

# ""7 plus 8 plus 10. Minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8+10-1=24"",
    resulting_state=(24,),
    comment='""7 plus 8 plus 10. Minus 1""',
)
```"
4085,"[4,8,8,11]",11x8(8+4),180," Um, um, hmm. Uh, let's see. Okay, so definitely gonna need some, uh, let's try, um, 8 times. Okay, so this is gonna be 8 times, uh, this is gonna be 32 plus whatever 8 times 8 is. No, I don't think so. 11 times 4, plus 4. Yeah, I don't think so. Um, big numbers. Um, okay, uh, let's do 8, 9, no, 19's not gonna work. Okay, um. I think it's this, because if it's, uh, no, I don't think it is. Um, um, no, okay. So, 4 times 8 is... 32, right? Okay, so... If I do 11, that's 12, no, okay. 4 times 11 is... 48, 44. And then... ... no, okay, ummm... 11 times 8... times...","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times... this is gonna be 32"" - participant seems to be computing 8*4
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(8, 11, 32),
    comment='""8 times... this is gonna be 32""',
)

# ""4 times 8 is... 32, right?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(8, 11, 32),
    comment='""4 times 8 is... 32, right?""',
)

# ""4 times 11 is... 48, 44"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=48"",
    resulting_state=(8, 8, 48),
    comment='""4 times 11 is... 48, 44"" - participant makes calculation error',
    result_calc_error=True
)

# ""11 times 8... times..."" - participant seems to be working toward their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(4, 8, 88),
    comment='""11 times 8... times...""',
)
```"
4087,"[4,4,5,10]",,180," Okay, 4 plus 4, 4, 4, 5, 10, um, that's 15, and then 8, so I think that's 23? Um, not really, but okay. Um, uh, let's see. Uh, let's try 10 minus 5, and then 4 times plus 4? No, that's 8, 8 times 5? No. Let's try 4 minus 6, that's... Okay, um, okay, that would be 6, and then 9, 6 times 9? No. Okay, um, 5 plus 4? Okay, so that's gonna be 6, and then that's gonna be 9, and I think, I don't think so. Okay. Um, um, okay, um... Mmm, let's try 4 minus 6, 4 minus 6... Uh, let's try 4... And then... No. Um, okay. So, 5 to the 10, so, no. Uh, let's see, 50 minus 40? Okay. That's... That's 50 minus 40, that's 10... No. Uh, let's do 5 plus 5, that's 8... It's like 40, it's 10, no. Um... Okay, um... Let's try 6 plus 4, that's 8... Let's try 6 minus 4, that's 8... Okay. 4 minus 4, that's 7... Let's try 5 plus 7, that's 8...","```python
start_state = (4, 4, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 4"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(5, 8, 10),
    comment='""4 plus 4""',
)

# ""that's 15, and then 8, so I think that's 23"" seems to be adding numbers
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5+10=23"",
    resulting_state=(23,),
    comment='""that\'s 15, and then 8, so I think that\'s 23""',
)

# ""10 minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(4, 4, 5),
    comment='""10 minus 5""',
)

# ""and then 4 times plus 4? No, that's 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 16),
    comment='""and then 4 times plus 4""',
)

# ""5 plus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+4=9"",
    resulting_state=(4, 9, 10),
    comment='""5 plus 4""',
)

# ""5 to the 10"" participant may be trying to multiply 5 and 10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(4, 4, 50),
    comment='""5 to the 10"" participant may be trying to multiply 5 and 10',
)

# ""4 minus 4, that's 7"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-4=7"",
    resulting_state=(5, 7, 10),
    comment='""4 minus 4, that\'s 7"" seems to be a calculation error',
    result_calc_error=True,
)

# ""5 plus 7, that's 8"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=8"",
    resulting_state=(8, 10),
    comment='""5 plus 7, that\'s 8"" seems to be a calculation error',
    result_calc_error=True,
)
```"
4088,"[3,4,8,10]",(10-8),180," Okay, 4, 3, 8, 10, um, there's like, okay, um, okay, uh, let's try 4 times 8 plus 10, no, minus 10, no, let's do 10 minus 8. That's going to be 8, and then, no, okay, so, no, okay, um, okay, 3 times, 4 times 3, and then, times 8 times 10, no, okay, um, okay, right, uh, 3 times 10. 10 minus 8, no, that feels wrong, um, okay, that's going to be, like, 80, all right, um, can I do that? No, okay. Can I do that? Okay. Okay, 10 minus 8 times 3 times 2. Okay. Okay. 3 minus 8. 10 minus 8. I'm pretty sure the 10 minus 8 is going to help me, but I'm not sure how to do it. It keeps giving me an invalid equation, but I'm probably not doing it right. All right, 8, no, 10 minus 8, and I'm going to have these in parentheses, and then, 10,","```python
start_state = (3, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 8 plus 10, no, minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8-10=22"",
    resulting_state=(3, 22),
    comment='""4 times 8 plus 10, no, minus 10""',
)

# ""10 minus 8"" - participant tries a different approach
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 3, 4),
    comment='""10 minus 8""',
)

# ""4 times 3, and then, times 8 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3*8*10=960"",
    resulting_state=(960,),
    comment='""4 times 3, and then, times 8 times 10""',
)

# ""3 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(4, 8, 30),
    comment='""3 times 10""',
)

# ""10 minus 8"" - participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 3, 4),
    comment='""10 minus 8""',
)

# ""that's going to be, like, 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*8=80"",
    resulting_state=(3, 4, 80),
    comment='""that\'s going to be, like, 80""',
)

# ""10 minus 8 times 3 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-8)*3*2=12"",
    resulting_state=(4, 12),
    comment='""10 minus 8 times 3 times 2""',
)

# ""3 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-8=-5"",
    resulting_state=(-5, 4, 10),
    comment='""3 minus 8""',
)

# ""10 minus 8"" - participant tries this operation yet again
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 3, 4),
    comment='""10 minus 8""',
)

# The participant seems to be stuck on ""10 minus 8"" and can't figure out how to use it effectively
# They mention having trouble with the equation format but don't make any more complete calculations
```"
4094,"[3,3,9,9]",9/,180," Okay, um, nine times three. This is really hard. Um, all right. Um, nine times, nine minus, yeah, nine minus three, that's six. Um, plus nine. Nine. Okay, if it's six, um, wait, I think I got it. Okay. No, I don't think that's going to work. Um, no. Um, it, um, um, okay. Nine times three minus three. Okay. Let's try nine minus nine. That's zero. Times three times three. No. Um, nine times three plus. Oh, I got it. Okay. Nine times three plus, um, minus three, nine times three. No. I don't think that's going to work. Um. All right. Okay, um, okay, um. Okay. Um. Okay. Um.絹","```python
start_state = (3, 3, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""nine times three""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 9, 27),
    comment='""nine times three""',
)

# ""nine minus three, that's six""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 6, 9),
    comment='""nine minus three, that\'s six""',
)

# ""plus nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+9=15"",
    resulting_state=(3, 15),
    comment='""plus nine""',
)

# ""nine times three minus three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-3=24"",
    resulting_state=(9, 24),
    comment='""nine times three minus three""',
)

# ""nine minus nine. That's zero. Times three times three""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-9)*3*3=0"",
    resulting_state=(0,),
    comment='""nine minus nine. That\'s zero. Times three times three""',
)

# The rest appears to be the participant struggling and not completing any new operations
```"
4096,"[1,2,5,7]",(7+5)x2x1,16," Okay, so here, 12 times 2 gets me 24, so 5 plus 7 gets me 12, times 2 times 1 gets me 24.","```python
start_state = (1, 2, 5, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2 gets me 24"" - participant is setting a subgoal of getting to 12 first
graph.set_subgoal(
    (12, 2, 1),
    state_after_subgoal=(24,),
    comment='""12 times 2 gets me 24""',
)

# ""5 plus 7 gets me 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(1, 2, 12),
    comment='""5 plus 7 gets me 12""',
)

# ""times 2 times 1 gets me 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2*1=24"",
    resulting_state=(24,),
    comment='""times 2 times 1 gets me 24""',
)
```"
4099,"[1,11,11,12]",,190," So, I've got two 11s, a 1 and a 12. So I want to get to a 12 plus 12 or something similar. So, I can do 1. Ah, I know. So, if I get 12 minus 1, or 12 minus 11, no, that'll give me a 1. If I get, so I want 12 plus 12, or 12 times 2. So, 11, minus 11 is 0. 11 plus 11 is 22. 22 plus 2, no. 12, no. 11 times 12 is 121. I don't know what I'm doing here. I don't know what I'm doing here.","```python
start_state = (1, 11, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So I want to get to a 12 plus 12 or something similar"" - participant sets a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""So I want to get to a 12 plus 12 or something similar""',
)

# ""12 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(11, 11, 11),
    comment='""12 minus 1""',
)

# ""12 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-11=1"",
    resulting_state=(1, 1, 11),
    comment='""12 minus 11""',
)

# ""11 minus 11 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-11=0"",
    resulting_state=(0, 1, 12),
    comment='""11 minus 11 is 0""',
)

# ""11 plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(1, 12, 22),
    comment='""11 plus 11 is 22""',
)

# ""11 times 12 is 121"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11*12=121"",
    resulting_state=(1, 11, 121),
    comment='""11 times 12 is 121""',
    result_calc_error=True,
)

```"
4100,"[3,5,8,13]",5x8-(13+3),118," Alright, so 3, 5, 8, 13. I essentially want 8 times 3 here. So, if I do 5 times 3, I get 15. If I do 8 times 13, that's going to be too big. So, if I do 8 times 13, that's going to be too big. 8 minus 13 minus 8 is 5. If I do 13 minus 5 is 8. Um, 5 plus 8, 13, 26. No, can't do that. Oh, 5 times 8 is 40. 5 times 8 is 40. 5 times 8 is 40. 2. Minus. 3 times 2 is 64. 13 plus 3 gives me 27. 4 plus 18 plus 3 gives me, guess this one will be 4.","```python
start_state = (3, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I essentially want 8 times 3 here"" - participant sets a subgoal
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""I essentially want 8 times 3 here""',
)

# ""if I do 5 times 3, I get 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(8, 13, 15),
    comment='""if I do 5 times 3, I get 15""',
)

curr_state = graph.move_to_node(start_state)
# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(3, 8, 8),
    comment='""13 minus 5 is 8""',
)

curr_state = graph.move_to_node(start_state)
# ""5 plus 8, 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(3, 13, 13),
    comment='""5 plus 8, 13""',
)

curr_state = graph.move_to_node(start_state)
# ""5 times 8 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(3, 13, 40),
    comment='""5 times 8 is 40""',
)

curr_state = graph.move_to_node(start_state)
# ""13 plus 3 gives me 27"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=27"",
    resulting_state=(5, 8, 27),
    comment='""13 plus 3 gives me 27"" - calculation error',
    result_calc_error=True,
)

# Based on their final answer of 5x8-(13+3), they must have realized that 40-(13+3)=24
curr_state = graph.move_to_node((3, 13, 40))
new_state = graph.explore_operation(
    curr_state,
    operation=""40-(13+3)=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they subtracted 13+3 from 40"",
)
```"
4106,"[5,8,9,11]",(,180," That wouldn't work. Five times eight, that's 40. Okay, I think I got it. Eleven plus nine is twenty-eight. Plus eight minus five is wrong. Okay, let me think again. Oh yeah, because twenty-eight is wrong. Eight minus five. Let's see. Nine times five is forty-five. Minus. Plus. No. Minus. Eleven minus eight. Forty-five minus eleven. Sixty-five minus eleven.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Five times eight, that's 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(9, 11, 40),
    comment='""Five times eight, that\'s 40""',
)

# ""Eleven plus nine is twenty-eight"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=28"",
    resulting_state=(5, 8, 28),
    comment='""Eleven plus nine is twenty-eight"" - calculation error',
    result_calc_error=True,
)

# ""Plus eight minus five is wrong"" continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28+8-5=31"",
    resulting_state=(31,),
    comment='""Plus eight minus five""',
)

# ""Eight minus five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 9, 11),
    comment='""Eight minus five""',
)

# ""Nine times five is forty-five""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(8, 11, 45),
    comment='""Nine times five is forty-five""',
)

# ""Eleven minus eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 5, 9),
    comment='""Eleven minus eight""',
)

# ""Forty-five minus eleven""
curr_state = graph.move_to_node((8, 11, 45))  # Move back to state with 45
new_state = graph.explore_operation(
    curr_state,
    operation=""45-11=34"",
    resulting_state=(8, 34),
    comment='""Forty-five minus eleven""',
)

```"
4116,"[7,10,10,12]",,181," Okay, so we have 10, 10 minus, so 12 minus 7, that's going to give 5, 50, that's too much, 10 minus 7, that's 3, 3 times 12, 3 times 12 would be 36, how about 3 times 10, that would be 30. But that wouldn't make sense, um, we would need 12, so, ugh, this is hard, 10 minus 10, 0, you could get a 5, 5 wouldn't work, 12 divided by 10, that would be like 1.2, and that wouldn't work. 10 divided by 10 is 1, 10 divided by 7 is like 1 point something, um, that wouldn't make sense. 12 minus 7 is 5, 70, 70 maybe divided by 12? No, that's too small, 70, no, that's way too big, how about 120 minus 70, that's like 50, no. Um, I need, I need to get a 6, a 4, a 12, I already have a 12, but then I would need a 2. 10 plus 10 is 20, divided by 7, no, 10 minus that is 3, but that's not a 2, can I get a 12 and a 2, a 6 and a 4, 6 and a 4, or an 8 and a 3, I can get a 3 here, there's no way to get an 8. Uh, a 1 and a 24, that wouldn't work, this would give us 20, plus, 3rd, no, that wouldn't make sense, 1, 2, 3, I could get a 3 here, but how do I get an 8? There's no way to get an 8.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 7, that's going to give 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 10, 10),
    comment='""12 minus 7, that\'s going to give 5""',
)

# ""10 minus 7, that's 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 10, 12),
    comment='""10 minus 7, that\'s 3""',
)

# ""3 times 12, 3 times 12 would be 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(10, 36),
    comment='""3 times 12, 3 times 12 would be 36""',
)

# ""3 times 10, that would be 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(12, 30),
    comment='""3 times 10, that would be 30""',
)

# ""10 minus 10, 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-10=0"",
    resulting_state=(0, 7, 12),
    comment='""10 minus 10, 0""',
)

# ""12 divided by 10, that would be like 1.2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/10=1.2"",
    resulting_state=(1.2, 7, 10),
    comment='""12 divided by 10, that would be like 1.2""',
)

# ""10 divided by 10 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 7, 12),
    comment='""10 divided by 10 is 1""',
)

# ""10 divided by 7 is like 1 point something""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/7=1.43"",
    resulting_state=(1.43, 10, 12),
    comment='""10 divided by 7 is like 1 point something""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 10, 10),
    comment='""12 minus 7 is 5""',
)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(7, 12, 20),
    comment='""10 plus 10 is 20""',
)

# ""divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20/7=2.86"",
    resulting_state=(2.86, 12),
    comment='""divided by 7""',
)

# The participant then talks about needing various numbers (6, 4, 12, 2, etc) but doesn't actually perform operations to get them
# They seem to be setting mental subgoals but not actually trying operations to reach them

# The participant ends by saying they can't find a way to get to 8, which seems to be another subgoal
graph.set_subgoal((8,), comment='""how do I get an 8? There\'s no way to get an 8""')
```"
4120,"[7,9,9,13]",(13-7)+9+9,52," Okay, so 13 minus 7 is going to give us 6. 6, and then any way to get 4? No. But we can get a 2. That would give us 2. Any way to get a 12? No. How about a 6? 13 minus 7 gives us 6, but then there's no way to get a 4. 6 plus 6, so 13 minus 7 plus 9. 9 plus 9.","```python
start_state = (7, 9, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 7 is going to give us 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 9),
    comment='""13 minus 7 is going to give us 6""',
)

# ""But we can get a 2"" - participant seems to be trying to get to 24 by finding ways to multiply to 24
# They may be setting a subgoal of finding factors of 24
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""But we can get a 2"" - participant seems to be trying to get factors of 24',
)

# ""13 minus 7 gives us 6"" - participant goes back to this operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 9),
    comment='""13 minus 7 gives us 6""',
)

# ""13 minus 7 plus 9. 9 plus 9"" - participant finds the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+9+9=24"",
    resulting_state=(24,),
    comment='""13 minus 7 plus 9. 9 plus 9""',
)
```"
4124,"[3,9,10,13]",13-9,180," tough and tough and tough. Must get this one now. I must get this one now. This 3 is 9, 10th and 13th. I will put the hand up there. 13 minus 9 and 10 divided by 2 is 3. 13 minus 9. Let me see. 13 minus 9. I think it should be plus. Okay. I gave it. Times 10 divided by 3. Okay. I'm not doing this one. Delete times 10 divided by 2 is 3. 13 minus 3. Okay. Okay. Okay. Okay. Let's see what we'll do now. 13 minus 1 times 10 is 20. 13 minus 2 is 1. 13 minus 10. That will be 3 times 3. 18 plus 9. That will not work. Then 9. 9 minus 6. This one is 6. 6 times 10. No. That will be 60. Okay. Okay. This one divided by this one is 3. 3. 3. 3 times. What do we do? Okay. Let's start with 10 minus 9. That is 1, right? 1 times 13. Times 13 times 3. No. 1 times 13 is not working. It should start with 13 minus something like 9. So, this will be like 4. So, 4. 4.","```python
start_state = (3, 9, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 9 and 10 divided by 2 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 10),
    comment='""13 minus 9""',
)

# ""Times 10 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/3=3.33"",
    resulting_state=(3.33, 9, 13),
    comment='""Times 10 divided by 3""',
)

# ""13 minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(9, 10, 10),
    comment='""13 minus 3""',
)

# ""13 minus 10. That will be 3 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 3, 9),
    comment='""13 minus 10. That will be 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 9),
    comment='""times 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(18,),
    comment='""18 plus 9""',
)

# ""9 minus 6. This one is 6. 6 times 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(6, 10, 13),
    comment='""9 minus 6. This one is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(13, 60),
    comment='""6 times 10""',
)

# ""10 minus 9. That is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 3, 13),
    comment='""10 minus 9. That is 1""',
)

# ""1 times 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*13=13"",
    resulting_state=(3, 13),
    comment='""1 times 13""',
)

# ""13 minus something like 9. So, this will be like 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 10),
    comment='""13 minus something like 9. So, this will be like 4""',
)
```"
4125,"[1,4,7,12]",(7-4-1)x12,93," This one is tough. This one is tough. It should be 2. This one is 3. Oh, right. I get this one. 7 minus 4. That is 3. Right? Minus 1. That is 2. Minus 2. 2 times 12. See, it is the truth. This is 4, 3, 2. 2 times is 1. So why is it incorrect? Okay. Okay. Let us start the bracket. 7 minus 4. Open the bracket. Then it will be 3. 3 minus 3 times 12. It will not work. So it should be at least that one. Minus again. 1. Okay. So times 12. Submit.","```python
start_state = (1, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""This one is tough. This one is tough. It should be 2."" The participant seems to be setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""It should be 2"" suggests participant wants to get 2 to multiply by 12',
)

# ""7 minus 4. That is 3. Right? Minus 1. That is 2.""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4-1=2"",
    resulting_state=(2, 12),
    comment='""7 minus 4. That is 3. Right? Minus 1. That is 2.""',
)

# ""2 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='""2 times 12""',
)

# ""Let us start the bracket. 7 minus 4. Open the bracket. Then it will be 3.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(1, 3, 12),
    comment='""7 minus 4. Open the bracket. Then it will be 3.""',
)

# ""3 minus 1 times 12. It will not work.""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3-1)*12=24"",
    resulting_state=(24,),
    comment='""3 minus 3 times 12. It will not work.""',
)

# The participant then goes back to their original successful approach:
# ""Minus again. 1. Okay. So times 12.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4-1)*12=24"",
    resulting_state=(24,),
    comment='""Minus again. 1. Okay. So times 12.""',
)
```"
4129,"[2,7,7,10]",(10-7-2),180," Okay, I'm getting this now. 10 minus 7 is 3. 3 times 7 is 30. No, no, no, no. I'm not doing it. Oh. Oh, yeah, yeah. Yes, this is it. 10 minus 7 is 3. Then times. Times. Mm-hmm. Oh, it should be plus. Then plus. 14. 14. I have thought of it. 3 times. 2. Mm-hmm. 8 times 1 plus 8 times 1 is 4. 8 times 8 times 1 is 14. Right? 10 plus 10. Okay. Let's do this. Another idea. 14. 8 times 1 is 0. 8 times 1 is 14. Right? 14. Okay. Okay. It will be 3. All right. Times 2. 10. 10 plus. Oh, man. 14 times 3. It will not be. It will not be 7 here because no. Okay. 10 minus 7. Okay. Let's put brackets. 10 minus 2. That will be 8. 8 plus 14. Yes, that is it. No. It is still less than 2. 10 minus 2. It will be 8. Ah. Okay. 2 times 10 minus 7 is 3. Right? Plus. 7 times 2. 14. It will not make sense. Right? It will not. Mm-hmm. This is 3. 3 minus 2. 2 is equal to 1. What about we add? When we add this, it will be 14 plus 10.","```python
start_state = (2, 7, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 7),
    comment='""10 minus 7 is 3""',
)

# ""3 times 7 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=30"",
    resulting_state=(2, 30),
    result_calc_error=True,
    comment='""3 times 7 is 30"" - calculation error',
)

# ""8 times 1 plus 8 times 1 is 4"" seems to be a transcription error or unclear thinking
# ""8 times 8 times 1 is 14"" seems to be a calculation error

# ""10 minus 2. That will be 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(7, 7, 8),
    comment='""10 minus 2. That will be 8""',
)

# ""2 times 10 minus 7 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10-7=13"",
    resulting_state=(7, 13),
    comment='""2 times 10 minus 7 is 3"" - though their calculation seems wrong',
)

# ""7 times 2. 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(7, 10, 14),
    comment='""7 times 2. 14""',
)

```"
4131,"[1,11,13,13]",(13-11)x(13-1),152," I have 1, 11, 13, and 13. So if I do 13 plus 13, I would have 26, which is not right. If I have 13 minus 1, that would be 12. If I do 13 minus 1, I would have 12. If I do 13 times 11, that would be... 141. Hmm. If I do 11 plus 13, that would be... 24. But then I have... 13. 13 that I would still have to work with. If I do 12 times... 13... that wouldn't give it to me either. What about... 13 times 13... 169. 13 minus 11 gives you... 2. 2 times 13 minus 1... will give 24. Okay, so... 13 minus 11... is 2. Multiplied by... 13 minus 1... is 12. In parentheses.","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13, I would have 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(1, 11, 26),
    comment='""13 plus 13, I would have 26""',
)

# ""13 minus 1, that would be 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(11, 12, 13),
    comment='""13 minus 1, that would be 12""',
)

# ""13 times 11, that would be... 141""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=141"",
    resulting_state=(1, 13, 141),
    result_calc_error=True,
    comment='""13 times 11, that would be... 141""',
)

# ""11 plus 13, that would be... 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(1, 13, 24),
    comment='""11 plus 13, that would be... 24""',
)

# ""13 times 13... 169""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(1, 11, 169),
    comment='""13 times 13... 169""',
)

# ""13 minus 11 gives you... 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 13),
    comment='""13 minus 11 gives you... 2""',
)

# ""2 times 13 minus 1... will give 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*(13-1)=24"",
    resulting_state=(24,),
    comment='""2 times 13 minus 1... will give 24""',
)
```"
4133,"[7,10,11,13]",,180," 7, 10, 11, and 13. If I do 10 minus 7, that would give me 3. And then I would have 11 and 13 left. If I do 13 minus 10, that's 3. That's not right. If I do 7 plus 13, that's 20. 7 plus 11 is 18. 10 plus 13 is 23. 13 plus 11 is 24. So... If I do 7 times 11, that's 77. If I do 7 times 11, that's 77. And I can't divide that by anything. So it's not that. If I do... 110 divided by 7... 10 plus 11 is 21. Plus 7 is 28. And that's also too much. 11 minus 7 is 4. 4 times 13... times 13 is 64. No. 13 times 7...","```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 7, that would give me 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 11, 13),
    comment='""10 minus 7, that would give me 3""',
)

# ""13 minus 10, that's 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 7, 11),
    comment='""13 minus 10, that\'s 3""',
)

# ""7 plus 13, that's 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(10, 11, 20),
    comment='""7 plus 13, that\'s 20""',
)

# ""7 plus 11 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(10, 13, 18),
    comment='""7 plus 11 is 18""',
)

# ""10 plus 13 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(7, 11, 23),
    comment='""10 plus 13 is 23""',
)

# ""13 plus 11 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(7, 10, 24),
    comment='""13 plus 11 is 24""',
)

# ""7 times 11, that's 77""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*11=77"",
    resulting_state=(10, 13, 77),
    comment='""7 times 11, that\'s 77""',
)

# ""10 plus 11 is 21. Plus 7 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11+7=28"",
    resulting_state=(13, 28),
    comment='""10 plus 11 is 21. Plus 7 is 28""',
)

# ""11 minus 7 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 10, 13),
    comment='""11 minus 7 is 4""',
)

# ""4 times 13... times 13 is 64""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*13=64"",
    resulting_state=(10, 64),
    comment='""4 times 13... times 13 is 64""',
    result_calc_error=True,
)

# ""13 times 7..."" participant starts another calculation but doesn't finish
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(10, 11, 91),
    comment='""13 times 7...""',
)
```"
4138,"[5,8,9,11]",,180," I have 5, 8, 9, and 11. 9 plus 11 would give 20. And I wouldn't be able to do anything with the other two. If I do 5 plus 9, it's 14. 14 plus 11 would be 25. Can't do anything with that. Oh, I can do 11 plus 9, or 11 plus 5 is 16. 16 plus 9 is 25. No. If I do 9 times 8, no. 9 times 5 is 45. No. 9 times... 8 plus 11, 19. 19 plus 5 would give 24, but then I have 9 left over. 5 plus 8, 13. 13 plus 11, 24. And I still have 9 left over. 13 times 9. 13 times 9 still wouldn't be able to reach 24. 11 minus 9 is 2. 2 times 8 is... 16. That would also not give it. 11 minus 8, 3. 9 minus 4. 9 minus 5 is 4. 3 times 4 is just 12. 11 minus 5 is 6. No. Oh, 9 minus... No. Nope. 9 minus 5 is 4. 8 minus 5 is 3. 7 minus 5. 10 minus 3. 10 minus 5.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 11 would give 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(5, 8, 20),
    comment='""9 plus 11 would give 20""',
)

# ""If I do 5 plus 9, it's 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9=14"",
    resulting_state=(8, 11, 14),
    comment='""If I do 5 plus 9, it\'s 14""',
)

# ""14 plus 11 would be 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+11=25"",
    resulting_state=(8, 25),
    comment='""14 plus 11 would be 25""',
)

# ""11 plus 5 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(8, 9, 16),
    comment='""11 plus 5 is 16""',
)

# ""16 plus 9 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=25"",
    resulting_state=(8, 25),
    comment='""16 plus 9 is 25""',
)

# ""9 times 5 is 45""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(8, 11, 45),
    comment='""9 times 5 is 45""',
)

# ""8 plus 11, 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(5, 9, 19),
    comment='""8 plus 11, 19""',
)

# ""19 plus 5 would give 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+5=24"",
    resulting_state=(9, 24),
    comment='""19 plus 5 would give 24""',
)

# ""5 plus 8, 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(9, 11, 13),
    comment='""5 plus 8, 13""',
)

# ""13 plus 11, 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(9, 24),
    comment='""13 plus 11, 24""',
)

# ""11 minus 9 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 5, 8),
    comment='""11 minus 9 is 2""',
)

# ""2 times 8 is... 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(5, 16),
    comment='""2 times 8 is... 16""',
)

# ""11 minus 8, 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 5, 9),
    comment='""11 minus 8, 3""',
)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(3, 4, 8),
    comment='""9 minus 5 is 4""',
)

# ""3 times 4 is just 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 12),
    comment='""3 times 4 is just 12""',
)

# ""11 minus 5 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(6, 8, 9),
    comment='""11 minus 5 is 6""',
)

# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 8, 11),
    comment='""9 minus 5 is 4""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 9, 11),
    comment='""8 minus 5 is 3""',
)

```"
4140,"[1,4,5,6]",,180," I have 1, 5, 4, and 6. If I do 5 minus 1, that's 4. But, that wouldn't really help. If I do 5 times 6, that's 30. 30 minus 5 is just 25, so no. If I do 6, if I do 6 times 6, no, that wouldn't work. If I do 6 times 3, that's 18. 18 plus 5 is not 30. Fourteen... Four times... Three times five... Fifteen plus six, no. Two times five also doesn't work. Five times five... Twenty-five... Also doesn't work. Four times... Four is sixteen. Three times six is eighteen. Twenty-five... What about... Five... Five times six, which is thirty... But, no. Fifteen... Fifteen times six is thirty... Fifteen times six is thirty... But, no. Oh, what about 1 plus 4, 5? Five times... No. One plus five is six. One plus five is six. Six times six is thirty. 36 no 1 plus 6 is 7 7 times 4 is 21 no no 1 plus 5 is 6 6 times 6 is 36 no 1 plus","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I do 5 minus 1, that's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 4, 6),
    comment='""If I do 5 minus 1, that\'s 4""',
)

# ""If I do 5 times 6, that's 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 4, 30),
    comment='""If I do 5 times 6, that\'s 30""',
)

# ""Four times... Four is sixteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(1, 5, 6, 16),
    comment='""Four times... Four is sixteen""',
)

# ""Five times six, which is thirty""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 4, 30),
    comment='""Five times six, which is thirty""',
)

# ""One plus five is six""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(4, 6, 6),
    comment='""One plus five is six""',
)

# ""Six times six is thirty""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(4, 36),
    comment='""Six times six is thirty""',
)

# ""1 plus 6 is 7 7 times 4 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(4, 5, 7),
    comment='""1 plus 6 is 7""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(5, 28),
    comment='""7 times 4 is 21"" though their calculation seems off',
)

# ""1 plus 5 is 6 6 times 6 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(4, 6, 6),
    comment='""1 plus 5 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(4, 36),
    comment='""6 times 6 is 36""',
)
```"
4144,"[3,5,6,8]",,180," Okay, so, basically, 14 and 9, oh, that's, oh, huh, 3 times 5 would be 15, 15 plus, hmm, 6 divided by 3 is 2, 8 times 5 is 40, 2 plus 14 would be 16. How about 5 times 6 is 30? No, because that would be only minus 5, hmm, okie dokie. So, how about 8 minus 3 is 5, hmm, 8 minus 6 is 2, 2 times 5 is 10, plus 3, now, hmm, so, I don't really see it here as easy. So, let's, let's think here for a sec. 5 plus 8 is 13, hmm, so, how about 6 plus 8 is 14, hmm, 6 plus 8 is 14 times 5 divided by 3. That would be 23 and one-third. I don't know, huh. How about 5 plus 6 is 11, and then 8 and 3 is 11. So, those are both 11, hmm. 6 plus 3 is 9. So, 6 plus 3 is 9 times 8, 72 divided by 5, dang, hmm, so, let's do 5 minus 3, which is 2 times 8 plus 6, ah, close. So, if we need to get 2 more, ah, there's no 7, so, we did, well, hold on, if we did 6 minus 3, so, 6 minus 3 would be 3, 3 times 8.","```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 5 would be 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(6, 8, 15),
    comment='""3 times 5 would be 15""',
)

# ""6 divided by 3 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 5, 8),
    comment='""6 divided by 3 is 2""',
)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(3, 6, 40),
    comment='""8 times 5 is 40""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(3, 8, 30),
    comment='""5 times 6 is 30""',
)

# ""8 minus 3 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-3=5"",
    resulting_state=(5, 5, 6),
    comment='""8 minus 3 is 5""',
)

# ""8 minus 6 is 2, 2 times 5 is 10, plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-6)*5+3=13"",
    resulting_state=(13,),
    comment='""8 minus 6 is 2, 2 times 5 is 10, plus 3""',
)

# ""5 plus 8 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(3, 6, 13),
    comment='""5 plus 8 is 13""',
)

# ""6 plus 8 is 14 times 5 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+8)*5/3=23.33"",
    resulting_state=(23.33,),
    comment='""6 plus 8 is 14 times 5 divided by 3""',
)

# ""5 plus 6 is 11, and then 8 and 3 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6=11"",
    resulting_state=(3, 8, 11),
    comment='""5 plus 6 is 11""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+3=11"",
    resulting_state=(5, 6, 11),
    comment='""and then 8 and 3 is 11""',
)

# ""6 plus 3 is 9 times 8, 72 divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+3)*8/5=14.4"",
    resulting_state=(14.4,),
    comment='""6 plus 3 is 9 times 8, 72 divided by 5""',
)

# ""5 minus 3, which is 2 times 8 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-3)*8+6=22"",
    resulting_state=(22,),
    comment='""5 minus 3, which is 2 times 8 plus 6""',
)

# ""6 minus 3 would be 3, 3 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-3)*8=24"",
    resulting_state=(5, 24),
    comment='""6 minus 3 would be 3, 3 times 8""',
)
```"
4145,"[8,9,9,12]",,180," 9 and 9, 8 and 9 is 17, so how about 12 times 9, 12 times 9 is 108, minus 9, 99, divided by 8, so how about 9 minus 8, hmm, 9 plus 9, 9 plus 9 minus 8, 12, 120. How about 12 times 9? 8 times 9, 8 times 9, 72, 9 times 12, minus 72, 836, which is a multiple of, hmm, oh, so 108 minus 81, that's 27 though, so, oh, excuse me, 9 plus 9 minus 8, that's 12, that's 22. So let's do 9 minus 8 plus 9, no, let's do 12 times 8, which is 96, minus 81, which would be just 15. How about 12? 8.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 and 9, 8 and 9 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(9, 12, 17),
    comment='""8 and 9 is 17""',
)

# ""12 times 9 is 108""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(8, 9, 108),
    comment='""12 times 9 is 108""',
)

# ""minus 9, 99""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108-9=99"",
    resulting_state=(8, 99),
    comment='""minus 9, 99""',
)

# ""divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""99/8=12.38"",
    resulting_state=(12.38,),
    comment='""divided by 8""',
)

# ""9 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 9, 12),
    comment='""9 minus 8""',
)

# ""9 plus 9 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9-8=10"",
    resulting_state=(10, 12),
    comment='""9 plus 9 minus 8""',
)

# ""8 times 9, 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(9, 12, 72),
    comment='""8 times 9, 72""',
)

# ""9 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(8, 9, 108),
    comment='""9 times 12""',
)

# ""12 times 8, which is 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(9, 9, 96),
    comment='""12 times 8, which is 96""',
)

```"
4151,"[3,3,7,13]",,184," Alright, 24. Ooh, this gets tougher. 13 minus 3, get you 10. 7 times 3, get you 21. 13 times 3, get you 39. 13 sucks. 13 minus 7, get you 6. 6 times 3, get you 18. 6 times 7, get you 42. 13 minus 3, get you 10. 7 minus 3, get you 4. 13 times 3. That's not an even number. 13 plus 7, that's 20. But 20 to 24, to 3, it doesn't work out well. 3 times 3, get you 9. Plus 13 is 22. That's 7, doesn't work out. 7 times 3 is 21. This is tough, I don't know. I don't know. 13 minus 6, get you 7. That doesn't help. 13 minus 7, that's 6. 33, that, no way that gets to 24. I don't think so. 3 times, 3 times 6, nope. 3 times 3, plus... Ah, 3 plus 3 is 9. 3 plus 3 is 9. Hmm. I don't freaking know. 7 times 3, 21, plus 13. Yeah, I know. This, I don't know. Can't do it. 13 plus 7. Plus 3. But I have an extra 21, and I got a 3. 13 divided by 3 doesn't do us any good. 3 divided by 3 gets you...","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 3, get you 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(3, 7, 10),
    comment='""13 minus 3, get you 10""',
)

# ""7 times 3, get you 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3, get you 21""',
)

# ""13 times 3, get you 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(3, 7, 39),
    comment='""13 times 3, get you 39""',
)

# ""13 minus 7, get you 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7, get you 6""',
)

# ""6 times 3, get you 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 18),
    comment='""6 times 3, get you 18""',
)

# ""13 minus 3, get you 10"" - participant repeats earlier calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(3, 7, 10),
    comment='""13 minus 3, get you 10"" - participant repeats earlier calculation',
)

# ""7 minus 3, get you 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(3, 4, 13),
    comment='""7 minus 3, get you 4""',
)

# ""13 plus 7, that's 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(3, 3, 20),
    comment='""13 plus 7, that\'s 20""',
)

# ""3 times 3, get you 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(7, 9, 13),
    comment='""3 times 3, get you 9""',
)

# ""Plus 13 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(7, 22),
    comment='""Plus 13 is 22""',
)

# ""13 minus 7, that's 6"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7, that\'s 6""',
)

# ""3 plus 3 is 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 7, 13),
    comment='""3 plus 3 is 9"" - participant makes calculation error',
    result_calc_error=True,
)

# ""7 times 3, 21, plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3+13=34"",
    resulting_state=(3, 34),
    comment='""7 times 3, 21, plus 13""',
)

# ""13 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13/3=4.33"",
    resulting_state=(3, 4.33, 7),
    comment='""13 divided by 3""',
)
```"
4154,"[1,11,12,12]",12,180," 1, 11, 12, 12, 12. 12 plus 12 gets you 24, but what about 11 and 1? Times 1 times 11. 11 times 1 is 11. 11 plus 1 is 12. 12 plus 12. Plus 12, I won't get it. 12 divided by 12 gets you 1. Oh hell 12 times 12 is way too much Divided by 12 Yeah I'm talking 12 Divided by 11 minus 1 10 That doesn't seem to help 12 times 11 132 divided by 12 Back to 11 Yep should have known that 12 plus 11 plus 1 But I want to do it the other freaking 12 How do I cancel out a 12 12 divided by 12 gets you 1 I don't want a 1 I want to just cancel a 12 out 12 plus minus 12 12 12 12 I'm not sure how to do this one either 3 twelves to make 24 Or I got a 12 and 10 And a 12 I am talking out loud 12 12 and 10 That doesn't really help About 11 plus 11 And a 12 Also doesn't help I don't know Seems impossible 12 Times 12 Divided by 11 Gets you a stupid number 12 times 11 I'm fucking talking out loud I don't know 1 and 11 and 12 and 12 12 12 times 11","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 gets you 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""12 plus 12 gets you 24""',
)

# ""Times 1 times 11. 11 times 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*1=11"",
    resulting_state=(11, 12, 12),
    comment='""Times 1 times 11. 11 times 1 is 11""',
)

# ""11 plus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+1=12"",
    resulting_state=(12, 12, 12),
    comment='""11 plus 1 is 12""',
)

# ""12 divided by 12 gets you 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 1, 11),
    comment='""12 divided by 12 gets you 1""',
)

# ""12 times 12 is way too much""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 times 12 is way too much""',
)

# ""12 times 11 132""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(1, 12, 132),
    comment='""12 times 11 132""',
)

# ""divided by 12"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""132/12=11"",
    resulting_state=(1, 11),
    comment='""divided by 12""',
)

# ""12 plus 11 plus 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11+1=24"",
    resulting_state=(12, 24),
    comment='""12 plus 11 plus 1""',
)

# ""12 divided by 12 gets you 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 1, 11),
    comment='""12 divided by 12 gets you 1""',
)

# ""12 Times 12 Divided by 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12/11"",
    resulting_state=(1, 12, 13.09),
    comment='""12 Times 12 Divided by 11""',
)

# ""12 times 11"" participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""12*11=132"",
    resulting_state=(1, 12, 132),
    comment='""12 times 11""',
)
```"
4155,"[5,6,7,7]",,180," 7, 7, 6, 5. Okay, 7 plus 7 plus 6 plus 5. Not quite that easy. 7 times 5? Minus 7 minus 6? No. 7 times 6? Minus 7 minus 5? Nope. 7 times 7 is 49. 5 times 6 is 34. Those subtracted don't work either. 7 times 7 is 49. Not great. 7 times 6 is 42. 7 times 5 is 35. Divide that by 6. No. 7, 5 times 6? Divide that by 7? Nope. 5, no. 5 times 6 minus 7 doesn't work either. 7 times 7 is not going to go to 6. And 6 times 4 equals 24. 6 times 4? How do I get 4 out of this? 7 minus 5 is 2. 2. 7. How do I get a 4? How do I get a 4? 7 times 7? No. 7 plus 7 minus 5? No. 7 plus 5 minus 6? You need a 4 times 6. Well, what goes up to 30? 5 times 6 is 30. You need that minus 6, though. I haven't used division at all. But I don't know how that works either. 5 times 6. These numbers don't divide easily. 5 times 6. 7 times 24. Times 7 equals 168. 120 is 24 times 5. 120 divided by 6 is 20. Divided by 7 is a bad number. 120 divided by what equals 24? 5. Yeah. I should have known that. How do I get 7 times 7? 6 to equal 5. 5. 6. 6.","```python
start_state = (5, 6, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 plus 6 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+6+5=25"",
    resulting_state=(25,),
    comment='""7 plus 7 plus 6 plus 5""',
)

# ""7 times 5? Minus 7 minus 6?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5-7-6=22"",
    resulting_state=(22,),
    comment='""7 times 5? Minus 7 minus 6?""',
)

# ""7 times 6? Minus 7 minus 5?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6-7-5=30"",
    resulting_state=(30,),
    comment='""7 times 6? Minus 7 minus 5?""',
)

# ""7 times 7 is 49""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(5, 6, 49),
    comment='""7 times 7 is 49""',
)

# ""5 times 6 is 34"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=34"",
    resulting_state=(7, 7, 34),
    comment='""5 times 6 is 34"" - calculation error',
    result_calc_error=True,
)

# ""7 times 6 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 7, 42),
    comment='""7 times 6 is 42""',
)

# ""7 times 5 is 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(6, 7, 35),
    comment='""7 times 5 is 35""',
)

# ""Divide that by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35/6=5.83"",
    resulting_state=(7, 5.83),
    comment='""Divide that by 6""',
)

# ""5 times 6 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6-7=23"",
    resulting_state=(7, 23),
    comment='""5 times 6 minus 7""',
)

# ""And 6 times 4 equals 24"" - participant sets a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""And 6 times 4 equals 24"" - participant sets a subgoal of getting 4',
)

# ""7 minus 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 6, 7),
    comment='""7 minus 5 is 2""',
)

# ""7 plus 7 minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7-5=9"",
    resulting_state=(6, 9),
    comment='""7 plus 7 minus 5""',
)

# ""7 plus 5 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5-6=6"",
    resulting_state=(6, 7),
    comment='""7 plus 5 minus 6""',
)

# ""5 times 6 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(7, 7, 30),
    comment='""5 times 6 is 30""',
)

# ""Times 7 equals 168""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30*7=210"",
    resulting_state=(7, 210),
    comment='""Times 7 equals 168"" - calculation error',
    result_calc_error=True
)

```"
4157,"[3,3,3,9]",,180," 9 times 3 is 27. 9 times 3 minus 3 does it, but I got an extra f in 3. 3 divided by 3 equals 1. 1 plus 3. 4 times 9 doesn't do it. 9 minus 3 gives me a 6. 6 times 3 times 3, nope. 6 times 6, no. 6 times 3 plus 3, no. 3 times 3 plus 6, no. 9 minus 3 minus 3 equals 3. 9 divided by 3. 3 times 3 times 3. 3 plus 3 doesn't do it. 3 plus 3 times 3 plus 9, nope. 9 times 3. How do I get rid of frickin' 3? 3 divided by 3. 3 equals 1. That doesn't work, right? No. 9 plus 3 gets 12. 12 times 3 is too much. 9 plus 3. 9 times 3. 9 times 3. Divide it by 3. No. 9 times 3 times 3, no. 9 times 6? 3 times 3 is dude. 9 plus 9 plus 3, no. 3. 11 times 3 is 12. nine three nine those work together in any way not that I can think of 36 30 and nine that's gotta do something right 6 times 36 times 9 divided by 3 no 9 times 9 divided by 3 no","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 3, 27),
    comment='""9 times 3 is 27""',
)

# ""9 times 3 minus 3"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(3, 24),
    comment='""9 times 3 minus 3""',
)

# ""3 divided by 3 equals 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 3, 3, 9),
    comment='""3 divided by 3 equals 1""',
)

# ""1 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+3=4"",
    resulting_state=(3, 4, 9),
    comment='""1 plus 3""',
)

# ""4 times 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(3, 36),
    comment='""4 times 9""',
)

# Going back to start state: ""9 minus 3 gives me a 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 3, 6),
    comment='""9 minus 3 gives me a 6""',
)

# ""6 times 3 times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3*3=54"",
    resulting_state=(54,),
    comment='""6 times 3 times 3""',
)

# Going back to start state for next operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3-3=3"",
    resulting_state=(3, 3),
    comment='""9 minus 3 minus 3 equals 3""',
)

# ""9 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 3, 3),
    comment='""9 divided by 3""',
)

# ""3 times 3 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3=27"",
    resulting_state=(9, 27),
    comment='""3 times 3 times 3""',
)

# ""3 plus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(3, 6, 9),
    comment='""3 plus 3""',
)

# ""9 plus 3 gets 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(3, 3, 12),
    comment='""9 plus 3 gets 12""',
)

# ""12 times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=36"",
    resulting_state=(3, 36),
    comment='""12 times 3""',
)

# ""9 times 3 times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3*3=81"",
    resulting_state=(3, 81),
    comment='""9 times 3 times 3""',
)
```"
4158,"[8,8,8,11]",,180," Divide that by 8, plus 8, no, 8 plus 8 is 16, 16 plus 8 is 24, can I get rid of that frickin' 11, what do I do with the 11, 11 minus 8 gives me 3, 3, 8, and 8, does that do something for me, 8 times 3 gives me 24, 8, 8, and 3. 8 times 8, 8 times 3 gives me 24, 8 times 8 divided by 3, no, 8 minus 8 gives me 0, that doesn't help, 11 minus 8 gives me 3, that doesn't seem to help either, 3, 8, and 8. 8 divided by 3, no, 8 plus 8 plus 3, no, 11, oh, it's 8 times 8 divided by 11, minus 11, nope, nope, 8 times 8 times 8 divided by 11, nope, 11 plus 8 is 19. I need 5. 5 left with 8 and 8, 8, 8, 8 and 3 doesn't work, 8 times 3, 8 times 8, 11 minus 8, 11 divided by 8, 11 plus 8 divided by 8, no, 11 plus 8 plus 8, 27, it doesn't help. 8 plus 8 divided by 8 times 11 doesn't work either 8 plus 11 times 11 is 88 88 divided by 8 gets back to 11 and all guys 11 and 8 left that doesn't work 11 11 11 11 11 11 11 8 plus 8","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 is 16, 16 plus 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+8=24"",
    resulting_state=(11, 24),
    comment='""8 plus 8 is 16, 16 plus 8 is 24""',
)

# ""11 minus 8 gives me 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8 gives me 3""',
)

# ""8 times 3 gives me 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(8, 24),
    comment='""8 times 3 gives me 24""',
)

# ""8 minus 8 gives me 0""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=0"",
    resulting_state=(0, 8, 11),
    comment='""8 minus 8 gives me 0""',
)

# ""8 times 8 divided by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8/11=5.82"",
    resulting_state=(5.82, 8),
    comment='""8 times 8 divided by 11""',
)

# ""8 times 8 times 8 divided by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8*8/11=46.55"",
    resulting_state=(46.55,),
    comment='""8 times 8 times 8 divided by 11""',
)

# ""11 plus 8 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(8, 8, 19),
    comment='""11 plus 8 is 19""',
)

# ""11 divided by 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/8=1.38"",
    resulting_state=(1.38, 8, 8),
    comment='""11 divided by 8""',
)

# ""11 plus 8 plus 8, 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8+8=27"",
    resulting_state=(8, 27),
    comment='""11 plus 8 plus 8, 27""',
)

# ""8 plus 8 divided by 8 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+8)/8*11=22"",
    resulting_state=(22,),
    comment='""8 plus 8 divided by 8 times 11""',
)
```"
4161,"[4,7,8,11]",,180," Alright, let's see, 88, 28, 88, 8, 11, 77, let's see, 44, they didn't say we couldn't use a calculator, I don't think, right, so 44 minus 8 minus 7, no, 28, that would be 20, no, no, 8 times 4 is 32 minus 11, 21, no, 56 minus 11, so 45, no, alright, let's see, 4 times 8 is 3. 32 plus 11, 5 by 7, yeah, no, alright, let me think, this makes me feel super stupid, 56 minus 11 equals 40, I did that already, let's try something else, 88 minus 11, no, do it again. 44 minus 7, ok? 9 times 7. Another 10, ok? could have been 3 times 6, right? 84 plus 7. 34 minus 7. 54 minus 7. 44-7. divided by 8 is not it. Hmm. 56 minus 4. No, that's not it. I wish they'd give you the answer after you do this. How many do I have to do? All right. 4 times 11 is 44. 44 plus 7 51 divided by 8 is not it. It's got to be just subtracting. So it's got to be like 44 minus 8 minus 7. No, that would have worked out better. That would have worked out better, though.","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""44 minus 8 minus 7"" - participant likely got 44 from 4*11
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(7, 8, 44),
    comment='""44"" participant computes 4*11',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44-8-7=29"",
    resulting_state=(29,),
    comment='""44 minus 8 minus 7""',
)

# ""8 times 4 is 32 minus 11, 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4-11=21"",
    resulting_state=(7, 21),
    comment='""8 times 4 is 32 minus 11, 21""',
)

# ""56 minus 11"" - participant likely got 56 from 7*8
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 11, 56),
    comment='""56"" participant computes 7*8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56-11=45"",
    resulting_state=(4, 45),
    comment='""56 minus 11, so 45""',
)

# ""4 times 8 is 32 plus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8+11=43"",
    resulting_state=(7, 43),
    comment='""4 times 8 is 32 plus 11""',
)

# ""88 minus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(4, 7, 88),
    comment='""88"" participant computes 8*11',
)

# ""44 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(7, 8, 44),
    comment='""44"" participant computes 4*11 again',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44-7=37"",
    resulting_state=(8, 37),
    comment='""44 minus 7""',
)

# ""56 minus 4"" - using 56 from earlier 7*8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(4, 11, 56),
    comment='""56"" participant computes 7*8 again',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56-4=52"",
    resulting_state=(11, 52),
    comment='""56 minus 4""',
)

# ""4 times 11 is 44. 44 plus 7 51 divided by 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*11=44"",
    resulting_state=(7, 8, 44),
    comment='""4 times 11 is 44""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(44+7)/8=6.38"",
    resulting_state=(6.38,),
    comment='""44 plus 7 51 divided by 8""',
)

```"
4165,"[4,4,9,11]",((11+4)-9)x4,177," How many more? Oh my gosh. 2, 8, 4 divided by 4 could be 1, let me see, 11, 7, 8, 9, 10, 11, 2, 2 and 4. I really should think about the factors, right? I need to get a math RTI teacher. I should do this better. All right, 2 and 12 and 6 and 4 and 3 and 8 is what we're looking for. Oh, and I didn't do a 12 and 2. Okay. And 1 and 24, but that's not going to happen, I don't think. So I have 36 divided by 4 would be 9. No, that's stupid. 16 minus 11 will do me no good because that gives me a 5. How can I get 12 and 2 out of this? 2. If we subtract those, we would get 2. 4 plus 4 could be 8. Maybe 16. 11 minus 9 would be 2 times 4 is 8. 8 times 4 is 32. 16. No, that won't work. This didn't help. 11 minus 4 is 7. 7 and 5, 35, that won't work. 16 minus 9 equals 7. No. Definitely have to subtract that 11 or add. What about 15 minus 9 is 6 times 4. There we go. 15 minus 9. How did I get 15? Okay, I did. 11 plus 4. So that's 15 minus 9. 15 minus 9 times 4. Oh, I got my parentheses in the wrong place. I don't know if I can do double parentheses. 11 plus 4 minus 9 times 4. 11 plus 4. Oops. Minus 9 times 4. .","```python
start_state = (4, 4, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 divided by 4 could be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 4, 9, 11),
    comment='""4 divided by 4 could be 1""',
)

# The participant then lists some factors of 24 while thinking

# ""16 minus 11 will do me no good because that gives me a 5""
# This suggests they tried 4*4=16 first
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(9, 11, 16),
    comment='""16 minus 11..."" suggests they computed 4*4=16 first',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16-11=5"",
    resulting_state=(5, 9),
    comment='""16 minus 11 will do me no good because that gives me a 5""',
)

# ""4 plus 4 could be 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(8, 9, 11),
    comment='""4 plus 4 could be 8""',
)

# ""11 minus 9 would be 2 times 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 4, 4),
    comment='""11 minus 9 would be 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(4, 8),
    comment='""2 times 4 is 8""',
)

# ""8 times 4 is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(32,),
    comment='""8 times 4 is 32""',
)

# ""11 minus 4 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(4, 7, 9),
    comment='""11 minus 4 is 7""',
)

# ""What about 15 minus 9 is 6 times 4""
# First they compute 11+4=15
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4=15"",
    resulting_state=(4, 9, 15),
    comment='""How did I get 15? Okay, I did. 11 plus 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-9=6"",
    resulting_state=(4, 6),
    comment='""15 minus 9 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""6 times 4""',
)
```"
4176,"[3,3,6,12]",(12-6)x(3x3),180," 3, 3, 6, and 12. 12 minus 6 gets me 6. 6 times 3 gets me 18, times 3 is way too much. ... ... ... ... 12 minus 3 will get me 9. 9 times 3 is 24. 27 minus 3... ... ... that's where I can do six man I can do 12 minus 3 times 6 minus 3 right yeah there we go so for the series 12 minus 3 times for this is 6 minus 3 that's right no 9 times 3 that's 27 damn it hey 12 times I'm just guessing now this one's tough Abracadabra this one is hard This one's tough I'm just giving up I just kept saying stuff I just kept saying stuff I just kept saying stuff things things Um, this one, I don't know, I'm drawing a blank on this one, I don't even know where to start. I thought I had it, but I'm three off, so...","```python
start_state = (3, 3, 6, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 6 gets me 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 3, 6),
    comment='""12 minus 6 gets me 6""',
)

# ""6 times 3 gets me 18, times 3 is way too much""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 18),
    comment='""6 times 3 gets me 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18*3=54"",
    resulting_state=(54,),
    comment='""times 3 is way too much""',
)

# ""12 minus 3 will get me 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(3, 6, 9),
    comment='""12 minus 3 will get me 9""',
)

# ""9 times 3 is 24"" (miscalculation)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=24"",
    resulting_state=(6, 24),
    comment='""9 times 3 is 24"" (miscalculation)',
    result_calc_error=True,
)

# ""27 minus 3"" participant realizes 9*3=27
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(6, 27),
    comment='""27 minus 3"" participant realizes 9*3=27',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(6, 24),
    comment='""27 minus 3""',
)

# ""12 minus 3 times 6 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-3)*6-3=51"",
    resulting_state=(3, 51),
    comment='""12 minus 3 times 6 minus 3""',
)

# Based on the final response (12-6)x(3x3), the participant must have eventually tried:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 12),
    comment=""Based on final response, participant multiplied 3*3"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-6)*9=54"",
    resulting_state=(54,),
    comment=""Based on final response, participant multiplied (12-6) by 9"",
)

```"
4178,"[1,5,10,12]",(10/(5x1))x12,86, should we have 22 23 and then I don't know yeah I'm talking I'm talking okay we got one five ten and twelve is there any way we can get two oh yeah we can okay so ten divided by five times one times twelve I guess let's do some this divided by this boom boom times twelve so five times one five ten divided by five two times twelve yeah,"```python
start_state = (1, 5, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""should we have 22 23"" seems to be adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(1, 5, 22),
    comment='""should we have 22 23"" seems to be adding numbers',
)

# ""is there any way we can get two"" suggests participant is setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""is there any way we can get two""',
)

# ""ten divided by five times one""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/(5*1)=2"",
    resulting_state=(2, 12),
    comment='""ten divided by five times one""',
)

# ""times twelve""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='""times twelve""',
)

```"
4179,"[6,6,8,9]",,180," Okay. Okay. Wait, this was easy. Right? Oh. Maybe not. Huh. 6, 6, 8, and 9? Well... We have the 8 goes into 24. So we would have to get 3 from 6, 6, and 9. We could do like... Huh. Alright, what else can we do? We can do 1, 2, 3, 4, 6. Hmm. I think... 6 plus 6 is 12. Then we can get 2. Like... 9 minus 6 is 3. Is there any way to get 4? Oh, oh, oh! Wait, no. Fuck. I'm sorry. Uh... Hmm. 9 minus 6, 3. How? 2. Maybe like... fuckin'... What is 6 times 9? 54? What is 6 times 8? 48? Huh. 48... Divided by 2 somehow... 6 times 6 is 36. Divided by 9 is 4. Uhh... 9 times 8 is 72. Divided by 6...","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We have the 8 goes into 24. So we would have to get 3"" - participant sets a subgoal of getting 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""We have the 8 goes into 24. So we would have to get 3""',
)

# ""6 plus 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(8, 9, 12),
    comment='""6 plus 6 is 12""',
)

# ""9 minus 6 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 6, 8),
    comment='""9 minus 6 is 3""',
)

# ""What is 6 times 9? 54?""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(6, 8, 54),
    comment='""What is 6 times 9? 54?""',
)

# ""What is 6 times 8? 48?""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(6, 9, 48),
    comment='""What is 6 times 8? 48?""',
)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(8, 9, 36),
    comment='""6 times 6 is 36""',
)

# ""Divided by 9 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/9=4"",
    resulting_state=(4, 8),
    comment='""Divided by 9 is 4""',
)

# ""9 times 8 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(6, 6, 72),
    comment='""9 times 8 is 72""',
)

# ""Divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/6=12"",
    resulting_state=(6, 12),
    comment='""Divided by 6""',
)
```"
4180,"[2,2,7,10]",,180," As you perform the task, try to say aloud everything that comes seven this can't do can't who plus or minus with seven get an odd number we needed to end with two so maybe like there's a twelve I can't divide there's no division unless we parentheses three times six two times two four seven how the hell do you get 7 in here 7 times 2 is 14 plus 10 is 24 of them have to 7 times 2 man 7 times 2 was this extra to do in here 7 7 times 2 so that's 2 is 14 times 2 is 28 doesn't do anything 7 times 2 14 times 10 and 40 doesn't do anything 2 times 10 20 oh wait no","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""seven this can't do can't who plus or minus with seven get an odd number""
# The participant seems to be thinking about properties of 7

# ""we needed to end with two so maybe like there's a twelve""
# Participant seems to set a subgoal of getting to 12
graph.set_subgoal((12,), state_after_subgoal=(24,), comment='""we needed to end with two so maybe like there\'s a twelve""')

# ""two times two four""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 7, 10),
    comment='""two times two four""',
)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 10, 14),
    comment='""7 times 2 is 14""',
)

# ""plus 10 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+10=24"",
    resulting_state=(2, 24),
    comment='""plus 10 is 24""',
)

# ""7 times 2 so that's 2 is 14 times 2 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""14*2=28"",
    resulting_state=(10, 28),
    comment='""14 times 2 is 28""',
)

# ""7 times 2 14 times 10 and 40"" - participant likely meant 14*10=140
new_state = graph.explore_operation(
    curr_state,
    operation=""14*10=140"",
    resulting_state=(2, 140),
    comment='""14 times 10 and 40""',
)

# ""2 times 10 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*10=20"",
    resulting_state=(14, 20),
    comment='""2 times 10 20""',
)
```"
4188,"[3,5,7,11]",11-5+,180," Alright, I'm going to say 3 plus 5 is 7. And now I'm going to work 3 times 11, which is 3, minus... 22 and I have to count the heart. 7 times 4 will be 5. It doesn't work in that level. 5 is 3. And now I'm going to say 7. And I'm going to say 4. 7 times 5.30 I just had a bad day ... ... umm... 21 and now it will be closing ... ... ... Oh, okay. Okay, here it is, 11 minus 5, 36, plus 7, wait, what now, what do I do, let me, just have it, oh man. Okay, 11 minus 5, 36, what, oh no, oh darn.","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 plus 5 is 7"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=7"",
    resulting_state=(7, 7, 11),
    comment='""3 plus 5 is 7"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""3 times 11"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11=33"",
    resulting_state=(5, 7, 33),
    comment='""3 times 11""',
)

# ""7 times 5"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(3, 11, 35),
    comment='""7 times 5""',
)

# ""11 minus 5, 36"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=36"",
    resulting_state=(3, 7, 36),
    comment='""11 minus 5, 36"" - participant makes a calculation error',
    result_calc_error=True,
)

# The rest appears to be the participant expressing frustration and running out of time
```"
4189,"[5,8,8,9]",9-5/(8)x(,180," Okay, let's see. 8 plus 8 is 16, plus 5 is 25. Let's try 8 plus 8 is 16. 9 plus 8 is 17. 9 plus 5 is 14. 9 plus 14. 9 plus 14 is 18, please. Oh no, I can't do this. That's too much. 8 plus 8 is 64. No, I can't. No. Oh. How can I touch my 45? 5 minus 8? What the hell? I'll try this. Mm-hmm. 8 times 9, that would be 2. 9 times 17, that would be 4. That would be 8 times 8. 8 plus 5 would be 13. 17 times 8. 9 times 8 Now... Huh! Okay... Um... We did 8. 9 minus 1. 9 minus 1. 9 minus 5 is 4, and then, say 4, you divide, you divide, you divide, you divide, you divide, 8 by 1, and you multiply that.","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 is 16, plus 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8+5=25"",
    resulting_state=(9, 25),
    comment='""8 plus 8 is 16, plus 5 is 25""',
    result_calc_error=True,
)

# ""9 plus 8 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(5, 8, 17),
    comment='""9 plus 8 is 17""',
)

# ""9 plus 5 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(8, 8, 14),
    comment='""9 plus 5 is 14""',
)

# ""8 plus 8 is 64"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(5, 9, 64),
    comment='""8 plus 8 is 64"" - participant likely meant multiplication',
)

# ""8 plus 5 would be 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(8, 9, 13),
    comment='""8 plus 5 would be 13""',
)

# ""9 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(5, 8, 72),
    comment='""9 times 8""',
)

# ""9 minus 5 is 4, and then, say 4, you divide, you divide, you divide, you divide, you divide, 8 by 1, and you multiply that""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 8, 8),
    comment='""9 minus 5 is 4""',
)

# The participant seems to be trying to divide by 8 next but doesn't complete the calculation before time runs out
```"
4193,"[1,4,5,6]",(6x,180," Okay, new one here. 1, 4, 5, and 6. So 6 times 4 is 24. But then I have the 5 and the 1. I could do 5 times 1 plus 6 minus 4. That gets me to 10. I could do 5 times 6, 30, minus 4. That gets me to, or 5, that would get me only to 25 or 26. Let's play with some options here. I could do 5 minus 1, which is 4, times 4 would be 16, plus 6 would be 22. So I'm not sure that gets me. Let's try 6 minus... 4 is 2, plus 6, that only gets me to 12. 6 minus 1 is 5, times 4 would be 20, plus 5 would be 25. This one is difficult. 5 times 4 is 20, plus 6 minus 1 would be 25. 6 minus 1 is 5, times 4 is 20, plus 6 minus 1 would be 25. 5 times 4... I could do 5 times 4 minus 1. Nope, plus 6, that gets me back to 25. I can get to 25 very easily, but... I'm having problems getting to 24.","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 5, 24),
    comment='""6 times 4 is 24""',
)

# ""5 times 1 plus 6 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*1+6-4=7"",
    resulting_state=(7,),
    comment='""5 times 1 plus 6 minus 4""',
)

# ""5 times 6, 30, minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6-4=26"",
    resulting_state=(1, 26),
    comment='""5 times 6, 30, minus 4""',
)

# ""5 minus 1, which is 4, times 4 would be 16, plus 6 would be 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-1)*4+6=22"",
    resulting_state=(22,),
    comment='""5 minus 1, which is 4, times 4 would be 16, plus 6 would be 22""',
)

# ""6 minus... 4 is 2, plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-4)+6=8"",
    resulting_state=(1, 5, 8),
    comment='""6 minus... 4 is 2, plus 6""',
)

# ""6 minus 1 is 5, times 4 would be 20, plus 5 would be 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-1)*4+5=25"",
    resulting_state=(25,),
    comment='""6 minus 1 is 5, times 4 would be 20, plus 5 would be 25""',
)

# ""5 times 4 is 20, plus 6 minus 1 would be 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4+6-1=25"",
    resulting_state=(25,),
    comment='""5 times 4 is 20, plus 6 minus 1 would be 25""',
)

# ""5 times 4 minus 1... Nope, plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4-1+6=25"",
    resulting_state=(25,),
    comment='""5 times 4 minus 1... Nope, plus 6""',
)

```"
4194,"[1,2,7,9]",(7x2)+1+9,48," Okay, new one here. 1, 2, 7, and 9. So, let's see. 7 and 9 is 16. 2 and 1 is 3. 2 times 7 is 9. 9 times 9. Let's see. If I subtract the 9 out of the 24, that gets me to 15. So, that would be the answer. So, it would be 7 times 2 plus 1 plus 9. 14. Yep, that gets me to 24.","```python
start_state = (1, 2, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and 9 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(1, 2, 16),
    comment='""7 and 9 is 16""',
)

# ""2 and 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 7, 9),
    comment='""2 and 1 is 3""',
)

# ""2 times 7 is 9"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=9"",
    resulting_state=(1, 9, 9),
    comment='""2 times 7 is 9"" - calculation error',
    result_calc_error=True,
)

# ""If I subtract the 9 out of the 24, that gets me to 15"" - participant is working backward from 24
graph.set_subgoal(
    (15, 9),
    state_after_subgoal=(24,),
    comment='""If I subtract the 9 out of the 24, that gets me to 15""',
)

# ""7 times 2 plus 1 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+1+9=24"",
    resulting_state=(24,),
    comment='""7 times 2 plus 1 plus 9. 14. Yep, that gets me to 24.""',
)
```"
4195,"[7,10,11,13]",(13-10)x(11-7),180," Okay, I have a 7, 10, 11, and 13. So, this one I'm almost certainly going to need to do some division, but do I have anything that divides? No, I don't. So, this one there will probably need to be some subtraction then. So, let's see. 13 minus 7 is 6. 13 minus 10 is 3. 13 minus 11 is 2. 10 minus 7 is 3. 13 minus 11 is 2. So, I need to see how I can get to some combination of 6 and 4 or 3 and 8. So, maybe it's adding 2 and then adding in the subtraction of 2 others. I think that may be it. So, 11 and 13 are 2. 13 is 24. 13 and 7 and 10 is 17. I would need 7 to get to 24. Let's try 13 minus 10. That's 3. Plus 11 minus 7 is 4. That's not going to do it. Let's see. What divides by 24 out of these? None of them. This one is pretty hard as well. But if I get to... Let's try 13 minus 7 again. That seems... That gets me 6. But how do I get to the remaining 4 out of a 10 and 11? That's going to be the key. Um... Plus... Let's try 13 plus 6. Ah, plus 11. That's not going to do it. Let's try 13 minus 10. That's 3. Times 11 minus 7.","```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 10, 11),
    comment='""13 minus 7 is 6""',
)

# ""13 minus 10 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(3, 7, 11),
    comment='""13 minus 10 is 3""',
)

# ""13 minus 11 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 7, 10),
    comment='""13 minus 11 is 2""',
)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 11, 13),
    comment='""10 minus 7 is 3""',
)

# The participant seems to be setting subgoals of getting 6 and 4 or 3 and 8
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""So, I need to see how I can get to some combination of 6 and 4""',
)
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""or 3 and 8""',
)

# ""13 and 7 and 10 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+10=30"",
    resulting_state=(11, 30),
    result_calc_error=True,
    comment='""13 and 7 and 10 is 17""',
)

# ""13 minus 10. That's 3. Plus 11 minus 7 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-10)+(11-7)=7"",
    resulting_state=(7,),
    comment='""13 minus 10. That\'s 3. Plus 11 minus 7 is 4""',
)

# ""Let's try 13 minus 7 again. That gets me 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 10, 11),
    comment='""Let\'s try 13 minus 7 again. That gets me 6""',
)

# Finally, ""Let's try 13 minus 10. That's 3. Times 11 minus 7."" 
# This is the solution they submitted
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-10)*(11-7)=12"",
    resulting_state=(12,),
    comment='""Let\'s try 13 minus 10. That\'s 3. Times 11 minus 7.""',
)
```"
4196,"[2,3,5,13]",(13,180," Alright, new one. I got a 2, 3, 5, and 13. Okay. So, the 3 goes into the 24, 8. So if I can get out of the 13, the 5, and the 2, if I can get 8, then I think I got this figured. So, let's try, let's see, 13 minus 7 is 6, times 3, that's 18, so that's not going to do it. Let's see, if I add the 13 to the 24, then I would need to be at 11. And the 5, the 3, and the 2 get the same number. That gets me to 10, so that's just slightly off. So, if I do 5 minus 3, times 2, then I got to somehow deal with the 13. So, let's start with the 13, subtract 5, that would be 8. And then I would still need a 3, but I have a 2 and a 3. If I subtract the 3, that would be 10, and then I would need 14. So, I'm not sure that works. If I do the 2, that would be 11, plus 8. Not sure that works. So, yeah. Boy, these are difficult. Okay, 13 minus 5, that's 8. Times 2 plus 3, now that would be 19. Let's try 13 minus 3 is 10, plus 5. 15 times 2, that would be 30. 13 minus 2 plus 3 would be 14, plus 5 would be 19. Okay. Somehow I got to figure out how the .","```python
start_state = (2, 3, 5, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""the 3 goes into the 24, 8"" - participant seems to be setting a subgoal of getting 8
graph.set_subgoal(
    (8,),
    state_after_subgoal=(24,),
    comment='""the 3 goes into the 24, 8"" - participant seems to be setting a subgoal of getting 8',
)

# ""13 minus 5, that would be 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(2, 3, 8),
    comment='""let\'s start with the 13, subtract 5, that would be 8""',
)

# ""If I subtract the 3, that would be 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(2, 5, 10),
    comment='""If I subtract the 3, that would be 10""',
)

# ""If I do the 2, that would be 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(3, 5, 11),
    comment='""If I do the 2, that would be 11""',
)

# ""13 minus 5, that's 8. Times 2 plus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-5)*2+3=19"",
    resulting_state=(19,),
    comment='""13 minus 5, that\'s 8. Times 2 plus 3""',
)

# ""13 minus 3 is 10, plus 5. 15 times 2, that would be 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((13-3)+5)*2=30"",
    resulting_state=(30,),
    comment='""13 minus 3 is 10, plus 5. 15 times 2, that would be 30""',
)

# ""13 minus 2 plus 3 would be 14, plus 5 would be 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2+3+5=19"",
    resulting_state=(19,),
    comment='""13 minus 2 plus 3 would be 14, plus 5 would be 19""',
)
```"
4198,"[5,8,9,11]",(5+9-11)x8,40," Alright, here I have a 5, a 9, 8, 9, and 11. Okay, so I got a lot of large numbers. Let's think about this. 8 goes into 24, so I would need to somehow get a 3 out of the 5, 9, and 11. And I could do that. 14 minus 11 is 3 times 8. So that is the answer. So 5 plus 9 minus 11 times 8. Double check. 14 minus 11. There we go.","```python
start_state = (5, 8, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 goes into 24, so I would need to somehow get a 3"" - participant is working backward from 24
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 goes into 24, so I would need to somehow get a 3""',
)

# ""14 minus 11 is 3"" where 14 comes from 5+9
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9-11=3"",
    resulting_state=(3, 8),
    comment='""14 minus 11 is 3"" where 14 comes from 5+9',
)

# ""times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""times 8""',
)

```"
4202,"[2,3,6,7]",(7x6)/2+3,163," Okay, this one seems solvable. I have a 2, a 3, a 6, and a 7. So let's assume the 6 somehow goes to the 24. So out of the 2, the 3, and the 7, we need to get a 4. 7 times 2 is 14, divided by 3 doesn't make sense. 7 times 3, 7 minus 2 would be 5, plus 3 would be 8, but that's more than the 8 times 6 is 48. So maybe I take the 2. Let's pull the 2 out. And figure out, can I get to 12 out of 3, 7, and 6? 6 divided by 3 is 2, times 7 is 14. Okay, so maybe I need to go down a different path. 3 times 6 is 18, but I would still need 6. And out of the 7 and the 2, I can't get that. 6 times 2 is 12, but I would then still need to get 12, and 7 and 3 is 10. 7 times 2 is 14, plus 3 plus 6, gets me to 23. 7 times 2 is 14, plus 3 plus 6, gets me to 23. 7 times 3 is 21. 6 minus 2 is 4. That gets me to 25. This one feels easier, but it's 6 minus 3 is 3 times 2 is 6 plus 7. No. No. 6 minus 3 times 7 plus 2 is 23. 6 plus 7, 13. But, nope, I can't get an 11 out of that. 7 times 6 is 42. Divided by 2 is, oh, that's it. 7. 7 times 6 divided by 2 plus 3.","```python
start_state = (2, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So let's assume the 6 somehow goes to the 24"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""So let\'s assume the 6 somehow goes to the 24""',
)

# ""7 times 2 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(3, 6, 14),
    comment='""7 times 2 is 14""',
)

# ""7 minus 2 would be 5, plus 3 would be 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2+3=8"",
    resulting_state=(6, 8),
    comment='""7 minus 2 would be 5, plus 3 would be 8""',
)

# ""8 times 6 is 48""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(48,),
    comment='""8 times 6 is 48""',
)

# ""6 divided by 3 is 2, times 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6/3)*7=14"",
    resulting_state=(2, 14),
    comment='""6 divided by 3 is 2, times 7 is 14""',
)

# ""3 times 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(2, 7, 18),
    comment='""3 times 6 is 18""',
)

# ""6 times 2 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(3, 7, 12),
    comment='""6 times 2 is 12""',
)

# ""7 and 3 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(2, 6, 10),
    comment='""7 and 3 is 10""',
)

# ""7 times 2 is 14, plus 3 plus 6, gets me to 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2+3+6=23"",
    resulting_state=(23,),
    comment='""7 times 2 is 14, plus 3 plus 6, gets me to 23""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(2, 6, 21),
    comment='""7 times 3 is 21""',
)

# ""6 minus 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-2=4"",
    resulting_state=(3, 4, 7),
    comment='""6 minus 2 is 4""',
)

# ""6 minus 3 times 7 plus 2 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-3)*7+2=23"",
    resulting_state=(23,),
    comment='""6 minus 3 times 7 plus 2 is 23""',
)

# ""6 plus 7, 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(2, 3, 13),
    comment='""6 plus 7, 13""',
)

# ""7 times 6 is 42. Divided by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6/2=21"",
    resulting_state=(3, 21),
    comment='""7 times 6 is 42. Divided by 2""',
)

# Then they add 3 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+3=24"",
    resulting_state=(24,),
    comment='""plus 3""',
)
```"
4204,"[2,2,3,11]",3x2,180," Hmm. Okay. Let's try this. Two. My brain hurts. Six. Okay. Three times two is six. Three times two is six. Plus two is eight. Plus eleven is not. Eleven times two is twenty-two. See, eleven times three is thirty-three. Divide that by two is sixteen and a half. That's not gonna work. Three times two times two is twelve. Plus eleven. That's not gonna work. Uhhhh. Hmm. Three times two is six. Times eleven is sixty-six. Divide that by two. That's not twenty-four. Oh my god, these are so hard. Um. To divide something. Or subtract. Oh, wait. Eleven minus two is nine. Times three is twenty-seven. Minus... What the fuck? Oh my god. Okay. Twenty-four minus eleven. Thirteen. How do we get rid of the thirteen? I feel like I have to write this down. It'll be the only way to figure this out. Twenty-four equals... Oh. Hmm.","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Three times two is six""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(2, 6, 11),
    comment='""Three times two is six""',
)

# ""Plus two is eight""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+2=8"",
    resulting_state=(8, 11),
    comment='""Plus two is eight""',
)

# ""Plus eleven is not"" participant realizes this won't work

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""Eleven times two is twenty-two""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 3, 22),
    comment='""Eleven times two is twenty-two""',
)

# ""eleven times three is thirty-three""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(2, 2, 33),
    comment='""eleven times three is thirty-three""',
)

# ""Divide that by two is sixteen and a half""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33/2=16.5"",
    resulting_state=(2, 16.5),
    comment='""Divide that by two is sixteen and a half""',
)

# ""Three times two times two is twelve""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2*2=12"",
    resulting_state=(11, 12),
    comment='""Three times two times two is twelve""',
)

# ""Plus eleven"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11=23"",
    resulting_state=(23,),
    comment='""Plus eleven""',
)

# ""Three times two is six. Times eleven is sixty-six""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2*11=66"",
    resulting_state=(2, 66),
    comment='""Three times two is six. Times eleven is sixty-six""',
)

# ""Divide that by two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""66/2=33"",
    resulting_state=(33,),
    comment='""Divide that by two""',
)

# ""Eleven minus two is nine. Times three is twenty-seven""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-2)*3=27"",
    resulting_state=(2, 27),
    comment='""Eleven minus two is nine. Times three is twenty-seven""',
)

# ""Twenty-four minus eleven. Thirteen""
# This seems to be working backwards from 24, so we'll add it as a subgoal
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""Twenty-four minus eleven. Thirteen""',
)

```"
4205,"[2,2,7,10]",10,180," Okay, we're going to get this one. Okay, so I'm going to try and break this down by multipliers. So we need to somehow get 8 and 3 or 4 and 6. What else? What else breaks down to 24? 2 and 12. 5 doesn't, 6 already does. Okay. 7 doesn't. 8 already, 9 doesn't. Either it was 10, 11, or 12. Okay. So I'm going to figure out how we're going to get 8 and 3. 2 or 12. Are these like actually doable? I'm so confused. The first two were so easy. Okay, 4, 17, 9, 8, 5. 2 and 2 is 4. 2 and 7 is 9. 2 times 2 is 4. 7 times 10 is 70. 70 divided by 4. That's definitely not it. 20. Wait. Okay, 20. Wait, I think I have to get this out. Okay. 10 times 2 is 20. And then times that again. You have, no, shit. I feel like I'm so close to this. 10, 20. 10 times 2 is 20. Ugh.","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first seems to be setting subgoals, looking for factors of 24
graph.set_subgoal((8, 3), state_after_subgoal=(24,), comment=""looking for factors of 24: 8 and 3"")
graph.set_subgoal((4, 6), state_after_subgoal=(24,), comment=""looking for factors of 24: 4 and 6"")
graph.set_subgoal((2, 12), state_after_subgoal=(24,), comment=""looking for factors of 24: 2 and 12"")

# ""2 and 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 7, 10),
    comment='""2 and 2 is 4""',
)

# ""2 and 7 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+7=9"",
    resulting_state=(2, 9, 10),
    comment='""2 and 7 is 9""',
)

# ""2 times 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 7, 10),
    comment='""2 times 2 is 4""',
)

# ""7 times 10 is 70""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(2, 2, 70),
    comment='""7 times 10 is 70""',
)

# ""10 times 2 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(2, 7, 20),
    comment='""10 times 2 is 20""',
)

# The participant seems stuck here, repeating ""10 times 2 is 20"" without finding a way forward
```"
4210,"[1,5,10,12]",(10/5)x12x1,111," We can do 6, we can do 4, 5 dot minus 4 is, uh, I guess I should say it that way. Um, we can do 12 times 5 is 60, 5 over 10 is 6, that won't work, 5 times 10 is 50. Ooh. I think it has to do something with the one, like, we do 5 minus 1, we have 4 plus, um, I only need 2. 10 minus 1. 10 minus 2 is, 12 minus 2 is 2. 10 minus 2. 10 minus 5 is 5 minus 1. Mmm. Ooh, I figured it out. 10 divided by 5 is 2 times 12 times 1. Hmm. Hmm. Hmm.","```python
start_state = (1, 5, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 5 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*5=60"",
    resulting_state=(1, 10, 60),
    comment='""12 times 5 is 60""',
)

# ""5 over 10 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=6"",
    resulting_state=(1, 6, 12),
    comment='""5 over 10 is 6"" - calculation error',
    result_calc_error=True,
)

# ""5 times 10 is 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(1, 12, 50),
    comment='""5 times 10 is 50""',
)

# ""5 minus 1, we have 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 10, 12),
    comment='""5 minus 1, we have 4""',
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(1, 5, 12),
    comment='""10 minus 5 is 5""',
)

# ""10 divided by 5 is 2 times 12 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*12*1=24"",
    resulting_state=(24,),
    comment='""10 divided by 5 is 2 times 12 times 1""',
)

```"
4212,"[1,2,8,10]",,180," 18, 16, 8 times 2 is 16, we can do 8, ah, we can do this, 10 times 2, no. We can do 8 times 3, 2 plus 1, or... We can do 9 plus 12, that won't work. Uh, 12... Hmm... 8 times 3 is 24, but then what do I do with the 10? 10 times 2 is 20... Let's try this... 8 times 10 is 80, divided by 2 is 40, that won't work. Um... 80 divided by 3? Nope. Uh... 12... That won't work. Hmm... 3... 13 plus 8... 21... Hmm... 11... We can do 11 times, or 11 plus... 11... No, 11 plus 10... 11... We do 10 minus 2...","```python
start_state = (1, 2, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 2 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(1, 10, 16),
    comment='""8 times 2 is 16""',
)

# ""10 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(1, 8, 20),
    comment='""10 times 2""',
)

# ""8 times 3, 2 plus 1"" - participant seems to be trying to make 3 from 2+1
new_state = graph.explore_operation(
    curr_state,
    operation=""2+1=3"",
    resulting_state=(3, 8, 10),
    comment='""8 times 3, 2 plus 1""',
)

# Then they multiply 8*3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(10, 24),
    comment='""8 times 3 is 24""',
)

# ""10 times 2 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(1, 8, 20),
    comment='""10 times 2 is 20""',
)

# ""8 times 10 is 80, divided by 2 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10/2=40"",
    resulting_state=(1, 40),
    comment='""8 times 10 is 80, divided by 2 is 40""',
)

# ""80 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10/3=26.67"",
    resulting_state=(1, 2, 26.67),
    comment='""80 divided by 3""',
)

# ""13 plus 8... 21"" - participant likely made 13 from 10+2+1
new_state = graph.explore_operation(
    curr_state,
    operation=""10+2+1=13"",
    resulting_state=(8, 13),
    comment='""13 plus 8... 21"" - participant likely made 13 from 10+2+1',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(21,),
    comment='""13 plus 8... 21""',
)

# ""10 minus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(1, 8, 8),
    comment='""10 minus 2""',
)

```"
4213,"[1,1,5,6]",(5-1)x1x6,17," All right, let's see 24. All right, so 24, so minus 1. Okay, so we do the same thing. So 5 minus 1 is 4, and then times 1 is still 4, and then times 6. I'm getting the hang of it.","```python
start_state = (1, 1, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24, so minus 1"" suggests the participant is working backward from 24, looking to divide by 6 to get 4
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24, so minus 1"" suggests working backward from 24, looking to divide by 6 to get 4',
)

# ""5 minus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(1, 4, 6),
    comment='""5 minus 1 is 4""',
)

# ""and then times 1 is still 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*1=4"",
    resulting_state=(4, 6),
    comment='""and then times 1 is still 4""',
)

# ""and then times 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""and then times 6""',
)
```"
4217,"[2,6,8,9]",,180," Alright, let's see here, let's see, 3, let me get the 3, no, um, get to 6 times 4, which is 1, no, 9 cannot be, that's 6, and that's 3, that's not enough, this is not enough, that's 3, 9, 6, 3, 8, I need 12, so we got, that's not good, that's not good, mmm, mmm, okay, we got it, so, 8 minus 2 times 9 minus 6, no, no, that's not it either, dang it, hmm, 28, um, this one, how do we get there, 12 and 12, no, that's 12, that's not 12, that's 2, that's only 11, mmm, 2 times 9 is 18, 16, 18, 12, mm-hmm, that's, um, mm, 18, 12, mm-hmm, 14, 6, and they're going to be either 14, 7 is not going to be it, so 11, and 14 now.","```python
start_state = (2, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""get to 6 times 4"" suggests participant is trying to reach 24 by multiplying by 4
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""get to 6 times 4""',
)

# ""9 cannot be, that's 6, and that's 3"" seems to be trying 9-6=3
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(2, 3, 8),
    comment='""9 cannot be, that\'s 6, and that\'s 3""',
)

# ""8 minus 2 times 9 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-2)*(9-6)=18"",
    resulting_state=(18,),
    comment='""8 minus 2 times 9 minus 6""',
)

# ""2 times 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(6, 8, 18),
    comment='""2 times 9 is 18""',
)

# The rest of the transcript contains numbers like 12, 11, 14, 7 but it's not clear what operations the participant is performing to get these numbers. They seem to be exploring different combinations but not stating the operations explicitly.
```"
4233,"[1,11,12,13]",12,180," 12 plus 13 is 25. 25 plus 11 is 36. 13 plus 13 is 24. Oh, wait a minute, there it is. 1 plus 12 plus 13 minus, good, 13 plus 26 plus 26, I'm sure, 13 plus 36 is 26. I don't know why I was thinking 36. So how do we get this to 36? So, 12 plus 13 is 25. 12 times 13, and that's different. Um, 24 and 23. 13 plus 12 is 25. Minus 1. That's 24. Gosh dang it. 12. 14. Plus 11. 11. Let's see, see if I can... 13 times 12 divided by 11. That's 1. What times 1? 1, 2, 3, 4. I don't know if I can pull this one. I don't know. 12 times. That's what I just did.","```python
start_state = (1, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 13 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(1, 11, 25),
    comment='""12 plus 13 is 25""',
)

# ""25 plus 11 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+11=36"",
    resulting_state=(1, 36),
    comment='""25 plus 11 is 36""',
)

# ""1 plus 12 plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+12+13=26"",
    resulting_state=(11, 26),
    comment='""1 plus 12 plus 13""',
)

# ""12 plus 13 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(1, 11, 25),
    comment='""12 plus 13 is 25""',
)

# ""12 times 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13=156"",
    resulting_state=(1, 11, 156),
    comment='""12 times 13""',
)

# ""13 plus 12 is 25. Minus 1. That's 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12-1=24"",
    resulting_state=(11, 24),
    comment='""13 plus 12 is 25. Minus 1. That\'s 24""',
)

# ""13 times 12 divided by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*12/11=14.18"",
    resulting_state=(1, 14.18),
    comment='""13 times 12 divided by 11""',
)
```"
4237,"[6,7,9,12]",7+9+6+,180," 12 times, oh shoot. Say 9 times 12. Divide it by 7. Divide it by 7 plus 6. Or divide it by 6. Divide it by 6 plus 7. Okay. Or 9 times 7. Okay. Which is 64 minus 12. Divide it by 6. And that's the one where, um, 4, 12 times 7 divided by 9 plus 6, okay? 12 divided, oh, 12 plus 6, 12 times, so plus 6, or, okay, 12 plus 6. 12 plus 6, 18, 18 plus 7, which is 25. So, so, yeah. Um, 7 plus 9, 16 plus 6, and then, it's going to,","```python
start_state = (6, 7, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(6, 7, 108),
    comment='""9 times 12""',
)

# ""Divide it by 7 plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108/(7+6)=8.31"",
    resulting_state=(8.31,),
    comment='""Divide it by 7 plus 6""',
)

# ""Divide it by 6 plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""108/(6+7)=8.31"",
    resulting_state=(8.31,),
    comment='""Divide it by 6 plus 7""',
)

# ""9 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=64"",
    resulting_state=(6, 12, 64),
    comment='""9 times 7"" participant makes calculation error, saying ""Which is 64""',
    result_calc_error=True,
)

# ""minus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64-12=52"",
    resulting_state=(6, 52),
    comment='""minus 12""',
)

# ""Divide it by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""52/6=8.67"",
    resulting_state=(8.67,),
    comment='""Divide it by 6""',
)

# ""12 times 7 divided by 9 plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*7/9+6=15.33"",
    resulting_state=(15.33,),
    comment='""12 times 7 divided by 9 plus 6""',
)

# ""12 plus 6, 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(7, 9, 18),
    comment='""12 plus 6, 18""',
)

# ""18 plus 7, which is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(9, 25),
    comment='""18 plus 7, which is 25""',
)

# ""7 plus 9, 16 plus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9+6=22"",
    resulting_state=(12, 22),
    comment='""7 plus 9, 16 plus 6""',
)
```"
4240,"[6,8,8,10]",6/(10-8)x8,116," Okay, target is 24, 6, 8, 8, and 10. 10 plus 8 would be 18. No. 8 plus 8 would be 16. No. Doesn't work. Hmm. This is a harder one. Okay, 8 plus 6 would be 14. Plus 10 would be 24, but there's an extra 8, so that doesn't work. 8 plus 8 would be 16. Oh, my God. I could get 8 times 3, but I don't know how to do that. How could I get a 3 out of a 10, 8, and a 6? Okay, I got it. 10 minus 8 parentheses would be 2. And then 6. All right, it's got to be 6 first. 6 divided by parentheses 10 minus 8. So that's 2, so then it's 3, and then times 8 should be 24.","```python
start_state = (6, 8, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 8 would be 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(6, 8, 18),
    comment='""10 plus 8 would be 18""',
)

# ""8 plus 8 would be 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(6, 10, 16),
    comment='""8 plus 8 would be 16""',
)

# ""8 plus 6 would be 14. Plus 10 would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6+10=24"",
    resulting_state=(8, 24),
    comment='""8 plus 6 would be 14. Plus 10 would be 24""',
)

# ""8 plus 8 would be 16"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(6, 10, 16),
    comment='""8 plus 8 would be 16""',
)

# ""I could get 8 times 3"" - participant sets a subgoal of getting 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I could get 8 times 3""',
)

# ""10 minus 8 parentheses would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 6, 8),
    comment='""10 minus 8 parentheses would be 2""',
)

# ""6 divided by parentheses 10 minus 8. So that's 2, so then it's 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/(10-8)=3"",
    resulting_state=(3, 8),
    comment='""6 divided by parentheses 10 minus 8. So that\'s 2, so then it\'s 3""',
)

# ""and then times 8 should be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""and then times 8 should be 24""',
)
```"
4243,"[6,7,9,9]",,182," Okay, 24 again. 9, 9, 7, and 6 are the numbers. Okay. What's 7? 7 plus 9 is 16 plus 15. No, that doesn't work. 7 times 6 is 42. Divided by 9 is 5. No, it doesn't work. Trying to do this in my head is difficult. I'm having a hard time. 7 plus 9 is 16. No, it doesn't work. I need to get 3 and 8 somehow. 9 minus 6 is 3. Nope, doesn't work. What I was thinking does not work either. I'm not seeing anything. It's getting frustrating because I'm doing really bad at this. It's been a long time. 9. 9 times 6. 54. 54. No. It doesn't work at all. 9 times 9 is 81. Minus 7 times 6 is 42. That doesn't work. No, 45. 81. That doesn't work either. Way off. Okay, what's... 9 times 9 is 81. Times 6. Divided by 7 maybe. I can't do it in my head, so I don't know if that's right or not. Uh... 9 times 6. 54. 54. Nope. That's wrong. I'm wrong again. Everything I'm doing is wrong. My brain is turning into mush. I can't even think. So, doing really bad. 9.","```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 9 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(6, 9, 16),
    comment='""7 plus 9 is 16""',
)

# ""7 times 6 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(9, 9, 42),
    comment='""7 times 6 is 42""',
)

# ""Divided by 9 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42/9=5"",
    resulting_state=(5, 9),
    comment='""Divided by 9 is 5""',
    result_calc_error=True,
)

# ""7 plus 9 is 16"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(6, 9, 16),
    comment='""7 plus 9 is 16""',
)

# ""9 minus 6 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6=3"",
    resulting_state=(3, 7, 9),
    comment='""9 minus 6 is 3""',
)

# ""9 times 6. 54""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(7, 9, 54),
    comment='""9 times 6. 54""',
)

# ""9 times 9 is 81""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 7, 81),
    comment='""9 times 9 is 81""',
)

# ""9 times 9 is 81. Times 6. Divided by 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9*6/7=69.43"",
    resulting_state=(69.43,),
    comment='""9 times 9 is 81. Times 6. Divided by 7""',
)

# ""9 times 6. 54""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(7, 9, 54),
    comment='""9 times 6. 54""',
)
```"
4244,"[6,10,10,13]",,180," Alright, target is 24 again. Numbers are 6, 10, 10, and 13. 10 plus 6 is 16. I got to get 13 plus 11 to get 24. Can I get 11 out of 10, 10, and 6? I don't see how. 10 divided, 10 times 10, 10 times 6 is 60. Divided by 10 will be 6, 13, nope, doesn't work. 13 plus 10 plus 10 divided by 6, no way, doesn't work. 13, 10, 13 plus 10 plus 10, 33 minus 6 is 27. That's wrong. Ahh. 10 divided by 10 equals 1. 1, 1 times, 1 plus 6 is 7, no, doesn't work. 13 plus 10 is 23 minus 6 is 17 plus 10 is 27. That's wrong, totally wrong. I'm really having a hard time. 10 times, 13 times 6 is 60 plus 8, 78. Minus 10 is 68, divided by 10 is 6.8. That's not right at all. That's wrong. I can't really think of anything. I'm getting frustrated. 10 times 10 is 100, divided by, no, that doesn't work. 10 times 6 is 60 minus 23, doesn't work. 10 times 6 is 60, 10 times 10 is 100, divided by 6. 6, 6 goes into 100. That doesn't work. It's 20 plus, . .","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 6 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6=16"",
    resulting_state=(10, 13, 16),
    comment='""10 plus 6 is 16""',
)

# ""I got to get 13 plus 11 to get 24"" - setting a subgoal
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""I got to get 13 plus 11 to get 24""',
)

curr_state = graph.move_to_node(start_state)
# ""10 times 10, 10 times 6 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6=60"",
    resulting_state=(10, 13, 60),
    comment='""10 times 6 is 60""',
)

# ""Divided by 10 will be 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""60/10=6"",
    resulting_state=(6, 13),
    comment='""Divided by 10 will be 6""',
)

curr_state = graph.move_to_node(start_state)
# ""13 plus 10 plus 10 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+10+10)/6=5.5"",
    resulting_state=(5.5,),
    comment='""13 plus 10 plus 10 divided by 6""',
)

curr_state = graph.move_to_node(start_state)
# ""13 plus 10 plus 10, 33 minus 6 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10+10-6=27"",
    resulting_state=(27,),
    comment='""13 plus 10 plus 10, 33 minus 6 is 27""',
)

curr_state = graph.move_to_node(start_state)
# ""10 divided by 10 equals 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 6, 13),
    comment='""10 divided by 10 equals 1""',
)

# ""1 plus 6 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(7, 13),
    comment='""1 plus 6 is 7""',
)

curr_state = graph.move_to_node(start_state)
# ""13 plus 10 is 23 minus 6 is 17 plus 10 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10-6+10=27"",
    resulting_state=(27,),
    comment='""13 plus 10 is 23 minus 6 is 17 plus 10 is 27""',
)

curr_state = graph.move_to_node(start_state)
# ""13 times 6 is 78""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*6=78"",
    resulting_state=(10, 10, 78),
    comment='""13 times 6 is 78""',
)

curr_state = graph.move_to_node(start_state)
# ""10 times 10 is 100""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(6, 13, 100),
    comment='""10 times 10 is 100""',
)

curr_state = graph.move_to_node(start_state)
# ""10 times 6 is 60""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6=60"",
    resulting_state=(10, 13, 60),
    comment='""10 times 6 is 60""',
)

curr_state = graph.move_to_node(start_state)
# ""10 times 10 is 100, divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*10)/6=16.67"",
    resulting_state=(13, 16.67),
    comment='""10 times 6 is 60, 10 times 10 is 100, divided by 6""',
)
```"
4246,"[4,4,7,7]",,180," Alright, 24 is the target number again. We've got 4, 4, 7, and 7. It's not plus. You can't add them all together. That won't work. 4 times 4 is 16. Minus 7 is 9. 9 and 7, that doesn't work. 7 times 4 is 28. No, it doesn't work. 7 times 7 is 49. Minus 16. Does that work? No, it doesn't work. 7 times 4 is 28. No, that will not work. 4 plus 4 is 8. 7 plus 7 is 14. 8 and 14 is 22. That's wrong. This is another difficult puzzle for me. I'm not seeing it. Getting frustrated again. 7 plus 4 is 11. That doesn't work. 4 7 times 4 is 28. Minus 7 would be 21. Plus 4 would be 25. That's wrong. 4 times 4 is 16. No, 7 times 7 is 14. Times 4. 7 times 4 is 24. 56 divided by 4. No, that doesn't work. I'm going the wrong way again. I'm not seeing anything. 49 plus 4. 53 divided by 4. No, doesn't equal 24. 7 plus 4 would be 11. 7 plus 4 would be 11. 44 divided by 7. No, doesn't work. I'm not seeing anything here. This is impossible to me. 7 minus 4 is 3. 3 times 7 is 21. Minus plus 4 is 25. That's wrong. 7 minus 4 is 3. 3 times 4 is 12. Plus 7 is 19. Problem solved.","```python
start_state = (4, 4, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(7, 7, 16),
    comment='""4 times 4 is 16""',
)

# ""Minus 7 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16-7=9"",
    resulting_state=(7, 9),
    comment='""Minus 7 is 9""',
)

# ""7 times 4 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(4, 7, 28),
    comment='""7 times 4 is 28""',
)

# ""7 times 7 is 49""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(4, 4, 49),
    comment='""7 times 7 is 49""',
)

# ""4 plus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(7, 7, 8),
    comment='""4 plus 4 is 8""',
)

# ""7 plus 7 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(8, 14),
    comment='""7 plus 7 is 14""',
)

# ""8 and 14 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+14=22"",
    resulting_state=(22,),
    comment='""8 and 14 is 22""',
)

# ""7 plus 4 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(4, 7, 11),
    comment='""7 plus 4 is 11""',
)

# ""7 times 4 is 28. Minus 7 would be 21. Plus 4 would be 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4-7+4=25"",
    resulting_state=(25,),
    comment='""7 times 4 is 28. Minus 7 would be 21. Plus 4 would be 25""',
)

# ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(7, 7, 16),
    comment='""4 times 4 is 16""',
)

# ""7 times 4 is 24"" appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=24"",
    resulting_state=(4, 7, 24),
    comment='""7 times 4 is 24"" appears to be a calculation error',
    result_calc_error=True,
)

# ""7 minus 4 is 3. 3 times 7 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4)*7=21"",
    resulting_state=(4, 21),
    comment='""7 minus 4 is 3. 3 times 7 is 21""',
)

# ""plus 4 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+4=25"",
    resulting_state=(25,),
    comment='""plus 4 is 25""',
)

# ""7 minus 4 is 3. 3 times 4 is 12. Plus 7 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4)*4+7=19"",
    resulting_state=(19,),
    comment='""7 minus 4 is 3. 3 times 4 is 12. Plus 7 is 19""',
)
```"
4251,"[6,7,9,9]",(,180," And this one too. Oh, this is gonna be serious. Serious. Serious. Serious. Okay, what of 7 times 6? 42. 42. 42. And 9 times 9 is what? 31. And that's 42. Fuck. Wow, wow, wow, wow, wow, wow, wow, wow. This is clean. This is clean. 9 plus 7 will give me 16. Then 9 plus 6 will give me 15. That's crazy. What if I did 9 times 6? 54. 54. Okay, 54. Then isn't that as good? So 54 minus what we took? 9 times 7 will give me... 9 times 7 is also 63. 63 minus 54. Man, shit. That's crazy. That's crazy. What if I do this 6 times 7? 42. Okay. So 42 minus 9 will give me 13. Whatever. Um... Main motive is 24. 24 is my 3-minute app. It's my 3-minute app. Guess it's not up. Guess it's not up. It's not up. It's not up. It's not up. It's not up. It's not up. So, so, so, so... Okay, what if I do it 9 plus 8 minus 7? Which one is which? 9 plus 9 plus 7. 25. Shit. I want to work. What time? What time? What time? What time? What time? 25. 9 times 7. 64. Yeah, I subtract 9 from it. Then I divide it by 6.","```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""what of 7 times 6? 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(9, 9, 42),
    comment='""what of 7 times 6? 42""',
)

# ""And 9 times 9 is what? 31"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=31"",
    resulting_state=(6, 7, 31),
    comment='""And 9 times 9 is what? 31"" - calculation error',
    result_calc_error=True,
)

# ""9 plus 7 will give me 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(6, 9, 16),
    comment='""9 plus 7 will give me 16""',
)

# ""Then 9 plus 6 will give me 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(7, 9, 15),
    comment='""Then 9 plus 6 will give me 15""',
)

# ""What if I did 9 times 6? 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*6=54"",
    resulting_state=(7, 9, 54),
    comment='""What if I did 9 times 6? 54""',
)

# ""9 times 7 will give me... 9 times 7 is also 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(6, 9, 63),
    comment='""9 times 7 will give me... 9 times 7 is also 63""',
)

# ""6 times 7? 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(9, 9, 42),
    comment='""6 times 7? 42""',
)

# ""42 minus 9 will give me 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-9=33"",
    resulting_state=(9, 33),
    comment='""42 minus 9 will give me 13"" - calculation error',
    result_calc_error=True,
)

# ""9 plus 9 plus 7. 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+7=25"",
    resulting_state=(6, 25),
    comment='""9 plus 9 plus 7. 25""',
)

# ""9 times 7. 64"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=64"",
    resulting_state=(6, 9, 64),
    comment='""9 times 7. 64"" - calculation error',
    result_calc_error=True,
)

# ""Yeah, I subtract 9 from it. Then I divide it by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(64-9)/6=9.17"",
    resulting_state=(9.17,),
    comment='""Yeah, I subtract 9 from it. Then I divide it by 6""',
)
```"
4253,"[6,10,10,13]",(,180," Within my ability, I must learn well the whole plus đó viens. That's it. Jesus. But of... 13 times 10. To my little assistant. Nice. Nice, nice, nice, nice, nice. Nice, nice, nice, nice. What do I have to even do? 10 plus 13 minus 10. This one is... Jesus, this one is difficult. Difficult. Tedious. Too hard to read. Confusing. 6 plus 10. 16. 16. Plus 13. 29. That won't work. What if... I do this with 2 tenths. That 100 is 20. 13. 13 minus 6. 7. It will be more than... 24. 24. Make it 27. I cannot look like this. 3. Okay. Let me see. 13. 13 minus 6. 5. 5. 5. 5. 5. 5. 5. 5. 5. 5. And I do want to be able to tell you this. I want to tell you this.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 10"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13*10=130"",
    resulting_state=(6, 10, 130),
    comment='""13 times 10""',
)

# ""10 plus 13 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13-10=13"",
    resulting_state=(6, 13),
    comment='""10 plus 13 minus 10""',
)

# ""6 plus 10. 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+10=16"",
    resulting_state=(10, 13, 16),
    comment='""6 plus 10. 16""',
)

# ""Plus 13. 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+13=29"",
    resulting_state=(10, 29),
    comment='""Plus 13. 29""',
)

# ""I do this with 2 tenths. That 100 is 20"" seems to be multiplying the two 10s
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*10=100"",
    resulting_state=(6, 13, 100),
    comment='""I do this with 2 tenths. That 100 is 20"" seems to be multiplying the two 10s',
)

# ""13 minus 6. 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(7, 10, 10),
    comment='""13 minus 6. 7""',
)

# ""13 minus 6. 5"" seems to be repeating the subtraction but with a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=5"",
    resulting_state=(5, 10, 10),
    comment='""13 minus 6. 5"" seems to be repeating the subtraction but with a calculation error',
    result_calc_error=True,
)
```"
4254,"[5,6,7,13]",,180," Okay! Thirteen, seven, six, five. Thirteen, seven, six, five. Thirteen plus seven will give you twenty. Thirteen minus seven will give you six. Thirteen minus six will give you seven. Sorry, times eight. Thirteen minus seven will give you twenty. Thirteen minus six. Six will give you ten. Times . Time of that. Thirteen minus six. Thirteen minus eight. Jesus. Jesus Jesus Jesus Jesus Jesus. Jesus. Hmm This last ones are crazy man. That is not easy. That is not easy. That is not easy. That is 13. Plus 5 means 18. 30 plus 7 plus 6, 26. Shots.","```python
start_state = (5, 6, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Thirteen plus seven will give you twenty""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(5, 6, 20),
    comment='""Thirteen plus seven will give you twenty""',
)

# ""Thirteen minus seven will give you six""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(5, 6, 6),
    comment='""Thirteen minus seven will give you six""',
)

# ""Thirteen minus six will give you seven""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(5, 7, 7),
    comment='""Thirteen minus six will give you seven""',
)

# ""Thirteen minus six... will give you ten"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=10"",
    resulting_state=(5, 7, 10),
    comment='""Thirteen minus six... will give you ten""',
    result_calc_error=True,
)

# ""13 plus 5 means 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=18"",
    resulting_state=(6, 7, 18),
    comment='""13 plus 5 means 18""',
)

# ""plus 7 plus 6, 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7+6=26"",
    resulting_state=(26,),
    comment='""plus 7 plus 6, 26""',
    result_calc_error=True,
)

```"
4262,"[1,11,13,13]",,180," Target number 24, 13 plus 13 is 26, 11 times 13 is what? 143, 143 divided by 11. 13, 13 times 13 is what? 169, 169 divided by 11. 15, no we don't need decimals, 169. 13 plus 13 minus 11, no, 13 times 13 minus 11, 158. 13 times 13. Minus 1 divided by 11. 13 times 13 equals 169, minus 1 is 168, 168 divided by 11 is not the answer, it's 15. I do not know, this one's hard. 11 times 13 is 143, 143 divided by 13 is 11. Times 13. Mmm. This one's hard. I'm at a loss here. 141, 142. 143, 143. Thank you.","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(1, 11, 26),
    comment='""13 plus 13 is 26""',
)

# ""11 times 13 is what? 143""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13=143"",
    resulting_state=(1, 13, 143),
    comment='""11 times 13 is what? 143""',
)

# ""13 times 13 is what? 169""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13=169"",
    resulting_state=(1, 11, 169),
    comment='""13 times 13 is what? 169""',
)

# ""169 divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""169/11=15"",
    resulting_state=(1, 15),
    comment='""169 divided by 11. 15""',
    result_calc_error=True,
)

# ""13 plus 13 minus 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13-11=15"",
    resulting_state=(1, 15),
    comment='""13 plus 13 minus 11""',
)

# ""13 times 13 minus 11, 158""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13-11=158"",
    resulting_state=(1, 158),
    comment='""13 times 13 minus 11, 158""',
)

# ""13 times 13. Minus 1 divided by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13*13-1)/11=15"",
    resulting_state=(15,),
    comment='""13 times 13. Minus 1 divided by 11""',
    result_calc_error=True,
)

# ""11 times 13 is 143, 143 divided by 13 is 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*13/13=11"",
    resulting_state=(1, 11),
    comment='""11 times 13 is 143, 143 divided by 13 is 11""',
)
```"
4263,"[1,4,5,6]",,180," Target number 24. Okay, 4 plus 6 is 10. 1 plus 5 is 6. Oh my gosh. What am I thinking here? Get to a target number 1, 4, 5. 5 times 4, that's it. Parentheses, 5 times 4, close parenthesis, plus parenthesis, 6. Minus 1, close parenthesis, submit answer. No, that's right. What do you mean? That's 5 times 4 is 20, plus, oh, it's 25. Why is that not? Ugh. This one's hard. What about 5 times 4? Divided by 4. Minus 1. Times 6. Dude, are you kidding me? I'm running out of thoughts. That's my problem. I'm saying my thoughts out loud. 1 plus 4. 1 plus 6 is 7. Times 4, no, 7. 1 plus 6 is 7. Times 4, no, 7 is 8.","```python
start_state = (1, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 plus 6 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+6=10"",
    resulting_state=(1, 5, 10),
    comment='""4 plus 6 is 10""',
)

# ""1 plus 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5=6"",
    resulting_state=(4, 6, 6),
    comment='""1 plus 5 is 6""',
)

# ""5 times 4, that's it""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(1, 6, 20),
    comment='""5 times 4, that\'s it""',
)

# ""plus parenthesis, 6. Minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+6-1=25"",
    resulting_state=(25,),
    comment='""plus parenthesis, 6. Minus 1""',
)

# ""5 times 4? Divided by 4. Minus 1. Times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""((5*4)/4-1)*6=-6"",
    resulting_state=(-6,),
    comment='""5 times 4? Divided by 4. Minus 1. Times 6""',
)

# ""1 plus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+4=5"",
    resulting_state=(5, 5, 6),
    comment='""1 plus 4""',
)

# ""1 plus 6 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(4, 5, 7),
    comment='""1 plus 6 is 7""',
)

# ""Times 4, no"" participant considers multiplying 7 by 4 but rejects it
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(5, 28),
    comment='""Times 4, no""',
)
```"
4265,"[7,10,11,13]",,180, 7 plus 10 is 17. No. 10 times 13 would be 130. 10 times 17 would be 130. No. 10 times 13 would be 130. 130 divided by 11. No. 130 divided by 7 would be what? 18 and a half approximately. Let's see. 7 plus 10 is 17. 10 plus 11 is 21. 11 minus 7 would be 4. 10 plus 13 would be 23. 23. Here we go. 23 plus 11 would be 34. No. Here's 10. 7 plus 11 would be 18. 7 plus 11 would be 18. 7 plus 11 would be 18. 8 plus 11 would be 18. 8 plus 11 would be 18. 8 plus 11 would be 18. 8 plus 11 would be 18. 8 plus 11 would be 18. 8 plus 11 would be 18. 8 plus 11 would be 18. 8 plus 11 would be 18. 8 plus 11 would be 18.,"```python
start_state = (7, 10, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 10 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(11, 13, 17),
    comment='""7 plus 10 is 17""',
)

# ""10 times 13 would be 130""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(7, 11, 130),
    comment='""10 times 13 would be 130""',
)

# ""130 divided by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""130/11=11.82"",
    resulting_state=(7, 11.82),
    comment='""130 divided by 11""',
)

# ""130 divided by 7 would be what? 18 and a half approximately""
new_state = graph.explore_operation(
    curr_state,
    operation=""130/7=18.57"",
    resulting_state=(11, 18.57),
    comment='""130 divided by 7 would be what? 18 and a half approximately""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""7 plus 10 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(11, 13, 17),
    comment='""7 plus 10 is 17""',
)

# ""10 plus 11 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(7, 13, 21),
    comment='""10 plus 11 is 21""',
)

# ""11 minus 7 would be 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 10, 13),
    comment='""11 minus 7 would be 4""',
)

# ""10 plus 13 would be 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(7, 11, 23),
    comment='""10 plus 13 would be 23""',
)

# ""23 plus 11 would be 34""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+11=34"",
    resulting_state=(7, 34),
    comment='""23 plus 11 would be 34""',
)

# ""7 plus 11 would be 18"" (participant seems confused, as this is incorrect)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+11=18"",
    resulting_state=(10, 13, 18),
    comment='""7 plus 11 would be 18"" (participant seems confused, as this is incorrect)',
    result_calc_error=True,
)

# The participant then repeats ""8 plus 11 would be 18"" many times, which seems like a perseveration rather than actual calculation attempts
```"
4266,"[3,3,7,13]",,180," Real task, here we go, oh boy, 13, 13, Jesus, how do I do this one, 13 divided by 3, that's 13 divided by 3, that's not a whole number. That's not going to do it, okay, I think we are going to have to subtract the 13, we're going to end up with 7 times 6, 42, or we get to 11 somehow. 7, 7 times 3 is 21, 3 times 7, I get to 8, 7 times 21, hmm. This is a tricky one, 3, 7, 13 minus 7 is 6, there's, 6 times 4, 13 minus 7 is 6, 6, 13 minus, 2, 13 plus 3 is 16, huh, I don't know this one, I do not know this one, 3, 7, 7 times 3 is 21, times 3 is, 21 times 3 is 63, that's not as low as I told you, 3 times 13 is 15,","```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 divided by 3, that's not a whole number""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/3=4.33"",
    resulting_state=(3, 4.33, 7),
    comment='""13 divided by 3, that\'s not a whole number""',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3 is 21""',
)

# ""13 minus 7 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7 is 6""',
)

# ""13 plus 3 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(3, 7, 16),
    comment='""13 plus 3 is 16""',
)

# ""7 times 3 is 21, times 3 is, 21 times 3 is 63""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3*3=63"",
    resulting_state=(13, 63),
    comment='""7 times 3 is 21, times 3 is, 21 times 3 is 63""',
)

# ""3 times 13 is 15"" appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=15"",
    resulting_state=(3, 7, 15),
    comment='""3 times 13 is 15"" appears to be a calculation error',
    result_calc_error=True,
)
```"
4267,"[3,3,3,4]",(3x3-3)x4,122," This one should be easier, I think. If I get 6 times 4, 3, let's see, there we go, parenthesis 3, divided by 3, 3, times 3, 3 divided by 3 is 1 times 3, oh no, no, no, no, no, 3, 3, 3 times 3, 9, minus 3, 6, times 4, 4, well, I think it's right. 3 is 9 minus, 3, 3 times 3, minus, 9, minus, 3 times 3, minus,","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I get 6 times 4"" suggests participant is setting a subgoal
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""If I get 6 times 4""',
)

# ""3 divided by 3 is 1 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3/3)*3=3"",
    resulting_state=(3, 4),
    comment='""3 divided by 3 is 1 times 3""',
)

# ""3 times 3, 9, minus 3, 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(3*3)-3=6"",
    resulting_state=(4, 6),
    comment='""3 times 3, 9, minus 3, 6""',
)

# ""times 4"" participant multiplies their result by 4
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""times 4""',
)
```"
4269,"[5,6,7,7]",(7x6,180," How many of these are we doing, people? Fourteen. Seven times... Seven, forty-nine. Seven times six, forty-two. Five times six is thirty. Thirty-five, what is the answer here? What is the answer to this one? This one's tricking me. What is the answer to this one? I don't know on this one. Five... Five plus seven is twelve. Seven plus seven is fourteen. I think it's times four. I don't know. Here, this one's got me stumped. So, I must have two. Number two... Times seven is fourteen. You can divide six... Seven times six. Seven is forty-nine. Forty-nine divided by five. What's forty-nine? I don't think that works, does it? Forty-two divided by five. What's forty-two divided by five? Does that work? Eight? No, it doesn't work. Thirty divided by seven doesn't work. Forty-two... Maybe... Here we go. Seven times six...","```python
start_state = (5, 6, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Seven times... Seven, forty-nine""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(5, 6, 49),
    comment='""Seven times... Seven, forty-nine""',
)

# ""Seven times six, forty-two""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 7, 42),
    comment='""Seven times six, forty-two""',
)

# ""Five times six is thirty""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(7, 7, 30),
    comment='""Five times six is thirty""',
)

# ""Five plus seven is twelve""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(6, 7, 12),
    comment='""Five plus seven is twelve""',
)

# ""Seven plus seven is fourteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(5, 6, 14),
    comment='""Seven plus seven is fourteen""',
)

# ""Times seven is fourteen"" - not clear what's being multiplied

# ""Seven times six"" participant tries this operation again
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 7, 42),
    comment='""Seven times six""',
)

# ""Forty-nine divided by five""
curr_state = graph.move_to_node((5, 6, 49))  # Moving to state with 49 from earlier
new_state = graph.explore_operation(
    curr_state,
    operation=""49/5=9.8"",
    resulting_state=(6, 9.8),
    comment='""Forty-nine divided by five""',
)

# ""Forty-two divided by five""
curr_state = graph.move_to_node((5, 7, 42))  # Moving to state with 42
new_state = graph.explore_operation(
    curr_state,
    operation=""42/5=8.4"",
    resulting_state=(7, 8.4),
    comment='""Forty-two divided by five""',
)

# ""Thirty divided by seven""
curr_state = graph.move_to_node((7, 7, 30))  # Moving to state with 30
new_state = graph.explore_operation(
    curr_state,
    operation=""30/7=4.29"",
    resulting_state=(7, 4.29),
    comment='""Thirty divided by seven""',
)

# The participant ends by saying ""Seven times six..."" again, which matches their final submitted response of ""(7x6""

```"
4270,"[8,8,8,11]",(11-8)x(-8/8),180," How many of these are we doing, for the love of God? 11, 8, 8 times 8 is 64, divided by 8. 8. 8 times 11 will be 88. It's going to be like 11 minus 8 is... Okay. Maybe we got it. 8 divided by 8, which is 1. No. We got 11 minus 8. I need to cancel out one of these 8s. 11 minus 8 would give me 3. 11 minus 8 is already 3. I need this 8 to reunite. 8. how did I make these two eights into one eight times negative eight no I don't know negative eight divided by eight I'm not sure on this one I'm not sure I'm not sure I don't know on this one I don't know this one next","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 is 64, divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8/8=8"",
    resulting_state=(8, 8, 11),
    comment='""8 times 8 is 64, divided by 8""',
)

# ""8 times 11 will be 88""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*11=88"",
    resulting_state=(8, 8, 88),
    comment='""8 times 11 will be 88""',
)

# ""11 minus 8 is...""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8 is...""',
)

# ""8 divided by 8, which is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 8, 11),
    comment='""8 divided by 8, which is 1""',
)

# ""11 minus 8 would give me 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8 would give me 3""',
)

# The participant considers using negative numbers but doesn't actually compute anything
```"
4275,"[6,8,11,12]",,180," Let's continue. Target number 24, 6, 8, 11, and 12. Where, where, where? 3, 6, and 3, 3, 12, 6. 11 and 8 is 3. 9, 9, and 6 is 15. 2 times 11 is 22. 11 times 6 is 66. Minus 8 is 58. I don't know how you got it. 1, 8, and 6 is 14. Plus 10. You can get 10 out of that. 8 minus 6 is 2. 2 times 12 is 24, but you can't get rid of the 11. 5, 13. 11 minus 6 is 5. 12 minus 5 is 7. 7 and 8 is 15. You got a 4. 48 minus 23 is 25. What do I... Well, well, well. I don't know how to do that. I'm going to try and figure out how to solve it. I don't know how to solve it. I'm going to try, and I'm going to try and figure it out. I've got two numbers 10, but I have a number on my hands. 16. So, 12 minus 8 is 4, 4 times 6 is 24, leaves the 11, 8 plus 6 is 14, 11 plus 6 is 7, 14, 17 and 20.","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 and 8 is 3"" - participant likely means 11-8=3
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 6, 12),
    comment='""11 and 8 is 3""',
)

# ""9, 9, and 6 is 15"" - not clear where 9 comes from, skipping this operation

# ""11 times 6 is 66. Minus 8 is 58""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*6-8=58"",
    resulting_state=(12, 58),
    comment='""11 times 6 is 66. Minus 8 is 58""',
)

# ""1, 8, and 6 is 14"" - not clear where 1 comes from, skipping

# ""8 minus 6 is 2. 2 times 12 is 24, but you can't get rid of the 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 11, 12),
    comment='""8 minus 6 is 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(11, 24),
    comment='""2 times 12 is 24, but you can\'t get rid of the 11""',
)

# ""11 minus 6 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(5, 8, 12),
    comment='""11 minus 6 is 5""',
)

# ""12 minus 5 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-5=7"",
    resulting_state=(7, 8),
    comment='""12 minus 5 is 7""',
)

# ""7 and 8 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(15,),
    comment='""7 and 8 is 15""',
)

# ""48 minus 23 is 25"" - not clear where these numbers came from, skipping

# ""12 minus 8 is 4, 4 times 6 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 11),
    comment='""12 minus 8 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(11, 24),
    comment='""4 times 6 is 24""',
)

# ""8 plus 6 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(11, 12, 14),
    comment='""8 plus 6 is 14""',
)

# ""11 plus 6 is 7"" - this is incorrect arithmetic
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=7"",
    resulting_state=(8, 12, 7),
    comment='""11 plus 6 is 7"" - incorrect arithmetic',
    result_calc_error=True,
)
```"
4280,"[2,4,6,13]",(13x2)-(6-4),120," 24, 6 times 4 is 24, 15, 25, 7, 8, 7, 11, 2 times 2 is 22, 6 and 6 is 12, plus 13 is 25, 13 minus 4 is 9, 10, 11, 17, 13 minus 6 is 7, 3, yeah, that doesn't work, 2 is 9, 15, 19, 13, 9, 2, 6 and 2 is 12, that's not going to be it, 15, 15 and you need 9, you can't get 9 from 6 and 4, 6 times 4, you can't get 4 from 6 and 13, 17, 17, you need 7, you can't get that from 6 and 2. 13 times 2 is 26. Federation. 13 times 2 is 26, minus 6, minus 4. Federation. 26 minus 2.","```python
start_state = (2, 4, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(2, 13, 24),
    comment='""6 times 4 is 24""',
)

# The numbers ""15, 25, 7, 8, 7, 11"" seem to be the participant listing possibilities without clear operations

curr_state = graph.move_to_node(start_state)
# ""2 times 2 is 22"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 6, 13),
    comment='""2 times 2 is 22"" - participant makes calculation error',
)

curr_state = graph.move_to_node(start_state)
# ""13 minus 4 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-4=9"",
    resulting_state=(2, 6, 9),
    comment='""13 minus 4 is 9""',
)

curr_state = graph.move_to_node(start_state)
# ""13 minus 6 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(2, 4, 7),
    comment='""13 minus 6 is 7""',
)

curr_state = graph.move_to_node(start_state)
# ""6 and 2 is 12"" - participant likely means 6*2
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(4, 12, 13),
    comment='""6 and 2 is 12""',
)

curr_state = graph.move_to_node(start_state)
# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(4, 6, 26),
    comment='""13 times 2 is 26""',
)

# ""26 minus 2"" - participant likely means 26-(6-4) based on their final answer
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(6-4)=24"",
    resulting_state=(24,),
    comment='""26 minus 2"" - participant likely means 26-(6-4) based on their final answer',
)
```"
4285,"[1,4,5,8]",,180," Okay, 8 x 3, how do we get to 3 from there? 4 x 6, do we get to 6 from there? 8, okay, 20, just add things, 8, oh yeah, don't even think of that, 8, 15, 14, 18. What is 18 plus 6? I can only use things once. 12, this is 12, plus 6, okay, 1, you can always multiply by and it doesn't do anything, 9, 13, 12, and 5, hmm, I got the first ones, why can't I do this? 9, that's 9 also, 4 x 5, 20, 8, 22, so I'll make some more, I think, 12, 13, 32 minus 5, 8 minus 8, 35 minus, okay, 4, Okay, divide. Two. Nope. Four. Five. Okay. 17, 18. 17. No. 13 plus 9. 11. Four. 10. I can't get there, though. Okay.","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 x 3, how do we get to 3 from there?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 x 3, how do we get to 3 from there?""',
)

# ""4 x 6, do we get to 6 from there?"" suggests another subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 x 6, do we get to 6 from there?""',
)

# ""just add things, 8..."" participant starts adding numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(1, 4, 13),
    comment='""just add things, 8""',
)

# ""15, 14, 18"" participant seems to be trying different additions
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4+5=17"",
    resulting_state=(1, 17),
    comment='""15, 14, 18"" participant seems to be trying different additions',
)

# ""4 x 5, 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(1, 8, 20),
    comment='""4 x 5, 20""',
)

# ""32 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(1, 5, 32),
    comment='""32 minus 5""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-5=27"",
    resulting_state=(1, 27),
    comment='""32 minus 5""',
)

# ""8 minus 8"" participant tries subtracting
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(1, 4, 5),
    comment='""8 minus 8"" participant tries subtracting',
)

# ""13 plus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(1, 4, 13),
    comment='""13 plus 9""',
)

# The rest of the transcript shows the participant trying various combinations but not clearly stating the operations they're performing
```"
4293,"[1,11,12,13]",12,180," Okay, 12 plus 13 minus 1, 12 plus 11 plus 1, okay, 20, add those together and subtract those, 25 minus 1, you can always just multiply something by 1, so you can always get rid of the 1. 14 plus 11 minus 1, you get a spare 12, okay, 1, 12, 24, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 13, 7, 12 plus, 12 times, 13 divided by 11, 14, 12 times 14 divided by 11, hmm, That sounds completely wrong. What? Okay, twelve times fourteen. Can you just reduce the Okay. Twelve. Let's see. Is the idea right? Twelve. Twelve.","```python
start_state = (1, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 13 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13-1=24"",
    resulting_state=(11, 24),
    comment='""12 plus 13 minus 1""',
)

# ""12 plus 11 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+11+1=24"",
    resulting_state=(13, 24),
    comment='""12 plus 11 plus 1""',
)

# ""14 plus 11 minus 1"" - participant first computes 13+1=14
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(11, 12, 14),
    comment='""14 plus 11 minus 1"" - first computing 13+1=14',
)

# The participant then lists some numbers but doesn't perform operations

# ""12 times 13 divided by 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13/11=14.18"",
    resulting_state=(1, 14.18),
    comment='""12 times 13 divided by 11""',
)

# The participant then says ""twelve"" several times but doesn't perform any operations
```"
4298,"[4,7,8,12]",,180," 4, 7, 8, and 12, target number 24. So we have, let's see, 3 times 4 would not give you 12. 12 minus 7 is 5. 12 minus 4 is 8. And then 7 and 8 by themselves don't really do you much of anything. How about 12 plus 4? 4 gives you 16, plus 8 is 24, but then you got the 7. How about 12 times 4 is 48? 12 times 8 is 84. 4 times 7 is, that's way too high. How about just 8 times 7 is 56? 8 times 4 is 32. 12 minus 7 is 5. 32 minus 5 is 27. That doesn't do it for you. 8 divided by 4 is 2. 12 divided by 4 is 3. 3 times 8 is 24, but then you got the 7. 3 times 8 is 7. So can I get a 3 out of a 12, a 4, and a 7? 12 minus 4 is 8. Then you got an 8 and a 7. 12 minus 8 is 4. 4, and then you got a 7 and a 7. 12 minus 8 is 7.","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 8),
    comment='""12 minus 7 is 5""',
)

# ""12 minus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 8),
    comment='""12 minus 4 is 8""',
)

# ""12 plus 4 gives you 16, plus 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4+8=24"",
    resulting_state=(7, 24),
    comment='""12 plus 4 gives you 16, plus 8 is 24""',
)

# ""12 times 4 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(7, 8, 48),
    comment='""12 times 4 is 48""',
)

# ""12 times 8 is 84""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=84"",
    resulting_state=(4, 7, 84),
    result_calc_error=True,
    comment='""12 times 8 is 84""',
)

# ""8 times 7 is 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(4, 12, 56),
    comment='""8 times 7 is 56""',
)

# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 12, 32),
    comment='""8 times 4 is 32""',
)

# ""12 minus 7 is 5. 32 minus 5 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-(12-7)=27"",
    resulting_state=(27,),
    comment='""12 minus 7 is 5. 32 minus 5 is 27""',
)

# ""8 divided by 4 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 7, 12),
    comment='""8 divided by 4 is 2""',
)

# ""12 divided by 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 7, 8),
    comment='""12 divided by 4 is 3""',
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(7, 24),
    comment='""3 times 8 is 24""',
)

# ""12 minus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 8),
    comment='""12 minus 4 is 8""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 4, 7),
    comment='""12 minus 8 is 4""',
)
```"
4301,"[2,7,7,10]",,180," 9, we've already done 9 times 3, if, uh, no, that would be 8, no, yeah, if I did 7 minus 2 equals, wait, 7 plus 2 equals 5, and then, oh, 9, and then 10 minus 7 equals 3, 27 is not the right answer, uh, 17 plus 9 is 26, that's not the right answer either, dividing 10 by 2 is 5, which doesn't help, because 7 times 7 is 49, even if you did 49 minus 20, that would still give you 29, uh, 10 times 7 is 29, even if you did 49 minus 20, that would still give you 29, uh, 10 times 7 is 49, and 10 plus 7 is 17, yeah, we already did that, it's 26, that doesn't, that's not the right answer, uh, 12 plus 14, yeah, all I'm doing is getting 36 any number of ways, I think my brain is not working, ugh. 10 times 2 is 20, and then 14, and then 14, and then 14, and then 14, and then 14, and","```python
start_state = (2, 7, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 minus 2 equals, wait, 7 plus 2 equals 5"" - participant corrects themselves but makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+2=5"",
    resulting_state=(7, 10, 5),
    comment='""7 plus 2 equals 5"" - calculation error',
    result_calc_error=True,
)

# ""10 minus 7 equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(2, 3, 7),
    comment='""10 minus 7 equals 3""',
)

# ""dividing 10 by 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(5, 7, 7),
    comment='""dividing 10 by 2 is 5""',
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(2, 10, 49),
    comment='""7 times 7 is 49""',
)

# Back to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""10 times 7 is 49"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7=49"",
    resulting_state=(2, 7, 49),
    comment='""10 times 7 is 49"" - calculation error',
    result_calc_error=True,
)

# Back to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(2, 7, 17),
    comment='""10 plus 7 is 17""',
)

# Back to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""10 times 2 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(7, 7, 20),
    comment='""10 times 2 is 20""',
)

# The rest appears to be the participant repeating ""14"" without clear operations
```"
4302,"[1,7,8,10]",10+8+7-1,85," Okay, 1, 7, 8, and 10. So you got, this is going to be a very big number I think. So you can get 8 by doing 7 plus 1. And then 10 minus 2 would be, so you could get 16 out of that. Which is not 24. 8 divided by, 8 divided by, wait what am I trying to do here? 8 divided by something, that doesn't help. 17 plus 8 is 35. Oh, 25. Minus 1. Wait a minute, is it that simple? 10 plus 7 equals 17 plus 8 equals 25 minus 1 is 24. Okay, 10 plus 7 plus 8 minus 1.","```python
start_state = (1, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""you can get 8 by doing 7 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(8, 8, 10),
    comment='""you can get 8 by doing 7 plus 1""',
)

# ""10 minus 2 would be, so you could get 16 out of that""
# The participant seems to be trying to get to 16, though it's not clear exactly how
graph.set_subgoal(
    (16,),
    state_after_subgoal=(24,),
    comment='""so you could get 16 out of that""',
)

# ""8 divided by, 8 divided by"" participant considers division but abandons it

# ""17 plus 8 is 35"" participant likely got 17 from 10+7
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(1, 8, 17),
    comment='""17 plus 8 is 35"" participant first computes 10+7',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+8=25"",
    resulting_state=(1, 25),
    comment='""17 plus 8 is 35"" - participant computes 17+8 but initially miscalculates as 35',
)

# ""Minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-1=24"",
    resulting_state=(24,),
    comment='""Minus 1""',
)

# The participant then restates their solution: ""10 plus 7 plus 8 minus 1""
# This is equivalent to what they just did but in a different order
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7+8-1=24"",
    resulting_state=(24,),
    comment='""10 plus 7 plus 8 minus 1""',
)
```"
4313,"[6,7,9,9]",(9-7)x9+6,127," Okay. 9 times 9. Okay, okay. 7 minus 9 is 2. It's 3. 3 times this is 21. 9. This is 81. And 76. 7 times 6 is 42. 42 minus 81. It doesn't get you there. What kind of this? 2. It doesn't get you there. 8 plus 8, 18 plus 6. 18 plus 6 will get you there. So how do you go there? Okay. What happens to 7? 9. 9, 9, 9, 7, 6. 6. 7. 9. So you have to get 9 minus 7. 9 minus 7 is 2. Okay. 9 minus 7 is 2. Okay. 9 minus 7 is 2.","```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 7, 81),
    comment='""9 times 9""',
)

# ""7 minus 9 is 2. It's 3."" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=3"",
    resulting_state=(3, 6, 9),
    comment='""7 minus 9 is 2. It\'s 3."" - participant makes calculation error',
    result_calc_error=True,
)

# ""3 times this is 21"" - participant using the 3 from previous calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=21"",
    resulting_state=(6, 21),
    comment='""3 times this is 21""',
    result_calc_error=True,
)

# ""7 times 6 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(9, 9, 42),
    comment='""7 times 6 is 42""',
)

# ""8 plus 8, 18 plus 6"" - not clear where 8 and 18 come from

# ""9 minus 7 is 2"" - participant tries this operation multiple times
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 6, 9),
    comment='""9 minus 7 is 2""',
)

# Based on their final answer (9-7)x9+6, they must have then multiplied 2 by 9 and added 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9+6=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they multiplied 2 by 9 and added 6"",
)
```"
4314,"[6,10,10,13]",(13+10)x6,180," Oh my god, that was just the practice. You're kidding me, right? Okay, so what do we have here? 10... times... no no no no. 10 plus 13 is 23. Plus 10... minus 6. That's not right. Okay, let's see. Let's try... We have to use all the numbers, right? 6 times... oh, let's see. 13 minus 6 is 7. Plus 10... 10... plus 13 is 23. Plus 6 is 29. That's not right. Okay, so... let's see here. 10... no, 10 divided by 10 is 1. 10 divided by 10 is 1. Plus... No, that's not right. Okay, let's try this. 13 plus 10... 13 plus 10... 13 plus 10... is 23 times 10, and divided by 6, 13 plus 10, 13 plus 10. That's 23, times 10, divided by 6. Okay, so let's try times 6.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 13 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+13=23"",
    resulting_state=(6, 10, 23),
    comment='""10 plus 13 is 23""',
)

# ""Plus 10... minus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+10-6=27"",
    resulting_state=(27,),
    comment='""Plus 10... minus 6""',
)

# ""13 minus 6 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(7, 10, 10),
    comment='""13 minus 6 is 7""',
)

# ""Plus 10... 10... plus 13 is 23. Plus 6 is 29""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10+6=29"",
    resulting_state=(10, 29),
    comment='""Plus 10... 10... plus 13 is 23. Plus 6 is 29""',
)

# ""10 divided by 10 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/10=1"",
    resulting_state=(1, 6, 13),
    comment='""10 divided by 10 is 1""',
)

# ""13 plus 10... is 23 times 10, and divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+10)*10/6=38.33"",
    resulting_state=(38.33,),
    comment='""13 plus 10... is 23 times 10, and divided by 6""',
)

# ""13 plus 10... That's 23, times 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+10)*6=138"",
    resulting_state=(10, 138),
    comment='""13 plus 10... That\'s 23, times 6""',
)
```"
4315,"[2,6,10,10]",10+10x2-6,61," Okay, so 10 plus 10 is 20. 20 times 2 is 40 divided by 6. Wait, what was that? All right. What do you see in that? 10 plus 10 is 20 times 2. Okay, so that's easy. 10 times, nope. 10 plus 10. 10 times 2 minus 6.","```python
start_state = (2, 6, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(2, 6, 20),
    comment='""10 plus 10 is 20""',
)

# ""20 times 2 is 40 divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20*2/6=6.67"",
    resulting_state=(6.67,),
    comment='""20 times 2 is 40 divided by 6""',
)

# ""10 plus 10 is 20 times 2"" participant tries a different approach
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+10)*2=40"",
    resulting_state=(6, 40),
    comment='""10 plus 10 is 20 times 2""',
)

# Finally, the participant finds the solution: ""10 plus 10 times 2 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10*2-6=24"",
    resulting_state=(24,),
    comment='""10 plus 10 times 2 minus 6""',
)
```"
4316,"[6,8,8,10]",(8+10),180," Okay, 8 times 8 is 64, divided by 6. Let's see, 6 times 8 is 48, divided by 8, plus 10? No. Let's see, 8 times 8 is 64, 8 times 10 is 80, divided by 6, plus 10? Nope, that's not right either. Okay. Let's try, let's try, oh, 8 plus 8. 8 plus 8, plus 8 is 16, plus 6? Hang on, let's see. 8 plus 8, 8 plus 8 is 16. Plus 6. Um, wait, let's see. Times... Times 6. Nope. Um... Times 10, divided by 6. 8 plus 6. What's 8 plus 6? 8 plus 6 is 14. 8 plus 6 is 14. And then we can do 8 plus 6 is 14. Times 10? Times 10. 8 plus 6. uh divided by eight that's not right either let's see times 10 makes it 68 uh minus 8 becomes 60 8 plus 10 is 16 8 plus 10","```python
start_state = (6, 8, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 is 64, divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*8)/6=10.67"",
    resulting_state=(10, 10.67),
    comment='""8 times 8 is 64, divided by 6""',
)

# ""6 times 8 is 48, divided by 8, plus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*8)/8+10=16"",
    resulting_state=(16,),
    comment='""6 times 8 is 48, divided by 8, plus 10""',
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(6, 10, 16),
    comment='""8 plus 8 is 16""',
)

# ""Plus 6"" from the previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(10, 22),
    comment='""Plus 6""',
)

# ""8 plus 6 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(8, 10, 14),
    comment='""8 plus 6 is 14""',
)

# ""Times 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*10=140"",
    resulting_state=(8, 140),
    comment='""Times 10""',
)

# ""divided by eight""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""140/8=17.5"",
    resulting_state=(17.5,),
    comment='""divided by eight""',
)

# ""times 10 makes it 68 uh minus 8 becomes 60""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*10)+8=68"",
    resulting_state=(8, 68),
    comment='""times 10 makes it 68""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""68-8=60"",
    resulting_state=(60,),
    comment='""minus 8 becomes 60""',
)

# ""8 plus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(6, 8, 18),
    comment='""8 plus 10""',
)
```"
4317,"[4,4,7,7]",(7+7),180," Okay, 7 times 7 is 49 divided by 4. 4 plus 4 is 8 times 7. There we go, 4 plus 4 times 7 minus 7. Let's see, let's do 4 plus 4 Four plus 4 is 8 times 7. Nope, that's not right. I said times 7. Divided by seven? No. 7 plus 7 is 14 times 4 minus 4 no okay so 7 plus 4 is 11 right 7 plus 4 is 11 times 7 times 4 can't be times 4 let's see 7 plus 4 is 11 11 times 7 and then minus 7 plus 4 is 11 11 times 7 and then minus 7 plus 4 is 11 11 times 7 and then minus um times 4 is only 23 so is only 23 so is only 23 so that means that 7 and 7 is 14. 7 and 7 is 14. 7 and 7 is 14. 7 and 7 is 14. 14 times four 14 times four","```python
start_state = (4, 4, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 7 is 49 divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7/4=12.25"",
    resulting_state=(4, 12.25),
    comment='""7 times 7 is 49 divided by 4""',
)

# ""4 plus 4 is 8 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+4)*7=56"",
    resulting_state=(7, 56),
    comment='""4 plus 4 is 8 times 7""',
)

# ""4 plus 4 times 7 minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4+4)*7-7=49"",
    resulting_state=(49,),
    comment='""4 plus 4 times 7 minus 7""',
)

# ""7 plus 7 is 14 times 4 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+7)*4-4=52"",
    resulting_state=(52,),
    comment='""7 plus 7 is 14 times 4 minus 4""',
)

# ""7 plus 4 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(4, 7, 11),
    comment='""7 plus 4 is 11""',
)

# ""11 times 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7=77"",
    resulting_state=(4, 77),
    comment='""11 times 7""',
)

# ""times 4 is only 23"" participant seems to be trying something new
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=23"",
    resulting_state=(7, 23),
    comment='""times 4 is only 23""',
    result_calc_error=True,
)

# ""7 and 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(4, 4, 14),
    comment='""7 and 7 is 14""',
)

# ""14 times four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*4=56"",
    resulting_state=(4, 56),
    comment='""14 times four""',
)
```"
4319,"[5,6,7,13]",(7+5)x13/6,180," Alright, so we have 5 times 6 is 30. Let's try 13. 13 minus 6 is 7, times 7. That's negatives. 6 plus 7 is 13, plus 13. No, that won't work. That's more than, um, let's see here. Target number. Okay. 7 plus 6. 6 plus 5. Okay. See that's not right either. Ummm. 7, 8, 9, 10, 11, 12. 13 is 25 that won't work okay um let's see here here seven plus six then it becomes 13 13 times 13 is what oh wait seven plus six 13 times 13 is 85 but we divide that by five oh no okay seven plus five times six seven plus five is 12 times six minus 13 no that's not right either seven plus five times 13 divided by six seven plus five is 12 times six","```python
start_state = (5, 6, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(7, 13, 30),
    comment='""5 times 6 is 30""',
)

# ""13 minus 6 is 7, times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-6)*7=49"",
    resulting_state=(5, 49),
    comment='""13 minus 6 is 7, times 7""',
)

# ""6 plus 7 is 13, plus 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7+13=26"",
    resulting_state=(5, 26),
    comment='""6 plus 7 is 13, plus 13""',
)

# ""seven plus six then it becomes 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+6=13"",
    resulting_state=(5, 13, 13),
    comment='""seven plus six then it becomes 13""',
)

# ""13 times 13 is 85 but we divide that by five""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13/5=85/5"",
    resulting_state=(17,),
    comment='""13 times 13 is 85 but we divide that by five""',
    result_calc_error=True,
)

# ""seven plus five times six""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+5)*6=72"",
    resulting_state=(13, 72),
    comment='""seven plus five times six""',
)

# ""seven plus five times 13 divided by six""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+5)*13/6=26"",
    resulting_state=(26,),
    comment='""seven plus five times 13 divided by six""',
)
```"
4321,"[12,12,13,13]",12x13/13+12,48," Okay. So, you're going to make me do, this is not going to be that simple. No. So, 13, let's try 13 times 13 divided by 12 plus 12. No. 12 times 13 is 156. Divide it by 13 times, no, plus 12.","```python
start_state = (12, 12, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 times 13 divided by 12 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*13/12+12=29.08"",
    resulting_state=(26.08,),
    comment='""13 times 13 divided by 12 plus 12""',
)

# ""No."" participant realizes this won't work and tries something else
# ""12 times 13 is 156""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*13=156"",
    resulting_state=(12, 13, 156),
    comment='""12 times 13 is 156""',
)

# ""Divide it by 13... plus 12"" participant finds the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""156/13+12=24"",
    resulting_state=(24,),
    comment='""Divide it by 13... plus 12"" participant finds the solution',
)
```"
4328,"[4,4,8,10]",((10x4)-8)x,245," Let's see... 4... 4... 2... Let's see... 4... Minus... 8... Minus 10... ... ... ... ... ... ... Okay, 4... times... 4 minus 8... ... ... plus 10... ... ... times 4... ... God damn it, let's see, oh, whoops, okay. Okay, 4 minus 8 equals 4 times 4 minus 10. 4 plus 4 plus No, no, no, no, no, no. 4 4 plus 4 plus Okay. 10 plus 4 equals 14 minus 8 times 10 plus 4 equals 14 minus 8 times","```python
start_state = (4, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4... Minus... 8... Minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-8-10=-14"",
    resulting_state=(-14, 4),
    comment='""4... Minus... 8... Minus 10""',
)

# ""4... times... 4 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4-8=8"",
    resulting_state=(8, 10),
    comment='""4... times... 4 minus 8""',
)

# ""plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(18,),
    comment='""plus 10""',
)

# ""4 minus 8 equals 4 times 4 minus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-8+4*4-10=-2"",
    resulting_state=(-2, 4),
    comment='""4 minus 8 equals 4 times 4 minus 10""',
)

# ""4 plus 4 plus"" participant starts over
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(8, 8, 10),
    comment='""4 plus 4""',
)

# ""10 plus 4 equals 14 minus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+4-8=6"",
    resulting_state=(4, 6),
    comment='""10 plus 4 equals 14 minus 8""',
)

```"
4329,"[2,2,12,12]",2x((2x12)-12),41, Let's see. 2 So it is 2 times 2 So 2 times 24 minus 12.,"```python
start_state = (2, 2, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 12, 12),
    comment='""2 times 2""',
)

# ""2 times 24 minus 12"" - participant likely meant 2 times (24 minus 12)
# And they likely got 24 from 2*12
new_state = graph.explore_operation(
    curr_state,
    operation=""2*(2*12-12)=24"",
    resulting_state=(24,),
    comment='""2 times 24 minus 12"" - participant likely meant 2 times (24 minus 12)',
)
```"
4332,"[1,3,6,13]",,180," So let's see what we have. I have 1, 3, 6, and 24. If I, let's see, 6 plus 13 is 19, 2 and 23. So I can't just add all the numbers together. What can I do? I have to use all the numbers. So what if I do 6 times 3, that's 18. I can't get to 24 with that. 3, 13 times 3, that's 39. I can't divide, no. Let's see. 6 times 1 times 3, that's 13. And then 6 times 18. What's 13 minus 6? 7, 13. If I get 7, can I do anything with this? Sometimes there's 21, 22, no. So, can I multiply anything that gets me close? So, 24, let's divide it by 8. 8 plus, let's see, 1, 2, 3, no. 24 divided by 6 is 4. 4 plus 13, 17, 20, 21, nope, still not there. Can't divide by anything. 24 divided by 6 is 4, no. By 3 is 8. 8 times 6 is 8. 8. 8 divided by 13. 48 divided by 13. No, I can't do that. 6 times 13 divided by 78, divided by 3, minus 1, no, that doesn't work either. 3 times 13? 39 divided by, let's see, 39 divided by 6 times 13, no, 3 times. Thank you.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 plus 13 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+13=19"",
    resulting_state=(1, 3, 19),
    comment='""6 plus 13 is 19""',
)

# ""6 times 3, that's 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 13, 18),
    comment='""6 times 3, that\'s 18""',
)

# ""13 times 3, that's 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(1, 6, 39),
    comment='""13 times 3, that\'s 39""',
)

# ""6 times 1 times 3, that's 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*1*3=18"",
    resulting_state=(13, 18),
    comment='""6 times 1 times 3, that\'s 13"" - participant made calculation error',
    result_calc_error=True,
)

# ""13 minus 6? 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 6? 7""',
)

# ""24 divided by 6 is 4""
# This seems to be working backward from the goal of 24, so we'll mark it as a subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 is 4"" - participant working backward from goal',
)

# ""24 divided by 3 is 8""
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""By 3 is 8"" - participant working backward from goal',
)

# ""6 times 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*13=78"",
    resulting_state=(1, 3, 78),
    comment='""6 times 13""',
)

# ""divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""78/3=26"",
    resulting_state=(1, 26),
    comment='""divided by 3""',
)

# ""3 times 13? 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(1, 6, 39),
    comment='""3 times 13? 39""',
)
```"
4333,"[5,7,13,13]",,180," Okay, so I have 13, 13, 7, and 5. So, what can I do here? 13, plus 13 is 26, divided by, so no, I can't do that. 26 minus, let me see, minus 5, 26. 26 minus 5 is 21, divided by 7. No, that's not right. Let's see. Maybe 7 times 13, that's 91. Divided by 13, 7, no, 7 times 5 is 35. Let's see. 24, if I go backwards, let's see, minus, let's see, 24 times 13 is 312, divided by 13 again is 24, and then I have 7 and a 5 left, so that's 12. What can I do with this? Or 7 and a 5, if I, I can't add and subtract. I need to go back to it. So, let's see, 24, okay, so 24, let's say, let's go back to 24. So, if I have, let's see, if I am, if I multiply by 7, or let's see, 24, 24 times 7 and 5 together, that's 12, 28, divided by 13, no, that's not going to work. 24 times 7 is 168, can I divide by 13? No, that leaves me in, it doesn't give me a whole number. So, 24, oh, it's so hard, minus 24, let's see, times 7 is 168, 168, is that divisible by, well, let's see, minus 26, 142, no, that won't work. 24 times 5, let's see, minus 26, 24 divided by 7.","```python
start_state = (5, 7, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(5, 7, 26),
    comment='""13 plus 13 is 26""',
)

# ""26 minus 5 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-5=21"",
    resulting_state=(7, 21),
    comment='""26 minus 5 is 21""',
)

# ""divided by 7"" participant considers dividing 21 by 7 but rejects it
curr_state = graph.move_to_node(start_state)

# ""7 times 13, that's 91""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*13=91"",
    resulting_state=(5, 13, 91),
    comment='""7 times 13, that\'s 91""',
)

# ""7 times 5 is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(13, 13, 35),
    comment='""7 times 5 is 35""',
)

# ""24, if I go backwards"" suggests the participant is working backward from the goal
graph.set_subgoal(
    (13, 13, 7, 5),
    state_after_subgoal=(24,),
    comment='""24, if I go backwards""',
)

# The participant considers several operations with 24 but since they're working backwards
# from the goal and haven't made 24 yet, we don't include those operations
```"
4337,"[2,7,9,13]",13x2-(9-7,180," 24, let's see, 24 times, let's see, if I multiply by, I don't know, can I add and subtract? Let's see, if I add the most, the highest number is 9 plus 13 is 22. The other two numbers add up to 9, that would be 29, that won't work. I can't just add all of them together, so what if I can, 13 plus 9 plus 7 is 29, what about 13 plus 7 plus 2, that's 22, nope, I can't do that. What if I multiply, let's see, 9 plus 7 plus 2, 9 plus 7 plus 2 is 18. Listen, there's a 13, no, let's see, what about 13 times 2, no, 13 times 7, 13 times 7 is 91, how can I divide by 9? Minus 2 divided by 9, no, 13, let me see. 9 times 13 is 117, a minus, it won't divide by 7 or 2, won't divide by, oh god. I, let me see, 18, let me see, that big number, let me see, 7 plus 9? 16, 16, minus 2, divided by 2? 8, 13, no, 7 minus, or 9 minus, oh, no, that's, 9 minus 2 is 7, plus 7 is 14, no, plus 13 is 27. Um, let's see, 24, let's see, what do I have? 7 plus 9 is 15, 15 times 2 is 30, 30, no, 2 times 13 is 26, and then, if I, oh, 13 times 2 minus 7, oop. 9 minus 7 will give me,","```python
start_state = (2, 7, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 13 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=22"",
    resulting_state=(2, 7, 22),
    comment='""9 plus 13 is 22""',
)

# ""The other two numbers add up to 9"" (2+7=9)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+2+7=31"",
    resulting_state=(31,),
    comment='""The other two numbers add up to 9"" then adding to 22',
)

# ""13 plus 9 plus 7 is 29""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9+7=29"",
    resulting_state=(2, 29),
    comment='""13 plus 9 plus 7 is 29""',
)

# ""13 plus 7 plus 2, that's 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7+2=22"",
    resulting_state=(9, 22),
    comment='""13 plus 7 plus 2, that\'s 22""',
)

# ""9 plus 7 plus 2 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+2=18"",
    resulting_state=(13, 18),
    comment='""9 plus 7 plus 2 is 18""',
)

# ""13 times 7 is 91""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7=91"",
    resulting_state=(2, 9, 91),
    comment='""13 times 7 is 91""',
)

# ""9 times 13 is 117""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*13=117"",
    resulting_state=(2, 7, 117),
    comment='""9 times 13 is 117""',
)

# ""7 plus 9? 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(2, 13, 16),
    comment='""7 plus 9? 16""',
)

# ""16, minus 2, divided by 2? 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(16-2)/2=7"",
    resulting_state=(7, 13),
    comment='""16, minus 2, divided by 2? 8""',
)

# ""9 minus 2 is 7, plus 7 is 14, no, plus 13 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2+7+13=27"",
    resulting_state=(27,),
    comment='""9 minus 2 is 7, plus 7 is 14, no, plus 13 is 27""',
)

# ""7 plus 9 is 15, 15 times 2 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+9)*2=32"",
    resulting_state=(13, 32),
    comment='""7 plus 9 is 15, 15 times 2 is 30"" - participant made calculation error',
)

# ""2 times 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*13=26"",
    resulting_state=(7, 9, 26),
    comment='""2 times 13 is 26""',
)

# Based on their final response ""13x2-(9-7"", they were trying to compute 13*2-(9-7)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(9-7)=24"",
    resulting_state=(24,),
    comment='Based on their final response ""13x2-(9-7"", they were trying to compute 13*2-(9-7)',
)
```"
4338,"[4,7,8,12]",,180," Okay, let's see. Can I subtract any of these to get to 2 times 12? So 7 plus 4 is 12. 12 minus, no, let me see, 24. Can I, let's see, what will get me up there? So it's 12. 12 plus 12 is 24. But then there's that 7, so I can't use that. So I need to somehow get, let me see, I need to somehow get maybe times 1. Let me see. 1, 4. No, that won't work. Let me see. 8 times 4. What can I do with 7? 7 and 12. 12 minus 7 is 5. 5. No. That won't work. Let's see. What other combinations can I get? I want to leave out the 12 and then do something with this to get it, to get a number resulting in something that can be used with 12 to get to 24. But I don't know if that'll work. Let me see. 8 minus 4. No. What other numbers can I get? By 12? No. Let me see. Times 4. What's 24 divided by 4? 6. Can I get this to 6? Let me see. 19 minus 8 is 11. No. Let's see. 1. No. Oh, if I could just get it to 2. 3 times 8 is 24. 3 times 8 is 24. What if I add 12 plus 12? Can I get these to 12? No, I can't. What about... Let's see. Uh... 8 times 12 is 96. 8 times 12 is 96. If I... Can I divide by anything? No. What was it? Divide by 4? No, I can't do that. Oh, dear. I can't get it. Let me see. Can 7 be combined with something that can... Let's see. 7 minus... 4 is 3. 8 times... No. 3 times 12 is 36. Minus 8? No, that's 28. Shoot.","```python
start_state = (4, 7, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Can I subtract any of these to get to 2 times 12?"" - participant seems to be setting a subgoal of getting to 24
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""Can I subtract any of these to get to 2 times 12?""',
)

# ""7 plus 4 is 12"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=12"",
    resulting_state=(8, 12, 12),
    comment='""7 plus 4 is 12"" - participant makes calculation error',
    result_calc_error=True,
)

# ""12 plus 12 is 24"" - participant realizes they can't make another 12
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""12 plus 12 is 24"" - participant realizes they can\'t make another 12',
)

# ""8 times 4"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 12, 32),
    comment='""8 times 4""',
)

# ""12 minus 7 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 8),
    comment='""12 minus 7 is 5""',
)

# ""8 minus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 12),
    comment='""8 minus 4""',
)

# ""What's 24 divided by 4? 6"" - participant sets new subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""What\'s 24 divided by 4? 6"" - participant sets new subgoal',
)

# ""19 minus 8 is 11"" - participant likely meant 7+12=19
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(4, 8, 19),
    comment='""19 minus 8 is 11"" - participant likely meant 7+12 first',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19-8=11"",
    resulting_state=(4, 11),
    comment='""19 minus 8 is 11""',
)

# ""3 times 8 is 24""
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""3 times 8 is 24""',
)

# ""8 times 12 is 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(4, 7, 96),
    comment='""8 times 12 is 96""',
)

# ""7 minus... 4 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 8, 12),
    comment='""7 minus... 4 is 3""',
)

# ""3 times 12 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(8, 36),
    comment='""3 times 12 is 36""',
)

# ""minus 8? No, that's 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-8=28"",
    resulting_state=(28,),
    comment='""minus 8? No, that\'s 28""',
)
```"
4340,"[3,9,10,13]",,180," Okay, so I have 9 plus 3 is 12, 12 minus, no I can't do that, that would be a negative number, what can I add? 13 plus 3 is 26, 26, 26 plus 10, 26 plus 10 is 36. Then if I subtract 9, 27, so no, that won't work. Let's see, let's see, 13, 26, no, 13 times 3 is 39, 39, so 3 to 39 minus 10, is 19, no, what if I do this first, 9 times, 9 times, 9 times 3 is 27, it's 20, no, let's see, well, let's just try it. 9 times 3. 9 times 3 is 27, and 10 times 13 is 130, minus 27, no, 103, 103 divided by, what's 9 times 13? 117. And then divided by 10 would be 11, no, I can't get a whole number out of that. 90, 10 is 90, and then what do I do? 90 divided by 3 is 30, and then, oh. Then I still have a 13, which I can't really use. Let's see, 12 over 4 plus 13, 37, okay, and then, what is that, plus 13, plus 10, minus 9. Okay.","```python
start_state = (3, 9, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(10, 12, 13),
    comment='""9 plus 3 is 12""',
)

# ""13 plus 3 is 26"" - this is a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=26"",
    resulting_state=(9, 10, 26),
    comment='""13 plus 3 is 26"" - calculation error',
    result_calc_error=True,
)

# ""26 plus 10 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26+10=36"",
    resulting_state=(9, 36),
    comment='""26 plus 10 is 36""',
)

# ""Then if I subtract 9, 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-9=27"",
    resulting_state=(27,),
    comment='""Then if I subtract 9, 27""',
)

# ""13 times 3 is 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3=39"",
    resulting_state=(9, 10, 39),
    comment='""13 times 3 is 39""',
)

# ""39 minus 10, is 19"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39-10=19"",
    resulting_state=(9, 19),
    comment='""39 minus 10, is 19"" - calculation error',
    result_calc_error=True,
)

# ""9 times 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(10, 13, 27),
    comment='""9 times 3 is 27""',
)

# ""10 times 13 is 130""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*13=130"",
    resulting_state=(3, 9, 130),
    comment='""10 times 13 is 130""',
)

# ""what's 9 times 13? 117""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*13=117"",
    resulting_state=(3, 10, 117),
    comment='""what\'s 9 times 13? 117""',
)

# ""divided by 10 would be 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""117/10=11"",
    resulting_state=(3, 11),
    comment='""divided by 10 would be 11""',
    result_calc_error=True,
)

# The final part about ""12 over 4 plus 13, 37"" seems to use numbers not in the current state
```"
4341,"[3,5,8,13]",8,180," So, 13 plus 8 plus 3. 13 plus 8 is 21. Plus 5 would be 26. No. How about 8 minus 5 is 3. So, 18 plus 3 plus 13. Okay, let's try it again. Um, 8 times 3 is 24. And then, 5 and 13. Okay, I don't know how that comes into it. So, 13 minus 5. Oh, wait, let's put it in parentheses. So, 13 minus 5. That's going to be 8. Um, oh, so 8. And then, how about we say minus? Oh, no, 8. Um, no. So, if that's 8. And, 8 times 3. How can we get rid of that 8? 8. 13 minus 5 is 8. I don't think that's going to work. 8 times 5 is 40. Okay, let's try it again.","```python
start_state = (3, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 8 plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8+3=24"",
    resulting_state=(5, 24),
    comment='""13 plus 8 plus 3""',
)

# ""Plus 5 would be 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+5=26"",
    resulting_state=(26,),
    result_calc_error=True,
    comment='""Plus 5 would be 26""',
)

# ""8 minus 5 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 3, 13),
    comment='""8 minus 5 is 3""',
)

# ""8 times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(5, 13, 24),
    comment='""8 times 3 is 24""',
)

# ""13 minus 5. That's going to be 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(3, 8, 8),
    comment='""13 minus 5. That\'s going to be 8""',
)

# ""8 times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(8, 24),
    comment='""8 times 3""',
)

# ""8 times 5 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(3, 13, 40),
    comment='""8 times 5 is 40""',
)
```"
4342,"[1,4,12,12]",,180," Twenty-four. Twelve. Plus twelve is twenty-four. Times one is twenty-four. Um, but that leaves out four. Twelve. Four minus one? No. Twelve minus four? No. I don't know what to do with this four. Like, can you use the four twice? Four? No. You can't. Uh, four divided by twelve? No. Um, one-fourth? No. Twelve minus four? No. Four minus one? Is three? Um, no. Twelve... I don't even know if this is possible, but like... I don't even know if this is possible, but like... Twelve plus twelve is twenty-four. And then... Minus four? No. Plus four? No. Divided by four? No. Twelve times four is forty-eight? Divided by twelve? No. Minus twelve? No. Times twelve? No. Minus twelve? No. Times twelve? No. I don't see how this is possible. Twelve plus four? That gives you eighteen? Okay, but then... The other twelve doesn't work? The other twelve doesn't work? Eighteen? No. The other twelve doesn't work? How about twelve times twelve? How about twelve times twelve? Is one forty-four? Is one forty-four?","```python
start_state = (1, 4, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Twelve plus twelve is twenty-four""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 4, 24),
    comment='""Twelve plus twelve is twenty-four""',
)

# ""Times one is twenty-four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1=24"",
    resulting_state=(4, 24),
    comment='""Times one is twenty-four""',
)

# ""Four minus one""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 12, 12),
    comment='""Four minus one""',
)

# ""Twelve minus four""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(1, 8, 12),
    comment='""Twelve minus four""',
)

# ""four divided by twelve""
new_state = graph.explore_operation(
    curr_state,
    operation=""4/12=0.33"",
    resulting_state=(0.33, 1, 12),
    comment='""four divided by twelve""',
)

# ""Twelve plus twelve is twenty-four""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 4, 24),
    comment='""Twelve plus twelve is twenty-four""',
)

# ""Minus four""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24-4=20"",
    resulting_state=(1, 20),
    comment='""Minus four""',
)

# ""Plus four""
new_state = graph.explore_operation(
    curr_state,
    operation=""24+4=28"",
    resulting_state=(1, 28),
    comment='""Plus four""',
)

# ""Divided by four""
new_state = graph.explore_operation(
    curr_state,
    operation=""24/4=6"",
    resulting_state=(1, 6),
    comment='""Divided by four""',
)

# ""Twelve times four is forty-eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*4=48"",
    resulting_state=(1, 12, 48),
    comment='""Twelve times four is forty-eight""',
)

# ""Divided by twelve""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/12=4"",
    resulting_state=(1, 4),
    comment='""Divided by twelve""',
)

# ""Twelve plus four? That gives you eighteen""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+4=16"",
    resulting_state=(1, 12, 16),
    comment='""Twelve plus four? That gives you eighteen"" - participant miscalculates',
    result_calc_error=True
)

# ""twelve times twelve? Is one forty-four""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 4, 144),
    comment='""twelve times twelve? Is one forty-four""',
)
```"
4352,"[1,4,12,12]",(12,180," All right, hmm. All right, 12. Oh, I have to put parentheses. Parentheses. 1 times 12 is 12. Hmm. I have 4 there now, huh? Okay, let's see. Poof. Twelve. Twelve. Minus 4 is 8. Hmm. This is very tricky. Um. And there's Kat trying to bother me while I'm trying to do math. Twelve plus 12 is 24 times 1. Hmm. Somehow I have to get to 20. Let's see. Twelve minus 4. Yep. Plus. Yes. Hmm. Twelve. Plus 1. That's not going to give me 24. Hmm. Hmm. Hmm, hmm, hmm. Twelve.","```python
start_state = (1, 4, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""1 times 12 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*12=12"",
    resulting_state=(4, 12, 12),
    comment='""1 times 12 is 12""',
)

# ""Twelve. Minus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(1, 8, 12),
    comment='""Twelve. Minus 4 is 8""',
)

# ""Twelve plus 12 is 24 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+12)*1=24"",
    resulting_state=(4, 24),
    comment='""Twelve plus 12 is 24 times 1""',
)

# ""Somehow I have to get to 20"" suggests participant is setting a subgoal
graph.set_subgoal(
    (20,),
    state_after_subgoal=(24,),
    comment='""Somehow I have to get to 20""',
)

# ""Twelve minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(1, 8, 12),
    comment='""Twelve minus 4""',
)

# ""Plus 1. That's not going to give me 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+1=9"",
    resulting_state=(9, 12),
    comment='""Plus 1. That\'s not going to give me 24""',
)

```"
4353,"[2,2,11,13]",(13-2)+(11+2),52, No. Alright. Okay. Thirteen minus two. Thirteen. Fifteen. Thirteen. Fifteen. Thirteen. Thirteen minus two would be nine plus eleven plus two.,"```python
start_state = (2, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Thirteen minus two""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(2, 11, 11),
    comment='""Thirteen minus two""',
)

# ""would be nine"" - participant miscalculates 13-2=9
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=9"",
    resulting_state=(2, 9, 11),
    comment='""would be nine"" - participant miscalculates 13-2',
    result_calc_error=True,
)

# ""plus eleven plus two""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11+2=22"",
    resulting_state=(22,),
    comment='""plus eleven plus two""',
)

# Based on their final answer (13-2)+(11+2), they must have realized their error and corrected it
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-2)+(11+2)=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they corrected their calculation"",
)
```"
4365,"[4,4,9,11]",((11-9)+4)x4,68," Okay, our next set of numbers is 4, 4, 9, 11. Okay, so let's see, 4 times 4 is 16, plus 11 would be 27, minus 9, that doesn't equal 24. What is 9 minus 4? Can we do 11 minus 9? 11 minus 9 would be 2, plus 4 is 6, and then we have an extra 4. That'll work. So let's do double parentheses, 11 minus 9. That gives us 2, and then we add 4 to it, we give us 6, close that, and then multiply that times 4, now it should be 24.","```python
start_state = (4, 4, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 16, plus 11 would be 27, minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+11-9=27"",
    resulting_state=(27,),
    comment='""4 times 4 is 16, plus 11 would be 27, minus 9""',
)

# ""What is 9 minus 4?"" participant considers this operation but doesn't execute it

# ""11 minus 9 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 4, 4),
    comment='""11 minus 9 would be 2""',
)

# ""plus 4 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+4=6"",
    resulting_state=(4, 6),
    comment='""plus 4 is 6""',
)

# ""and then multiply that times 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""and then multiply that times 4""',
)

```"
4372,"[3,3,6,10]",10+3-(6-3),180," Okay, I might have to do some division here. 6 divided by 3 is 2. Gives me a 2, 3, and a 10. 10 minus 2 is 8. 3 times 3 is 24. That's it, okay. What order do I need to put them in? What did I just say? Oh, 6 minus 3 is 3. 10 minus 6 is 4. Oh, 3 plus... I'm a ton ahead. 3 times 3 is 9. 9 times 6... No, no. It's gotta be 6 minus 3. It's some form or fashion. I think... Or 3. 3 plus 6. 3 plus 3 is 6. No, that doesn't help. I need to get an even number somehow. Oh, 6 divided by 3. That's what I said. Gives you a 2. two yeah two times uh what do i do here oh two okay i got two times let's start with 30 10 times 3 minus 6 minus 3 3","```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 divided by 3 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 3, 10),
    comment='""6 divided by 3 is 2""',
)

# ""10 minus 2 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(3, 8),
    comment='""10 minus 2 is 8""',
)

# ""3 times 3 is 24"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=24"",
    resulting_state=(6, 10, 24),
    comment='""3 times 3 is 24"" - calculation error',
    result_calc_error=True,
)

# ""6 minus 3 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3, 10),
    comment='""6 minus 3 is 3""',
)

# ""10 minus 6 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(3, 3, 4),
    comment='""10 minus 6 is 4""',
)

# ""3 times 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(6, 9, 10),
    comment='""3 times 3 is 9""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 6, 10),
    comment='""3 plus 3 is 6""',
)

# ""10 times 3 minus 6 minus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+3-(6-3)=10"",
    resulting_state=(10,),
    comment='""10 times 3 minus 6 minus 3""',
)
```"
4376,"[8,9,9,12]",(12/9),180," Oh, God. Twelve, let's see, twelve minus nine equals three. Three times eight, three times, no, so three times eight is 24. I did write that. That's not right. Three minus eight would be four. Four times nine. Okay. Okay. Okay. Let's see. I don't know. I'm not good at math. I don't even know how I got the trial ones. Let's see. Twelve. Okay.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""twelve minus nine equals three""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 8, 9),
    comment='""twelve minus nine equals three""',
)

# ""three times eight is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(9, 24),
    comment='""three times eight is 24""',
)

# ""Three minus eight would be four"" - this is a calculation error but we'll record it
new_state = graph.explore_operation(
    curr_state,
    operation=""8-3=4"",
    resulting_state=(4, 9),
    comment='""Three minus eight would be four"" - calculation error',
    result_calc_error=True,
)

# ""Four times nine"" continuing from previous error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=36"",
    resulting_state=(36,),
    comment='""Four times nine""',
)

# The participant submitted (12/9) but this operation is not mentioned in the transcript
```"
4379,"[3,5,6,8]",(8x3)/(6-5),96," Okay, let's do, what's 8 times 6? It would be 48. Rated by 5. Okay, that's not right. Let's do, 5 times 6 is 30. Divided by 8. It's not right. Eight plus six, be 14. Plus 3. Plus 5 is 22. 6 times 3 is 18. Plus 5 is 23. Divided by 8. That wouldn't be right. Eight times 3 is 24. So, 8 times 3 divided by 6 minus 5.","```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""what's 8 times 6? It would be 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(3, 5, 48),
    comment='""what\'s 8 times 6? It would be 48""',
)

# ""Rated by 5"" (likely meant ""divided by 5"")
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/5=9.6"",
    resulting_state=(3, 9.6),
    comment='""Rated by 5"" (likely meant ""divided by 5"")',
)

# ""5 times 6 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(3, 8, 30),
    comment='""5 times 6 is 30""',
)

# ""Divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30/8=3.75"",
    resulting_state=(3, 3.75),
    comment='""Divided by 8""',
)

# ""eight plus six, be 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=14"",
    resulting_state=(3, 5, 14),
    comment='""eight plus six, be 14""',
)

# ""Plus 3. Plus 5 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+3+5=22"",
    resulting_state=(22,),
    comment='""Plus 3. Plus 5 is 22""',
)

# ""6 times 3 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(5, 8, 18),
    comment='""6 times 3 is 18""',
)

# ""Plus 5 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+5=23"",
    resulting_state=(8, 23),
    comment='""Plus 5 is 23""',
)

# ""Divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23/8=2.88"",
    resulting_state=(2.88,),
    comment='""Divided by 8""',
)

# ""Eight times 3 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(5, 6, 24),
    comment='""Eight times 3 is 24""',
)

# ""So, 8 times 3 divided by 6 minus 5"" - participant realizes they can divide by (6-5) to keep 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24/(6-5)=24"",
    resulting_state=(24,),
    comment='""So, 8 times 3 divided by 6 minus 5""',
)
```"
4381,"[4,7,8,13]",,180," Okay, um... Let's see... So, 8 times 4 is 32. 32... Wouldn't be right... I don't know what to do with that... 8... 13 minus 7... 6... Hmm... 6 times 8, right away, 4 is 12. Hmm... 7 times 4 is 28. 7 times 4 is 28. Divided by 13, that would make sense. 8 times 7... minus 13, divided by 4... No, that wouldn't be right. 4 times 8 is 32. 32... minus 7... I think this one got me. 8 times 13, divided by 4... Divided by 7... No... 8... 13 minus 8 would be 5... 5... times 7 is 4, that'd be 31, that wouldn't be right, so 24, I don't have any numbers to get to 24, put out 13, plus 4, 17, minus 8, I don't think I'm gonna get this one.","```python
start_state = (4, 7, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 13, 32),
    comment='""8 times 4 is 32""',
)

# ""13 minus 7... 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(4, 6, 8),
    comment='""13 minus 7... 6""',
)

# ""7 times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 13, 28),
    comment='""7 times 4 is 28""',
)

# ""Divided by 13"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28/13=2.15"",
    resulting_state=(2.15, 8),
    comment='""Divided by 13""',
)

# ""8 times 7... minus 13, divided by 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8*7-13)/4=10.75"",
    resulting_state=(10.75,),
    comment='""8 times 7... minus 13, divided by 4""',
)

# ""4 times 8 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(7, 13, 32),
    comment='""4 times 8 is 32""',
)

# ""32... minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-7=25"",
    resulting_state=(13, 25),
    comment='""32... minus 7""',
)

# ""8 times 13, divided by 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*13/4=26"",
    resulting_state=(7, 26),
    comment='""8 times 13, divided by 4""',
)

# ""13 minus 8 would be 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(4, 5, 7),
    comment='""13 minus 8 would be 5""',
)

# ""times 7 is 4, that'd be 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(4, 35),
    comment='""times 7 is 4, that\'d be 31"" - participant says 31 but means 35',
)

# ""13, plus 4, 17, minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+4-8=9"",
    resulting_state=(7, 9),
    comment='""13, plus 4, 17, minus 8""',
)
```"
4382,"[1,1,5,8]",(8,180," Okay, five times eight would be forty. Oh, five. This is another one I don't know. Six. Six. I hate math. Math is hard. Math is so hard. I'm trying to figure it out. Let's see. Let's do... Let's do eight divided by five minus one times one. That's wrong. Let's do... Let's do... eight divided by... I'm not going to get this one. So, eight... divided by... eight divided by one is eight. Minus five times four, that's only twelve. Eight. Minus five... I don't know the answer to this one. I don't know the answer to this one. Eight... plus...","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""five times eight would be forty""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(1, 1, 40),
    comment='""five times eight would be forty""',
)

# ""eight divided by five minus one times one""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/5-1*1=0.6"",
    resulting_state=(0.6,),
    comment='""eight divided by five minus one times one""',
)

# ""eight divided by one is eight""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/1=8"",
    resulting_state=(1, 5, 8),
    comment='""eight divided by one is eight""',
)

# The rest of the transcript shows the participant struggling but not making any concrete calculations
```"
4383,"[2,6,6,7]",,180," Oh my gosh, this never ends. 7 times 2 is 14, divided by 6. 7 times 6 divided by 6, times 2, that wouldn't be right, that would be 14. About 2 times 6 would be 12, times 7 divided by 6 would be 14, that wouldn't be right. 9 plus 6 would be 15. Mmmmmmm. 2 plus 6 is 8. B, 2, times 6. No. Okay. Okay. Um, 6 times 7 is 42, so divided by 6 would be 7, that wouldn't be right, times 2 would be 14. What about 8 times 7? 7. Divided by 6. No, that wouldn't be right, that would be 9.3. Mmmmm. I'm gonna run out of time. 12 plus 2. Okay. Okay. Bye-bye.","```python
start_state = (2, 6, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 2 is 14, divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*2)/6=2.33"",
    resulting_state=(2.33, 6),
    comment='""7 times 2 is 14, divided by 6""',
)

# ""7 times 6 divided by 6, times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7*6/6)*2=14"",
    resulting_state=(14,),
    comment='""7 times 6 divided by 6, times 2""',
)

# ""2 times 6 would be 12, times 7 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(2*6*7)/6=14"",
    resulting_state=(14,),
    comment='""2 times 6 would be 12, times 7 divided by 6""',
)

# ""9 plus 6 would be 15"" - not clear where 9 came from, might be a transcription error

# ""2 plus 6 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+6=8"",
    resulting_state=(6, 7, 8),
    comment='""2 plus 6 is 8""',
)

# ""6 times 7 is 42, so divided by 6 would be 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6*7)/6=7"",
    resulting_state=(2, 7),
    comment='""6 times 7 is 42, so divided by 6 would be 7""',
)

# ""times 2 would be 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(14,),
    comment='""times 2 would be 14""',
)

# ""What about 8 times 7?"" - participant must have gotten 8 from 2+6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(2+6)*7=56"",
    resulting_state=(6, 56),
    comment='""What about 8 times 7?"" - participant must have gotten 8 from 2+6',
)

# ""Divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56/6=9.33"",
    resulting_state=(9.33,),
    comment='""Divided by 6""',
)

# ""12 plus 2"" - 12 likely came from 6+6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6+6)+2=14"",
    resulting_state=(7, 14),
    comment='""12 plus 2"" - 12 likely came from 6+6',
)
```"
4387,"[5,10,10,11]",(10/(10/(5+11))),180," Okay. So... Um... So we are going to be having, into my bracket, I have 10 Divided by another bracket. I have 10 again. Divided by another bracket. 5 plus, that's addition sign, plus I think 11. Okay. Okay. Okay. Okay.","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant describes their solution step by step:
# ""10 Divided by another bracket. I have 10 again. Divided by another bracket. 5 plus, that's addition sign, plus I think 11""

# First let's compute 5+11
new_state = graph.explore_operation(
    curr_state,
    operation=""5+11=16"",
    resulting_state=(10, 10, 16),
    comment='""5 plus...11""',
)

# Then divide 10 by 16
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/16=0.62"",
    resulting_state=(0.62, 10),
    comment='""10 Divided by...5 plus 11""',
)

# Finally divide 10 by the result
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/0.62=16.13"",
    resulting_state=(16.13,),
    comment='""10 Divided by another bracket""',
)
```"
4393,"[2,4,6,13]",(13x2)-(6-4),66," Okay, so 24, there's a 13 in here. So let's see. Subtract 13. From 24 I get to 11. But 6 plus 4 plus 2 is 12. Hmm. So I can get 2. Let's see. Having this 13 in here is tough. So 24 minus 13. Hmm. I can't get to an even number with 13 unless I multiply it. 52. 2 times 13 is 26. Oh, there it is. 13 times 2. It's 26 minus 6 minus 4, which is 2. So 26 minus 2.","```python
start_state = (2, 4, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Subtract 13. From 24 I get to 11"" - participant seems to be working backward from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""Subtract 13. From 24 I get to 11"" - participant seems to be working backward from 24',
)

# ""6 plus 4 plus 2 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+4+2=12"",
    resulting_state=(12, 13),
    comment='""6 plus 4 plus 2 is 12""',
)

# ""2 times 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(4, 6, 26),
    comment='""2 times 13 is 26""',
)

# ""26 minus 6 minus 4, which is 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-6-4=16"",
    resulting_state=(16,),
    comment='""26 minus 6 minus 4""',
)

# ""26 minus 2"" - participant realizes they can get 2 from 6-4
new_state = graph.explore_operation(
    curr_state,
    operation=""26-(6-4)=24"",
    resulting_state=(24,),
    comment='""26 minus 2"" - participant realizes they can get 2 from 6-4',
)
```"
4394,"[3,9,10,12]",,180," So let's see, here's the 9 over here, 9 plus, oh shoot, 9 plus 3 is 12, but then there's a 10 and a 12. Interesting. So 12 plus 10 is 22. Ah, but 9 divided by 3 is 3. Ooh, this one's tough. I bet 12 divided by 3 is something that I need to do, which is 4, but I'm 19, 9 plus 10 is 19, plus 4 is 23. Off by 1. 5 somehow? 24 is... 22. 12 plus 10 is 22. Everything becomes 34. 3 plus 9 plus 12 is 24. And this 10 becomes... I need to use all the numbers. Shoot, this one's tough. 36. 36. 3 times 12 is 36. Minus 10 is 26. Hmm. 3 times 9 is 27. No, that's not it. 9 times 10? 90? No. 90 minus 36 is 54. That's too much. 30. 3 times 10 is 30. Let's see. What is 12? No, 30. 3, 38, 27. Okay. So if I can get to 20. 3 times 30. 12 times 10 is... See, 3 times 10 is 30. 12 minus 9 is 3. 27. Okay. 3 times 5 is 27. Plus times 37. Minus 12 is 25. What the hell? Okay, 12 times 9 is 108. No, it's not there either. 24, 12, 12. 9 plus 9 minus 3. 9 divided by 3. 3 times 12 is 36. Minus 10 is 26. No. 3 times 10 is 30. No. What the hell? This one's tough. 10 minus 9 is 28.","```python
start_state = (3, 9, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 3 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(10, 12, 12),
    comment='""9 plus 3 is 12""',
)

# ""12 plus 10 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10=22"",
    resulting_state=(3, 9, 22),
    comment='""12 plus 10 is 22""',
)

# ""9 divided by 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 10, 12),
    comment='""9 divided by 3 is 3""',
)

# ""12 divided by 3 is... 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 9, 10),
    comment='""12 divided by 3 is... 4""',
)

# ""9 plus 10 is 19, plus 4 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10+4=23"",
    resulting_state=(23,),
    comment='""9 plus 10 is 19, plus 4 is 23""',
)

# ""3 plus 9 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+9+12=24"",
    resulting_state=(10, 24),
    comment='""3 plus 9 plus 12 is 24""',
)

# ""3 times 12 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(9, 10, 36),
    comment='""3 times 12 is 36""',
)

# ""Minus 10 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-10=26"",
    resulting_state=(9, 26),
    comment='""Minus 10 is 26""',
)

# ""3 times 9 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(10, 12, 27),
    comment='""3 times 9 is 27""',
)

# ""3 times 10 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(9, 12, 30),
    comment='""3 times 10 is 30""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 3, 10),
    comment='""12 minus 9 is 3""',
)

# ""12 times 9 is 108""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(3, 10, 108),
    comment='""12 times 9 is 108""',
)

# ""9 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 10, 12),
    comment='""9 divided by 3""',
)

# ""3 times 12 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(9, 10, 36),
    comment='""3 times 12 is 36""',
)

# ""Minus 10 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-10=26"",
    resulting_state=(9, 26),
    comment='""Minus 10 is 26""',
)

# ""3 times 10 is 30""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10=30"",
    resulting_state=(9, 12, 30),
    comment='""3 times 10 is 30""',
)

# ""10 minus 9 is 28"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=28"",
    resulting_state=(3, 12, 28),
    comment='""10 minus 9 is 28"" seems to be a calculation error',
    result_calc_error=True,
)
```"
4397,"[6,8,11,12]",,180," Okay, 6, 8, 11, and 12. Oh, 11 and 12. 11 plus 12. 6 times 11 is 66. 8 times 12 is 96. 96 minus 66 is 30. 23. 1 plus 12 is 23. I'm going to need one more. No, it's not going to work. So 8 plus 11 is 19. That's 24. That's 5. Can I get to 5 from this? No, I need to get to 6. Okay, let's see. 18 plus 2 is 20. No, I can't get to 4 that way either. What did I do? 6 plus 12 is 18. 24 minus 18 is 6. Oh, I can't get there either. 72, 88 minus 72 is 16. No. Hmm. This one is tough. I wonder if some of these are even possible. 10 plus 11 is 22. No. 8 plus 11 is 19. 25 minus 12 is 30. No. 12. 132 divided by 6. 6. No, it doesn't work. 6 plus 8 is 14. 25. 37. Yeah, I don't think this one is possible either. 11 plus 6 times 12 is 72. 88. 88 plus 7 is 16. No. 48 minus 11 is 37. Minus 12 is 25. Hmm. 12 plus 1 is 32. 1 plus 32 is 8. 1 plus 32 doesn't work. 8 doesn't work. 1 plus 32. 1 plus 36 goes into 1 plus 32. 22 times. Yeah, I don't think this one is possible. 12 minus 8 is 4. 44. No. 12 plus 6 is 14. 26. No. 2 plus 16 is 27. No. 10 plus...","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(6, 8, 23),
    comment='""11 plus 12""',
)

# ""6 times 11 is 66""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*11=66"",
    resulting_state=(8, 12, 66),
    comment='""6 times 11 is 66""',
)

# ""8 times 12 is 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(6, 11, 96),
    comment='""8 times 12 is 96""',
)

# ""8 plus 11 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(6, 12, 19),
    comment='""8 plus 11 is 19""',
)

# ""6 plus 12 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+12=18"",
    resulting_state=(8, 11, 18),
    comment='""6 plus 12 is 18""',
)

# ""6 plus 8 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(11, 12, 14),
    comment='""6 plus 8 is 14""',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 11),
    comment='""12 minus 8 is 4""',
)

# ""12 plus 6 is 14"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=14"",
    resulting_state=(8, 11, 14),
    comment='""12 plus 6 is 14"" - calculation error',
    result_calc_error=True,
)
```"
4398,"[1,3,7,12]",,180," 1 through 7 and 12, let's see, 7 and 12, 19, plus 3 is 22, plus 1 is 23, 7 times 7 is 84, divided by 3, 28, no, let's see, 12 divided by 3 is 4, times 7 is 28, no, divided by 12, can I get to 2, 7 minus 3 minus 1 is 3, can I get there, no, let's see, 3, I need to get to 2, let's see, 3 times 7, 21, no, 22, let's see, 12, no, 7, no, 12 divided by 3 is 4, plus 7, 12, no, 6, can I get to 6, no, can I get to 8, oh, 7 plus 1 is 8, but then 3 and 12, shut, no, let's see, 1, 1 times 12, no, 1 times 12, 12, plus 7 plus 3 is 22, 12 plus 7 plus 5, oh, let's see, 84 divided by 3 is 26, 84 divided by 4, 26, no, wait, wait, 84 divided by 3 is 28, uh, 84 divided by 4 is 29, 84 divided by 4 is 21, 12 divided by 3 is 4, plus 7, no, it doesn't work, 12 divided by 3 is 4, plus 7, no, it doesn't work, 12 from 7, 3 is 12, no, 12 divided by 4 is 8, oh, man, if I didn't have to use one of the numbers, I could get it, 7 divided by 3 is 11, oh,, um, 36 minus 7 minus 1 is 27, 36, Oh.","```python
start_state = (1, 3, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and 12, 19, plus 3 is 22, plus 1 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12+3+1=23"",
    resulting_state=(23,),
    comment='""7 and 12, 19, plus 3 is 22, plus 1 is 23""',
)

# ""12 divided by 3 is 4, times 7 is 28""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12/3)*7=28"",
    resulting_state=(1, 28),
    comment='""12 divided by 3 is 4, times 7 is 28""',
)

# ""7 minus 3 minus 1 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3-1=3"",
    resulting_state=(3, 12),
    comment='""7 minus 3 minus 1 is 3""',
)

# ""3 times 7, 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(1, 12, 21),
    comment='""3 times 7, 21""',
)

# ""12 divided by 3 is 4, plus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3+7=11"",
    resulting_state=(1, 11),
    comment='""12 divided by 3 is 4, plus 7""',
)

# ""7 plus 1 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(3, 8, 12),
    comment='""7 plus 1 is 8""',
)

# ""1 times 12, 12, plus 7 plus 3 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*12+7+3=22"",
    resulting_state=(22,),
    comment='""1 times 12, 12, plus 7 plus 3 is 22""',
)

# ""7 divided by 3 is 11"" - seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7/3=11"",
    resulting_state=(1, 11, 12),
    comment='""7 divided by 3 is 11"" - calculation error',
    result_calc_error=True,
)
```"
4402,"[1,5,6,11]",(11-6)x5-1,66," Okay, 1, 5, 6, and 11. I can get to 22. 5 plus 6 is 11. Plus 11 is 22. 23. Oh, I can get to 24, but with 3 numbers. 11 times 6 is 66. No. Can I get to 4? No, I can't get to 6. 5, I can get to 5. Can I get to 3 somehow? No, I can't get to 3 either. What? Oh, I got it. 11 minus 6 is 5. Times 5 is 25. Minus 1.","```python
start_state = (1, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 6 is 11. Plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+6+11=22"",
    resulting_state=(1, 22),
    comment='""5 plus 6 is 11. Plus 11 is 22""',
)

# ""11 times 6 is 66""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*6=66"",
    resulting_state=(1, 5, 66),
    comment='""11 times 6 is 66""',
)

# ""Can I get to 4?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (4,),
    state_after_subgoal=(24,),
    comment='""Can I get to 4?""',
)

# ""Can I get to 3 somehow?"" suggests another subgoal
graph.set_subgoal(
    (3,),
    state_after_subgoal=(24,),
    comment='""Can I get to 3 somehow?""',
)

# ""11 minus 6 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(1, 5, 5),
    comment='""11 minus 6 is 5""',
)

# ""Times 5 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(1, 25),
    comment='""Times 5 is 25""',
)

# ""Minus 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-1=24"",
    resulting_state=(24,),
    comment='""Minus 1""',
)
```"
4404,"[1,5,10,13]",5,180," There's 14 plus 10. Delete, delete. Delete, delete, delete, delete, delete, delete, delete, delete. 13 minus 10 times 5 plus 1 parentheses. 13 minus 1 is 3. Delete. Delete, delete, delete, delete, delete, delete, delete, delete. Delete. 10 parentheses. 5 minus 1. God damn it. 50. 1 plus. Plus 5 parentheses. 13 minus 10 parentheses. I have no fucking clue. Delete, delete, delete, delete, delete, delete, delete. 5. 5. 8 plus 1.","```python
start_state = (1, 5, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""14 plus 10"" - participant likely meant 13+1=14
new_state = graph.explore_operation(
    curr_state,
    operation=""13+1=14"",
    resulting_state=(5, 10, 14),
    comment='""14 plus 10"" - participant likely meant 13+1=14',
)

# ""13 minus 10 times 5 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-10)*5+1=16"",
    resulting_state=(16,),
    comment='""13 minus 10 times 5 plus 1""',
)

# ""13 minus 1 is 3"" - this seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=3"",
    resulting_state=(3, 5, 10),
    comment='""13 minus 1 is 3"" - calculation error',
    result_calc_error=True,
)

# ""5 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 10, 13),
    comment='""5 minus 1""',
)

# ""50"" - participant may have multiplied 5*10
new_state = graph.explore_operation(
    curr_state,
    operation=""5*10=50"",
    resulting_state=(1, 13, 50),
    comment='""50"" - participant may have multiplied 5*10',
)

# ""13 minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(1, 3, 5),
    comment='""13 minus 10""',
)

# The participant submitted ""5"" as their answer but this doesn't make 24
```"
4411,"[3,5,8,13]",,180, Target number 24. 13 minus 8 is 5. Nope. 5 times 3 is 15. Nope. 13 plus 8 is 21. Nope. 8 times 5 is 9. Nope. 3 plus 13 is 26. What is 8? It's 18 plus 5 is 23. Nope. 15. 5 times 3 is 15. Minus 13 is 2 times 8 is 16. 5 plus 8 is 13. Plus 13 is 26. That doesn't work. How many have we had? Um... 13 minus 3 is 10. Plus... 8 is 18. Plus 5 is 23. Let's load it up. 3 times 8 is... That's not going to work out. 3 times 13 is 36. 6. 5... 8... 8... 7... 8... 9... 10... 12... 13... 13... 2... 5... 9... 2... 2... 2... 2... 1... 1... 2...,"```python
start_state = (3, 5, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 8 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-8=5"",
    resulting_state=(3, 5, 5),
    comment='""13 minus 8 is 5""',
)

# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(8, 13, 15),
    comment='""5 times 3 is 15""',
)

# ""13 plus 8 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+8=21"",
    resulting_state=(3, 5, 21),
    comment='""13 plus 8 is 21""',
)

# ""8 times 5 is 9"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=9"",
    resulting_state=(3, 9, 13),
    comment='""8 times 5 is 9"" - calculation error',
    result_calc_error=True,
)

# ""3 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+13=16"",
    resulting_state=(5, 8, 16),
    comment='""3 plus 13 is 26"" - calculation error',
    result_calc_error=True,
)

# ""5 times 3 is 15. Minus 13 is 2 times 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3-13=2"",
    resulting_state=(2, 8),
    comment='""5 times 3 is 15. Minus 13 is 2""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(16,),
    comment='""2 times 8 is 16""',
)

# ""5 plus 8 is 13. Plus 13 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8+13=26"",
    resulting_state=(3, 26),
    comment='""5 plus 8 is 13. Plus 13 is 26""',
)

# ""13 minus 3 is 10. Plus... 8 is 18. Plus 5 is 23""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(5, 8, 10),
    comment='""13 minus 3 is 10""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(5, 18),
    comment='""Plus... 8 is 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+5=23"",
    resulting_state=(23,),
    comment='""Plus 5 is 23""',
)

# ""3 times 8 is...""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(5, 13, 24),
    comment='""3 times 8 is...""',
)

# ""3 times 13 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(5, 8, 39),
    comment='""3 times 13 is 36"" - calculation error',
    result_calc_error=True,
)

# The rest appears to be the participant listing numbers without performing operations
```"
4412,"[1,4,6,13]",13+6+4+1,71, Target number 24. 6 times 4 is 24. 18 minus 1 is 12. 12 plus 6 is 18 plus 9. 4 plus 5. 4 plus 1 is 5. Times 6 is 38. No. 6 plus 1 is 7. Times 4 is 7. 4 is 29. 18 plus 10. 13 plus 6 plus 4 plus 1.,"```python
start_state = (1, 4, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(1, 13, 24),
    comment='""6 times 4 is 24""',
)

# ""18 minus 1 is 12"" - participant may have computed 13+6=19 first, then -1
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6-1=18"",
    resulting_state=(4, 18),
    comment='""18 minus 1""',
)

# ""12 plus 6 is 18 plus 9"" seems to be continuing from previous calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+4=22"",
    resulting_state=(22,),
    comment='""plus 9"" seems to refer to adding the remaining 4',
)

# ""4 plus 1 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+1=5"",
    resulting_state=(5, 6, 13),
    comment='""4 plus 1 is 5""',
)

# ""Times 6 is 38"" continuing from 5
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=38"",
    resulting_state=(13, 38),
    comment='""Times 6 is 38""',
    result_calc_error=True,
)

# ""6 plus 1 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(4, 7, 13),
    comment='""6 plus 1 is 7""',
)

# ""Times 4 is 7. 4 is 29"" seems to be multiplying 7*4 but with calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=29"",
    resulting_state=(13, 29),
    comment='""Times 4 is 7. 4 is 29""',
    result_calc_error=True,
)

# ""13 plus 6 plus 4 plus 1"" - this is their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6+4+1=24"",
    resulting_state=(24,),
    comment='""13 plus 6 plus 4 plus 1"" - this is their final answer',
)
```"
4413,"[3,3,6,10]",,180," Target number 24. 6 minus 3 is 3. 2 plus 3 is 9. Plus 2 is 10. 3 plus 3 is 6. 6 minus 6 is 6. 6 minus 9 is 9. 6 minus 6 is 1. 6 minus 9 is 1. 6 minus 9 is 1. 7 times 3 is 30. 7 times 3 is 30. 61. 3 times 6 is 2. 3 times 6 is 1. 3 times 6 is 5. 6 times 6 is 3. 3 times 6 is 18. 0. 2 times 6 is 3. 2. 25. 6 times 10 is 16, minus 3 is 20. Let's try again. 5 times 10 is 10. 6 plus 3 is 9. 6 plus 3 is 9 times 10 is 24. 3. How do you get 24 out of us? . . 6 minus 3 is 3. Times 3. 8 divided by 3 is 1. Plus 17. That's 17. . .","```python
start_state = (3, 3, 6, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 minus 3 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(3, 3, 10),
    comment='""6 minus 3 is 3""',
)

# ""3 plus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 6, 10),
    comment='""3 plus 3 is 6""',
)

# ""3 times 6 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(3, 10, 18),
    comment='""3 times 6 is 18""',
)

# ""6 times 10 is 16, minus 3 is 20"" contains calculation errors
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10-3=20"",
    resulting_state=(3, 20),
    comment='""6 times 10 is 16, minus 3 is 20"" contains calculation errors',
    result_calc_error=True,
)

# ""6 plus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(3, 9, 10),
    comment='""6 plus 3 is 9""',
)

# ""9 times 10 is 24"" contains a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*10=24"",
    resulting_state=(3, 24),
    comment='""9 times 10 is 24"" contains a calculation error',
    result_calc_error=True,
)

# ""6 minus 3 is 3. Times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-3)*3=9"",
    resulting_state=(9, 10),
    comment='""6 minus 3 is 3. Times 3""',
)
```"
4417,"[2,2,11,13]",(13-2)+11+2,25," Target number 24. 2 times 2 is 22. No, you can't put 13 in there. 13 minus 2 is 11. 13 minus 2 is 11. Plus 11 is 22. Plus 2 is 24.","```python
start_state = (2, 2, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times 2 is 22"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=22"",
    resulting_state=(11, 13, 22),
    comment='""2 times 2 is 22"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""13 minus 2 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-2=11"",
    resulting_state=(2, 11, 11),
    comment='""13 minus 2 is 11""',
)

# ""Plus 11 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(2, 22),
    comment='""Plus 11 is 22""',
)

# ""Plus 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+2=24"",
    resulting_state=(24,),
    comment='""Plus 2 is 24""',
)
```"
4418,"[7,12,12,13]",,180," Deck number 24, 18 minus 7 minus 6, yeah that doesn't make sense, 18 minus 12 is more than 18. 7 plus 12 is 17, no, that's not going to work. 12 times 7 is no. 12 plus 7 is 18, no. 12 times 12 is 44. 44 divided by 7, doesn't work. 12 plus 13 is 25. No. 12 plus 18 is 25 plus 7, no. 12 plus 12 is 24 plus 13, no. 7. 13 minus 7 is 6. Not every driveway and every dock went everywhere in between. 48 minutes to not really show up. 12 minus 7 is 5. 5 times 12 is 65. Show up for the summits. 15 plus 7 is 12. Plus 12. 4, 3, 2, 1. That's 20. Turbo. 12 divided by 2 is 1. 12. 7. 3, 2, 1. Wow. 13.","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 12 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(12, 13, 19),
    comment='""7 plus 12 is 17"" - participant miscalculates',
    result_calc_error=True,
)

# ""12 times 12 is 44"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=44"",
    resulting_state=(7, 13, 44),
    comment='""12 times 12 is 44"" - participant miscalculates',
    result_calc_error=True,
)

# ""44 divided by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44/7=6.29"",
    resulting_state=(6.29, 13),
    comment='""44 divided by 7""',
)

# ""12 plus 13 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(7, 12, 25),
    comment='""12 plus 13 is 25""',
)

# ""12 plus 12 is 24 plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12+13=37"",
    resulting_state=(7, 37),
    comment='""12 plus 12 is 24 plus 13""',
)

# ""13 minus 7 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 12, 12),
    comment='""13 minus 7 is 6""',
)

# ""12 minus 7 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 12, 13),
    comment='""12 minus 7 is 5""',
)

# ""5 times 12 is 65""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*12=65"",
    resulting_state=(13, 65),
    comment='""5 times 12 is 65"" - participant miscalculates',
    result_calc_error=True,
)

# The rest appears to be the participant expressing frustration or making observations rather than attempting calculations
```"
4419,"[1,3,3,10]",(10-1)x3-3,46, I'm talking about the 24. 3 times 3 is 29. 3 plus 1 is 4. Times 3 is 5. Plus 10 is 22. 3 times 3 is 9. Plus 10 is 9. 2 minus 1 is 9. Times 3 is 27. Times 3 is 4. Times 3 is minus 3.,"```python
start_state = (1, 3, 3, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3 is 29"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=29"",
    resulting_state=(1, 10, 29),
    comment='""3 times 3 is 29"" - calculation error',
    result_calc_error=True,
)

# ""3 plus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(3, 4, 10),
    comment='""3 plus 1 is 4""',
)

# ""Times 3 is 5"" - calculation error continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=5"",
    resulting_state=(5, 10),
    comment='""Times 3 is 5"" - calculation error',
    result_calc_error=True,
)

# ""Plus 10 is 22"" - continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+10=22"",
    resulting_state=(22,),
    comment='""Plus 10 is 22"" - calculation error',
    result_calc_error=True,
)

# ""3 times 3 is 9"" - going back to start state
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(1, 9, 10),
    comment='""3 times 3 is 9""',
)

# Based on their final response of (10-1)x3-3, they must have tried this calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-1)*3-3=24"",
    resulting_state=(24,),
    comment=""Based on their final response"",
)
```"
4425,"[1,8,9,12]",9x1,180, that's all i mean you know no it could be but then it's five sometimes don't change percent hmm so 12 so 12 12 is 4 2 so 12 plus 1 13 plus plus 4 plus 4 plus 9 8 plus 9 no no no no no 8 1 4 4 12 8 plus 9 giving you 15 minus 1 plus 12 incorrect oh no so i mean you just plus over 20 10 so 20 20 20 20 so 9 times 2 9 times 1 making 9 so 5 minus 20 what was that?,"```python
start_state = (1, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 1 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+1=13"",
    resulting_state=(8, 9, 13),
    comment='""12 plus 1 13""',
)

# ""8 plus 9"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(1, 12, 17),
    comment='""8 plus 9""',
)

# ""8 plus 9 giving you 15"" - participant tries the same operation but makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=15"",
    resulting_state=(1, 12, 15),
    comment='""8 plus 9 giving you 15""',
    result_calc_error=True,
)

# ""minus 1 plus 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-1+12=26"",
    resulting_state=(26,),
    comment='""minus 1 plus 12""',
)

# ""9 times 1 making 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*1=9"",
    resulting_state=(8, 9, 12),
    comment='""9 times 1 making 9""',
)
```"
4428,"[3,4,7,9]",(9x3)-(7-4),110," Hmm, hmm, hmm, hmm. Um, okay. What is 9 plus 7? I don't even know. 9, 10, 11, 12, 13, 14, 15, 16. Um, um, and you can only use those numbers once. Let's see. Um. 7 times 3 is 21. Nope. 7 times, nope. Maybe there needs to be division in here. Right? Maybe. But that's hard for me. I don't know. I'm a little slow. 24. I know 4 could go into 24. 3 could go into 24. 7 plus 4? 12, 13, 12, 9. This is hard. Okay, so 9. Um. 9 times 3 minus 7 minus 4.","```python
start_state = (3, 4, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""What is 9 plus 7?"" followed by counting ""9, 10, 11, 12, 13, 14, 15, 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(3, 4, 16),
    comment='""What is 9 plus 7?"" followed by counting to 16',
)

# ""7 times 3 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(4, 9, 21),
    comment='""7 times 3 is 21""',
)

# ""24. I know 4 could go into 24. 3 could go into 24"" suggests the participant is working backward from 24
graph.set_subgoal(
    (3, 4),
    state_after_subgoal=(24,),
    comment='""24. I know 4 could go into 24. 3 could go into 24""',
)

# ""7 plus 4? 12, 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(3, 9, 11),
    comment='""7 plus 4?"" participant counts but seems unsure',
)

# ""9 times 3 minus 7 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-7+4=24"",
    resulting_state=(24,),
    comment='""9 times 3 minus 7 minus 4""',
)

```"
4435,"[8,8,8,11]",(11-8),188," Alright. 8. Oh lord. 11 plus 8. Woah. There's definitely some division up in here somewhere. 8 times 3, 8 to make 24. So, 11 minus 8 is what? So 11 minus 8 is 3. I don't like this. 3 times 8 is 24. Relax. Relax. 8 times 8 is 64. 8 times 8 is 64. Nope. That 11. Um. Uh. 11 minus 8 is 3. 11 minus 8 is 3. Plus. That makes no sense. What's the relationship with 8 and 11? What can I do with 8 and 11? It's 19, which throws me off. It's an odd number. Um. 8 and 8 is 16. That 11. What does, I'm telling you it gotta be a 3. 11 minus 8 is 3. But where do we, like. 11 minus 8 is 3.","```python
start_state = (8, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(8, 8, 19),
    comment='""11 plus 8""',
)

# ""8 times 3"" participant seems to be setting a subgoal of getting 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3, 8 to make 24""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8 is 3""',
)

# ""3 times 8 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(8, 24),
    comment='""3 times 8 is 24""',
)

# ""8 times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(8, 11, 64),
    comment='""8 times 8 is 64""',
)

# ""11 minus 8 is 3"" participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 8, 8),
    comment='""11 minus 8 is 3""',
)

# ""8 and 8 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(3, 16),
    comment='""8 and 8 is 16""',
)

# The participant keeps repeating ""11 minus 8 is 3"" but doesn't seem to make progress beyond that
```"
4438,"[5,5,6,11]",(6x5)-11+5,166," Okay. This one, 11. Let's start. Times 11. Times, so 30, 30, no. Let me see. If I do 30 minus 14, no, I don't get that 24. If I do 11 plus 6, 27. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. Times 7, no, I don't get that. If I do 6 minus 5 is 1. 11 plus 11, 22, no, 6, let's see, times minus, 6 times 5, 30 minus 11, 6 times 5 is 30, 30,","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Times 11"" suggests participant is trying something times 11
new_state = graph.explore_operation(
    curr_state,
    operation=""6*11=66"",
    resulting_state=(5, 5, 66),
    comment='""Times 11""',
)

# ""30, 30"" suggests participant is trying 6*5=30
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(5, 11, 30),
    comment='""30, 30""',
)

# ""If I do 11 plus 6, 27"" - this seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=27"",
    resulting_state=(5, 5, 27),
    comment='""If I do 11 plus 6, 27""',
    result_calc_error=True,
)

# ""If I do 6 minus 5 is 1"" appears multiple times in transcript, likely due to transcription error
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 5, 11),
    comment='""If I do 6 minus 5 is 1""',
)

# ""6 times 5, 30 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(5, 11, 30),
    comment='""6 times 5, 30""',
)

# Based on their final answer (6x5)-11+5, they must have then done:
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-11+5=24"",
    resulting_state=(24,),
    comment=""Based on final answer (6x5)-11+5"",
)
```"
4439,"[3,9,13,13]",,180," Okay, so I need to get to 24. If I do 13 plus 13, I get 26, and I need to subtract 2. 22. 9 divided by 3 would be 3. 22 plus 3, 25. Doesn't work. If I do 13 plus 9, I get 22. 13 and 3, there's nothing I can do. I cannot divide it. Um, 13 is not divisible by 9 or by 3. Um, but 9 is divisible by 3. Um, 13 minus 9 is 4. 13 minus 9 is 4. Um, 13 minus 3 is 10. If I add those two, it's going to be 14. I need 24. Doesn't work. Um, 3 times 9, 27. 3 times 13. 3 times 9, 27. 3 times 13. 3 times 13 is 39. 39 to reach 24 would be 15. No, I don't get that. 13 minus 9. 13 minus 9 is 4. 13 minus 9 is 4. 13 minus 3 is 10. No. 13 plus 9 is 22. 13 plus 3. 13 plus 3 is 16. 13 plus 3 is 17. 13 plus 9 is 11. 13 plus 9 is which? is 22 13 minus","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13, I get 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13 plus 13, I get 26""',
)

# ""9 divided by 3 would be 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 13, 13),
    comment='""9 divided by 3 would be 3""',
)

# ""13 plus 9, I get 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=22"",
    resulting_state=(3, 13, 22),
    comment='""13 plus 9, I get 22""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(3, 4, 13),
    comment='""13 minus 9 is 4""',
)

# ""13 minus 3 is 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-3=10"",
    resulting_state=(9, 10, 13),
    comment='""13 minus 3 is 10""',
)

# ""3 times 9, 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(13, 13, 27),
    comment='""3 times 9, 27""',
)

# ""3 times 13 is 39""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(9, 13, 39),
    comment='""3 times 13 is 39""',
)

# The participant repeats several calculations they've already done:
# ""13 minus 9 is 4"" (already done)
# ""13 minus 3 is 10"" (already done)
# ""13 plus 9 is 22"" (already done)

# ""13 plus 3 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=16"",
    resulting_state=(9, 13, 16),
    comment='""13 plus 3 is 16""',
)

# ""13 plus 3 is 17"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+3=17"",
    resulting_state=(9, 13, 17),
    comment='""13 plus 3 is 17"" - calculation error',
    result_calc_error=True,
)

# ""13 plus 9 is 11"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+9=11"",
    resulting_state=(3, 13, 11),
    comment='""13 plus 9 is 11"" - calculation error',
    result_calc_error=True,
)

# The participant then repeats ""13 plus 9 is 22"" which was already done
```"
4440,"[4,4,8,10]",,180," Okay, 4 and 4, 8, and 8 and 10. 8 plus 4, 12. 12 plus 14, no. Ah, 8 minus 4, 4. 40 minus 24, 4 minus 32 is 8. 80, 8 times 10, 80. 4 times 4, 36, no. 80, 40 minus 32 is 8, 40. Um, 32, 4 times 8, 32, 4. 10 minus 4 is 6. 32 minus 6, 32 minus 8. 10 times 40, 32 minus 8. 40 minus 12 is 28, 40. Shoot. 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 34, 35, 36, 37, 38, 38, 39, 40. 14 times, no, 14 plus 8. 14, 18 to 24, 6. 6. 8 minus 4 is 4. 8 minus 4 is 4. 8, 2 times 1. 6, 2, 3, 4. 3.","```python
start_state = (4, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 4, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(4, 10, 12),
    comment='""8 plus 4, 12""',
)

# ""8 minus 4, 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 4, 10),
    comment='""8 minus 4, 4""',
)

# ""8 times 10, 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(4, 4, 80),
    comment='""8 times 10, 80""',
)

# ""4 times 4, 36"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=36"",
    resulting_state=(8, 10, 36),
    comment='""4 times 4, 36""',
    result_calc_error=True,
)

# ""4 times 8, 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(4, 10, 32),
    comment='""4 times 8, 32""',
)

# ""10 minus 4 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-4=6"",
    resulting_state=(4, 6, 8),
    comment='""10 minus 4 is 6""',
)

# The participant then counts from 10 to 40, which isn't an operation

# ""14 plus 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+4)+8=22"",
    resulting_state=(4, 22),
    comment='""14 plus 8"" where 14 likely came from 10+4',
)

# ""8 minus 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 4, 10),
    comment='""8 minus 4 is 4""',
)

```"
4445,"[2,3,7,9]",,180," Um, that's tough. 7 plus 3, 10. 9, 11. 9 plus 2, 11, 21. No. 9 divided by 3, 3. 3 times 7. 21 plus 2, 23. No. Um, 9 minus 2 is 7. 7. 9 minus 2 is 7. 7 minus 3 is 4. 4 times 7 doesn't work. 7 minus 3 is 4. 7 minus 2 is 5. 5. 24. Divided by 8. 6 is 4. 24 divided by 6. 6, 4. 9 minus 7 is 2. 9 minus 7 is 2. Times, 4. 9 minus 3 is 6, 7 minus 2 is 5, doesn't work, 9 minus 2 is 7, doesn't work, 9 minus 3 is 6, 3 times 2 is 9, plus 9 plus 15 is 24, I need to get 15, 15. I need to get 15, 15.","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 3, 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+3=10"",
    resulting_state=(2, 9, 10),
    comment='""7 plus 3, 10""',
)

# ""9 plus 2, 11, 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+2=11"",
    resulting_state=(3, 7, 11),
    comment='""9 plus 2, 11""',
)

# ""9 divided by 3, 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(2, 3, 7),
    comment='""9 divided by 3, 3""',
)

# ""3 times 7. 21 plus 2, 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7+2=23"",
    resulting_state=(23,),
    comment='""3 times 7. 21 plus 2, 23""',
)

# ""9 minus 2 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(3, 7, 7),
    comment='""9 minus 2 is 7""',
)

# ""7 minus 3 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-3=4"",
    resulting_state=(4, 7),
    comment='""7 minus 3 is 4""',
)

# ""4 times 7 doesn't work""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(28,),
    comment='""4 times 7 doesn\'t work""',
)

# ""7 minus 2 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(3, 5, 9),
    comment='""7 minus 2 is 5""',
)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 2, 3),
    comment='""9 minus 7 is 2""',
)

# ""9 minus 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(2, 6, 7),
    comment='""9 minus 3 is 6""',
)

# ""7 minus 2 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-2=5"",
    resulting_state=(3, 5, 9),
    comment='""7 minus 2 is 5""',
)

# ""9 minus 2 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(3, 7, 7),
    comment='""9 minus 2 is 7""',
)

# ""9 minus 3 is 6, 3 times 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(2, 6, 7),
    comment='""9 minus 3 is 6""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*2=6"",
    resulting_state=(6, 7, 9),
    comment='""3 times 2 is 6""',
)

# The participant seems to be trying to get to 15 as a subgoal
graph.set_subgoal(
    (15,),
    state_after_subgoal=(24,),
    comment='""I need to get 15, 15""',
)
```"
4449,"[2,8,9,12]",(9-8)x(2x12),146," Okay, okay. Maybe 12 minus 9 is 3 times 8. No. So 9 minus, no, 7. I don't want 7. I think we needed to do this to get it to a 3, but then what are we doing with the 2? Because 3 times 8 is 24. Maybe 12, so that's a 10. I think this needs to happen, or else it wouldn't make sense. I think, I don't know. Because a 9 wouldn't fit into the equation. Just by itself, it has to be a 3. 3 times 8, it's already 24. The answer is 3. Wait, that doesn't make sense. Wait, that doesn't make sense. This now will be 4. Um... Um... I'm trying to remember the exact answer, so I'm just going to go ahead and plunge myself into this. It's 5. So if I do the 3 times 8, or 9 minus 2, it would be 7, and then 7 plus 8, it's 15, and then... 9. So I just can't have a 9. 9 minus... Okay, let's just delete. Okay, wait. 9 minus... Not 2, because that's 7. 8 is an issue. So it's just 1 times... Wait, 2... Yeah, 2 times 12 is 24. So it's 1 times...","```python
start_state = (2, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 9 is 3 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(2, 24),
    comment='""12 minus 9 is 3 times 8""',
)

# ""9 minus, no, 7"" participant seems to be trying 9-2=7
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(7, 8, 12),
    comment='""9 minus, no, 7"" participant seems to be trying 9-2=7',
)

# ""I think we needed to do this to get it to a 3"" participant seems to be trying to get a 3
# They mention ""3 times 8 is 24"" multiple times, suggesting this is a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I think we needed to do this to get it to a 3"" and ""3 times 8 is 24""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(12, 15),
    comment='""7 plus 8, it\'s 15""',
)

# ""9 minus... Not 2, because that's 7. 8 is an issue""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 2, 12),
    comment='""9 minus... Not 2, because that\'s 7. 8 is an issue"" participant tries 9-8',
)

# ""2 times 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(8, 9, 24),
    comment='""2 times 12 is 24""',
)

# Based on their final answer (9-8)x(2x12), they combine these last two operations
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9-8)*(2*12)=24"",
    resulting_state=(24,),
    comment=""Based on their final answer, they combine 9-8=1 and 2*12=24"",
)
```"
4452,"[1,6,11,13]",,180," okay I don't like the 13 again I don't think the 11 works either still it's like the last one kind of so then that's 2 wait no that would work 11 times no 13 minus that's up 7 no 11 I think we do need to get rid of the 11 and 13 13 okay 13 minus 11 is 2 13 minus 11 is 2 times 6 plus no that wouldn't work 13 times 11 would be like 1 something does that work it's like I don't know 13 times 11 divided by 6 plus 1 no no no maybe maybe divided by 6 divided by 6 plus 1 would be too big of an no no no no no no no no no no no no no no no no no no no no no no no no no no no I don't think that would equal the right thing. Oh, wait. What am I doing? Oh. Oh, um, I don't know what I'm thinking right now. So, plus, plus one. All right. Ah, six. Okay. All right, six plus one. No.","```python
start_state = (1, 6, 11, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 11 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 6),
    comment='""13 minus 11 is 2""',
)

# ""times 6"" participant seems to be using the 2 from previous operation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6=12"",
    resulting_state=(1, 12),
    comment='""times 6""',
)

# Going back to start state for ""13 times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=143"",
    resulting_state=(1, 6, 143),
    comment='""13 times 11""',
)

# ""divided by 6 plus 1"" participant tries to use the result
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""143/6+1=24.83"",
    resulting_state=(24.83,),
    comment='""divided by 6 plus 1""',
)

# ""six plus one"" participant tries a simpler operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1=7"",
    resulting_state=(7, 11, 13),
    comment='""six plus one""',
)
```"
4456,"[3,3,3,9]",,180," Okay, I see that my numbers are 3, 3, 3, and 9. Hmm. So, 9 plus 9 is 18. Hmm. Okay, so 9 times 3 is 30. 26. Let's see. Oh, no, it's 27 minus 3. Okay, so I need to figure out what to do with that other 3. Hmm. Okay, so I'm going to do... Ooh, this is hard. Okay. 9 times 3 to get 27. Hmm. Okay, so 3... Hmm. Hmm. Oh, my gosh. Hehehe. Okay. Ummm. I'm kind of stuck. So, 9... Minus 3 would be 6. Okay, now I have 6 times 3. Okay. Now I have 6 times 3. which is 18 plus 3 would not work okay let's try 9 plus 3 equals 12 times 3 would be 36 mine nope that's not gonna work either um okay we're gonna do 3 divided by 3 times 3","```python
start_state = (3, 3, 3, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 3 is 30"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=30"",
    resulting_state=(3, 3, 30),
    comment='""9 times 3 is 30"" - calculation error',
    result_calc_error=True,
)

# ""Oh, no, it's 27"" - participant corrects their calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 3, 27),
    comment='""Oh, no, it\'s 27""',
)

# ""minus 3"" from the 27 they just computed
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(3, 24),
    comment='""minus 3""',
)

# ""9... Minus 3 would be 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(3, 3, 6),
    comment='""9... Minus 3 would be 6""',
)

# ""6 times 3 which is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 18),
    comment='""6 times 3 which is 18""',
)

# ""plus 3 would not work""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3=21"",
    resulting_state=(21,),
    comment='""plus 3 would not work""',
)

# ""9 plus 3 equals 12 times 3 would be 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9+3)*3=36"",
    resulting_state=(3, 36),
    comment='""9 plus 3 equals 12 times 3 would be 36""',
)

# ""3 divided by 3 times 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3*3=3"",
    resulting_state=(3, 9),
    comment='""3 divided by 3 times 3""',
)
```"
4457,"[3,3,3,4]",(3x3x3),180," Okay, so 3 times 4 is 12. 12 times 3 is 26. 26 minus 3 would be 23, so I'm short one. Okay, what about 4 minus 3? That would equal 1. And then 1 times 3 equals 3. And then 3 times 3. Okay, let's see. 3 times 3 times 3 equals 27 minus 4. Okay, I got it. 3 times 3 times 3 minus 4. Okay. It says not all numbers were used, but I did use them. What? Okay, we'll try this. 3 times 3 times 3. And then we'll do minus 4. Why is it telling me not all the numbers were used? Okay, that is frustrating because I did use all of the numbers. So, I'm writing down that this one is not working. And let's try that. Yup, all of the numbers are used. Okay. oh wait okay I see my issue","```python
start_state = (3, 3, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(3, 3, 12),
    comment='""3 times 4 is 12""',
)

# ""12 times 3 is 26"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*3=26"",
    resulting_state=(3, 26),
    comment='""12 times 3 is 26"" - calculation error',
    result_calc_error=True,
)

# ""26 minus 3 would be 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-3=23"",
    resulting_state=(23,),
    comment='""26 minus 3 would be 23""',
)

# Participant starts over: ""what about 4 minus 3? That would equal 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4-3=1"",
    resulting_state=(1, 3, 3),
    comment='""what about 4 minus 3? That would equal 1""',
)

# ""And then 1 times 3 equals 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*3=3"",
    resulting_state=(3, 3),
    comment='""And then 1 times 3 equals 3""',
)

# Participant starts over again: ""3 times 3 times 3 equals 27 minus 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3*3=27"",
    resulting_state=(4, 27),
    comment='""3 times 3 times 3 equals 27""',
)

# ""minus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-4=23"",
    resulting_state=(23,),
    comment='""minus 4""',
)

# The participant then tries to submit their answer but gets feedback that not all numbers were used
# They try again with the same operations, still getting the same feedback
# Finally they say ""oh wait okay I see my issue"" suggesting they realized their error

```"
4463,"[3,3,7,13]",,180, Okay. 13 plus 7 is 20. That's not going to work. 13 times 3 equals 39 minus 7 minus 3. That will not work. 13 minus 7 is 6. Times 3. Plus 3? No. 4 times 13 divided by 3. That won't work. 6. I'm going to add the 3's together. Times 7. Divided by 13. That won't work. 13 minus 7. 7 is 6. That's a good start. Let's see. 13 minus 7 is 6. And then we have times 3 would be 18. It's not going to work. Okay. Let's see here. We have 7 times 3 is 21. Plus 13 divided by 3. This one's really hard too. Okay. Okay. Let's do 3 times 13 minus 7 minus 3. That's not going to work. Okay. Okay. We have 3 times 3 equals 9 plus 7 plus 13 is not going to work. Okay. Okay. Okay. Okay.,"```python
start_state = (3, 3, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 7 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+7=20"",
    resulting_state=(3, 3, 20),
    comment='""13 plus 7 is 20""',
)

# ""13 times 3 equals 39 minus 7 minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*3-7-3=29"",
    resulting_state=(29,),
    comment='""13 times 3 equals 39 minus 7 minus 3""',
)

# ""13 minus 7 is 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7 is 6""',
)

# ""Times 3. Plus 3?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3+3=21"",
    resulting_state=(21,),
    comment='""Times 3. Plus 3?""',
)

# ""I'm going to add the 3's together""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 7, 13),
    comment='""I\'m going to add the 3\'s together""',
)

# ""Times 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(13, 42),
    comment='""Times 7""',
)

# ""Divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42/13=3.23"",
    resulting_state=(3.23,),
    comment='""Divided by 13""',
)

# ""13 minus 7 is 6"" - participant tries this path again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(3, 3, 6),
    comment='""13 minus 7 is 6""',
)

# ""times 3 would be 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 18),
    comment='""times 3 would be 18""',
)

# ""7 times 3 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(3, 13, 21),
    comment='""7 times 3 is 21""',
)

# ""Plus 13 divided by 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+13/3=25.33"",
    resulting_state=(25.33,),
    comment='""Plus 13 divided by 3""',
)

# ""3 times 13 minus 7 minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13-7-3=29"",
    resulting_state=(29,),
    comment='""3 times 13 minus 7 minus 3""',
)

# ""3 times 3 equals 9 plus 7 plus 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3+7+13=29"",
    resulting_state=(29,),
    comment='""3 times 3 equals 9 plus 7 plus 13""',
)
```"
4465,"[1,11,12,12]",,180," We have 11 minus 1, let's see here, 11 minus 1… If only I could do 12 plus 12, that would be nice. So let's do 12 plus… I don't know, plus 1 divided by 11, okay, let's see. Slovenian exercise Umm… Slovenian exercise Ok… So let's do… Slovenian exercise Typing tedious to make 12 times no we don't have that one let's do plus 12 yeah that's not gonna work either it's the best I got","```python
start_state = (1, 11, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(10, 12, 12),
    comment='""11 minus 1""',
)

# ""If only I could do 12 plus 12"" - participant considers adding the 12s
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""If only I could do 12 plus 12""',
)

# ""plus 1 divided by 11"" - participant tries a new operation
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+1)/11=1.18"",
    resulting_state=(1.18, 12),
    comment='""plus 1 divided by 11""',
)

# There are some transcription artifacts (""Slovenian exercise"")

# ""12 times"" participant considers multiplication
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(1, 11, 144),
    comment='""12 times""',
)

# ""plus 12"" participant tries addition again
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(1, 11, 24),
    comment='""plus 12""',
)
```"
4467,"[3,4,8,12]",,180," Okay, trying to get to 24. Got to use everything. So we got a 12, which is a lot. So if I can make 8, 4, and 3 equal 2, that would be 8 minus 5 minus 4 is 1. Mmm, 3 plus, mmm, nope. Or if I can go there, 8 times 7, that would only leave 7. So you would have to go, if I can get to 6 and multiply by 4, that's not going to do it. 4, mmm, 4 plus 8. 4, 16 plus 8, okay, 3, mmm, if I can get to 6, 12, 12 minus 4 is 8 minus 3 is 5. That's not going to help me. If I can make 8, 4, and 3 equal 12, that would help me. Doesn't look like it. If I can make, um, mmm, 8 minus, if I can make 8, 4, and 3 equal to 2, so 8 plus 3 is 11 minus 4, that's not going to do it. If we could go 8 plus 3 minus 4, that's not going to do it. 8, mmm, divided by 4 is 2. Mmm, let's just start thinking about this. 8 plus 4 equals 12. Mmm, not going to do it. 12 minus 9. Mmm. 12 minus, 12 minus 3 equals 9. Mmm, that's not going to do it. Mmm. 20, there it is. Uh, let's see, 4 minus 3 is equal to 1. Mmm, 8, mmm, equal to 12. 12 minus 8 is 4. But then 3 plus 4 equals 7, not 6. I can get to 18 plus 6. Mmm, not going to do it.","```python
start_state = (3, 4, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So if I can make 8, 4, and 3 equal 2"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""So if I can make 8, 4, and 3 equal 2""',
)

# ""if I can get to 6 and multiply by 4"" - setting another subgoal
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""if I can get to 6 and multiply by 4""',
)

# ""4 plus 8"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""4+8=12"",
    resulting_state=(3, 12, 12),
    comment='""4 plus 8""',
)

# ""12 minus 4 is 8 minus 3 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4-3=5"",
    resulting_state=(5, 8),
    comment='""12 minus 4 is 8 minus 3 is 5""',
)

# ""If I can make 8, 4, and 3 equal 12"" - setting another subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""If I can make 8, 4, and 3 equal 12""',
)

# ""8 plus 3 is 11 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+3-4=7"",
    resulting_state=(7, 12),
    comment='""8 plus 3 is 11 minus 4""',
)

# ""8 divided by 4 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 3, 12),
    comment='""8 divided by 4 is 2""',
)

# ""8 plus 4 equals 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(3, 12, 12),
    comment='""8 plus 4 equals 12""',
)

# ""12 minus 3 equals 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(4, 8, 9),
    comment='""12 minus 3 equals 9""',
)

# ""4 minus 3 is equal to 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-3=1"",
    resulting_state=(1, 8, 12),
    comment='""4 minus 3 is equal to 1""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(3, 4, 4),
    comment='""12 minus 8 is 4""',
)

# ""3 plus 4 equals 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4=7"",
    resulting_state=(4, 7),
    comment='""3 plus 4 equals 7""',
)

```"
4469,"[7,8,8,9]",(9,180," Still trying to get to 24, so there's 17 plus 7 is 24. That's not going to do it. Let's go 18. Mmm, there we go with the 8 minus, 8 minus, 9 minus 8 is equal to 1. Mmm, 8 plus 8 is 16. Mmm, but I don't have 1. I'm running out of numbers. Uhhhh, mmm, 15 and 8 is 23. Maybe that's it. 15 plus 9. Well, maybe that's it. 16. 16 plus 9 is 25. Alright, add them together. Not going to work. Alright, uh, division is always a possibility too. So we got 16, 8 divided by, mmm, that's mmm. No. If I can get 1. I can't get 1 with just 2 things. Gonna have to put 3 of them together to get 24, but then I'm stuck with the 7. Mmm, 8 minus 7. 7 minus 8 is 8. It's 15. 15 plus 17. It's 32. Mmm. Mmm, maybe multiply. That's too high though. Ooh, maybe go to 48. 48. Mmm, 48. 48 divided by 2. Can I get to 48? That's 63. I could get to 72 divided by. 72 divided by 3. 72 divided by 3. Mmm, that's not it. Alright. 72 divided by 3 is, um, 24. So, what is that? 15. 15 times. Nah, that's too much. Um, 8 times 7. 9 times 7. Okay, let's go 9.","```python
start_state = (7, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""17 plus 7 is 24"" - participant likely got 17 from 9+8
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(7, 8, 17),
    comment='""17 plus 7 is 24"" - participant first computes 9+8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+7=24"",
    resulting_state=(8, 24),
    comment='""17 plus 7 is 24""',
)

# ""9 minus 8 is equal to 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 7, 8),
    comment='""9 minus 8 is equal to 1""',
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 9, 16),
    comment='""8 plus 8 is 16""',
)

# ""15 and 8 is 23"" - participant likely got 15 from 7+8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(8, 9, 15),
    comment='""15 and 8 is 23"" - first computing 7+8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+8=23"",
    resulting_state=(9, 23),
    comment='""15 and 8 is 23""',
)

# ""16 plus 9 is 25"" - participant likely got 16 from 8+8 again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 9, 16),
    comment='""16 plus 9 is 25"" - first computing 8+8',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+9=25"",
    resulting_state=(7, 25),
    comment='""16 plus 9 is 25""',
)

# ""7 minus 8 is 8"" seems to be a transcription error
# ""It's 15"" participant may be computing 7+8 again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8=15"",
    resulting_state=(8, 9, 15),
    comment='""It\'s 15"" participant computing 7+8',
)

# ""72 divided by 3 is, um, 24"" - participant seems to be working backward
graph.set_subgoal(
    (72,),
    state_after_subgoal=(24,),
    comment='""72 divided by 3 is, um, 24"" - participant seems to be working backward',
)

# ""8 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(8, 9, 56),
    comment='""8 times 7""',
)

# ""9 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=63"",
    resulting_state=(8, 8, 63),
    comment='""9 times 7""',
)
```"
4471,"[6,8,12,12]",,180," 12 plus 12 is 24. 24 plus 6, nope. So if we could get to 12, 12 and add another 12. Let's go 12 plus 6, 14. I can't quite do that. 12 minus 8 is 4. 6 times 8. There's 12 times 2. 12, 6 times 12. 6 times 12 is 72. I'd have to divide by 3. Okay, 6 times, 12 times 8. Let's look at that. 12 times 8. Equals 96. 96 divided by parenthesis 12 minus 6 parenthesis. See, that's 96, right? 96 divided by That's right. It's not 6. 96. 12. 96 divided by 6. It's not going to do it. 96 divided by 6, I think, is 12. So 96, I mean, I can think about it. I can think about that for later. 96 divided by 8 would equal, but I can't quite get 8. So let's keep deleting. 6 times 8 is 48. 48. Delete, delete. If I could get 48 divided by 2, that would work. 6, 12, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32. Well, there's that. Maybe I can go 12.","```python
start_state = (6, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(6, 8, 24),
    comment='""12 plus 12 is 24""',
)

# ""24 plus 6, nope""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24+6=30"",
    resulting_state=(8, 30),
    comment='""24 plus 6, nope""',
)

# ""12 plus 6, 14"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=14"",
    resulting_state=(8, 12, 14),
    comment='""12 plus 6, 14"" - calculation error',
    result_calc_error=True,
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 12),
    comment='""12 minus 8 is 4""',
)

# ""6 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(12, 12, 48),
    comment='""6 times 8""',
)

# ""6 times 12 is 72""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=72"",
    resulting_state=(8, 12, 72),
    comment='""6 times 12 is 72""',
)

# ""12 times 8. Equals 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(6, 12, 96),
    comment='""12 times 8. Equals 96""',
)

# ""96 divided by parenthesis 12 minus 6 parenthesis""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/(12-6)=16"",
    resulting_state=(16,),
    comment='""96 divided by parenthesis 12 minus 6 parenthesis""',
)

# ""96 divided by 6""
curr_state = graph.move_to_node((6, 12, 96))
new_state = graph.explore_operation(
    curr_state,
    operation=""96/6=16"",
    resulting_state=(12, 16),
    comment='""96 divided by 6""',
)

# The rest appears to be the participant counting numbers and not performing operations

```"
4473,"[5,5,7,10]",7+5x(10/5),180," 7 is 27. I could get to 36 minus 12. 36 minus 12. 36 minus 12. 10 times 5. 10 times 5. That's 50. Minus, parentheses. 50. Can't go fractions. 12. 12. 12 times 2, maybe. Can I get there? Delete, delete. Delete. Let's just get 2 up there. Mm-hmm. 5. Minus, parentheses. Oh. That's 2. 2 minus 50. Still can't divide by 2. Oh, maybe it's the 96 thing. 10 times 7. 72. 72 divided by 5. It'd have to be 72 divided by 6 times 2 divided by 3. . . . . 10 minus 7, oh, 12, 7 plus 5 equals 12. Oh, there it is, there it is, times, if I've got enough time. 10 divided by 5, 2, 5, that is 2.","```python
start_state = (5, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 is 27"" is unclear what operation was intended

# ""36 minus 12"" repeated several times, but unclear how they got 36

# ""10 times 5. That's 50""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*5=50"",
    resulting_state=(5, 7, 50),
    comment='""10 times 5. That\'s 50""',
)

# ""12 times 2"" unclear where 12 came from

# ""10 times 7. 72"" calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7=72"",
    resulting_state=(5, 5, 72),
    comment='""10 times 7. 72"" calculation error',
    result_calc_error=True,
)

# ""72 divided by 5"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/5=14.4"",
    resulting_state=(5, 14.4),
    comment='""72 divided by 5""',
)

# ""10 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 5, 5),
    comment='""10 minus 7""',
)

# ""7 plus 5 equals 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(5, 10, 12),
    comment='""7 plus 5 equals 12""',
)

# ""10 divided by 5, 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 7),
    comment='""10 divided by 5, 2""',
)

# Based on their final response of 7+5x(10/5), they must have done:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 7),
    comment=""First part of final answer: 10/5"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2=10"",
    resulting_state=(7, 10),
    comment=""Second part of final answer: 5*(10/5)"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(17,),
    comment=""Final part: 7+5*(10/5)"",
)
```"
4477,"[4,7,12,12]",(7-4)x12-12,148," Okay, new number. So 12 and 12 is 24, but I don't see how to get there with these other numbers if I have to use them all. So let's see what else I can do. 12 minus 4 is 8. 12 minus 7 is 5. That doesn't really help. What I really want to do is I want to eliminate 4 and 7 so I can just add 12, but that's not going to be possible. So what is 12 plus 7 is 19, and then I would need another 5. So I can't quite get there. 12 minus 4 is 8, plus 7 is 15, plus another 12 is 27, so that doesn't get me there. Let's see. So 4 times 6 is 27. 24. Is there any way I can get 6 with the remaining 3 numbers? 12 plus 12 is 24 divided by 7. No, that doesn't work. What's 12 times 7 divided by 7 is 12. So that doesn't quite work either. 12 times 4 is 48. Divided by 12 is 4. 48 minus 7 is 41 minus 12. No, that's 29. What else could I do here? 12 divided by 4 is 3. Times 12 is 30. That's almost closer. 12 divided by 4 is 3. Plus 12 is 15 plus 7. Plus 7 is 22. What else could I do? Again, I'm out of ideas. 7 minus 4 is 3. Times 12 is 36. Oh, okay. There we go. So parentheses 7 minus 4. There we go. Times 12 minus 12.","```python
start_state = (4, 7, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 and 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 7, 24),
    comment='""12 and 12 is 24""',
)

# ""12 minus 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4=8"",
    resulting_state=(7, 8, 12),
    comment='""12 minus 4 is 8""',
)

# ""12 minus 7 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(4, 5, 12),
    comment='""12 minus 7 is 5""',
)

# ""12 plus 7 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7=19"",
    resulting_state=(4, 12, 19),
    comment='""12 plus 7 is 19""',
)

# ""12 minus 4 is 8, plus 7 is 15, plus another 12 is 27""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-4+7+12=27"",
    resulting_state=(27,),
    comment='""12 minus 4 is 8, plus 7 is 15, plus another 12 is 27""',
)

# ""12 plus 12 is 24 divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12+12)/7=3.43"",
    resulting_state=(3.43, 4),
    comment='""12 plus 12 is 24 divided by 7""',
)

# ""12 divided by 4 is 3. Times 12 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4*12=36"",
    resulting_state=(7, 36),
    comment='""12 divided by 4 is 3. Times 12 is 30"" - participant made calculation error',
)

# ""12 divided by 4 is 3. Plus 12 is 15 plus 7. Plus 7 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4+12+7=22"",
    resulting_state=(22,),
    comment='""12 divided by 4 is 3. Plus 12 is 15 plus 7. Plus 7 is 22""',
)

# ""7 minus 4 is 3. Times 12 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-4)*12=36"",
    resulting_state=(12, 36),
    comment='""7 minus 4 is 3. Times 12 is 36""',
)

# Finally, the participant subtracts 12 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(24,),
    comment='""Times 12 minus 12""',
)
```"
4479,"[4,7,7,8]",(7-(8-7))x4,99," All right, so once again, 7 and 7 is 14, plus 8 is 22, and 4 is 26. So adding them all up isn't going to work, so I have to get creative about this. So I do know that 8 times 3 is 24, and 7 minus 4 is 3, but that leaves me with another 7. So I need to eliminate that 7. So how do I eliminate the 7? Or, let's see, 8 minus 7 is 1, and 7 minus 1 is 6, and 6 times 4 is 24. So I can get to it that way. So how do I do that? We're going to say, we're going to go 7 minus, and then in parentheses, 8 minus 7, which is 1. And so that right there, what I'm looking at is 8 minus 7, so 7 minus 1 is 6, and 6 times 4 is 24. So it's not reading it correctly, so let's see if I can, I think I just have to adjust the parentheses. So, um, so parentheses 7 minus parentheses 8 minus 7, let's see if that allows me to do it. So 7 minus 8 minus 7, in parentheses, times 4. Will that allow me to get there?","```python
start_state = (4, 7, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 and 7 is 14, plus 8 is 22, and 4 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+8+4=26"",
    resulting_state=(26,),
    comment='""7 and 7 is 14, plus 8 is 22, and 4 is 26""',
)

# ""8 times 3 is 24"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""7 minus 4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 7, 8),
    comment='""7 minus 4 is 3""',
)

# ""8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 4, 7),
    comment='""8 minus 7 is 1""',
)

# ""7 minus 1 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=6"",
    resulting_state=(4, 6),
    comment='""7 minus 1 is 6""',
)

# ""6 times 4 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4=24"",
    resulting_state=(24,),
    comment='""6 times 4 is 24""',
)

# The participant then works out how to write this as a single expression
# ""7 minus parentheses 8 minus 7, times 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-(8-7))*4=24"",
    resulting_state=(24,),
    comment='""7 minus parentheses 8 minus 7, times 4""',
)
```"
4480,"[3,3,6,12]",3+3+6+12,107," All right, so we've got 12 and 6 and 3. So 6 times 4 is 24. Is there any way that I can get to 4 with these numbers? Or 2 because 2 times 12? Or 8 because 8 times 3? So you've got to figure out different ways of getting to these numbers. 12 minus 3 is 9 minus another 3 is 6. So that doesn't get me there. 12 minus 6 is 6. And I don't see a path to 24 that way. How about 2? That's more interesting. So 6 divided by 3 is 2. So I just need to eliminate that other 3. So I'll say 3 divided by 3 is 6. 6 is 1. No. And then, right. 3, I need to... Hmm. 12 divided by 3 is 4 times 6 also is 24. So how could I eliminate that other 3? Hmm. This is actually trickier than I thought. Umm... 12... Okay, let's try something else. 12 plus 6 is... Oh, 12 plus 6 is 18. Plus 3 is 21. Plus 3 is 24. Let's just add them all up. Let's go 3 plus 3 plus 6 plus 12. And that's...","```python
start_state = (3, 3, 6, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24"" - participant sets a subgoal of getting to 4 or 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24"" - participant sets a subgoal of getting to 4',
)

# They also consider getting to 2 or 8
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""Or 2 because 2 times 12?""',
)
graph.set_subgoal(
    (8, 3),
    state_after_subgoal=(24,),
    comment='""Or 8 because 8 times 3?""',
)

# ""12 minus 3 is 9 minus another 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3-3=6"",
    resulting_state=(6, 6),
    comment='""12 minus 3 is 9 minus another 3 is 6""',
)

# ""12 minus 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 3, 6),
    comment='""12 minus 6 is 6""',
)

# ""6 divided by 3 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 3, 12),
    comment='""6 divided by 3 is 2""',
)

# ""12 divided by 3 is 4 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12/3)*6=24"",
    resulting_state=(3, 24),
    comment='""12 divided by 3 is 4 times 6""',
)

# ""12 plus 6 is 18. Plus 3 is 21. Plus 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6+3+3=24"",
    resulting_state=(24,),
    comment='""12 plus 6 is 18. Plus 3 is 21. Plus 3 is 24""',
)

```"
4483,"[1,1,4,6]",4/(1x1)x6,36," Okay, so now we're talking about... So 6 times 4 is 24. So those ones I can eliminate by 1 divided by 1 is 1, and then 4 divided by that remaining 1 is 4, and then times 6 will be 24. So I just have to figure out how to eliminate that. So we're going to say 4 divided by 1 divided by... Well, let's actually use times because I like that a little better. 1 times 1. 4 divided by 1 times 1, which is 1. So that equals 4 times 6.","```python
start_state = (1, 1, 4, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 4 is 24"" - participant identifies a goal path
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6 times 4 is 24"" - participant identifies a goal path',
)

# ""1 divided by 1 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""1/1=1"",
    resulting_state=(1, 4, 6),
    comment='""1 divided by 1 is 1""',
)

# ""4 divided by that remaining 1 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/(1*1)=4"",
    resulting_state=(4, 6),
    comment='""4 divided by that remaining 1 is 4""',
)

# ""and then times 6 will be 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(24,),
    comment='""and then times 6 will be 24""',
)
```"
4488,"[2,4,5,9]",,180," I'm... 9 plus 5 is 14... 2 times 5 is 10... 19, 23... 2 times 9 is 18... 22... 36... comes back to 18... 2 times 4 is 8... 17, 22... 2 times 5 is 10... 19, 23... 4 times 9... It's up to 33... that's... 9 plus 4 is 13... that's 11... 5 times 4 is 20... 9 times 5 is 20... 9 times 4 is 20... 9 times 5 is 45... Divided by 4 would be... 1... Wouldn't work... 9 times 5... 45... You couldn't divide... 9... 4... 36... divided by 2... is 18... It's 23... Uh... 2 times 4 is 8... No, that won't work... 18... I could... 25... I might... I don't know if I could do anything or not... Uh... I'm gonna do that... it's 36... I get 38, I get 34, uh, 2 times 5 is 10, 2 times 9 is 18, 20, uh, you get 8 and 45 there, you get 37, but, 5 times,","```python
start_state = (2, 4, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 5 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+5=14"",
    resulting_state=(2, 4, 14),
    comment='""9 plus 5 is 14""',
)

# ""2 times 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*5=10"",
    resulting_state=(4, 9, 10),
    comment='""2 times 5 is 10""',
)

# ""2 times 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(4, 5, 18),
    comment='""2 times 9 is 18""',
)

# ""2 times 4 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=8"",
    resulting_state=(5, 8, 9),
    comment='""2 times 4 is 8""',
)

# ""4 times 9... It's up to 33"" (miscalculation)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=33"",
    resulting_state=(2, 5, 33),
    comment='""4 times 9... It\'s up to 33""',
    result_calc_error=True,
)

# ""9 plus 4 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+4=13"",
    resulting_state=(2, 5, 13),
    comment='""9 plus 4 is 13""',
)

# ""5 times 4 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(2, 9, 20),
    comment='""5 times 4 is 20""',
)

# ""9 times 5 is 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5=45"",
    resulting_state=(2, 4, 45),
    comment='""9 times 5 is 45""',
)

# ""Divided by 4 would be... 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""45/4=1"",
    resulting_state=(2, 1),
    comment='""Divided by 4 would be... 1""',
    result_calc_error=True,
)

# ""9 times 4 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*4=36"",
    resulting_state=(2, 5, 36),
    comment='""9 times 4 is 36""',
)

# ""divided by 2... is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/2=18"",
    resulting_state=(5, 18),
    comment='""divided by 2... is 18""',
)

# The rest of the transcript appears to be the participant repeating operations they've already tried
# or making incomplete calculations without clear operations
```"
4494,"[6,6,8,12]",(12-8),180," Okay, so, oops, let's see, so we got 12, 8, 8, 6 times 6 is 36, 36 minus 8, let's see, 36 minus 8 is 28, so that's not going to work, 36 minus 12 is 13, I think, yeah, 6 minus 2, oh, 14, 6 minus 2 is 4, and 3, 23, gosh, okay. This one's a bit harder, 12 minus 8 is 4, ooh, okay, 4 times 6, 12 times, 6 times 8 is, I think that's 42, 42 minus 12 is 30, 30 minus 6, okay, 8, okay, let's see, 8 times 6 minus 12 minus 6, I think that's correct. Incorrect. No. 36, 42, oh, no, that's not 42, that's 6 times 7 is 42, 6 times 8 is 48. Twelve, let's see. . . . eight is four let's see okay twelve minus six is equal to six divided by six oh okay twelve minus eight is four","```python
start_state = (6, 6, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(8, 12, 36),
    comment='""6 times 6 is 36""',
)

# ""36 minus 8 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-8=28"",
    resulting_state=(12, 28),
    comment='""36 minus 8 is 28""',
)

# ""36 minus 12 is 13, I think"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=13"",
    resulting_state=(8, 13),
    comment='""36 minus 12 is 13, I think""',
    result_calc_error=True,
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 6),
    comment='""12 minus 8 is 4""',
)

# ""6 times 8 is, I think that's 42"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=42"",
    resulting_state=(6, 12, 42),
    comment='""6 times 8 is, I think that\'s 42""',
    result_calc_error=True,
)

# ""42 minus 12 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-12=30"",
    resulting_state=(6, 30),
    comment='""42 minus 12 is 30""',
)

# ""8 times 6 minus 12 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6-12-6=30"",
    resulting_state=(30,),
    comment='""8 times 6 minus 12 minus 6""',
)

# ""that's not 42, that's 6 times 7 is 42, 6 times 8 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(6, 12, 48),
    comment='""6 times 8 is 48""',
)

# ""twelve minus six is equal to six divided by six""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-6)/6=1"",
    resulting_state=(1, 8),
    comment='""twelve minus six is equal to six divided by six""',
)

# ""twelve minus eight is four""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(4, 6, 6),
    comment='""twelve minus eight is four""',
)
```"
4495,"[3,8,12,12]",(12/12)x(8x3),33," 24. Okay. So 3 times 8. I'm stressed and now my mind is blanking. 3 times 8 is 24. Oh, okay. 12 divided by 12, um, times, so 1 times 8 times 3.","```python
start_state = (3, 8, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(12, 12, 24),
    comment='""3 times 8 is 24""',
)

# ""12 divided by 12"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 3, 8, 12),
    comment='""12 divided by 12""',
)

# ""1 times 8 times 3"" - participant combines the previous operations
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1*8*3=24"",
    resulting_state=(12, 24),
    comment='""1 times 8 times 3""',
)
```"
4497,"[4,4,8,11]",,180," 24, 4, 4 times 4 equals 16. 16 divided by 8, 16 plus 11. Let's try 4 times 4, which is 16 plus 8 minus 11. No? So 11, 11 times 4 is 44. 44 divided by, or 44 minus 4 is 30, or sorry, whoa, 44 minus 4 is 40. Minus 8. 32, 44 divided by 8 does not calculate to what I need for 8 times, okay, 8 divided by 4 is 2. 2 times 4, 6 does not add up. 2 times 11 is 22. Plus 4, 26, that doesn't add up. 11, 8. 8 minus 4 is 4. Plus 4 is 15. Plus 11, 26, or 30, whatever, 36. 8. 4 divided by 4 is 1. 1 plus 9, no. 9 plus 11 is not going to give me what I need. 11. 11 minus 8 is 3. 11 minus 8 is 3. 3 times 4 equals 12. No. 3 plus 4 equals 7. Times 4 is 28, so that won't work. So 3 won't work either. 11 minus 4 is 7.","```python
start_state = (4, 4, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 equals 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 11, 16),
    comment='""4 times 4 equals 16""',
)

# ""16 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16/8=2"",
    resulting_state=(2, 11),
    comment='""16 divided by 8""',
)

# ""16 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""16+11=27"",
    resulting_state=(8, 27),
    comment='""16 plus 11""',
)

# ""4 times 4, which is 16 plus 8 minus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""16+8-11=13"",
    resulting_state=(13,),
    comment='""16 plus 8 minus 11""',
)

# ""11 times 4 is 44""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=44"",
    resulting_state=(4, 8, 44),
    comment='""11 times 4 is 44""',
)

# ""44 minus 4 is 40""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44-4=40"",
    resulting_state=(8, 40),
    comment='""44 minus 4 is 40""',
)

# ""Minus 8. 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-8=32"",
    resulting_state=(32,),
    comment='""Minus 8. 32""',
)

# ""8 divided by 4 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 4, 11),
    comment='""8 divided by 4 is 2""',
)

# ""2 times 4, 6"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*4=6"",
    resulting_state=(6, 11),
    comment='""2 times 4, 6""',
    result_calc_error=True,
)

# ""2 times 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(4, 22),
    comment='""2 times 11 is 22""',
)

# ""Plus 4, 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+4=26"",
    resulting_state=(26,),
    comment='""Plus 4, 26""',
)

# ""8 minus 4 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 4, 11),
    comment='""8 minus 4 is 4""',
)

# ""Plus 4 is 15"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=15"",
    resulting_state=(11, 15),
    comment='""Plus 4 is 15""',
    result_calc_error=True,
)

# ""Plus 11, 26, or 30, whatever, 36"" - participant seems unsure about calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+11=36"",
    resulting_state=(36,),
    comment='""Plus 11, 26, or 30, whatever, 36""',
    result_calc_error=True,
)

# ""4 divided by 4 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 8, 11),
    comment='""4 divided by 4 is 1""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 4),
    comment='""11 minus 8 is 3""',
)

# ""3 times 4 equals 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(4, 12),
    comment='""3 times 4 equals 12""',
)

# ""3 plus 4 equals 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+4=7"",
    resulting_state=(4, 7),
    comment='""3 plus 4 equals 7""',
)

# ""Times 4 is 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(28,),
    comment='""Times 4 is 28""',
)

# ""11 minus 4 is 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(4, 7, 8),
    comment='""11 minus 4 is 7""',
)
```"
4499,"[3,5,9,9]",(9+5)x3,180," 24, 9 plus 9 equals 18, 18 plus 3 is 21, 21 plus 5, no, 18 plus 5, 19, 20, 21, 22, 23, minus 3, no, 5 minus 3 is 2, 2 plus 9 is 10, I mean 11, 9 minus 5 is 4, 4 plus 3 or 4, times 3 is 12, 12 plus 9, 21, 9, 9, 4. 5 times 3 is 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, okay, so 5 times 3 equals 15, 15 plus 9, but then what do I do with the other 9? So, 9. 9 times 3 is 28, 28 minus, 9 minus 4, okay, so 9 times 3 is equal to 28 minus 9 minus 5, which is going to be 4, just kidding, 9 minus 5, pause, is 4, yeah, so 9 times 3 must not be 28. That's 3 times whatever, I don't know, I don't remember, I use a calculator all the time. So what if I did 9 minus 5, which is 4, 4 plus 3, so 9 minus 5 is 4, okay, so 9 minus 7 times 9, no, 4 minus 3, no, 4, probably going to run out of time on this one because I can't figure it out. 5 plus 9 is, 10, 11, 12, 10, 11, 12, 1, 2, 12, oh. 9. 9. 9. 9. 5, oh wait, 12 times 3.","```python
start_state = (3, 5, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 9 equals 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(3, 5, 18),
    comment='""9 plus 9 equals 18""',
)

# ""18 plus 3 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+3=21"",
    resulting_state=(5, 21),
    comment='""18 plus 3 is 21""',
)

# Going back to start state for new approach
curr_state = graph.move_to_node(start_state)
# ""5 minus 3 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 9, 9),
    comment='""5 minus 3 is 2""',
)

# ""2 plus 9 is 10, I mean 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+9=11"",
    resulting_state=(9, 11),
    comment='""2 plus 9 is 10, I mean 11""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""9 minus 5 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(3, 4, 9),
    comment='""9 minus 5 is 4""',
)

# ""times 3 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*3=12"",
    resulting_state=(9, 12),
    comment='""times 3 is 12""',
)

# ""12 plus 9, 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(21,),
    comment='""12 plus 9, 21""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""5 times 3 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(9, 9, 15),
    comment='""5 times 3 is 15""',
)

# ""15 plus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+9=24"",
    resulting_state=(9, 24),
    comment='""15 plus 9""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""9 times 3 is 28"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=28"",
    resulting_state=(5, 9, 28),
    comment='""9 times 3 is 28"" (calculation error)',
    result_calc_error=True,
)

# ""9 minus 5, which is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(3, 4, 9),
    comment='""9 minus 5, which is 4""',
)

# ""5 plus 9 is, 10, 11, 12, 10, 11, 12, 1, 2, 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9=14"",
    resulting_state=(3, 9, 14),
    comment='""5 plus 9 is..."" participant counts up but seems confused',
)

# ""12 times 3"" - based on their submitted answer (9+5)x3, they must have realized that 9+5=14 and 14x3=42
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*3=42"",
    resulting_state=(9, 42),
    comment='""12 times 3"" though they actually computed 14x3',
)
```"
4500,"[6,7,9,12]",(9-7)x6+12,74," Okay, let's get it. 7 minus 6 is 1. 9 is 10. 10 plus 12 is 22. That won't work. 12 minus 9 is 3. 3 times 6 is 18. 18 plus 7 is 15. That won't work. 12 minus 6 is 6. Times 7 is 36. Minus 9. 35, 34, 33, 32, 31, 39, 28. No, that won't work. 9 minus 7 is 2. 2 times 12 is 24. Gotta figure out what to do with this number.","```python
start_state = (6, 7, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 minus 6 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 9, 12),
    comment='""7 minus 6 is 1""',
)

# ""9 is 10"" seems to be adding 1 to 9
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+1=10"",
    resulting_state=(10, 12),
    comment='""9 is 10"" seems to be adding 1 to 9',
)

# ""10 plus 12 is 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(22,),
    comment='""10 plus 12 is 22""',
)

# ""That won't work"" so participant goes back to start state
curr_state = graph.move_to_node(start_state)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 6, 7),
    comment='""12 minus 9 is 3""',
)

# ""3 times 6 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(7, 18),
    comment='""3 times 6 is 18""',
)

# ""18 plus 7 is 15"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=15"",
    resulting_state=(15,),
    comment='""18 plus 7 is 15"" - calculation error',
    result_calc_error=True,
)

# ""That won't work"" so back to start state
curr_state = graph.move_to_node(start_state)

# ""12 minus 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(6, 7, 9),
    comment='""12 minus 6 is 6""',
)

# ""Times 7 is 36""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=36"",
    resulting_state=(9, 36),
    comment='""Times 7 is 36""',
    result_calc_error=True,
)

# ""Minus 9"" participant continues calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-9=27"",
    resulting_state=(27,),
    comment='""Minus 9""',
)

# ""No, that won't work"" so back to start state
curr_state = graph.move_to_node(start_state)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 6, 12),
    comment='""9 minus 7 is 2""',
)

# ""2 times 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(6, 24),
    comment='""2 times 12 is 24""',
)

# Based on their final answer (9-7)x6+12, they must have tried 2*6+12=24
curr_state = graph.move_to_node((2, 6, 12))
new_state = graph.explore_operation(
    curr_state,
    operation=""2*6+12=24"",
    resulting_state=(24,),
    comment=""Based on their final answer (9-7)x6+12"",
)
```"
4509,"[7,12,12,13]",12,180," 12 plus 13 is 25. Plus 12 is 37. Minus 7 is 30. That's not right. 12 plus 12 is 24. 7 plus 13 is 20. Plus 12 is 32. Minus 12 is 20. That's not right. 12 plus 12 is 34. That's not right. 7 plus 13 is 20. Plus 12 is 32. No. 7 plus 12 is 19. Plus 13 is 32. No. That's not right. 19, 29, 30. 30, 31. No. That's not right either. 12 plus 13 is 25. Plus 12 is 37. Minus 7 is 30. 12 plus 13 is 25. Plus 7 is 32. Gosh, these are so hard. They really give you a little bit of brain fatigue after a little bit. Let's see. 12 divided by 12 is 1. Plus 13 is 14. Plus 7 is 21. So that's not right. 13 plus 12 is 25. None of these add up. I mean, I know there's got to be a way, but... 12 plus... 12 plus 13 is 15. Let's see.","```python
start_state = (7, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 13 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(7, 12, 25),
    comment='""12 plus 13 is 25""',
)

# ""Plus 12 is 37""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25+12=37"",
    resulting_state=(7, 37),
    comment='""Plus 12 is 37""',
)

# ""Minus 7 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""37-7=30"",
    resulting_state=(30,),
    comment='""Minus 7 is 30""',
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(7, 13, 24),
    comment='""12 plus 12 is 24""',
)

# ""7 plus 13 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(12, 12, 20),
    comment='""7 plus 13 is 20""',
)

# ""Plus 12 is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+12=32"",
    resulting_state=(12, 32),
    comment='""Plus 12 is 32""',
)

# ""Minus 12 is 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-12=20"",
    resulting_state=(20,),
    comment='""Minus 12 is 20""',
)

# ""12 plus 12 is 34"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=34"",
    resulting_state=(7, 13, 34),
    comment='""12 plus 12 is 34""',
    result_calc_error=True,
)

# ""7 plus 13 is 20"" - repeating earlier calculation
new_state = graph.explore_operation(
    curr_state,
    operation=""7+13=20"",
    resulting_state=(12, 12, 20),
    comment='""7 plus 13 is 20""',
)

# ""Plus 12 is 32"" - repeating earlier calculation
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+12=32"",
    resulting_state=(12, 32),
    comment='""Plus 12 is 32""',
)

# ""7 plus 12 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+12=19"",
    resulting_state=(12, 13, 19),
    comment='""7 plus 12 is 19""',
)

# ""Plus 13 is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+13=32"",
    resulting_state=(12, 32),
    comment='""Plus 13 is 32""',
)

# ""12 divided by 12 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/12=1"",
    resulting_state=(1, 7, 13),
    comment='""12 divided by 12 is 1""',
)

# ""Plus 13 is 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+13=14"",
    resulting_state=(7, 14),
    comment='""Plus 13 is 14""',
)

# ""Plus 7 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+7=21"",
    resulting_state=(21,),
    comment='""Plus 7 is 21""',
)

# ""13 plus 12 is 25"" - repeating earlier calculation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+12=25"",
    resulting_state=(7, 12, 25),
    comment='""13 plus 12 is 25""',
)

# ""12 plus 13 is 15"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=15"",
    resulting_state=(7, 12, 15),
    comment='""12 plus 13 is 15""',
    result_calc_error=True,
)
```"
4515,"[9,11,12,13]",,180," Target number 24. This one's going to be harder for me. So let's try 9 plus 11 is 20. Plus, no, that'll make 21, so that's not going to work. 12 plus 13 is 25. Maybe I can get to 1 with 13 minus 12, so that's an idea. 11 plus 9 is 20. No, 11 plus 13 is 24. But I can't get to 1 that way, so what about 12? I don't know. 9 and 11. There's 11 and 12. 11 plus 12 is 23. I don't know what I would do with that. 13 minus 9, no. 13 minus 11 is 2, so 12 plus 9 is 23. You can't add 2 to that. That's not going to work. I think I have a lot more trouble with the bigger numbers. I really don't know where to go with this one. 13, 12... What the fuck is 12 divided by 9? 12... How many times does 3 go into that? I'm trying to think. There's 9 and 12. I don't know. Do I just work with fractions? I'm not using a calculator, so that's not going to work. I don't know. Do I just work with fractions? I'm not using a calculator, so that's not going to work. What's 12 divided by 9? That's... 3 goes into 12 four times, and then 3... I don't know how to do math like that anymore. Am I allowed to use a piece of paper? I'm not using a piece of paper, but... 12... times... No, if I get into multiplication, I'm going to be completely lost. What about 13 plus 12? Well, 11 minus 9 is 2. That's not going to work. 25, 2, no. 9 times 11 is 99. I don't think there's anything I can do with that, unless... No, that's not going to work. I don't know this one. I seriously don't know this one. Let me try and think about this. 1 point 25 is... I think... It's like... If I did 9 and 12, it would be like... or 12 divided by 9 it would be 4 over 3 but I don't know what I would even do with that what's 4 over 3 that's like 1.25 right","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 11 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(12, 13, 20),
    comment='""9 plus 11 is 20""',
)

# ""12 plus 13 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+13=25"",
    resulting_state=(9, 11, 25),
    comment='""12 plus 13 is 25""',
)

# ""13 minus 12"" participant considers this operation
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 9, 11),
    comment='""Maybe I can get to 1 with 13 minus 12""',
)

# ""11 plus 13 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=24"",
    resulting_state=(9, 12, 24),
    comment='""11 plus 13 is 24""',
)

# ""11 plus 12 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(9, 13, 23),
    comment='""11 plus 12 is 23""',
)

# ""13 minus 11 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 9, 12),
    comment='""13 minus 11 is 2""',
)

# ""12 plus 9 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(11, 13, 21),
    comment='""12 plus 9 is 23"" - though they made a calculation error',
    result_calc_error=True,
)

# ""What the fuck is 12 divided by 9?""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 11, 13),
    comment='""What the fuck is 12 divided by 9?""',
)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 12, 13),
    comment='""11 minus 9 is 2""',
)

# ""9 times 11 is 99""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*11=99"",
    resulting_state=(12, 13, 99),
    comment='""9 times 11 is 99""',
)

# The participant continues to consider 12/9 but doesn't perform any new operations
```"
4520,"[1,2,3,4]",4x(1+2+3),13," Okay, um, I can get to 6 times 4 here, that's easy. Okay, so this is 4 times 1 plus 2 plus 3.","```python
start_state = (1, 2, 3, 4)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I can get to 6 times 4 here"" - participant sets a subgoal of getting to 6 to multiply by 4
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""I can get to 6 times 4 here""',
)

# ""4 times 1 plus 2 plus 3"" - participant finds a way to get to 24 directly
new_state = graph.explore_operation(
    curr_state,
    operation=""4*(1+2+3)=24"",
    resulting_state=(24,),
    comment='""4 times 1 plus 2 plus 3""',
)
```"
4521,"[5,6,7,8]",(7+5)x(8-6),34," Okay, um, 7 times 6. Okay, what makes 24? 24 is made by 12. Can anything here make 12? 8, 9, 10, 11, 12. Okay, so that would be that. Okay, okay, so 7 times 5, or 7 plus 5 is 12. So we can do that. 7 plus 5. So 12 times 8 minus 6. 12 times 2. I can do that.","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(5, 8, 42),
    comment='""7 times 6""',
)

# ""24 is made by 12"" suggests participant is setting a subgoal of making 12
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""24 is made by 12""',
)

# ""7 plus 5 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(6, 8, 12),
    comment='""7 plus 5 is 12""',
)

# ""8 minus 6"" to get 2
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 12),
    comment='""8 minus 6""',
)

# ""12 times 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""12 times 2""',
)
```"
4530,"[8,9,9,12]",,180," Okay. 8, 9, 9, 12. Let's see. These are big numbers. 9 times 12 is 108. 9 times 7 is 8, or 9 times 8 is 72. But that math doesn't work. 9 times 9 is 81. It's 81 divided by 4, not 24. Let's see. 12 minus 9 is 3. Times 8 is 24. But then what do we do with the other 9? What did I add together? 9 plus 9 is 18. It doesn't work either. 12 plus 8 is 20, but the 9s won't do anything. What if we did... Hm. I'm stumped. I cannot think of a single combination right now. Oh my gosh, this should not be this hard. 12 plus 9 is 21. That doesn't really do anything either. Ah! What the hell? 9 plus 8 is 17, which again, doesn't really get us anywhere. This is very frustrating. Okay. If we did... 9... 12 divided by 9 is 4 thirds. 4 thirds times 9 is... Olive, stop that! You are being a very bad cat. It is not time for dinner. 9 times 12... No, 12 did I... 9 4 thirds times 9 would give us... 4 times 9 is...","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 12 is 108""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(8, 9, 108),
    comment='""9 times 12 is 108""',
)

# ""9 times 8 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(9, 12, 72),
    comment='""9 times 8 is 72""',
)

# ""9 times 9 is 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(8, 12, 81),
    comment='""9 times 9 is 81""',
)

# ""12 minus 9 is 3. Times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-9)*8=24"",
    resulting_state=(9, 24),
    comment='""12 minus 9 is 3. Times 8 is 24""',
)

# ""9 plus 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(8, 12, 18),
    comment='""9 plus 9 is 18""',
)

# ""12 plus 8 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(9, 9, 20),
    comment='""12 plus 8 is 20""',
)

# ""12 plus 9 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 9, 21),
    comment='""12 plus 9 is 21""',
)

# ""9 plus 8 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8=17"",
    resulting_state=(9, 12, 17),
    comment='""9 plus 8 is 17""',
)

# ""12 divided by 9 is 4 thirds""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(8, 9, 1.33),
    comment='""12 divided by 9 is 4 thirds""',
)

# The rest of the transcript contains an interruption about a cat and incomplete calculations
```"
4531,"[1,1,5,8]",8x(5-1-1),15," Okay, 1, 1, 5, and 8, okay, 8 times 3 is 24, so 8 times 5 minus 1 minus 1.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24"" - participant seems to be setting a subgoal of getting to 3 to multiply by 8
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""8 times 3 is 24""',
)

# ""8 times 5 minus 1 minus 1"" - participant finds a way to get to 3 by subtracting the 1s from 5
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(5-1-1)=24"",
    resulting_state=(24,),
    comment='""8 times 5 minus 1 minus 1""',
)
```"
4537,"[8,9,11,11]",11-8x11-9,180," 11 plus 11 is 22, plus 9 would be 31, minus 8 would be 11, plus 11 minus 9 would be 8. That's not it. 11 plus 11 is 22, plus 9, minus 8. That's not it. 11 plus 11 is 22, is 31, 31 minus 8. That's not right. 11 and 9 is 20. 11 and 9 is 20. 11 and 8 is 19. 30, no, 8 and 9 is 17, plus 11. That's not right. 11 times 8 is 88. 38 divided by 9. It doesn't work. No. It has to be divisible by 4. 9 plus 11 is 20. 9, 8. 8 times 9, no, that's not going to work. 8 times 9 is 72. Can't divide that by 11. 9 times 11 is 99. I can't figure this out. 8 plus 9, 17. Plus 11 times 11, nope. 11 minus 9. 11 minus 9 is 2. Nope. 11 minus 8 is 3. So 3, 9, nope, that's 23. 11 minus 9, well, I don't know. 11 minus 8 is 3. 3 times 11 minus 9. Nope. 11 minus 8 is 3 times 9.","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(8, 9, 22),
    comment='""11 plus 11 is 22""',
)

# ""plus 9 would be 31""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+9=31"",
    resulting_state=(8, 31),
    comment='""plus 9 would be 31""',
)

# ""minus 8 would be 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""31-8=23"",
    resulting_state=(23,),
    comment='""minus 8 would be 11"" - participant made calculation error',
    result_calc_error=True,
)

# ""11 and 9 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9=20"",
    resulting_state=(8, 11, 20),
    comment='""11 and 9 is 20""',
)

# ""11 and 8 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(9, 11, 19),
    comment='""11 and 8 is 19""',
)

# ""8 and 9 is 17, plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9+11=28"",
    resulting_state=(11, 28),
    comment='""8 and 9 is 17, plus 11""',
)

# ""11 times 8 is 88""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(9, 11, 88),
    comment='""11 times 8 is 88""',
)

# ""38 divided by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88/9=9.78"",
    resulting_state=(9.78, 11),
    comment='""38 divided by 9"" - participant likely meant 88/9',
)

# ""9 plus 11 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(8, 11, 20),
    comment='""9 plus 11 is 20""',
)

# ""8 times 9 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(11, 11, 72),
    comment='""8 times 9 is 72""',
)

# ""9 times 11 is 99""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*11=99"",
    resulting_state=(8, 11, 99),
    comment='""9 times 11 is 99""',
)

# ""8 plus 9, 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=17"",
    resulting_state=(11, 11, 17),
    comment='""8 plus 9, 17""',
)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 8, 11),
    comment='""11 minus 9 is 2""',
)

# ""11 minus 8 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 9, 11),
    comment='""11 minus 8 is 3""',
)

# ""3 times 11 minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11-9=24"",
    resulting_state=(24,),
    comment='""3 times 11 minus 9""',
)

# ""11 minus 8 is 3 times 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(11, 27),
    comment='""11 minus 8 is 3 times 9""',
)
```"
4539,"[6,6,7,10]",6x7,180," 6 and 6 is 12. 6 times 7 is 42. Minus 10 is 32. Minus 6. That's not right. 6 times 6 is 36. 7 minus 6 is 1. 10 plus 6 is 16. 16 plus... I would need... 16 plus 8. 10 and 7 is 17. That's 23. 6 and 6 is 12. Minus 7 is... 12 minus 7 is 5. That's 10. Nope. 10 times 6 is 60 minus 42. Nope. 10 times 7 is 70. Minus 70 minus 6 is 64 divided by 6. 24 and 24 is 48. 48 and 48 is 72. 48 and 48 is 72. 7 times 10 plus 6 minus 6. If I do 7 minus 6, I've got 1. If I do 7 minus 6, I've got 1. That would be... I can't divide any of these by anything. I can't divide any of these by anything. Except for the 6 divided by 6 would be 1. Except for the 6 divided by 6 would be 1. And 1 times... No, that's not going to work. 10 plus 7... 6... I don't know. 7 times 10... divided by 6... 7 times 10 is 70 divided by 6. Nope. 6 times 7 is 42. 6 times 7 is 42. I feel like... 40...","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 and 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(7, 10, 12),
    comment='""6 and 6 is 12""',
)

# ""6 times 7 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(6, 10, 42),
    comment='""6 times 7 is 42""',
)

# ""Minus 10 is 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-10=32"",
    resulting_state=(6, 32),
    comment='""Minus 10 is 32""',
)

# ""Minus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-6=26"",
    resulting_state=(26,),
    comment='""Minus 6""',
)

# ""6 times 6 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(7, 10, 36),
    comment='""6 times 6 is 36""',
)

# ""7 minus 6 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 6, 10),
    comment='""7 minus 6 is 1""',
)

# ""10 plus 6 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+6=16"",
    resulting_state=(6, 7, 16),
    comment='""10 plus 6 is 16""',
)

# ""10 and 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(6, 6, 17),
    comment='""10 and 7 is 17""',
)

# ""That's 23"" - participant likely adding 6 to 17
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""17+6=23"",
    resulting_state=(6, 23),
    comment='""That\'s 23"" - participant likely adding 6 to 17',
)

# ""6 and 6 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(7, 10, 12),
    comment='""6 and 6 is 12""',
)

# ""12 minus 7 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-7=5"",
    resulting_state=(5, 10),
    comment='""12 minus 7 is 5""',
)

# ""10 times 6 is 60""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10*6=60"",
    resulting_state=(6, 7, 60),
    comment='""10 times 6 is 60""',
)

# ""10 times 7 is 70""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*7=70"",
    resulting_state=(6, 6, 70),
    comment='""10 times 7 is 70""',
)

# ""minus 6 is 64""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70-6=64"",
    resulting_state=(6, 64),
    comment='""minus 6 is 64""',
)

# ""divided by 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/6=10.67"",
    resulting_state=(10.67,),
    comment='""divided by 6""',
)

# ""7 times 10 plus 6 minus 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10+6-6=70"",
    resulting_state=(70,),
    comment='""7 times 10 plus 6 minus 6""',
)

# ""7 minus 6, I've got 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-6=1"",
    resulting_state=(1, 6, 10),
    comment='""7 minus 6, I\'ve got 1""',
)

# ""6 divided by 6 would be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/6=1"",
    resulting_state=(1, 7, 10),
    comment='""6 divided by 6 would be 1""',
)

# ""7 times 10 is 70 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10/6=11.67"",
    resulting_state=(6, 11.67),
    comment='""7 times 10 is 70 divided by 6""',
)

# ""6 times 7 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(6, 10, 42),
    comment='""6 times 7 is 42""',
)
```"
4545,"[3,5,12,12]",3,180," 12 plus 12 would be 24, but I can't. Then 3 and 5. 12 minus 3 would be 9. 12 minus 5 would be 7. 12 plus 5 would be 17. 12 plus 3 would be 15. 3 times 5 would be 15. 3 divided by 5 is 0.6. 0.6 times 12 would be... 6 over 10 times 12. 6... 36... over 5... That doesn't help. 5 over 3 is... 0.6 times that leaves me with 2 twelves. 3 over 12... 12 over 3 is 22. four. Three over twelve is one-fourth. Five times twelve is sixty. One-fourth of sixty is less than twenty, because twenty is one-third. 3.12 times 5 would be 5.4 that doesn't do anything for me 12 plus 12 is 24","```python
start_state = (3, 5, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 would be 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 5, 24),
    comment='""12 plus 12 would be 24""',
)

# ""12 minus 3 would be 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(5, 9, 12),
    comment='""12 minus 3 would be 9""',
)

# ""12 minus 5 would be 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-5=7"",
    resulting_state=(3, 7, 12),
    comment='""12 minus 5 would be 7""',
)

# ""12 plus 5 would be 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+5=17"",
    resulting_state=(3, 12, 17),
    comment='""12 plus 5 would be 17""',
)

# ""12 plus 3 would be 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+3=15"",
    resulting_state=(5, 12, 15),
    comment='""12 plus 3 would be 15""',
)

# ""3 times 5 would be 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(12, 12, 15),
    comment='""3 times 5 would be 15""',
)

# ""3 divided by 5 is 0.6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/5=0.6"",
    resulting_state=(0.6, 12, 12),
    comment='""3 divided by 5 is 0.6""',
)

# ""0.6 times 12 would be... 6 over 10 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""0.6*12=7.2"",
    resulting_state=(7.2, 12),
    comment='""0.6 times 12 would be... 6 over 10 times 12""',
)

# ""12 over 3 is 22. four"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=22"",
    resulting_state=(5, 12, 22),
    comment='""12 over 3 is 22""',
    result_calc_error=True,
)

# ""Five times twelve is sixty""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*12=60"",
    resulting_state=(3, 12, 60),
    comment='""Five times twelve is sixty""',
)

# ""12 plus 12 is 24"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 5, 24),
    comment='""12 plus 12 is 24""',
)
```"
4547,"[6,7,8,10]",,180," 7 plus 8 is 15 plus 10. 8 over 6 would be 4 over 3, which would be 1.33. That doesn't help. 10 minus 7 would be 3. Times 8 is 24. The 1 that was the 6. 10 plus 7 is 17. You have to put that in nothings to find the total number. 6 plus 8 is 14. Plus 10 is 24. That leaves me with 7. 10 minus 6 would give me 4. 10 minus 8 would give me 2. 6 plus 8 would give me 1. This is good. 6 plus 7 would give me 14. 13. 6 plus 8 would give me 1. 10 minus 8 is 14. 8. Plus 7 will give me 1. Plus 7 will give me 4. 70 minus 6 times 8, 8, 16, 24, 48, right? No, 8, 16, 24, yeah, 48, 60, 7, 14, 21, 28, 56, that is 60, 80, 7, 14, 21, 42, 2, no, there's 8, 38, 70, 6, 12, 24,","```python
start_state = (6, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 8 is 15 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8+10=25"",
    resulting_state=(6, 25),
    comment='""7 plus 8 is 15 plus 10""',
)

# ""8 over 6 would be 4 over 3, which would be 1.33""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/6=1.33"",
    resulting_state=(1.33, 7, 10),
    comment='""8 over 6 would be 4 over 3, which would be 1.33""',
)

# ""10 minus 7 would be 3. Times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-7)*8=24"",
    resulting_state=(6, 24),
    comment='""10 minus 7 would be 3. Times 8 is 24""',
)

# ""10 plus 7 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+7=17"",
    resulting_state=(6, 8, 17),
    comment='""10 plus 7 is 17""',
)

# ""6 plus 8 is 14. Plus 10 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8+10=24"",
    resulting_state=(7, 24),
    comment='""6 plus 8 is 14. Plus 10 is 24""',
)

# ""10 minus 6 would give me 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-6=4"",
    resulting_state=(4, 7, 8),
    comment='""10 minus 6 would give me 4""',
)

# ""10 minus 8 would give me 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 6, 7),
    comment='""10 minus 8 would give me 2""',
)

# ""6 plus 7 would give me 14. 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(8, 10, 13),
    comment='""6 plus 7 would give me 14. 13"" - participant corrects themselves',
)

# The rest of the transcript appears to be the participant doing various calculations but not clearly stating what operations they're performing on which numbers from the start state
```"
4549,"[4,8,8,12]",((12-8)x4)+8,154," 8 minus 4 is 4. 8 plus 8 is 16. 8 times 8 is 64. 4 times 12 is 48. Or 4 times 12 is 48. 8 times 12 would be 96. 8 plus 4 is 12. 12 plus 12 is 24. 9 plus 8 is 16. Plus 4 is 20. Then I have 12. 4 over 8 is 1 half. 4 is 2. 12 over 4 is 3. Then I have 8. I have a number. Ready? 3 times 8. 4 over 12 is 1 third of that. 1 third of 64, isn't it? 8 over 4 is 2. And then I have a 10. Or 16. That'll just help. 8 plus 8. 16 over 4 is 4. 8 plus 8. 12 plus 8 is 20. Over 4 is 5. 10 times 8 is 40. 8 plus 4 is 7 divided by 8 is 2 times 8 just gets me back to 16. 12 minus 6 is 4. 12 minus 6 is 12. 12 minus 8 is 4 times 4 plus 8.","```python
start_state = (4, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 8, 12),
    comment='""8 minus 4 is 4""',
)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(4, 12, 16),
    comment='""8 plus 8 is 16""',
)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(4, 12, 64),
    comment='""8 times 8 is 64""',
)

# ""4 times 12 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=48"",
    resulting_state=(8, 8, 48),
    comment='""4 times 12 is 48""',
)

# ""8 times 12 would be 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(4, 8, 96),
    comment='""8 times 12 would be 96""',
)

# ""8 plus 4 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=12"",
    resulting_state=(8, 12, 12),
    comment='""8 plus 4 is 12""',
)

# ""12 plus 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(8, 24),
    comment='""12 plus 12 is 24""',
)

# Return to start state for division operations
curr_state = graph.move_to_node(start_state)

# ""4 over 8 is 1 half""
new_state = graph.explore_operation(
    curr_state,
    operation=""4/8=0.5"",
    resulting_state=(0.5, 8, 12),
    comment='""4 over 8 is 1 half""',
)

# ""12 over 4 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/4=3"",
    resulting_state=(3, 8, 8),
    comment='""12 over 4 is 3""',
)

# ""3 times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(8, 24),
    comment='""3 times 8""',
)

# Return to start state
curr_state = graph.move_to_node(start_state)

# ""8 over 4 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 8, 12),
    comment='""8 over 4 is 2""',
)

# Return to start state
curr_state = graph.move_to_node(start_state)

# ""8 plus 8. 16 over 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+8)/4=4"",
    resulting_state=(4, 12),
    comment='""8 plus 8. 16 over 4 is 4""',
)

# ""12 plus 8 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(4, 8, 20),
    comment='""12 plus 8 is 20""',
)

# ""Over 4 is 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20/4=5"",
    resulting_state=(5, 8),
    comment='""Over 4 is 5""',
)

# ""8 plus 4 is 7"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+4=7"",
    resulting_state=(7, 8, 12),
    comment='""8 plus 4 is 7"" seems to be a calculation error',
    result_calc_error=True,
)

# ""12 minus 8 is 4 times 4 plus 8"" - this is the solution they found
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-8)*4+8=24"",
    resulting_state=(24,),
    comment='""12 minus 8 is 4 times 4 plus 8"" - this is the solution they found',
)
```"
4551,"[1,6,8,9]",9+8+6+1,85," 9 times 8 is 72. 6 times 8 is 816, 24, 48. 8 times 8 is 64. And I just left the 6. 6. 9 times 8 is 72, the right of 8 is 6. It would be just so. That would be 12. 181 divided by 6 would be 6, but no. I'm going to do 8 times 7, 8 times 8. What gets me whole numbers? 10 plus 9, 10. 1 times 9 plus, oh! 9 plus 8, 17. Plus 6 plus 1.","```python
start_state = (1, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 8 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(1, 6, 72),
    comment='""9 times 8 is 72""',
)

# ""6 times 8 is 816, 24, 48"" - participant seems to be trying different multiplications
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(1, 9, 48),
    comment='""6 times 8 is... 48""',
)

# ""8 times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(1, 6, 9, 64),
    comment='""8 times 8 is 64""',
)

# ""9 times 8 is 72"" - participant tries this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*8=72"",
    resulting_state=(1, 6, 72),
    comment='""9 times 8 is 72""',
)

# ""9 plus 8, 17. Plus 6 plus 1"" - participant finds the solution
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8+6+1=24"",
    resulting_state=(24,),
    comment='""9 plus 8, 17. Plus 6 plus 1""',
)
```"
4554,"[1,3,6,13]",(13-1)x(6/3),92," Okay, I can do 13 minus 6 is 6. 6 times 4. So 13 minus 6 times 3 plus 1. Maybe 6 times 4, yeah. 13 minus 6 is 6. No, 7. Whoops. I can do 3. No. I can do 23, no. 10, no. 12, no. Oh, 12 times 2. So 13 minus 1 is 12. Times 6 divided by 3. 3 is 2.","```python
start_state = (1, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=6"",
    resulting_state=(1, 3, 6),
    comment='""13 minus 6 is 6"" - calculation error',
    result_calc_error=True
)

# ""13 minus 6 times 3 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6*3+1=8"",
    resulting_state=(-4,),
    comment='""13 minus 6 times 3 plus 1""',
)

# ""13 minus 6 is 6. No, 7"" - participant corrects their earlier calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-6=7"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 6 is 6. No, 7"" - participant corrects their earlier calculation',
)

# ""13 minus 1 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-1=12"",
    resulting_state=(3, 6, 12),
    comment='""13 minus 1 is 12""',
)

# ""Times 6 divided by 3"" - participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*(6/3)=24"",
    resulting_state=(24,),
    comment='""Times 6 divided by 3""',
)
```"
4568,"[1,2,2,6]",6x(2+2)x1,20," All right, here we go. So there's a 6 at the end. So I like to use the larger number first. So it looks like 4 times 6 gets us that 24. So all we need is 6 times, and then we'll do 2 plus 2 parentheses, and then multiply that by 1.","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 6 gets us that 24"" - participant seems to be setting a subgoal of getting 4 to multiply by 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""4 times 6 gets us that 24""',
)

# ""2 plus 2"" - participant achieves first part of subgoal
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(1, 4, 6),
    comment='""2 plus 2""',
)

# ""6 times... 2 plus 2 parentheses, and then multiply that by 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*4*1=24"",
    resulting_state=(24,),
    comment='""6 times... 2 plus 2 parentheses, and then multiply that by 1""',
)
```"
4571,"[1,7,10,13]",(13-10)x(7+1),133," Alright, so 10 minus 7 is 3. No, can't do that. Okay, so let's see here. You know what? I think I know this one actually. It's 13 minus 10 that gets you 3. Then you add 1 to that. That will give you 4 and then you multiply that by 7. 7, 14, 20. Oh, that's 28. I'm dumb. Let's see here. Damn. 10 minus 7 equals 3. No. 10, 13 minus 10. Oh, 13 minus 10 equals 3. And then... No, that doesn't work. 13. 8, 7, 14, 21. That's 3 less. God damn it. 13 minus 7 equals 7. Oh my gosh. How about 1? 10 plus 1 equals 11. Ugh. That doesn't work either. Let's see. How about 13 minus 10? That will get you 3. Now... Multiply that by 7 plus 1.","```python
start_state = (1, 7, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(1, 3, 13),
    comment='""10 minus 7 is 3""',
)

# ""13 minus 10 that gets you 3. Then you add 1 to that""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10+1=4"",
    resulting_state=(4, 7),
    comment='""13 minus 10 that gets you 3. Then you add 1 to that""',
)

# ""and then you multiply that by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(28,),
    comment='""and then you multiply that by 7""',
)

# ""10 minus 7 equals 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(1, 3, 13),
    comment='""10 minus 7 equals 3""',
)

# ""13 minus 10 equals 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 10 equals 3""',
)

# ""13 minus 7 equals 7"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=7"",
    resulting_state=(1, 7, 10),
    comment='""13 minus 7 equals 7"" - calculation error',
    result_calc_error=True,
)

# ""10 plus 1 equals 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+1=11"",
    resulting_state=(7, 11, 13),
    comment='""10 plus 1 equals 11""',
)

# Finally ""13 minus 10? That will get you 3. Now... Multiply that by 7 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10=3"",
    resulting_state=(1, 3, 7),
    comment='""13 minus 10? That will get you 3""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*(7+1)=24"",
    resulting_state=(24,),
    comment='""Multiply that by 7 plus 1""',
)

```"
4574,"[1,8,8,12]",(12-8-1)x8,15," Alright, so let's see here, 3 and 8 is what we want to get to, so let's do 12 minus 8 minus 1 and then multiply that by 8.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 and 8 is what we want to get to"" - participant is setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""3 and 8 is what we want to get to""',
)

# ""12 minus 8 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8-1=3"",
    resulting_state=(3, 8),
    comment='""12 minus 8 minus 1""',
)

# ""and then multiply that by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""and then multiply that by 8""',
)
```"
4586,"[5,5,8,10]",8,180, 5 plus 5 is 10. 10 is 1. 10 minus 8 is 2 plus 10. That's nothing. 8 plus 5 is 13 plus 10. That's not helpful. 5 times 5 is 25. That's 10. 10 divided by 5 is 2 times 8 is 16 plus 5. 8 minus 5 is 3. 3 times 10 is 30 minus 5 is nothing. 5 plus 5 is 10 plus 8 plus 10 is nothing. 10 plus 5 mmmmm 5 times 5 times 8 40 minus 10 minus 5 is still not correct. 10 minus 5 is still not correct. 8 2 and a half times 10 8 plus 5 13 18,"```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 5 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(8, 10, 10),
    comment='""5 plus 5 is 10""',
)

# ""10 minus 8 is 2 plus 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-8)+10=12"",
    resulting_state=(12,),
    comment='""10 minus 8 is 2 plus 10""',
)

# Going back to start state for ""8 plus 5 is 13 plus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5+10=23"",
    resulting_state=(5, 23),
    comment='""8 plus 5 is 13 plus 10""',
)

# ""5 times 5 is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 10, 25),
    comment='""5 times 5 is 25""',
)

# ""10 divided by 5 is 2 times 8 is 16 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/5)*8+5=21"",
    resulting_state=(21,),
    comment='""10 divided by 5 is 2 times 8 is 16 plus 5""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 5, 10),
    comment='""8 minus 5 is 3""',
)

# ""3 times 10 is 30 minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10-5=25"",
    resulting_state=(25,),
    comment='""3 times 10 is 30 minus 5""',
)

# Going back to start for ""5 plus 5 is 10 plus 8 plus 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5+8+10=28"",
    resulting_state=(28,),
    comment='""5 plus 5 is 10 plus 8 plus 10""',
)

# ""5 times 5 times 8 40 minus 10 minus 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5*8=200"",
    resulting_state=(10, 200),
    comment='""5 times 5 times 8""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""200-10-5=185"",
    resulting_state=(185,),
    comment='""40 minus 10 minus 5""',
)

# ""8 plus 5 13 18"" seems to be adding numbers sequentially
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5+5=18"",
    resulting_state=(10, 18),
    comment='""8 plus 5 13 18"" seems to be adding numbers sequentially',
)
```"
4587,"[1,5,10,12]",(10/5x1)x12,49," Okay. Okay. Let's see here. 8 to 4. So, no. Can I get to 2? I can't get to 2. No, I can. 10 divided by 5 times 1. No, minus. Yeah, that's 2 times 12.","```python
start_state = (1, 5, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Can I get to 2?"" suggests participant is setting a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""Can I get to 2?""',
)

# ""10 divided by 5 times 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5*1=2"",
    resulting_state=(2, 12),
    comment='""10 divided by 5 times 1""',
)

# ""that's 2 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='""that\'s 2 times 12""',
)
```"
4591,"[6,6,8,9]",(8-6)x9+6,81, 6 times 6 is 36. Divide by 9 is 4. 8 minus 6 is 2. 2 times 8 is 18 plus 6. There we go. 8 minus 6 is 2. 2 plus 9 plus 6. Is that right? 202 times 9. Times 9 plus 6.,"```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(8, 9, 36),
    comment='""6 times 6 is 36""',
)

# ""Divide by 9 is 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/9=4"",
    resulting_state=(4, 8),
    comment='""Divide by 9 is 4""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 9),
    comment='""8 minus 6 is 2""',
)

# ""2 times 8 is 18 plus 6"" - seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8+6=22"",
    resulting_state=(22,),
    comment='""2 times 8 is 18 plus 6"" - seems to be a calculation error',
    result_calc_error=True,
)

# ""8 minus 6 is 2"" - participant starts over
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 6, 9),
    comment='""8 minus 6 is 2""',
)

# ""2 plus 9 plus 6"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2+9+6=17"",
    resulting_state=(17,),
    comment='""2 plus 9 plus 6""',
)

# ""2 times 9 plus 6"" - this is the final solution they submitted
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-6)*9+6=24"",
    resulting_state=(24,),
    comment='""2 times 9 plus 6"" - this is the final solution they submitted',
)
```"
4592,"[2,2,7,10]",(10/2)+7x(2),180," As you perform the task, try to say aloud everything that comes to Minus 2 is 8, plus 14, 10 minus 2, plus that times that, is that an answer? 12 plus 14, no. 2 plus 7 is 9. 9. 9. I need to get to, like, I need to get to 12. I need to get to 12. 17 is not anything. 3 is not high enough. 5, oh, that's it. 10 divided by 2, plus 7. Times 2. Oh, I didn't do it correctly in there. Plus 7 times 2. All right.","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Minus 2 is 8"" seems to refer to 10-2
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(2, 7, 8),
    comment='""Minus 2 is 8""',
)

# ""plus 14"" seems to add 7*2=14 to something
new_state = graph.explore_operation(
    curr_state,
    operation=""7*2=14"",
    resulting_state=(2, 10, 14),
    comment='""plus 14"" seems to refer to 7*2=14',
)

# ""2 plus 7 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+7=9"",
    resulting_state=(2, 9, 10),
    comment='""2 plus 7 is 9""',
)

# ""I need to get to 12"" suggests participant is setting a subgoal
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""I need to get to 12""',
)

# ""10 divided by 2, plus 7. Times 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10/2+7)*2=24"",
    resulting_state=(24,),
    comment='""10 divided by 2, plus 7. Times 2""',
)

```"
4595,"[1,1,5,8]",(5-1-1)x8,28," Alright, number is 24. I have 1, 1, 5, and 8. I want 3 and 8, so I'm going to say 5 minus 1 minus 1. Oh, maybe that's not the right order of operation. I'm actually going to make it 3 times 8.","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I want 3 and 8"" - participant is setting a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I want 3 and 8""',
)

# ""5 minus 1 minus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1-1=3"",
    resulting_state=(3, 8),
    comment='""5 minus 1 minus 1""',
)

# ""I'm actually going to make it 3 times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""I\'m actually going to make it 3 times 8""',
)
```"
4596,"[8,9,9,12]",(12+9)x,180," Okay, target number is 24. I have 8, 9, 9, and 12. I have 9 and 9 are 8, 12, 17, if I add those together. Okay, so I have way more than I need. If I added 9 and 9, I get 18. And plus another 8 gets me to 26, which is not what I want. And I don't want to divide by 12, so maybe I want to add 9 and 9 to get 18. If I add 9 and 9, I get 18. And plus another 8 gets me to 26, which is not what I want. Add 12. What if I were to take 12 divided by 9? What if I were to take 12 divided by 9? What if I were to take 12 divided by 9? This is Iimmortal Let me try that I'm going to try and plus divided by I don't think that's right. If I do, I don't have any thoughts. If I do 12 divided by 9. Is that going to get me what I wanted, 12 divided by 9?","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 and 9 are 8, 12, 17, if I add those together""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(8, 12, 18),
    comment='""9 and 9 are""',
)

# ""And plus another 8 gets me to 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+8=26"",
    resulting_state=(12, 26),
    comment='""And plus another 8 gets me to 26""',
)

# ""What if I were to take 12 divided by 9?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 8, 9),
    comment='""What if I were to take 12 divided by 9?""',
)

# The participant repeats ""12 divided by 9"" several times but doesn't seem to explore new operations

# Based on their response of ""(12+9)x"" they may have been trying to add 12 and 9
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 9, 21),
    comment='Based on their response of ""(12+9)x"" they may have been trying to add 12 and 9',
)
```"
4597,"[3,3,6,13]",(13x3)-,180," Target number is 24. That's a terrible number to have, so I need 11 plus the 13. I think I'm gonna... Or I could do... I could try to multiply 15 by 3. That'll give me 39. And then... I could do about 3 times 6. Doesn't that give me a number that would give me 24? I'm gonna do that like this. 13 plus 18. 18. 18, 28, 29, 30. And that's correct. So... I would like a way to write out my thoughts and ambitions. I don't want to get into these stupid buttons because I don't know how I think. I don't think in buttons. Um... I... 6 times 6 would be... 36. That's too large. I don't know that I myself want to be there. Um... When it's 39, I must... What? . 39 minus 9 doesn't get me to where I'm going to be, um, 39 minus 18 doesn't get me to where I'm going to be.","```python
start_state = (3, 3, 6, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need 11 plus the 13"" suggests participant is trying to get to 24 by adding 11 to 13
graph.set_subgoal((11, 13), state_after_subgoal=(24,), comment='""I need 11 plus the 13""')

# ""3 times 6"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(3, 13, 18),
    comment='""3 times 6""',
)

# ""13 plus 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+18=31"",
    resulting_state=(3, 31),
    comment='""13 plus 18. 18. 18, 28, 29, 30""',
)

# ""6 times 6 would be... 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(3, 13, 18),
    comment='""6 times 6 would be... 36"" - participant likely meant 6*3=18 since they only have one 6',
)

```"
4598,"[3,5,6,8]",,180," So I have 3, 5, 6, and 8. This is 14. Gives me 215. Gives me the 19. Gives me the 22. So... I want to... somehow get to... 24. And somehow keep these numbers intact. Or use these numbers. If I were to take... 8 times 4. 8 minus... 6 is 4. Oh, I gotcha. So... 6 minus 5... gives me 1. Plus 3. And I'm going to do that. I should... All these are... 6 minus 5... plus... 3. And... times... 8. Gives me... 6 times 5 is 1. Plus 3 is 4. Times 8 is... Yes. Okay. No. It's too many. Okay. 3. I need 3. That's... What if I do Okay, that's 898 8-6 6-6-2 I went, well I can't think of a swipe I need to write it out If I were to take","```python
start_state = (3, 5, 6, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""This is 14"" - participant seems to be adding some numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""6+8=14"",
    resulting_state=(3, 5, 14),
    comment='""This is 14"" - participant seems to be adding 6 and 8',
)

# ""Gives me 215"" is unclear what operation they mean
# ""Gives me the 19"" is unclear what operation they mean
# ""Gives me the 22"" is unclear what operation they mean

# ""8 times 4"" - participant seems to be setting a goal of getting 4 to multiply by 8
graph.set_subgoal(
    (4, 8),
    state_after_subgoal=(24,),
    comment='""8 times 4"" - participant seems to be setting a goal of getting 4',
)

# ""8 minus 6 is 4"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=4"",
    resulting_state=(3, 4, 5),
    comment='""8 minus 6 is 4"" - calculation error',
    result_calc_error=True,
)

# ""6 minus 5 gives me 1. Plus 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6-5)+3=4"",
    resulting_state=(4, 8),
    comment='""6 minus 5 gives me 1. Plus 3""',
)

# ""And times 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(32,),
    comment='""And times 8""',
)

# ""6 times 5 is 1"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=1"",
    resulting_state=(1, 3, 8),
    comment='""6 times 5 is 1"" - calculation error',
    result_calc_error=True,
)

# ""8-6"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 3, 5),
    comment='""8-6""',
)
```"
4601,"[5,9,10,11]",(,180," Our number is 24. The numbers I have are 5, 9, 10, 11. Just add everybody up here. I need to make either 8 or 6. Dividing doesn't help me much here because it makes two. I don't see another dividing thing that I can do. I can do 10 divided by 5 and get two. That doesn't solve my issue, does it, though? Eleven times two plus nine doesn't work. Adding everybody up doesn't work. Ten plus eleven gets me to 21. Nine gets me to 30, right? And then minus five doesn't work. That doesn't solve my issue, though. Dividing doesn't help me much here because it makes two. I need to make either 8 or 6. Like, we didn't hear it differently for the previous 12 just now. I'm going to say my thoughts very aloud. I'm going to say my thoughts very aloud. If I were to see dividing, how many here, or multiplying, I think, oh, 9, so you get 2. 11 minus 9 is 2. There's 1. If I go 10 to 9, I get 4 on the one side. That gets me too many. Oh, no, that's what I want to do. How many 2 is 9 minus 9? No, because it gets me to 4. You don't.","```python
start_state = (5, 9, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Just add everybody up here""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+9+10+11=35"",
    resulting_state=(35,),
    comment='""Just add everybody up here""',
)

# ""I need to make either 8 or 6"" - participant sets subgoals
graph.set_subgoal((6,), state_after_subgoal=(24,), comment='""I need to make either 8 or 6""')
graph.set_subgoal((8,), state_after_subgoal=(24,), comment='""I need to make either 8 or 6""')

# ""10 divided by 5 and get two""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 9, 11),
    comment='""10 divided by 5 and get two""',
)

# ""Eleven times two plus nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2+9=31"",
    resulting_state=(31,),
    comment='""Eleven times two plus nine""',
)

# ""Ten plus eleven gets me to 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(5, 9, 21),
    comment='""Ten plus eleven gets me to 21""',
)

# ""Nine gets me to 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+9=30"",
    resulting_state=(5, 30),
    comment='""Nine gets me to 30""',
)

# ""11 minus 9 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 5, 10),
    comment='""11 minus 9 is 2""',
)

# ""If I go 10 to 9, I get 4 on the one side""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 5, 11),
    comment='""If I go 10 to 9, I get 4 on the one side""',
)

```"
4602,"[2,6,6,7]",,180," Alright, number is 24. My numbers are 2, 6, 6, 7. If I add these, I add 13, 19, 21. So I'm going to have to do more than that. And if I have 6 as one of my numbers, I'm going to multiply. I need a 4. I do 2. 13 doesn't work. Plus 9 doesn't work. If I had 5, I subtract these. That doesn't work. 14 plus 12 doesn't work. Let's see. I have 7. I have 42. Let me subtract what we have from the 6's that don't work. It'll give me 9. It'll give me 8. And then I have the 6 plus 7, which I don't know what to do with. I'm going to add 1. I'm going to get a 3 here. How would that help? Let's see. I knew these, adding them together, that doesn't help, it gets me part of the way there, but I'm close to nothing, the numbers don't count, I did a 13 plus 12, I did a 25, 36, minus 14, doesn't get me to where I want, 36, I divide it by 2, and I'm back to 18.","```python
start_state = (2, 6, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I add these, I add 13, 19, 21"" - participant is adding numbers sequentially
new_state = graph.explore_operation(
    curr_state,
    operation=""2+6+6+7=21"",
    resulting_state=(21,),
    comment='""If I add these, I add 13, 19, 21""',
)

# ""I need a 4"" suggests participant is setting a subgoal
graph.set_subgoal(
    (4,),
    state_after_subgoal=(24,),
    comment='""I need a 4""',
)

# ""13 doesn't work"" - participant likely adding 6+7
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(2, 6, 13),
    comment='""13 doesn\'t work""',
)

# ""14 plus 12 doesn't work"" - participant likely got 12 from 6+6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(2, 7, 12),
    comment='""14 plus 12 doesn\'t work""',
)

# ""I have 7. I have 42"" - participant likely multiplied 7*6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=42"",
    resulting_state=(2, 6, 42),
    comment='""I have 7. I have 42""',
)

# ""6 plus 7"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(2, 6, 13),
    comment='""6 plus 7""',
)

# ""I'm going to get a 3 here"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (3,),
    state_after_subgoal=(24,),
    comment='""I\'m going to get a 3 here""',
)

# ""36"" - participant likely multiplied 6*6
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(2, 7, 36),
    comment='""36, I divide it by 2, and I\'m back to 18""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36/2=18"",
    resulting_state=(7, 18),
    comment='""36, I divide it by 2, and I\'m back to 18""',
)
```"
4603,"[2,12,12,13]",,180," Target number is 24, 2, 12, 12, 13. I've got way too many numbers, so I'm going to do some sort of reduction here. I'm going to get rid of the 13. I hate that number. It doesn't seem to fit in very well here. That means I need to kind of look into it. It doesn't divide evenly by anything else. Dividing 12 and 13 doesn't help me. Dividing the 2s into 12s gives me a 6. That doesn't help me either. Way too many numbers. Um. 12 by 13. It seems to be moving in the wrong direction, dividing, multiplying the numbers together. I'm sure there's a simple solution, I just don't see here. 2 times 12 gives me a 24. Um. Multiply these. It seems like it can go in the wrong direction. Um. If I did 144, and then dividing that by 13, that doesn't seem to be a good idea. Dividing that by 2 also doesn't seem like that would get me where I want to go. Um. If I were to, oh, here we go. 13 times 2 is 26. Um. This isn't what I want to do. Wait. 13 plus 25. So you get above 13. Times 2 will give me 26 minus 1. Doesn't get me where I want to go. Um. 12. Okay. Uh-huh. Yes. . .","```python
start_state = (2, 12, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Dividing 12 and 13 doesn't help me""
new_state = graph.explore_operation(
    curr_state,
    operation=""13/12"",
    resulting_state=(2, 1.08333, 12),
    comment='""Dividing 12 and 13 doesn\'t help me""',
)

# ""Dividing the 2s into 12s gives me a 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/2=6"",
    resulting_state=(6, 12, 13),
    comment='""Dividing the 2s into 12s gives me a 6""',
)

# ""2 times 12 gives me a 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(12, 13, 24),
    comment='""2 times 12 gives me a 24""',
)

# ""Multiply these"" seems to refer to the 12s
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(2, 13, 144),
    comment='""Multiply these"" seems to refer to the 12s',
)

# ""13 times 2 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2=26"",
    resulting_state=(12, 12, 26),
    comment='""13 times 2 is 26""',
)

# ""13 plus 25"" - not clear where 25 comes from, might be a transcription error
# The participant seems to be trying various operations but not finding a solution
```"
4605,"[9,11,12,13]",,180," Ooh, this one's harder. So, 12 times 2. 13 minus 11 would be 2. Sometimes it would be 4. That would be 2. 9 would be 11 plus 12 would only be 23. 9. 13 plus 11 is 24, but that doesn't help. 3. 3. Okay. If I have 12, I only need 2 times that to get 2. I need plus 12, so if I do that minus that, that would be 4. I have 4, 12, and 11. That also doesn't get me anything. 12. Hmm. Those are the only two I can divide. 12 divided by 9. That would not give me an answer that I need. 13 minus 12 would be 1. 1 times... Oh. None of those make sense. Give me 3 three times. 11 would give me 33 minus 13 would only be 20. 33 plus 11 is 2. 1 plus 2 is 11, plus 2 is only 23! Do they need so many guns, or use just one hand? It's protocol. Hmm. . . 11 minus 9 is 2. 2. . Hmm. That's close, but still not happening. 13 minus 9 is 4. . . . Mmm, that still doesn't work. Help me! Wake's, help me! So, 11 gives me 2. . . 1 minus 3 plus 2 would be 2. What do you want?","```python
start_state = (9, 11, 12, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 11 would be 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(2, 9, 12),
    comment='""13 minus 11 would be 2""',
)

# ""9 would be 11 plus 12 would only be 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+12=23"",
    resulting_state=(9, 13, 23),
    comment='""11 plus 12 would only be 23""',
)

# ""13 plus 11 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(9, 12, 24),
    comment='""13 plus 11 is 24""',
)

# ""12 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 11, 13),
    comment='""12 divided by 9""',
)

# ""13 minus 12 would be 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-12=1"",
    resulting_state=(1, 9, 11),
    comment='""13 minus 12 would be 1""',
)

# ""11 would give me 33"" - participant multiplies by 3 but we can't use 3
curr_state = graph.move_to_node(start_state)

# ""11 minus 9 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 12, 13),
    comment='""11 minus 9 is 2""',
)

# ""13 minus 9 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 11, 12),
    comment='""13 minus 9 is 4""',
)
```"
4615,"[5,5,6,11]",(6x5)-(11-5),172," Let's see. Let's see. Let's see... 24, minus 11 is 13, minus 6 is 7. And then, okay, so. Okay. Okay, 6 times 5, minus. 11 minus 5.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""24, minus 11 is 13, minus 6 is 7"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (7, 6, 11),
    state_after_subgoal=(24,),
    comment='""24, minus 11 is 13, minus 6 is 7"" - participant seems to be working backwards from 24',
)

# ""6 times 5, minus. 11 minus 5""
# First compute 6*5
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(5, 11, 30),
    comment='""6 times 5""',
)

# Then compute 11-5 and subtract from 30
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-(11-5)=24"",
    resulting_state=(24,),
    comment='""minus. 11 minus 5""',
)
```"
4617,"[4,4,8,10]",,212," 8 times 4 minus 10 plus... 4 times 4 is 32. 4 times 4 is 16. 8 times 10 is 80. 8 times 10 is 17. 8 times 10 is 21. 8 times 10 is 22. 8 times 10 is 22. eight times four is thirty-two get out of there I see four times four is sixteen plus eight is twenty-four Mm, I don't know. I don't know. I don't know. Say 10 minus eight is two.","```python
start_state = (4, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 4"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(4, 10, 32),
    comment='""8 times 4""',
)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(8, 10, 16),
    comment='""4 times 4 is 16""',
)

# ""8 times 10 is 80""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(4, 4, 80),
    comment='""8 times 10 is 80""',
)

# The participant makes several calculation errors with ""8 times 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=17"",
    resulting_state=(4, 4, 17),
    comment='""8 times 10 is 17"" - calculation error',
    result_calc_error=True,
)

new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=21"",
    resulting_state=(4, 4, 21),
    comment='""8 times 10 is 21"" - calculation error',
    result_calc_error=True,
)

new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=22"",
    resulting_state=(4, 4, 22),
    comment='""8 times 10 is 22"" - calculation error',
    result_calc_error=True,
)

# ""eight times four is thirty-two""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(4, 10, 32),
    comment='""eight times four is thirty-two""',
)

# ""four times four is sixteen plus eight is twenty-four""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+8=24"",
    resulting_state=(10, 24),
    comment='""four times four is sixteen plus eight is twenty-four""',
)

# ""10 minus eight is two""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 4, 4),
    comment='""10 minus eight is two""',
)
```"
4618,"[2,3,7,9]",9,205," Okay two times nine is eighteen plus seven. 2 times 9 is 18, so let's see, 2 times 7 is 14, plus 9. Okay, that's 12 times 7, okay, 7 times 9 equals about 3. Mmm, 7 times 3 equals, plus 9, minus 2, like that, 9 times 3 equals, let's see, 18 times 3 equals, divided by 3, 18 times 3 divided by 7, 12 times 3 equals, divided by 2. Mmm, let's see, 9. Minus 3. Times 3. Mmm.","```python
start_state = (2, 3, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 times nine is eighteen""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*9=18"",
    resulting_state=(3, 7, 18),
    comment='""2 times nine is eighteen""',
)

# ""plus seven"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7=25"",
    resulting_state=(3, 25),
    comment='""plus seven""',
)

# Going back to start state: ""2 times 7 is 14, plus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*7=14"",
    resulting_state=(3, 9, 14),
    comment='""2 times 7 is 14""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+9=23"",
    resulting_state=(3, 23),
    comment='""plus 9""',
)

# ""7 times 9 equals about 3"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=3"",
    resulting_state=(2, 3, 3),
    comment='""7 times 9 equals about 3"" seems to be a calculation error',
    result_calc_error=True,
)

# ""7 times 3 equals, plus 9, minus 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(2, 9, 21),
    comment='""7 times 3 equals""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+9-2=28"",
    resulting_state=(28,),
    comment='""plus 9, minus 2""',
)

# ""9 times 3 equals""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(2, 7, 27),
    comment='""9 times 3 equals""',
)

# The participant seems to be trying various operations without much structure at this point
# ""9. Minus 3. Times 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-3=6"",
    resulting_state=(2, 6, 7),
    comment='""9 minus 3""',
)

```"
4633,"[1,5,10,13]",,180," 10 plus 5 is 15 plus 13 is 28. 13 plus 5 is 18 minus 24 is 6. 10 minus 6 is 10 minus 5 is 5. 10 minus 24 is 19. 10. 10. 10 minus 24 is 13 minus 5 is 8. 8. Okay. 10 minus 5 is 5. 13 minus 5 is 15 minus 13 is 7. 14. 13. Okay. Let me see. Let me see. Let me see how this will work. Let's see if it will work. Let's see if it will work. I have 1, 5. I have 10. Uh... 10, 10. And I have 13. And I have 4. Will it work? Will it work? Oh, I see. I see. I see. I see. I see. I see. It should work. It shouldn't. It shouldn't work. What do I do? What do I do? What do I do? What do I do? What do I do? What do I do? I'm trying to do 10, 10 plus 13, 13, 13, 13, plus 1, 34, 34, 34, okay. 13 plus 5, 18, 6, okay.","```python
start_state = (1, 5, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 5 is 15 plus 13 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+5+13=28"",
    resulting_state=(1, 28),
    comment='""10 plus 5 is 15 plus 13 is 28""',
)

# ""13 plus 5 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=18"",
    resulting_state=(1, 10, 18),
    comment='""13 plus 5 is 18""',
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(1, 5, 13),
    comment='""10 minus 5 is 5""',
)

# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(1, 8, 10),
    comment='""13 minus 5 is 8""',
)

# ""10 minus 5 is 5. 13 minus 5 is 15"" - participant repeats previous operations with an error
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=15"",
    resulting_state=(1, 10, 15),
    comment='""13 minus 5 is 15"" - calculation error',
    result_calc_error=True
)

# ""13 plus 5, 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5=18"",
    resulting_state=(1, 10, 18),
    comment='""13 plus 5, 18""',
)

# The rest of the transcript shows the participant repeating numbers and expressing uncertainty,
# but not clearly performing any new operations
```"
4635,"[5,6,7,8]",,180," 7 x 8 is 56. 7 x 8 is 56. 5 x 6 is 56. 5 x 6 is 56. 5 x 6 x 6. 7 x 8 is 5. 10 x 5 is 5. 10 x 5 is 5. 10 x 5 is 5. 10 x 6 is 7. 10 x 6 x 6. 14 minus 24. 10. 5 plus 8 minus 8 is 32. No working. 7 times 8. 6 times 5 is 32. Minus 7. 14. Intermediate. 6 times 6. Minus 6 times 7 is 32. Minus 8. 6 times 7 is 32. 4 times 3. 4 times 7 minus 8. 8 times 5. 4 times 2 times 3. No working. 8 times 7. 56 minus 5. 7 times 5. 56 minus 6 times 5. 6 plus 7, that's 10, that's 10, that's 10, that's 11, that's plus 12, that's 10, that's 11, that's 11, that's 11. 7 plus 5, 7 plus…","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 x 8 is 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*8=56"",
    resulting_state=(5, 6, 56),
    comment='""7 x 8 is 56""',
)

# ""5 x 6 is 56"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=56"",
    resulting_state=(7, 8, 56),
    comment='""5 x 6 is 56""',
    result_calc_error=True,
)

# ""7 x 8 is 5"" - likely a transcription error
# ""10 x 5 is 5"" - likely a transcription error 
# ""10 x 6 is 7"" - likely a transcription error
# ""14 minus 24"" - unclear where these numbers came from

# ""6 times 5 is 32"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=32"",
    resulting_state=(7, 8, 32),
    comment='""6 times 5 is 32""',
    result_calc_error=True,
)

# ""Minus 7. 14"" - unclear operation

# ""6 times 7 is 32"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=32"",
    resulting_state=(5, 8, 32),
    comment='""6 times 7 is 32""',
    result_calc_error=True,
)

# ""4 times 3"" - unclear where these numbers came from
# ""4 times 7 minus 8"" - unclear where 4 came from
# ""8 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 7, 40),
    comment='""8 times 5""',
)

# ""4 times 2 times 3"" - unclear where these numbers came from

# ""8 times 7. 56""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*7=56"",
    resulting_state=(5, 6, 56),
    comment='""8 times 7. 56""',
)

# ""minus 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""56-5=51"",
    resulting_state=(6, 51),
    comment='""minus 5""',
)

# ""7 times 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*5=35"",
    resulting_state=(6, 8, 35),
    comment='""7 times 5""',
)

# ""56 minus 6 times 5"" - unclear operation sequence

# ""6 plus 7, that's [...] 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7=13"",
    resulting_state=(5, 8, 13),
    comment='""6 plus 7""',
    result_calc_error=True,
)

# ""7 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+5=12"",
    resulting_state=(6, 8, 12),
    comment='""7 plus 5""',
)
```"
4636,"[2,8,9,12]",,180," Target number 24. I'm really getting tired of these say your thoughts aloud pop-ups because I don't, like, I cannot speak my thoughts aloud because that way, if I speak my thoughts aloud, it just confuses me. So I'm trying to have my thoughts and then explain them to you after they're in order. But if I try to. If I try to verbalize what I am thinking as I'm doing the problem, then I cannot do it because I don't understand how these parentheses work. What I would like to do here is do 12 times 2, you get 24. But then I have this 8 and 9 that I can't deal with. So clearly that's not the easiest way. It's not going to be possible. Now what I could do here is that. Fuck. 9 times 2 equals 18 plus 12 equals 20 minus 8 is 12. That doesn't work. So 9 times 2 is 18. Plus 8 is 26. Plus 2 is 28. That doesn't work either. Goddamn it. 12 minus 8 equals 4. That doesn't work either. 8 times 2 equals 16. 16 plus 12 is 29. That doesn't work either. 12 plus 9 is 21 plus 8 is 29. That doesn't work either. 12 times 8 is 96. Not even close. 9 plus 8 is 17 plus 12 is 29. That doesn't work either.","```python
start_state = (2, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2, you get 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(8, 9, 24),
    comment='""12 times 2, you get 24""',
)

# ""9 times 2 equals 18 plus 12 equals 20 minus 8 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2+12-8=12"",
    resulting_state=(12,),
    comment='""9 times 2 equals 18 plus 12 equals 20 minus 8 is 12""',
    result_calc_error=True,
)

# ""9 times 2 is 18. Plus 8 is 26. Plus 2 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*2+8+2=28"",
    resulting_state=(28,),
    comment='""9 times 2 is 18. Plus 8 is 26. Plus 2 is 28""',
)

# ""12 minus 8 equals 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(2, 4, 9),
    comment='""12 minus 8 equals 4""',
)

# ""8 times 2 equals 16. 16 plus 12 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2+12=29"",
    resulting_state=(9, 29),
    comment='""8 times 2 equals 16. 16 plus 12 is 29""',
    result_calc_error=True,
)

# ""12 plus 9 is 21 plus 8 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9+8=29"",
    resulting_state=(2, 29),
    comment='""12 plus 9 is 21 plus 8 is 29""',
)

# ""12 times 8 is 96""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8=96"",
    resulting_state=(2, 9, 96),
    comment='""12 times 8 is 96""',
)

# ""9 plus 8 is 17 plus 12 is 29""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+8+12=29"",
    resulting_state=(2, 29),
    comment='""9 plus 8 is 17 plus 12 is 29""',
)
```"
4637,"[6,7,9,12]",,180," All right, well, I guess this is a different combination of numbers. Great. All right, so 9 plus 6 is 15 minus 6 is 9. That doesn't work. Remember to say your thoughts aloud. 9 plus 7 equals 16 plus 12 equals 28 minus 6, 22. That doesn't work. 6 times 9, 6 times 7 is 42. That's too high. 9 minus 6 is 3. Plus 12 is 15 plus 7 is 22. That doesn't work. I hate this. I hate this so much. This is like my own personal hell. 12 plus 6 is 18 plus 9 is 27 minus 7 is 20. That doesn't work either. 12 divided by 6 is 2 plus 9 is 11 plus 7 is 18. That does not work either. I hate this. I hate this. I hate this. Every combination I'm coming up with is not helping me. 12 plus 7 is 19, plus 9 is 26, that doesn't work. 6 plus 7 plus 9 is 22, plus 12 is 34, obviously that doesn't work either. 12 minus 9 is 3.","```python
start_state = (6, 7, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 6 is 15 minus 6 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+6=15"",
    resulting_state=(7, 12, 15),
    comment='""9 plus 6 is 15""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-6=9"",
    resulting_state=(7, 9, 12),
    comment='""minus 6 is 9""',
)

# ""9 plus 7 equals 16 plus 12 equals 28 minus 6, 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+12-6=22"",
    resulting_state=(22,),
    comment='""9 plus 7 equals 16 plus 12 equals 28 minus 6, 22""',
)

# ""6 times 7 is 42""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(9, 12, 42),
    comment='""6 times 7 is 42""',
)

# ""9 minus 6 is 3. Plus 12 is 15 plus 7 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-6+12+7=22"",
    resulting_state=(22,),
    comment='""9 minus 6 is 3. Plus 12 is 15 plus 7 is 22""',
)

# ""12 plus 6 is 18 plus 9 is 27 minus 7 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6+9-7=20"",
    resulting_state=(20,),
    comment='""12 plus 6 is 18 plus 9 is 27 minus 7 is 20""',
)

# ""12 divided by 6 is 2 plus 9 is 11 plus 7 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6+9+7=18"",
    resulting_state=(18,),
    comment='""12 divided by 6 is 2 plus 9 is 11 plus 7 is 18""',
)

# ""12 plus 7 is 19, plus 9 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+7+9=28"",
    resulting_state=(6, 28),
    comment='""12 plus 7 is 19, plus 9 is 26"" - participant made calculation error',
)

# ""6 plus 7 plus 9 is 22, plus 12 is 34""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+7+9+12=34"",
    resulting_state=(34,),
    comment='""6 plus 7 plus 9 is 22, plus 12 is 34""',
)

# ""12 minus 9 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(3, 6, 7),
    comment='""12 minus 9 is 3""',
)
```"
4642,"[1,4,5,8]",,180," God, I cannot wait for this crap to be over. Alright, target number 24. Let's see here. I need to get a 3 times an 8. I don't know how this 5 works in here though. 5 minus 1 is 4. 4 minus 1 is 3. 8 minus 5 is 3. 8 minus 4 is 4. I think I might have something here. Alright, so 8 minus 5 equals 3. 8 minus 5. 8 minus 5 equals 3. And then... I need to multiply that by 4. That doesn't work either. Crap. And then... And then... one is six. Eight times one is eight minus five is three. Five plus one is six. I don't know how to get rid of the eight.","```python
start_state = (1, 4, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""I need to get a 3 times an 8"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""I need to get a 3 times an 8""',
)

# ""5 minus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""5-1=4"",
    resulting_state=(4, 4, 8),
    comment='""5 minus 1 is 4""',
)

# ""4 minus 1 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""4-1=3"",
    resulting_state=(3, 5, 8),
    comment='""4 minus 1 is 3""',
)

# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(1, 3, 4),
    comment='""8 minus 5 is 3""',
)

# ""8 minus 4 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(1, 4, 5),
    comment='""8 minus 4 is 4""',
)

# ""8 minus 5 equals 3. And then... I need to multiply that by 4""
# The participant seems to be trying to multiply their result of 3 by 4
curr_state = graph.move_to_node((1, 3, 4))
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(1, 12),
    comment='""I need to multiply that by 4""',
)

# ""Eight times one is eight minus five is three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*1-5=3"",
    resulting_state=(3, 4),
    comment='""Eight times one is eight minus five is three""',
)

# ""Five plus one is six""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(4, 6, 8),
    comment='""Five plus one is six""',
)
```"
4645,"[3,5,9,9]",,180," Why is this not over yet? Christ! Nine times three is twenty-seven, minus nine is eighteen, plus five is twenty-four. I think I actually got this one. All right, so, parenthesis, nine times three, twenty-seven, minus, parenthesis, nine, minus, five. Incorrect answer. What the fuck? Nine times three, twenty-seven, plus five, thirty-two. Well, I thought I had it, but I guess I did not. Nine times three is twenty-seven, minus nine is eighteen, plus five is twenty-three. Fuck. Nine times five is forty-five, minus nine is thirty-six. That does not work. Three times five is fifteen, plus nine is twenty-four, but I still have this extra nine. Three plus five is eight, plus nine, plus nine. that's 26. 3 times 3 is 15, plus 9 now. 9 times 9 is 81, divided by 8 is not a number.","```python
start_state = (3, 5, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Nine times three is twenty-seven, minus nine is eighteen, plus five is twenty-four""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-9+5=24"",
    resulting_state=(24,),
    result_calc_error=True,
    comment='""Nine times three is twenty-seven, minus nine is eighteen, plus five is twenty-four""',
)

# ""nine times three, twenty-seven, plus five, thirty-two""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3+5=32"",
    resulting_state=(9, 32),
    comment='""nine times three, twenty-seven, plus five, thirty-two""',
)

# ""Nine times three is twenty-seven, minus nine is eighteen, plus five is twenty-three""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3-9+5=23"",
    resulting_state=(23,),
    comment='""Nine times three is twenty-seven, minus nine is eighteen, plus five is twenty-three""',
)

# ""Nine times five is forty-five, minus nine is thirty-six""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*5-9=36"",
    resulting_state=(3, 36),
    comment='""Nine times five is forty-five, minus nine is thirty-six""',
)

# ""Three times five is fifteen, plus nine is twenty-four""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5+9=24"",
    resulting_state=(9, 24),
    comment='""Three times five is fifteen, plus nine is twenty-four""',
)

# ""Three plus five is eight, plus nine, plus nine""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5+9+9=26"",
    resulting_state=(26,),
    comment='""Three plus five is eight, plus nine, plus nine. that\'s 26""',
)

# ""3 times 3 is 15"" - this appears to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(5, 9, 9, 9),
    result_calc_error=True,
    comment='""3 times 3 is 15"" - this appears to be a calculation error',
)

# ""9 times 9 is 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(3, 5, 81),
    comment='""9 times 9 is 81""',
)
```"
4655,"[3,5,7,10]",,180," 10-3 is 7, 14-22 is no, 12, 10-7 is 3, 3x3 is 9, that won't work, let's see, 7-5 plus 7 is 12, 10-17, 20, 25, I feel like I'm missing something obvious, let's see, 10-5 is 5, 10-7 is 5, 10-7 is 5, 10-7 is 5, 10-7 is 5, 10-7 is 5, 10-7 is 5, 10-7 is 5, I wonder if there's a way to do this. I mean, I haven't thought about division. So let's see. 24. 7 times 10 would be 70. Divided by 5 would be 14. No, because then you have to do something with a 3. 5 plus 7 is 12. No, that doesn't work either. 10. Sorry, I just stopped thinking out loud. 3 times 10. 10 would be 30. Divided by 5 is 6. But then that doesn't work because what would you be doing with that? All right, I got to think about this a different way. We need to get to. 15 if 3 times 5. 3 times 5 is 15. Plus 7 would be 22. That doesn't help us at all. 3 times 5 is 15.","```python
start_state = (3, 5, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10-3 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-3=7"",
    resulting_state=(5, 7, 7),
    comment='""10-3 is 7""',
)

# ""10-7 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 3, 5),
    comment='""10-7 is 3""',
)

# ""3x3 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(5, 9),
    comment='""3x3 is 9""',
)

# ""7-5 plus 7 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5+7=9"",
    resulting_state=(3, 9, 10),
    comment='""7-5 plus 7 is 12"" - though their calculation seems incorrect',
    result_calc_error=True,
)

# ""10-5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(3, 5, 7),
    comment='""10-5 is 5""',
)

# ""7 times 10 would be 70. Divided by 5 would be 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10/5=14"",
    resulting_state=(3, 14),
    comment='""7 times 10 would be 70. Divided by 5 would be 14""',
)

# ""5 plus 7 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+7=12"",
    resulting_state=(3, 10, 12),
    comment='""5 plus 7 is 12""',
)

# ""3 times 10... would be 30. Divided by 5 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*10/5=6"",
    resulting_state=(6, 7),
    comment='""3 times 10... would be 30. Divided by 5 is 6""',
)

# ""3 times 5 is 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*5=15"",
    resulting_state=(7, 10, 15),
    comment='""3 times 5 is 15""',
)

# ""Plus 7 would be 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+7=22"",
    resulting_state=(10, 22),
    comment='""Plus 7 would be 22""',
)

```"
4656,"[1,8,10,12]",12-,180," 10 plus 12 would be 22, 80 divided by 12 is to help us, 88 times 12 would be 24, 48, 96 divided by 10 would only be 9, but that doesn't help us either. Thirteen, 18, no. 10 times 12 is 120, but if you divide that by 8 that wouldn't help us. Eight divided by 12 doesn't help us. Eight plus one would be nine. I wonder, okay, 10 plus 12 is 22. Minus nine won't help us. Ten plus. yeah it doesn't help us this is actually much more difficult than i thought um i guess it's not something i am talented in uh 12 the vision doesn't seem to work in any of these obviously uh right because even if you multiplied if you multiplied eight times ten you wouldn't divide by 12 if you if you multiplied 10 by 12 you wouldn't do that um divide that by one the one throws it off um the one throws it off i don't know oh yeah yeah yeah um 120 it's 120 divided by eight um it's not 24. i'm pretty i know that so that doesn't help me at all um okay okay 10 minus 8 is 2 oh i got it i got it 10 minus 8 is 2 and then you could do it times that by 12 um hold on times by 12 times one no i got the answer i have to figure out how to enter the equation it's uh 10 minus 8 is 2 12 times 2 is is 24 times 1 uh is 24 so i have the answer i have to figure out how to enter in this stupid equation um okay okay uh 12 minus no","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 12 would be 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12=22"",
    resulting_state=(1, 8, 22),
    comment='""10 plus 12 would be 22""',
)

# ""80 divided by 12"" - participant likely meant 8*10=80
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(1, 12, 80),
    comment='""80 divided by 12""',
)

# ""10 times 12 is 120""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=120"",
    resulting_state=(1, 8, 120),
    comment='""10 times 12 is 120""',
)

# ""if you divide that by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""120/8=15"",
    resulting_state=(1, 15),
    comment='""if you divide that by 8""',
)

# ""Eight plus one would be nine""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+1=9"",
    resulting_state=(9, 10, 12),
    comment='""Eight plus one would be nine""',
)

# ""10 plus 12 is 22. Minus nine""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22-9=13"",
    resulting_state=(13,),
    comment='""10 plus 12 is 22. Minus nine""',
)

# ""10 minus 8 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(1, 2, 12),
    comment='""10 minus 8 is 2""',
)

# ""times that by 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(1, 24),
    comment='""times that by 12""',
)

# ""times 1"" 
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1=24"",
    resulting_state=(24,),
    comment='""times 1""',
)
```"
4658,"[1,8,8,12]",12,180," Oh, this is so frustrating. Twice now I've gotten the answer and it won't accept it. So, so, so frustrating. You need to work on your software. Unless the point of this is to frustrate me by not letting it accept my equation. Um, all right. God. Um, all right. 12 minus 8 would be 4 times 8, 6, 24, 32. That doesn't help. Um, 64 divided by 12. That doesn't help. Um, uh, let's see. What's 8 times 12? Uh, 120, 100, uh, 8, 90, 6, I think. Yeah. So let's see, 96. But then if you divided that by 8, that wouldn't get you anywhere. Um, um, uh, oh, I see it. Right. If you do, um, or maybe I see it. Right. Um, no, I thought I did. If you want, if you can get the times of 12 by 2, you'd have. So I was thinking eight times eight minus eight would be zero or not one if it was one whatever it's not one one. I think I might have been on the right track there eight times one is eight doesn't help us. Um, um, what else? Oh, I think no, I can't. I'm doing it again. 8 minus 8 minus 8 is zero. That doesn't help us. Um, hmm. That wasn't the right track. 12 minus 8 is 4. 7 that doesn't help oh this one's tough a plus 1 is 9 doesn't help 17 yeah right good 9 so yeah 12 minus 8 is 4 but it doesn't help this times 32 12 minus 8 is 4 is the 4 do anything for us oh I got it 12 minus 8 minus 1 is 3 and then you could times it by 8 so 12","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 minus 8 would be 4 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 8),
    comment='""12 minus 8 would be 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(1, 32),
    comment='""4 times 8, 6, 24, 32""',
)

# ""64 divided by 12"" - participant likely multiplied 8*8 first
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(1, 12, 64),
    comment='""64 divided by 12""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""64/12=5.33"",
    resulting_state=(1, 5.33),
    comment='""64 divided by 12""',
)

# ""What's 8 times 12?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(1, 8, 96),
    comment='""What\'s 8 times 12? ... 96""',
)

# ""But then if you divided that by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/8=12"",
    resulting_state=(1, 12),
    comment='""But then if you divided that by 8""',
)

# ""eight times one is eight""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*1=8"",
    resulting_state=(8, 8, 12),
    comment='""eight times one is eight""',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 8),
    comment='""12 minus 8 is 4""',
)

# ""a plus 1 is 9"" - participant likely means 8+1
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+1=9"",
    resulting_state=(8, 9, 12),
    comment='""a plus 1 is 9""',
)

# ""12 minus 8 minus 1 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8-1=3"",
    resulting_state=(3, 8),
    comment='""12 minus 8 minus 1 is 3""',
)

# ""and then you could times it by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(24,),
    comment='""and then you could times it by 8""',
)
```"
4663,"[4,4,4,7]",,180," Let's see, 7-4 is 3, 3-4 times 4 is 12, but that doesn't help. 4 times 4 is 16, and 7-4 is 3, and that doesn't help. Now, um, alright, let's see, um, oh, I got it. Uh, 4 divided by 4 is 1, um, 7 minus 1, that 1 would be 6 times 4 is 24. So we need to do, um, 4 divided by 4, um, plus... 7 times 4. That's the right answer, I have to figure out how to write this so you accept it. Um... 4 minus 4 is 1, plus 7 is 8, times 4. Darn it, how do I get you to accept the correct answer? 4 divided by 4 is 1, plus 7 is 8, times 4. Wait, no, I'm an idiot, that's not right. Uh, I'm close. Uh... Minus is why. 4 divided by 4 is 1, minus... 7... Okay, I see what I did wrong here. Um... 7 minus 4 divided by 4, which is 1, so that's 7 minus 1 is 6, times 4. Um... That is right. So it's 7 minus, um... Right, because 4 divided by 4 is 1, so you're essentially saying 7 minus 1 times 4. Um... Ugh... How do I get you to accept this? Um... 7 minus 4 divided by 4, times 4. Um... Alright, I'll try writing it backwards, maybe that'll get it to work. So let's see. It's 4 divided by 4... Can't write it backwards, it has to be a negative number. So it's gotta be, uh... It's gotta be 7... Minus... 4 divided by 4. I have a feeling this is not going to accept my answer, purely because I can't seem to write it in such a way that you're going to read it. And that is so frustrating, I must say. Um... So... Ugh... Ugh... Ugh... Ugh... Alright, I'm gonna try it this way. Maybe...","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7-4 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 4, 4),
    comment='""7-4 is 3""',
)

# ""3-4 times 4 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(3-4)*4=12"",
    resulting_state=(12,),
    result_calc_error=True,
    comment='""3-4 times 4 is 12"" - calculation error',
)

# Going back to start state for ""4 times 4 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(4, 7, 16),
    comment='""4 times 4 is 16""',
)

# ""and 7-4 is 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-4=3"",
    resulting_state=(3, 4, 4),
    comment='""and 7-4 is 3""',
)

# ""4 divided by 4 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""4/4=1"",
    resulting_state=(1, 4, 7),
    comment='""4 divided by 4 is 1""',
)

# ""7 minus 1, that 1 would be 6 times 4 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(7-1)*4=24"",
    resulting_state=(24,),
    comment='""7 minus 1, that 1 would be 6 times 4 is 24""',
)

# The rest of the transcript shows the participant trying to figure out how to write their answer in a way that will be accepted,
# but they don't explore new mathematical operations - they're just trying different ways to write the same calculation
```"
4664,"[7,10,10,12]",10+12+10/7,181," Let's see, so if we had take, well 7 times 12 is already, that's way over, 17, 10 plus 10 is 20. I don't have a freaking clue. Let's try. 7 times 10, which is 70, let's do plus. Plus 10, which is 17, parenthesis close, and then do 17, that's too freaking high, damn it. Let's say plus 10 divided by 12. I don't have a clue what that is. Let's try this again. It's at the equal 24, so 12 plus 10, okay, let's do 12 in parenthesis plus 10 parenthesis, and that gives us 22. Still ain't gonna add up to this freaking 24. Let's do times 7 divided by 10. I'm not a clue. Delete, delete, delete, delete, delete, delete, delete, delete, delete, delete. My brain is too early for this. Okay, 10. 10, that's 120. 7 plus this is 19, that's 29. Can't do it that way. 10 divided by 7 times 10 divided by 12. Who knows. Let's see, 7, 10, parenthesis 10 times... No, plus, 10 times, no, plus 10, that gives you 20, plus 7, parenthesis divided by 12? Nope. Freaking A. Okay, 10. 10 plus 12 is 22, plus 7, which is 29, minus 10, which is not right either. Okay, 7, 7 times, no, let's do 10. Uh, plus 12. Uh, plus 12. Plus 10 divided by 7? No.","```python
start_state = (7, 10, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 12 is already, that's way over""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*12=84"",
    resulting_state=(10, 10, 84),
    comment='""7 times 12 is already, that\'s way over""',
)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(7, 12, 20),
    comment='""10 plus 10 is 20""',
)

# ""7 times 10, which is 70... Plus 10, which is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*10=70"",
    resulting_state=(10, 12, 70),
    comment='""7 times 10, which is 70""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""70+10=80"",
    resulting_state=(12, 80),
    comment='""Plus 10""',
)

# ""12 plus 10... that gives us 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10=22"",
    resulting_state=(7, 10, 22),
    comment='""12 plus 10... that gives us 22""',
)

# ""times 7 divided by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22*7/10=15.4"",
    resulting_state=(15.4,),
    comment='""times 7 divided by 10""',
)

# ""10 divided by 7 times 10 divided by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/7*10/12=1.19"",
    resulting_state=(1.19,),
    comment='""10 divided by 7 times 10 divided by 12""',
)

# ""10 plus 10, that gives you 20, plus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10+7=27"",
    resulting_state=(12, 27),
    comment='""10 plus 10, that gives you 20, plus 7""',
)

# ""10 plus 12 is 22, plus 7, which is 29, minus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12+7-10=19"",
    resulting_state=(19,),
    comment='""10 plus 12 is 22, plus 7, which is 29, minus 10""',
)

# ""10 plus 12... Plus 10 divided by 7"" - this matches their final response
new_state = graph.explore_operation(
    curr_state,
    operation=""10+12+10/7=23.43"",
    resulting_state=(23.43,),
    comment='""10 plus 12... Plus 10 divided by 7""',
)
```"
4665,"[2,2,10,11]",,180," Okay, so if we have 2, 2, 10, and 11. So 11, 2, 2, 10, equals 24. So let's do 10 times 2, which is 20. Times 2, divide by 11. No. So we have 2, 2, 10, 2, 2. Let's take 11, 11, times 2. That's 22. Uh, times 2. Uh, divide by 10. Ow. Let's do 2, 2 times 2, times 11. That's 4. No, that can't be right. So we have 2 times 11, which is 22. 22. 22. Plus 2, parentheses 10. I don't know if you can do that or not. I don't know what the hell that means. No, it means times. Okay, let's try this again. Um, shoo, shoo, shoo, shoo, shoo, shoo. Uh, 10 plus 11, which is 21, plus 2, divide by 2. No? 24. Oh, you don't want to divide by 2. Um, 2 plus 10 minus 2 plus 11? No! 2, 2, 10, 11. Shit. Um, okay. 24. So you have all of those. 10, 11, 12, 13, 14, 15. That's not going to be right. 12, 11, that's 32. Oh, wait a second. Let's see. Try 11 times 2, which is 22. Okay. It's 22 plus 2. Um, 22 plus 24. And I don't need that other number. Um. Um.","```python
start_state = (2, 2, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 times 2, which is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*2=20"",
    resulting_state=(2, 11, 20),
    comment='""10 times 2, which is 20""',
)

# ""Times 2, divide by 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20*2/11=3.64"",
    resulting_state=(3.64,),
    comment='""Times 2, divide by 11""',
)

# ""11 times 2. That's 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 10, 22),
    comment='""11 times 2. That\'s 22""',
)

# ""divide by 10""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22/10=2.2"",
    resulting_state=(2, 2.2),
    comment='""divide by 10""',
)

# ""2 times 2, times 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2*11=44"",
    resulting_state=(10, 44),
    comment='""2 times 2, times 11""',
)

# ""2 times 11, which is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 10, 22),
    comment='""2 times 11, which is 22""',
)

# ""10 plus 11, which is 21, plus 2, divide by 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+11+2)/2=11.5"",
    resulting_state=(11.5,),
    comment='""10 plus 11, which is 21, plus 2, divide by 2""',
)

# ""2 plus 10 minus 2 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+10-2+11=21"",
    resulting_state=(21,),
    comment='""2 plus 10 minus 2 plus 11""',
)

# ""11 times 2, which is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*2=22"",
    resulting_state=(2, 10, 22),
    comment='""11 times 2, which is 22""',
)

# ""22 plus 2""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+2=24"",
    resulting_state=(10, 24),
    comment='""22 plus 2""',
)
```"
4669,"[7,9,9,13]",(9x9)/13,180," Okay, so now we have 7. Good luck on this one. Alright, so we have 13. 13 minus 9, which is 4, times 7. That's too much. Minus 9. Okay, so, golly. 13... times 7, divided by 9, minus 9. I don't have a freaking clue. These numbers are too big to be timed in without paper. So let's do 13... minus 7, which is 6. So 6... Hmm... Okay, let's do 13 minus 7... and that gives us... 6. So 6... times... 9 is 56... divided by 9? Nope. Um... So let's take... Ah, shoot. We want to take a parenthesis. 13 minus 9... Okay, that would give us... 4. Then... times... 4... times... 9 is 27 minus 7? No. There... Oh my gosh. So let's do 13 minus 7. Okay, again, that's 6. And... 6 times... 9... That's 56. Nope, that ain't gonna work either. What if we did 9... times 7... which is 56... minus 9... Oh wait, shit, not... not that one. Hmm... minus 9 minus 13? Ah! Of course not. So that was 56. 56 minus that... Why wouldn't that work? Um... Okay, so let's do parenthesis. 9 times... Let's do 9 times 9, which is 81. Divide by 7. Divide by 13. Okay. That's 81. If you divide it by 13, I don't have a clue what that is.","```python
start_state = (7, 9, 9, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 9, which is 4, times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-9)*7=28"",
    resulting_state=(9, 28),
    comment='""13 minus 9, which is 4, times 7""',
)

# ""13... times 7, divided by 9, minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*7/9-9=1.11"",
    resulting_state=(1.11,),
    comment='""13... times 7, divided by 9, minus 9""',
)

# ""13 minus 7, which is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 9),
    comment='""13 minus 7, which is 6""',
)

# ""6... times... 9 is 56""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=56"",
    resulting_state=(9, 56),
    comment='""6... times... 9 is 56"" - calculation error',
    result_calc_error=True,
)

# ""13 minus 9... Okay, that would give us... 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-9=4"",
    resulting_state=(4, 7, 9),
    comment='""13 minus 9... Okay, that would give us... 4""',
)

# ""times... 4... times... 9 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*9=27"",
    resulting_state=(7, 27),
    comment='""times... 4... times... 9 is 27"" - calculation error',
    result_calc_error=True,
)

# ""13 minus 7. Okay, again, that's 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7=6"",
    resulting_state=(6, 9, 9),
    comment='""13 minus 7. Okay, again, that\'s 6""',
)

# ""6 times... 9... That's 56""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=56"",
    resulting_state=(9, 56),
    comment='""6 times... 9... That\'s 56"" - calculation error',
    result_calc_error=True,
)

# ""9... times 7... which is 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=56"",
    resulting_state=(9, 13, 56),
    comment='""9... times 7... which is 56"" - calculation error',
    result_calc_error=True,
)

# ""9 times 9, which is 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(7, 13, 81),
    comment='""9 times 9, which is 81""',
)

# ""Divide by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""81/13=6.23"",
    resulting_state=(7, 6.23),
    comment='""Divide by 13""',
)
```"
4671,"[6,9,9,11]",9+9+6,180," Lovely, another big one. Let's see. If we take 9 plus 9 plus 6, that's 18, that's 24. That's not going to work. Okay, if we did 9 plus, if we did 9 plus, let's delete this, parenthesis, 11 plus 9, parenthesis, and that gives us 20 plus 9 minus 6. What's that give us? Not it. That gives you 20 plus, that's 23. Dammit. So close. Okay. That was close. That was 18. What if we did 9, parenthesis, 9 times 11, which is 99, divided by 9, which is 11 plus 6. That's not even close. Okay. So if you have 9 times 9, which is 81, divided by 11 plus 6, how about minus 6? How about you're still wrong? Okay. What about 9? 9, let's put it in the parenthesis, 9, 19, 21, oh wait, 9 divided by 3, parenthesis, plus 9 plus 11, parenthesis. What? 19, 20, 21, 22, ah shit, that's 22. Shit, shit. Okay. That was close. 9 times 9, so what if we made it 9 times 6? 9 times 6 is 54. If we divide by 11, then plus 9? I don't know what that answer is, but it sure looks good. Let's do, if we did, divided by 9 plus 11. I don't have a clue what the answer to that is either. Um, 9 plus 9 is 18, plus 6, and can I just submit without the 11? Because that answer would be close enough. 18, that would be 24, damn it. . . . . . . . . . . . . . .","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 9 plus 6, that's 18, that's 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+6=24"",
    resulting_state=(11, 24),
    comment='""9 plus 9 plus 6, that\'s 18, that\'s 24"" - participant makes calculation error',
    result_calc_error=True,
)

# ""11 plus 9, parenthesis, and that gives us 20 plus 9 minus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+9+9-6=23"",
    resulting_state=(23,),
    comment='""11 plus 9...that gives us 20 plus 9 minus 6""',
)

# ""9 times 11, which is 99, divided by 9, which is 11 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*11/9)+6=17"",
    resulting_state=(17,),
    comment='""9 times 11, which is 99, divided by 9, which is 11 plus 6""',
)

# ""9 times 9, which is 81, divided by 11 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*9)/(11+6)=4.76"",
    resulting_state=(4.76,),
    comment='""9 times 9, which is 81, divided by 11 plus 6""',
)

# ""9 divided by 3, parenthesis, plus 9 plus 11"" - participant invents a 3 that's not in the start state

# ""9 times 6 is 54. If we divide by 11, then plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*6/11)+9=13.91"",
    resulting_state=(13.91,),
    comment='""9 times 6 is 54. If we divide by 11, then plus 9""',
)

# ""divided by 9 plus 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""(9*6/9)+11=17"",
    resulting_state=(17,),
    comment='""divided by 9 plus 11""',
)

# ""9 plus 9 is 18, plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9+6=24"",
    resulting_state=(11, 24),
    comment='""9 plus 9 is 18, plus 6""',
)
```"
4672,"[11,13,13,13]",(13+11)-(13-13),45," 13 plus 13 is 24, so if we have 13 plus 13 plus 13 divided by 11, not a clue, 1, 2, 3, 3, 6, 9, that's not going to work. What if we did 13 plus 11? 13 plus 11 is 24. Oh, wait, I know how to do this one. 13 plus 11 parenthesis minus parenthesis 13 minus 13. Hell yeah!","```python
start_state = (11, 13, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 13 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(11, 13, 26),
    comment='""13 plus 13 is 24"" - participant makes calculation error',
    result_calc_error=True,
)

# ""13 plus 13 plus 13 divided by 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""(13+13+13)/11"",
    resulting_state=(13, 39/11),
    comment='""13 plus 13 plus 13 divided by 11""',
)

# ""What if we did 13 plus 11? 13 plus 11 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(13, 13, 24),
    comment='""13 plus 11? 13 plus 11 is 24""',
)

# ""13 plus 11 parenthesis minus parenthesis 13 minus 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24-(13-13)=24"",
    resulting_state=(24,),
    comment='""13 plus 11 parenthesis minus parenthesis 13 minus 13""',
)
```"
4674,"[3,6,12,12]",,180," Okay, so target has to reach 24. So 12 by 12 is 24. Okay, so 6, 18, 19, 20, 22, 23, 24. 12, 12 divided by 6 is 4. Okay, so in parentheses we have 12 divided by 6. That should equal 4 times 3. So 12 divided by 6. No, that's only 2. Times 3 is 6. No, 12. Hold on. 12 divided by 3. 12 divided by 3 is 4. Times 6. 4. No! 12 divided by 3 is 4. 4. Nope, that's not it either. Okay. 12 divided by 6 is 2. Okay. 12 divided by 6 is 2. Times 3. 2. Is that 12? Where am I? No. Okay. 12 divided by 6 is 2. It can't be that. 12 plus 12 is 24. Okay, 12 minus 6 is 6. 18, no. 12 minus 12. 12 minus 12. 12 is 0. No. 12, 11, 10, 9. 12 minus 3 is 9. 9, 8, 7, 6, 5, 4, 3. No. 12, 12 minus 6 is 6.","```python
start_state = (3, 6, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 by 12 is 24"" - participant tries multiplying the 12s
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=24"",
    resulting_state=(3, 6, 24),
    comment='""12 by 12 is 24""',
    result_calc_error=True,  # This is an error since 12*12=144
)

# ""12 divided by 6 is 4"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=4"",
    resulting_state=(3, 4, 12),
    comment='""12 divided by 6 is 4""',
    result_calc_error=True,
)

# ""No, that's only 2"" - participant corrects their error
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 3, 12),
    comment='""No, that\'s only 2""',
)

# ""Times 3 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 12),
    comment='""Times 3 is 6""',
)

# ""12 divided by 3 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 6, 12),
    comment='""12 divided by 3 is 4""',
)

# ""Times 6"" - participant multiplies 4 by 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(12, 24),
    comment='""Times 6""',
)

# ""12 divided by 6 is 2"" - participant tries this calculation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 3, 12),
    comment='""12 divided by 6 is 2""',
)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 6, 24),
    comment='""12 plus 12 is 24""',
)

# ""12 minus 6 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 6, 12),
    comment='""12 minus 6 is 6""',
)

# ""12 minus 12 is 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-12=0"",
    resulting_state=(0, 3, 6),
    comment='""12 minus 12 is 0""',
)

# ""12 minus 3 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-3=9"",
    resulting_state=(6, 9, 12),
    comment='""12 minus 3 is 9""',
)

# ""12 minus 6 is 6"" - participant tries this again
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 6, 12),
    comment='""12 minus 6 is 6""',
)
```"
4676,"[1,4,7,12]",(1+4+7)+12,47," Okay. 7 plus 1 is 8, 9, 10, 11. Okay. So, 4, 5, 7 times 5 is 35. No. 12, 7, 8, 9, 10, 11. No. 7, 8, 9, 10, 11, 12. So, these equal 12 and this equal 12. Okay, okay, okay. 1 plus 4 plus 7 and then plus 12.","```python
start_state = (1, 4, 7, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 1 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+1=8"",
    resulting_state=(4, 8, 12),
    comment='""7 plus 1 is 8""',
)

# ""So, these equal 12 and this equal 12"" suggests participant is trying to make two 12s as a subgoal
graph.set_subgoal(
    (12, 12),
    state_after_subgoal=(24,),
    comment='""So, these equal 12 and this equal 12""',
)

# ""1 plus 4 plus 7 and then plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+4+7+12=24"",
    resulting_state=(24,),
    comment='""1 plus 4 plus 7 and then plus 12""',
)
```"
4679,"[1,7,8,10]",(8-1)+7+10,86," Okay, 7, so 18, 19, 20, 21, 22, 23, 24, 24, 25. So all the numbers together equal 25. If you did, oh, oh, oh, okay, okay, all the numbers together equal 25. So if you did 8 times 1, and then plus 7 plus 10, no, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, shit, 7 times 1. 7 times 1. 7 times 1 plus 8 plus 10. 7, 18, 19, 20, 21, 22, 23, 24, 25, no. So that's 1 over. Oh, 8 minus 1. 8 minus 1. Plus 7 plus 10. 20.","```python
start_state = (1, 7, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""all the numbers together equal 25"" - participant adds all numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""1+7+8+10=25"",
    resulting_state=(25,),
    comment='""all the numbers together equal 25""',
    result_calc_error=True,
)

# ""if you did 8 times 1, and then plus 7 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*1+7+10=25"",
    resulting_state=(25,),
    comment='""if you did 8 times 1, and then plus 7 plus 10""',
)

# ""7 times 1. 7 times 1 plus 8 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*1+8+10=25"",
    resulting_state=(25,),
    comment='""7 times 1. 7 times 1 plus 8 plus 10""',
)

# ""8 minus 1. Plus 7 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-1)+7+10=24"",
    resulting_state=(24,),
    comment='""8 minus 1. Plus 7 plus 10""',
)

```"
4685,"[1,3,6,9]",(9/1)-(6-3,180," 6, 12, 18, 24, 16 times 4, 9, 18, 27, 9, 18, 27, 27 minus 3. Okay, 6 minus 3 is going to be 3 times 9, 9, 18, 27. No, I need to get minus 3. 3, 9, 18, 27. 9 times 1. Let's click on 9, 18, 27. Minus. Damn it. Uh-uh. 6, 12, 18, 24, 16 times 4. Let's get rid of the 9. I think 9. Hmm. Hmm. Click, click, click, click. 24 plus 9 is 33. Okay. Um. 6, 12, 18, 24. 6 plus 3 is going to equal 9. 7, 14, 20. Ugh. 9. I'm going to use a 1. 5 minus 9. 9. So 9, 18, 27. Ooh. 9 divided by 1 is 9. And then minus 6 minus 3. Okay.","```python
start_state = (1, 3, 6, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9, 18, 27"" counting by 9s
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(1, 6, 27),
    comment='""9, 18, 27"" counting by 9s',
)

# ""27 minus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(1, 6, 24),
    comment='""27 minus 3""',
)

# ""6 minus 3 is going to be 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-3=3"",
    resulting_state=(1, 3, 9),
    comment='""6 minus 3 is going to be 3""',
)

# ""times 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=27"",
    resulting_state=(1, 27),
    comment='""times 9""',
)

# ""6 plus 3 is going to equal 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(1, 9, 9),
    comment='""6 plus 3 is going to equal 9""',
)

# ""9 divided by 1 is 9. And then minus 6 minus 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(9/1)-(6-3)=6"",
    resulting_state=(6,),
    comment='""9 divided by 1 is 9. And then minus 6 minus 3""',
)
```"
4686,"[1,2,2,6]",(2x2)x(6x1),29," 6, 12, 18, 24. Okay, it has to be 2 times 2 is 4. Then times 6 times 1. Nope, okay. 6, 12, 18, 24. Huh. 2 times 2 is 4. Maybe times 6 times 1. Thanks for watching!","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6, 12, 18, 24"" suggests the participant is counting by 6s to reach 24
# This could be setting a subgoal of multiplying something by 6
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""6, 12, 18, 24"" suggests participant is counting by 6s to reach 24',
)

# ""2 times 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(1, 4, 6),
    comment='""2 times 2 is 4""',
)

# ""Then times 6 times 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6*1=24"",
    resulting_state=(24,),
    comment='""Then times 6 times 1""',
)

# The participant repeats the same sequence again to confirm
# ""6, 12, 18, 24. Huh. 2 times 2 is 4. Maybe times 6 times 1.""
```"
4698,"[1,3,3,7]",1x(7x3)+3,36," 7 minus 1 is 4 times 6. Can we get 4 and 6? No. What about 7 times 3, which is 21, plus 3 times 1. So we did 1 times 7 times 3, which is 21, and then we're going to add 3.","```python
start_state = (1, 3, 3, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 minus 1 is 4 times 6"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""7-1=4"",
    resulting_state=(3, 3, 4),
    comment='""7 minus 1 is 4""',
    result_calc_error=True,
)

# ""Can we get 4 and 6? No."" suggests participant is setting a subgoal but realizes it's not achievable
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""Can we get 4 and 6? No.""',
)

# ""What about 7 times 3, which is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 3, 21),
    comment='""What about 7 times 3, which is 21""',
)

# ""1 times 7 times 3, which is 21, and then we're going to add 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+3=24"",
    resulting_state=(1, 24),
    comment='""and then we\'re going to add 3""',
)
```"
4700,"[4,7,8,11]",,180," Um, 8 minus 7 is 1. 11 plus 8 is 19. Plus 7 would give you 26. Minus 4, that's not going to help. 8 minus 4 is 4. And 11 minus 7 is 4, so that's 16. It's not helping. 8 minus 7 is 1. 11 times 4 is 4, so that's not going to help. Oh, wait. 11 times 7 is 77. And 8 times 4 is 7. 8 minus 7 is 32. So that's not going to work. What if I did 44 and 32? No. What if I did 88 minus... No, that's going to be the wrong way. 7 times 4 is 28. 8 minus 4... 8 minus 4 is 4. Times 7... Is 28 minus 11? No. ... ... ... 11 minus 4 is 7. ... ... seven plus seven plus eight closer but not quite eight four times seven minus eight no eleven minus eight is gonna give you three seven plus eight plus eight 3 times 7, I can get 25 if I did that, but 11 minus 7.","```python
start_state = (4, 7, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 minus 7 is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 4, 11),
    comment='""8 minus 7 is 1""',
)

# ""11 plus 8 is 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+8=19"",
    resulting_state=(4, 7, 19),
    comment='""11 plus 8 is 19""',
)

# ""Plus 7 would give you 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+7=26"",
    resulting_state=(4, 26),
    comment='""Plus 7 would give you 26""',
)

# Going back to start state for ""8 minus 4 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 7, 11),
    comment='""8 minus 4 is 4""',
)

# ""11 minus 7 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 4, 8),
    comment='""11 minus 7 is 4""',
)

# ""11 times 7 is 77""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*7=77"",
    resulting_state=(4, 8, 77),
    comment='""11 times 7 is 77""',
)

# ""8 times 4 is 7"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=7"",
    resulting_state=(7, 11, 7),
    comment='""8 times 4 is 7"" seems to be a calculation error',
    result_calc_error=True,
)

# ""8 minus 7 is 32"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=32"",
    resulting_state=(4, 11, 32),
    comment='""8 minus 7 is 32"" seems to be a calculation error',
    result_calc_error=True,
)

# ""7 times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(8, 11, 28),
    comment='""7 times 4 is 28""',
)

# ""11 minus 4 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-4=7"",
    resulting_state=(7, 7, 8),
    comment='""11 minus 4 is 7""',
)

# ""seven plus seven plus eight""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7+8=22"",
    resulting_state=(22,),
    comment='""seven plus seven plus eight""',
)

# ""eleven minus eight is gonna give you three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-8=3"",
    resulting_state=(3, 4, 7),
    comment='""eleven minus eight is gonna give you three""',
)

# ""3 times 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(4, 21),
    comment='""3 times 7""',
)

```"
4704,"[7,9,11,11]",11+11+9-7,167," 11 and 11 is 22. 18. 11 plus 7 is 18. 18 plus 11 is 38. No, that ain't going to work either. Man, this is really hard. 22. 16. 11 times 11 is 121 minus 63. Let's see if that works. Times... Oh my goodness, why is this so hard? 11 times 9 is 99. Minus... 77. No, 6... Let's see. 19... 9... It'd be 27 minus... No. 22... 30... Ah, there we go. 11 plus 11 is 22 plus 9 minus 7.","```python
start_state = (7, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 and 11 is 22""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11=22"",
    resulting_state=(7, 9, 22),
    comment='""11 and 11 is 22""',
)

# ""11 plus 7 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(9, 11, 18),
    comment='""11 plus 7 is 18""',
)

# ""18 plus 11 is 38""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+11=38"",
    resulting_state=(9, 38),
    result_calc_error=True,
    comment='""18 plus 11 is 38""',
)

# ""11 times 11 is 121""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=121"",
    resulting_state=(7, 9, 121),
    comment='""11 times 11 is 121""',
)

# ""11 times 9 is 99""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*9=99"",
    resulting_state=(7, 11, 99),
    comment='""11 times 9 is 99""',
)

# Finally, the participant finds the solution
# ""11 plus 11 is 22 plus 9 minus 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+11+9-7=24"",
    resulting_state=(24,),
    comment='""11 plus 11 is 22 plus 9 minus 7""',
)
```"
4708,"[3,9,13,13]",13x9x3/13,180," Submit 9 plus 13, which is 21. Let's see. 3 times 13 is 9. 39. 3 times 13 is 39. Times 9 divided by 13. Okay. Okay. 39. Okay. Plus 9. Ugh. Okay. Let's try this again. 3. Let's see. 13 and 13 is 26. 26 times 3. 13 plus 13. And then 26 plus 3. No, no, no. Times 3 divided by 9. This is crazy. Okay. Let's try. 13 times 9. No... Whoops. 13 times 9 times 3 divided by 13.","```python
start_state = (3, 9, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 plus 13, which is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+13=21"",
    resulting_state=(3, 13, 21),
    comment='""9 plus 13, which is 21""',
    result_calc_error=True,
)

# ""3 times 13 is 39""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*13=39"",
    resulting_state=(9, 13, 39),
    comment='""3 times 13 is 39""',
)

# ""Times 9 divided by 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""39*9/13=27"",
    resulting_state=(27,),
    comment='""Times 9 divided by 13""',
)

# ""13 and 13 is 26""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(3, 9, 26),
    comment='""13 and 13 is 26""',
)

# ""26 times 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26*3=78"",
    resulting_state=(9, 78),
    comment='""26 times 3""',
)

# ""divided by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""78/9=8.67"",
    resulting_state=(8.67,),
    comment='""divided by 9""',
)

# ""13 times 9 times 3 divided by 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*9*3/13=27"",
    resulting_state=(27,),
    comment='""13 times 9 times 3 divided by 13""',
)
```"
4713,"[1,2,3,8]",(8x3)x(2-1),90," All right, let's try this again. Oh, it's a different question. Target number is 24. Okay, 8 times 3 is 24. 8 times 2 is 16. 2 times 3 is 6. 8 times 3... So, couldn't I do 8 times 3? Huh, 24. 24 divided by 2 is 12. 24 divided by 3 is 8. 24... 3 times 8 is 24. Oh, wait, I see. Um... Okay. 8 times 3 would be 24, uh, times 2 minus 1. Okay, so I would say, I would say 8 times 3 times 2 minus 1. This better be right.","```python
start_state = (1, 2, 3, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 3 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=24"",
    resulting_state=(1, 2, 24),
    comment='""8 times 3 is 24""',
)

# ""8 times 2 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*2=16"",
    resulting_state=(1, 3, 16),
    comment='""8 times 2 is 16""',
)

# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(1, 6, 8),
    comment='""2 times 3 is 6""',
)

# ""24 divided by 2 is 12"" - participant seems to be working backward from 24
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""24 divided by 2 is 12"" - participant seems to be working backward from 24',
)

# ""24 divided by 3 is 8"" - participant seems to be working backward from 24 again
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 3 is 8"" - participant seems to be working backward from 24',
)

# ""3 times 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8=24"",
    resulting_state=(1, 2, 24),
    comment='""3 times 8 is 24""',
)

# ""8 times 3 would be 24, uh, times 2 minus 1""
# The participant realizes they need to multiply by 1 (2-1) to keep the result at 24
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3*(2-1)=24"",
    resulting_state=(24,),
    comment='""8 times 3 would be 24, uh, times 2 minus 1""',
)
```"
4718,"[1,5,6,11]",,180," Target number is 24. 6 and 11. Okay. So, if I did, I could come up to 12. 12. 5 plus 6. 6. 5 and 1 is 6. Times 6 is 36. That's no good. 33. 11. 24 minus 11 is what? Is 13. 13. 11. Let's see here. 6 plus 1 is 7. Plus 11 is 18. 18. 18 plus 6. Yeah, but I've already... 5 plus 1 is 6. Plus 11 is 17. Plus 6. No, that's no good. Man, I'm so bad at this. 13. 11 plus 5 is 16. 16 plus 6 is 22. So that's no good. 6. Times 6 is 36. 11 plus 5 is 16. Plus 6 is 22. So I can't get there that way. 6. I could say 5 times 5 is 25. Minus 1. 6 minus 1 would be 5. Times 5 is 25. Then what good is that 11? 11 minus 5 is 6. 6 times 6 is 36. So that's no good. Times 2. So, 6 minus 5 is 1. 11 times 2 is 22. Then I'd have to have another 2. So that's no good. 6 times 5 is 30. Minus 11 is 19. Plus 5. But I already used the 5. So that's no good. Unless I go 5... Plus 1 is 6. Times over. Times 6 is 30. No. Gosh. Was I close there just for a second?","```python
start_state = (1, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 and 1 is 6. Times 6 is 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1=6"",
    resulting_state=(6, 6, 11),
    comment='""5 and 1 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(11, 36),
    comment='""Times 6 is 36""',
)

# ""24 minus 11 is what? Is 13"" - participant seems to be working backward from 24
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 11 is what? Is 13"" - participant seems to be working backward from 24',
)

# ""6 plus 1 is 7. Plus 11 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+1+11=18"",
    resulting_state=(5, 18),
    comment='""6 plus 1 is 7. Plus 11 is 18""',
)

# ""5 plus 1 is 6. Plus 11 is 17""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+1+11=17"",
    resulting_state=(6, 17),
    comment='""5 plus 1 is 6. Plus 11 is 17""',
)

# ""11 plus 5 is 16. 16 plus 6 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5+6=22"",
    resulting_state=(1, 22),
    comment='""11 plus 5 is 16. 16 plus 6 is 22""',
)

# ""11 minus 5 is 6. 6 times 6 is 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(1, 6, 6),
    comment='""11 minus 5 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(1, 36),
    comment='""6 times 6 is 36""',
)

# ""6 minus 5 is 1. 11 times 2 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6-5=1"",
    resulting_state=(1, 1, 11),
    comment='""6 minus 5 is 1""',
)

# ""6 times 5 is 30. Minus 11 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(1, 11, 30),
    comment='""6 times 5 is 30""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-11=19"",
    resulting_state=(1, 19),
    comment='""Minus 11 is 19""',
)

```"
4721,"[5,10,10,11]",,180," I feel like I was on the right track at that last one. I'm getting cheated. 10 plus 10 is 20. 11 times 5 is 55. 10 plus 10 is 20. 10 minus 5 is 5. Okay, I'm not convinced this is possible. I wonder if some of these are unsolvable and so that's what they're trying to see is they're just judging what I'm saying and what I'm coming up with is irrelevant. How on earth do I get 24 out of that? 10 plus 10 is 20. Plus 5 is 25. I get that. I could say 5 times 11 is 55. Minus 20 would be 35. 10 times 10 is 100. Divided by 5 is 20. Then I've got that 11. Yuck. Man, I'm being reminded of why I didn't like math. I wonder if there are people who could just breathe through this. 15 plus 10 would be 25. I just don't see how you get. I just don't see how you get. I just don't see how you get. I just don't see how you get. Again, maybe this is one that needs higher math to get there. I just don't see how you get, with those two odd numbers, how you arrive at 24. I feel like this one's not possible. And so what you're grading me on is to what extent I give up or get frustrated or start musing about what you're trying to grade me on when some fifth grader would get this instantly. 5 times 10 is 50. Divided by 10 is 5, so I'm right back where I started. Plus 11 is 16. So I can get to 16. Plus 10 is 26. But then... Uh-uh. Unless it's 16 divided by 5... Oh, wait, wait, wait. 10 plus 10 is 20. Divided by 5 is 4. No. Doesn't matter. I mean, 11 plus 5, I can get to 16.","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 10 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(5, 11, 20),
    comment='""10 plus 10 is 20""',
)

# ""11 times 5 is 55""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5=55"",
    resulting_state=(10, 10, 55),
    comment='""11 times 5 is 55""',
)

# ""10 minus 5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 10, 11),
    comment='""10 minus 5 is 5""',
)

# Going back to previous computation ""10 plus 10 is 20. Plus 5 is 25""
curr_state = graph.move_to_node((5, 11, 20))
new_state = graph.explore_operation(
    curr_state,
    operation=""20+5=25"",
    resulting_state=(11, 25),
    comment='""Plus 5 is 25""',
)

# ""5 times 11 is 55. Minus 20 would be 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5*11)-20=35"",
    resulting_state=(35,),
    comment='""5 times 11 is 55. Minus 20 would be 35""',
)

# ""10 times 10 is 100. Divided by 5 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10*10)/5=20"",
    resulting_state=(11, 20),
    comment='""10 times 10 is 100. Divided by 5 is 20""',
)

# ""15 plus 10 would be 25"" - participant likely added 5+10 first
new_state = graph.explore_operation(
    curr_state,
    operation=""(5+10)+10=25"",
    resulting_state=(11, 25),
    comment='""15 plus 10 would be 25""',
)

# ""5 times 10 is 50. Divided by 10 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5*10)/10=5"",
    resulting_state=(5, 11),
    comment='""5 times 10 is 50. Divided by 10 is 5""',
)

# ""Plus 11 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+11=16"",
    resulting_state=(10, 16),
    comment='""Plus 11 is 16""',
)

# ""Plus 10 is 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+10=26"",
    resulting_state=(26,),
    comment='""Plus 10 is 26""',
)

# ""10 plus 10 is 20. Divided by 5 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(10+10)/5=4"",
    resulting_state=(4, 11),
    comment='""10 plus 10 is 20. Divided by 5 is 4""',
)

# ""11 plus 5, I can get to 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(10, 10, 16),
    comment='""11 plus 5, I can get to 16""',
)
```"
4723,"[6,9,9,12]",(6x9),180," Okay, so we have, I'm looking at all the numbers and seeing which one would equal an even number because the target number is 24. So let's see, 108. 12 times 9 is 108. What's 108 divided by 6 would be 14. Let's see. Let's just try it. Okay, so. 81 minus, no, that wouldn't work. Okay, 6. Hmm. Okay, 9 times 12 is 108. Now, 108 divided by 3. No. Nope. That wouldn't work. Divided by 6. 108 divided by 6 is 6. 48 left 16. Plus 9. Hmm. 108. Hmm. This is tricky. Let's delete that. Hmm. 54. 54. Okay, let's see. 81. All right. Let's do 9. No, clear. 54 minus 9. Would be, no, that wouldn't work either. Um, 9 times 12. Okay, let's do 9. 9. Okay, I'm going to do 9 times 9. Oh, okay. Um, delete. Okay. So let's do 9. 9 times 9, and that would equals 81, divided by 6. No, that can't be divided, because it's an even and not. Okay, so that's not going to delete. Okay, 6 times 9. Let's do 6 times 9 is 54. Okay, so that's not going to delete. Okay, so that's not going to delete.","```python
start_state = (6, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 9 is 108""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(6, 9, 108),
    comment='""12 times 9 is 108""',
)

# ""What's 108 divided by 6 would be 14""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108/6=14"",
    resulting_state=(9, 14),
    comment='""What\'s 108 divided by 6 would be 14""',
    result_calc_error=True,
)

# ""81 minus"" suggests they may have computed 9*9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 12, 81),
    comment='""81 minus"" suggests they computed 9*9',
)

# ""9 times 12 is 108"" trying this calculation again
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(6, 9, 108),
    comment='""9 times 12 is 108""',
)

# ""108 divided by 6 is 6. 48 left 16"" seems to be trying to divide 108 by 6
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108/6=18"",
    resulting_state=(9, 18),
    comment='""108 divided by 6""',
)

# ""54"" suggests they computed 6*9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(9, 12, 54),
    comment='""54"" suggests they computed 6*9',
)

# ""54 minus 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""54-9=45"",
    resulting_state=(12, 45),
    comment='""54 minus 9""',
)

# ""9 times 12"" trying this again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*12=108"",
    resulting_state=(6, 9, 108),
    comment='""9 times 12""',
)

# ""9 times 9, and that would equals 81, divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9/6=13.5"",
    resulting_state=(12, 13.5),
    comment='""9 times 9, and that would equals 81, divided by 6""',
)

# ""6 times 9 is 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(9, 12, 54),
    comment='""6 times 9 is 54""',
)

```"
4726,"[8,9,9,12]",(8x9)/(12-9),176," 8 times 9 is 72. 72 divided by 9 is 8. Nope, that's not going to work. How about 9 times 9 is 81, divided by 8. Nope, that's not going to work. 12 times 9 is 108. Let's see, let's try that, just for the heck of it. 12 times 9 is 108. Now, if I divide 108 by 8, that'll get me, nope, that can't work. 108, okay, well, 108 divided by 8. Divided by 8, 108 divided by 8, 28 left. Nope, that's not going to work. Okay, let's divide it by 9. 108 divided by 9, so we have 108 divided by 18, 12. Ugh, 12 and we had to add 8. No, that's not going to work. Divided by 72. Nope. 108 minus 9. Nope, it can't be 108. Okay, we got to try something else. Okay, let's try 8 times 12. Okay, that's going to be 96. Nope, that's not going to work either. Okay, let's do 72. 108 minus 72. Nope, that doesn't work either. How about 106 minus 81. 96 minus 81. Nope, that's not going to work. 108 minus 72. Nope, that's not going to work. So it's got to be a division. So let's do... Aha! Okay, I think I got it. 8 times 9 is 72. Divided by 12 minus 9.","```python
start_state = (8, 9, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 9 is 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(9, 12, 72),
    comment='""8 times 9 is 72""',
)

# ""72 divided by 9 is 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/9=8"",
    resulting_state=(8, 12),
    comment='""72 divided by 9 is 8""',
)

# ""9 times 9 is 81""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(8, 12, 81),
    comment='""9 times 9 is 81""',
)

# ""divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""81/8=10.12"",
    resulting_state=(10.12, 12),
    comment='""divided by 8""',
)

# ""12 times 9 is 108""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*9=108"",
    resulting_state=(8, 9, 108),
    comment='""12 times 9 is 108""',
)

# ""108 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""108/8=13.5"",
    resulting_state=(9, 13.5),
    comment='""108 divided by 8""',
)

# ""8 times 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(9, 9, 96),
    comment='""8 times 12""',
)

# Finally, the participant finds the solution
# ""8 times 9 is 72. Divided by 12 minus 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9/(12-9)=24"",
    resulting_state=(24,),
    comment='""8 times 9 is 72. Divided by 12 minus 9""',
)
```"
4730,"[1,1,5,8]",(5-1-1)x8,164," Okay, 8 times 5 is 40. Nope, that wouldn't work. 1 times 8 is 8, plus 1 times 5, 8 times 5 is 40, plus 5 minus 1 is 4. Nope, that wouldn't work. Let's do 8 times 1, 8 plus, no, 8 times 1, no, that's not going to work. It's got to be 8 times 4, I think. Let's see. I mean 5. 8 times 5, 40. Minus 1 would be 39. Nope, that wouldn't work either. Divided by 1 plus 1, 40. Nope, that's not going to work either. So wait. 13, 14 times, okay, 8 minus 5 is 3. Nope, 7. 8 minus 1 is 7, times 5 is 35. Nope. 1 times 1 is 1, plus 5, 6, times 8 is 48. That's not going to work either. Okay, 8 over 5. Huh. 8 plus 9. 9. 8 plus 1 is 9, times 5 is 45. No, that's still not going to work. Huh. Okay. 2, okay, let's see. Can we do minus? Okay, 40. Nope. 13, nope. Nope. 9. 9. Okay, so 24 is 3 times 8. So we need to get a 3 over here. Okay, so 5, how about this? 5 minus 1 minus 1 times 8. . .","```python
start_state = (1, 1, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(1, 1, 40),
    comment='""8 times 5 is 40""',
)

# ""1 times 8 is 8, plus 1 times 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*8+1*5=13"",
    resulting_state=(13,),
    comment='""1 times 8 is 8, plus 1 times 5""',
)

curr_state = graph.move_to_node(start_state)
# ""8 times 5 is 40, plus 5 minus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(1, 1, 40),
    comment='""8 times 5 is 40, plus 5 minus 1 is 4""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-1=39"",
    resulting_state=(1, 39),
    comment='""Minus 1 would be 39""',
)

curr_state = graph.move_to_node(start_state)
# ""8 minus 5 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(1, 1, 3),
    comment='""8 minus 5 is 3""',
)

curr_state = graph.move_to_node(start_state)
# ""8 minus 1 is 7, times 5 is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8-1)*5=35"",
    resulting_state=(1, 35),
    comment='""8 minus 1 is 7, times 5 is 35""',
)

curr_state = graph.move_to_node(start_state)
# ""1 times 1 is 1, plus 5, 6, times 8 is 48""
new_state = graph.explore_operation(
    curr_state,
    operation=""(1*1+5)*8=48"",
    resulting_state=(48,),
    comment='""1 times 1 is 1, plus 5, 6, times 8 is 48""',
)

curr_state = graph.move_to_node(start_state)
# ""8 plus 1 is 9, times 5 is 45""
new_state = graph.explore_operation(
    curr_state,
    operation=""(8+1)*5=45"",
    resulting_state=(1, 45),
    comment='""8 plus 1 is 9, times 5 is 45""',
)

# ""24 is 3 times 8. So we need to get a 3 over here"" - participant sets a subgoal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 is 3 times 8. So we need to get a 3 over here""',
)

# ""5 minus 1 minus 1 times 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""(5-1-1)*8=24"",
    resulting_state=(24,),
    comment='""5 minus 1 minus 1 times 8""',
)
```"
4731,"[4,7,8,13]",8x4-13+7,180," Okay, 24. So, let's see. That's 21. 56, 20, that's 11. Okay, somehow we have to have 4 at the end. So, 4, 5, 12, 13, 14, 15, 16. No, that's not going to work. 13 times 4 is 42. And then 42 minus 8. No, that's not going to work. 42 minus 8 would be 36 minus 7. No, that wouldn't work. Okay, 11. So, we've got to get rid of this 8. Because 11 plus 3 equals 24. Okay, 8. Let's see. 11 and 13. Wow. Okay, so how can I get 11? So, let's do 13 minus 8 times 7. No, 13. 1. Oh, that won't work either. 1 plus 5. Nope, that's not going to work. Minus 7 times 4. 13 minus 7 times 4 is 11. So, that would be 2 times 8 would be... Ah, doggone it. Okay, let's do 8. 8. Oops, I'm going to delete. 8 minus 7 is 1. Plus 13 would be 14. No, that's not going to work. Nope, don't go. Okay, let's try this one. Delete. 4. No, no, no. Delete. 4 times 13. That's 52. Minus. No, that's not going to work. No, that's still not going to work. Okay. 8 times 4 is 32. Minus 5 times 7. 8 times 4 is 32. Minus 13. Minus 13. Minus 13. Plus 7. Okay. 32 minus...","```python
start_state = (4, 7, 8, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""That's 21"" - participant may be adding numbers but it's not clear which ones

# ""13 times 4 is 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*4=42"",
    resulting_state=(7, 8, 42),
    result_calc_error=True,  # 13*4=52, not 42
    comment='""13 times 4 is 42"" - calculation error',
)

# ""42 minus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-8=34"",
    resulting_state=(7, 34),
    comment='""42 minus 8""',
)

# ""minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""34-7=27"",
    resulting_state=(27,),
    comment='""minus 7""',
)

# ""13 minus 8 times 7""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(13-8)*7=35"",
    resulting_state=(4, 35),
    comment='""13 minus 8 times 7""',
)

# ""8 minus 7 is 1. Plus 13 would be 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7+13=14"",
    resulting_state=(4, 14),
    comment='""8 minus 7 is 1. Plus 13 would be 14""',
)

# ""4 times 13. That's 52""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*13=52"",
    resulting_state=(7, 8, 52),
    comment='""4 times 13. That\'s 52""',
)

# ""8 times 4 is 32""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4=32"",
    resulting_state=(7, 13, 32),
    comment='""8 times 4 is 32""',
)

# ""Minus 13. Plus 7"" - participant continues from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-13+7=26"",
    resulting_state=(26,),
    comment='""Minus 13. Plus 7""',
)

```"
4739,"[6,8,11,12]",,194," 7 plus 8. We're going to have to do some subtraction, huh? 11 minus 6 is 5. 5 plus 8 is 13 plus 12. No. 12. I have to use division, maybe? 12. I have to use division, maybe? Mmm… I gotta admit, I keep thinking towards multiplication and addition, and using subtraction and division is not coming very naturally. 6 to… 8 divided by 6… 8 divided by 6… Oh, six. It's divided by one and a It's eight divided by six. Eight divided by six. No, that's not going to work. Hmm. Let me see. It's all divided by six. Six. Two. Let's see this.","```python
start_state = (6, 8, 11, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 8"" - not clear where 7 comes from, might be a transcription error

# ""11 minus 6 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=5"",
    resulting_state=(5, 8, 12),
    comment='""11 minus 6 is 5""',
)

# ""5 plus 8 is 13""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(12, 13),
    comment='""5 plus 8 is 13""',
)

# The participant mentions division but doesn't clearly state any operations

# ""8 divided by 6""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/6=1.33"",
    resulting_state=(1.33, 11, 12),
    comment='""8 divided by 6""',
)

# The rest of the transcript doesn't contain clear operations being tried
```"
4740,"[5,10,10,11]",,180," 10-5 is 5. That's still 26. 5, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 62, 63, 62, 63, 62, 63, 62, 63, 62, 63, 64, 65, 67, 68, 62, 63, 65, 67, 68, 68, 68, 69, 69, 70, 71, 72, 73, 71, 72, 73, 73, 74, 74, 74, 75, 76, 77, 78, 80, 91, 92, 93, 92, 93, 94, 93, 99, 1, 2, 3, 4, 73, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 11 is one, 10 minus 50. No. 100 minus 55, no. 11 divided by 10 would be 1.1. 10. Yeah, I can only get 26 or something like 22. I can't quite do this. 5. 10. 5. Minus. 21. No, it's not going to work.","```python
start_state = (5, 10, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10-5 is 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 10, 11),
    comment='""10-5 is 5""',
)

# ""That's still 26"" suggests they did some operation that resulted in 26
new_state = graph.explore_operation(
    curr_state,
    operation=""11+10+5=26"",
    resulting_state=(10, 26),
    comment='""That\'s still 26""',
)

# Then there's a long sequence of counting numbers that doesn't seem to represent operations

# ""11 divided by 10 would be 1.1""
new_state = graph.explore_operation(
    curr_state,
    operation=""11/10=1.1"",
    resulting_state=(1.1, 5, 10),
    comment='""11 divided by 10 would be 1.1""',
)

# ""Yeah, I can only get 26 or something like 22"" suggests they tried another combination
new_state = graph.explore_operation(
    curr_state,
    operation=""11+10+1=22"",
    resulting_state=(5, 10, 22),
    comment='""Yeah, I can only get 26 or something like 22""',
)

# ""21. No, it's not going to work."" suggests one final attempt
new_state = graph.explore_operation(
    curr_state,
    operation=""10+11=21"",
    resulting_state=(5, 10, 21),
    comment='""21. No, it\'s not going to work.""',
)
```"
4741,"[3,9,10,12]",9,180," Oh, you guys. It's like if you didn't have the extra number here I could do this. Really? 3 times 9 is 36. Minus 12 is 24, but then we have 10. That's not going to work. 3 times 12, that's also 36. Minus 9. 9 is also 12. 34, right? Oh, wait. Well, then there's a 9. 3. Hmm. 12 divided by 3. 12 divided by 3. I feel like this is nonsensical, okay? How can we eliminate one of you? I can only get 36. I get 24 if I don't have extra ones, but I can't... Oh, I'm about to run out of time. I'm about to run out of time.","```python
start_state = (3, 9, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 9 is 36. Minus 12 is 24, but then we have 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*9=36"",
    resulting_state=(10, 12, 36),
    comment='""3 times 9 is 36""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-12=24"",
    resulting_state=(10, 24),
    comment='""Minus 12 is 24, but then we have 10""',
)

# ""3 times 12, that's also 36""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*12=36"",
    resulting_state=(9, 10, 36),
    comment='""3 times 12, that\'s also 36""',
)

# ""Minus 9"" participant subtracts 9 from 36
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36-9=27"",
    resulting_state=(10, 27),
    comment='""Minus 9""',
)

# ""12 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/3=4"",
    resulting_state=(4, 9, 10),
    comment='""12 divided by 3""',
)

# The rest is the participant expressing frustration and noting they're running out of time
```"
4744,"[5,5,8,10]",(10-5),180," 5, 5 plus 5, 5, 5, 25, 25, 25, 25, 25, 25, 25, 25, 18, 5, 3, 15, 18 plus 18, so... 10 minus 5, we go to 5, 5, 10 minus 8, we go to 5, 5, 25, 10 minus 8, we go to 2, 5, 2, 10. 5 plus 8 is equal to 13, 13 plus 10, 23, 23. 5, 10 divided by, so 10 over 5 is equal to 2. So, 2 times 10. 8, 2 is 16, 2 times 5, no, wow, 5 divided by, 10, 5 divided by 10, wait, 10 divided by 5 is equal to 16. 2, 5, 5, 25, 5, 8, no, wow, I'm stuck. Oh, 8 times minus 5. Will be 5. 5 minus 6, 2 is 4.","```python
start_state = (5, 5, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+5=10"",
    resulting_state=(8, 10, 10),
    comment='""5 plus 5""',
)

# ""25"" seems to be multiplying 5*5
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(8, 10, 25),
    comment='""25"" seems to be multiplying 5*5',
)

# ""10 minus 5, we go to 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(5, 5, 8),
    comment='""10 minus 5, we go to 5""',
)

# ""10 minus 8, we go to 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(2, 5, 5),
    comment='""10 minus 8, we go to 2""',
)

# ""5 plus 8 is equal to 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""5+8=13"",
    resulting_state=(5, 10, 13),
    comment='""5 plus 8 is equal to 13""',
)

# ""13 plus 10, 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(5, 23),
    comment='""13 plus 10, 23""',
)

# ""10 over 5 is equal to 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 8),
    comment='""10 over 5 is equal to 2""',
)

# ""2 times 10. 8, 2 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*8=16"",
    resulting_state=(5, 16),
    comment='""2 times 10. 8, 2 is 16""',
)

# ""10 divided by 5 is equal to 16"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=16"",
    resulting_state=(5, 8, 16),
    comment='""10 divided by 5 is equal to 16"" seems to be a calculation error',
    result_calc_error=True,
)

# ""8 times 5. Will be 5"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=5"",
    resulting_state=(5, 10, 5),
    comment='""8 times 5. Will be 5""',
    result_calc_error=True,
)

# ""5 minus 5, 2 is 4"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-5=4"",
    resulting_state=(4, 8, 10),
    comment='""5 minus 5, 2 is 4""',
    result_calc_error=True,
)
```"
4746,"[3,5,7,11]",,180," Let's go there. 5, 3, 15, 15, plus… 5, 3. 15. That's so amazing. That's so amazing. Wow. That's so amazing. I can't even think right now. I'm trying my impossible best to make everything good… bad. Oh my god. That's amazing. That's amazing. That's amazing. 11 minus 5. 6 plus 3. 7 minus 5 is… 6. 6. 6. Nice. Nice. Wow. wow wow This is so difficult like that, I can't even think right now to be honest with you That's been sick right now To be honest with you You can think right now I'm trying my impossible best but then","```python
start_state = (3, 5, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""5, 3, 15"" suggests the participant is multiplying 5 and 3
new_state = graph.explore_operation(
    curr_state,
    operation=""5*3=15"",
    resulting_state=(7, 11, 15),
    comment='""5, 3, 15"" suggests multiplying 5 and 3',
)

# ""11 minus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-5=6"",
    resulting_state=(3, 6, 7),
    comment='""11 minus 5""',
)

# ""6 plus 3""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6+3=9"",
    resulting_state=(7, 9),
    comment='""6 plus 3""',
)

# ""7 minus 5 is... 6"" - participant makes calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=6"",
    resulting_state=(3, 6, 11),
    comment='""7 minus 5 is... 6"" - participant makes calculation error',
    result_calc_error=True,
)

# The rest of the transcript appears to be the participant expressing difficulty with the task rather than performing calculations

```"
4758,"[6,9,9,11]",,180," you can uh this is in the first year the zed into 24 say yeah closer at a nine nine divided by nine one plus plus six times two twelve six times two so it's 12 plus one six times two total at one plus 12 in 24. nine nine divided by nine in effect one one and then six times six times six times two nine and then it's still going back to 24. but one exactly to the summer nine divided by nine once 11 plus six nine nine nine 11 nine 11 11 11 11 11 11 11 11 I will divide 9, 8, we can divide even 17. Now how do I get to 21? I don't know. 18 plus 1. 1 plus 17. You are wrong. This is 17.","```python
start_state = (6, 9, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""nine nine divided by nine one""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 6, 11),
    comment='""nine nine divided by nine one""',
)

# ""six times two twelve"" - participant seems to be setting a subgoal
graph.set_subgoal(
    subgoal_state=(6, 2),
    comment='""six times two twelve""'
)

# ""nine nine divided by nine"" participant tries this operation again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9/9=1"",
    resulting_state=(1, 6, 11),
    comment='""nine nine divided by nine""',
)

# ""11 plus 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6=17"",
    resulting_state=(1, 17),
    comment='""11 plus 6""',
)

# The rest of the transcript seems to be the participant repeating numbers or making observations without clear operations
```"
4760,"[2,2,10,11]",,180," 15 plus 10, 1, 25, 10, 11, 10 minus 2, 8, 10 minus 2, 8, 2 plus 2, 2 plus 2, 4, 14, 14 plus 11, 25. 11 minus 2 is 9, right? 9 plus 10 is 12. 12 times 2 is 24. How do you solve the 11 problem? 11 minus 10 is 1. 11 minus 2 is 9. 9 minus 2 is 7. 10 divided by 2 is 5. 5 plus 11 is 16. 10 divided by 2 is 5. 5 minus 2 is 5. 5 minus 11 is 6. We have a mind, but this is okay. 5 minus 11 is 6. 5 minus 14 is 16. 5 minus 12 is 6. 4 plus 7 is 4. 4 plus 6 is 5. 4 plus 6 is 5. that's in a 10 10 10 10 okay 10 times 20 20. setting your calculator 33 minus 20 22 minus 20 yeah yeah yeah yeah oh nice you mean roughly 11 plus 2 13 11 plus 2 and 13","```python
start_state = (2, 2, 10, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""15 plus 10, 1, 25"" is unclear what operation is being performed

# ""10 minus 2, 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-2=8"",
    resulting_state=(2, 8, 11),
    comment='""10 minus 2, 8""',
)

# ""2 plus 2, 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(4, 10, 11),
    comment='""2 plus 2, 4""',
)

# ""14 plus 11, 25"" seems to be using 14 which wasn't computed yet, may be a transcription error

# ""11 minus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 9, 10),
    comment='""11 minus 2 is 9""',
)

# ""9 plus 10 is 12"" contains a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+10=12"",
    resulting_state=(2, 12),
    comment='""9 plus 10 is 12"" contains a calculation error',
    result_calc_error=True,
)

# ""12 times 2 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*2=24"",
    resulting_state=(24,),
    comment='""12 times 2 is 24""',
)

# ""11 minus 10 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-10=1"",
    resulting_state=(1, 2, 2),
    comment='""11 minus 10 is 1""',
)

# ""11 minus 2 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-2=9"",
    resulting_state=(2, 9, 10),
    comment='""11 minus 2 is 9""',
)

# ""9 minus 2 is 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9-2=7"",
    resulting_state=(7, 10),
    comment='""9 minus 2 is 7""',
)

# ""10 divided by 2 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 11),
    comment='""10 divided by 2 is 5""',
)

# ""5 plus 11 is 16""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5+11=16"",
    resulting_state=(2, 16),
    comment='""5 plus 11 is 16""',
)

# ""5 minus 2 is 5"" contains a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5-2=5"",
    resulting_state=(5, 11),
    comment='""5 minus 2 is 5"" contains a calculation error',
    result_calc_error=True,
)

# ""5 minus 11 is 6"" contains a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""5-11=6"",
    resulting_state=(2, 6),
    comment='""5 minus 11 is 6"" contains a calculation error',
    result_calc_error=True,
)

# ""10 times 20 20"" seems to be a transcription error as 20 isn't available

# ""11 plus 2 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+2=13"",
    resulting_state=(2, 10, 13),
    comment='""11 plus 2 13""',
)
```"
4764,"[1,8,9,12]",(12-9)x8x1,161," I'm not ready for this. Oh, 1, 8, 9, and 12, and I got to get to 24. Alright, so, holy. Let's see. 12 plus 8 is 29. Okay. 1 plus 9 is 10. Nope. 22. 8. Oh, let's see. Oh, 8 plus 1 is 9, 9, 18. Nope. Alright. Oh, 12 minus 8 is what? 4. 14. Nope. 9. No. 12 minus 9 is 3. Oh. 12 minus 9 is 3. 3 times 8 is 24, times 1 is 24, that gets me to 24, let's see, 12, 12, minus 9 is, 12 9 is 3, times 8, okay, now how do I do this one? Okay, bracket, 12, minus 9, I'm going to learn a lot about math, I haven't done this in 30 years. Ah, 12. 12 minus 9 is 3 times 8, or I could say 12 minus 9 is 3 times 8 times 1, is that right? Can I do that?","```python
start_state = (1, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 8 is 29"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=29"",
    resulting_state=(1, 9, 29),
    comment='""12 plus 8 is 29"" - calculation error',
    result_calc_error=True,
)

# ""1 plus 9 is 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+9=10"",
    resulting_state=(8, 10, 12),
    comment='""1 plus 9 is 10""',
)

# ""8 plus 1 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+1=9"",
    resulting_state=(9, 9, 12),
    comment='""8 plus 1 is 9""',
)

# ""12 minus 8 is what? 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 9),
    comment='""12 minus 8 is what? 4""',
)

# ""12 minus 9 is 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-9=3"",
    resulting_state=(1, 3, 8),
    comment='""12 minus 9 is 3""',
)

# ""3 times 8 is 24, times 1 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*8*1=24"",
    resulting_state=(24,),
    comment='""3 times 8 is 24, times 1 is 24""',
)

```"
4766,"[4,8,8,11]",,180," 4, 8, 8, and 11. Oh, because those were practice ones, and I don't get it. I'm going to do the same one. Damn it. Okay. I'm going to do this one, kind of similar. 4 goes into 8 two times. 16. No. Let's see. 8 plus 11 is 19. 8 plus 8 is 16. 8 plus 8 is 12. Let's see. 11 times 4 is 44. 8 minus 8. No. That's terrible. This is awful. Let's see. 11 plus 4 is 15. 15 minus 8 is 6. No. 7. I don't even know what I was doing. 8 minus 4 is 4. 4 times 8. 32. 32 minus 11 is not. 24. 11 plus 11 is 15. 8. I don't know. 44. 4 goes into 8. 2 times. 2 times 11 is 22. 8, 9, 10, 11, 12. 12 plus 8 is 12. No. 8 times 8 is what? 64. 64. I don't know how to do this.","```python
start_state = (4, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 goes into 8 two times. 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4*8=16"",
    resulting_state=(11, 16),
    comment='""4 goes into 8 two times. 16""',
)

# ""8 plus 11 is 19""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+11=19"",
    resulting_state=(4, 8, 19),
    comment='""8 plus 11 is 19""',
)

# ""8 plus 8 is 16""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(4, 11, 16),
    comment='""8 plus 8 is 16""',
)

# ""8 plus 8 is 12"" seems to be a calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=12"",
    resulting_state=(4, 11, 12),
    comment='""8 plus 8 is 12"" seems to be a calculation error',
    result_calc_error=True,
)

# ""11 times 4 is 44""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=44"",
    resulting_state=(8, 8, 44),
    comment='""11 times 4 is 44""',
)

# ""8 minus 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-8=0"",
    resulting_state=(0, 4, 11),
    comment='""8 minus 8""',
)

# ""11 plus 4 is 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+4=15"",
    resulting_state=(8, 8, 15),
    comment='""11 plus 4 is 15""',
)

# ""15 minus 8 is 6. No. 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15-8=7"",
    resulting_state=(7, 8),
    comment='""15 minus 8 is 6. No. 7""',
)

# ""8 minus 4 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-4=4"",
    resulting_state=(4, 8, 11),
    comment='""8 minus 4 is 4""',
)

# ""4 times 8. 32""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(11, 32),
    comment='""4 times 8. 32""',
)

# ""32 minus 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""32-11=21"",
    resulting_state=(21,),
    comment='""32 minus 11""',
)

# ""4 goes into 8. 2 times. 2 times 11 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(8/4)*11=22"",
    resulting_state=(8, 22),
    comment='""4 goes into 8. 2 times. 2 times 11 is 22""',
)

# ""8 times 8 is what? 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(4, 11, 64),
    comment='""8 times 8 is what? 64""',
)
```"
4768,"[4,4,5,10]",(10-5)x4+4,101," 4, 4, 5, and 10. Okay. 4 times 4 is 16. No. 5 times 4 is 20. Plus 4 is 24. And what do I do with the 10? Work. Okay. Let's see. 4 times 4 is 20. Plus 10 is 30. No. 4 times 4 is 16. Plus 5 is 21. No. Okay. So 4 plus 4 is 8. Okay. So 4 plus 4 is 8. Plus 10 is 18. It's 23. 4 plus 10 is 14. No. Okay. Oh! 10 minus 5 is 5. Oh! 10 minus 5 is 5. Okay. 10 minus 5 is 5 times 4 plus 4.","```python
start_state = (4, 4, 5, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(5, 10, 16),
    comment='""4 times 4 is 16""',
)

# ""5 times 4 is 20. Plus 4 is 24""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4+4=24"",
    resulting_state=(10, 24),
    comment='""5 times 4 is 20. Plus 4 is 24""',
)

# ""4 times 4 is 20"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=20"",
    resulting_state=(5, 10, 20),
    comment='""4 times 4 is 20"" - calculation error',
    result_calc_error=True,
)

# ""Plus 10 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+10=30"",
    resulting_state=(5, 30),
    comment='""Plus 10 is 30""',
)

# ""4 times 4 is 16. Plus 5 is 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4+5=21"",
    resulting_state=(10, 21),
    comment='""4 times 4 is 16. Plus 5 is 21""',
)

# ""4 plus 4 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4=8"",
    resulting_state=(5, 8, 10),
    comment='""4 plus 4 is 8""',
)

# ""Plus 10 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+10=18"",
    resulting_state=(5, 18),
    comment='""Plus 10 is 18""',
)

# ""4 plus 10 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4+10=14"",
    resulting_state=(4, 5, 14),
    comment='""4 plus 10 is 14""',
)

# ""10 minus 5 is 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-5=5"",
    resulting_state=(4, 4, 5),
    comment='""10 minus 5 is 5""',
)

# ""10 minus 5 is 5 times 4 plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4+4=24"",
    resulting_state=(24,),
    comment='""10 minus 5 is 5 times 4 plus 4""',
)
```"
4771,"[7,8,8,11]",(11-7)x8-8,143," 7, 8, 8, and 11. Mmm. Let's see. 11. 11 minus 8 is what? 3? 3 times. 8 is 24. 7. Okay. Or we can say, 11 times 8 is 88. 8 goes into 88, 11 times. So we're back with 11 plus 7 is only 18. Let's see. 8 minus 7 is 1. 1. 1. 1 minus 11 is 12. That's going to be 20. Okay. Wait. 7. 11 minus 7 is what? 4? 8 times. No. 8. Oh, wait, I can go 11, minus 7, what did I say that was? 4 times 8, minus 8.","```python
start_state = (7, 8, 8, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus 8 is what? 3? 3 times. 8 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(11-8)*8=24"",
    resulting_state=(7, 8, 24),
    comment='""11 minus 8 is what? 3? 3 times. 8 is 24""',
)

# ""11 times 8 is 88""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*8=88"",
    resulting_state=(7, 8, 88),
    comment='""11 times 8 is 88""',
)

# ""8 goes into 88, 11 times"" - participant dividing 88 by 8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""88/8=11"",
    resulting_state=(7, 11),
    comment='""8 goes into 88, 11 times""',
)

# ""11 plus 7 is only 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11+7=18"",
    resulting_state=(8, 8, 18),
    comment='""11 plus 7 is only 18""',
)

# ""8 minus 7 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-7=1"",
    resulting_state=(1, 8, 11),
    comment='""8 minus 7 is 1""',
)

# ""1 minus 11 is 12"" seems to be a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1-11=12"",
    resulting_state=(8, 12),
    comment='""1 minus 11 is 12"" seems to be a calculation error',
    result_calc_error=True,
)

# ""11 minus 7 is what? 4?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(4, 8, 8),
    comment='""11 minus 7 is what? 4?""',
)

# ""4 times 8, minus 8"" - participant found the solution
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8-8=24"",
    resulting_state=(24,),
    comment='""4 times 8, minus 8""',
)
```"
4773,"[3,3,9,11]",,180," 3, 3, 9, and 11. Let's see. 3 times 3, 9. 9 plus 9 is 18. No. Okay. 11 minus 9 is 2. I don't know what 2 times 3 is. 6 times, wait. No, 6 times 3 is 18. Okay. 9 times 3 is 27. Minus 3 is 24. And we have 11. Okay. So. 11 minus 3 is 8. 8 times 3 is 9. 9 minus 3 is 6. 6 times 3 is 18. No. Okay. Let's see. 3 times 11 is 33. Minus 3 is 30. Minus 9. 9. 9. Plus 3. Minus 3 is 12. 12. Oh. Wait. No. Damn it. 9 plus 3 is 12. 12 plus 3 is 15. No. No. 9 plus 3 is 12. 12 times 3 is... 12, 24, 36 minus 11 is... 25. No. Okay. Let's see. 9 plus 11. That ain't gonna work. 20... 20. 23 minus 3 is 20. Uh... . .","```python
start_state = (3, 3, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 3, 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(9, 9, 11),
    comment='""3 times 3, 9""',
)

# ""9 plus 9 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(11, 18),
    comment='""9 plus 9 is 18""',
)

# ""11 minus 9 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-9=2"",
    resulting_state=(2, 3, 3),
    comment='""11 minus 9 is 2""',
)

# ""2 times 3 is 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(3, 6),
    comment='""2 times 3 is 6""',
)

# ""6 times 3 is 18""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(18,),
    comment='""6 times 3 is 18""',
)

# ""9 times 3 is 27""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 11, 27),
    comment='""9 times 3 is 27""',
)

# ""Minus 3 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""27-3=24"",
    resulting_state=(11, 24),
    comment='""Minus 3 is 24""',
)

# ""11 minus 3 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(3, 8, 9),
    comment='""11 minus 3 is 8""',
)

# ""8 times 3 is 9"" (calculation error)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*3=9"",
    resulting_state=(9, 9),
    comment='""8 times 3 is 9"" (calculation error)',
    result_calc_error=True,
)

# ""3 times 11 is 33""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11=33"",
    resulting_state=(3, 9, 33),
    comment='""3 times 11 is 33""',
)

# ""Minus 3 is 30""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""33-3=30"",
    resulting_state=(9, 30),
    comment='""Minus 3 is 30""',
)

# ""9 plus 3 is 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+3=12"",
    resulting_state=(3, 11, 12),
    comment='""9 plus 3 is 12""',
)

# ""12 plus 3 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+3=15"",
    resulting_state=(11, 15),
    comment='""12 plus 3 is 15""',
)

# ""9 plus 11"" 
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9+11=20"",
    resulting_state=(3, 3, 20),
    comment='""9 plus 11""',
)
```"
4780,"[8,9,12,12]",,180," Alright, 12 plus 12, 24. 8 times 9, oh god, what's 8 times 9? 72. Alright. What's 72 divided by 12? 6? Ugh, that would be good if I could do it like times. Ugh. So 72, maybe if I did 8 times 12. 8 times 12 is 96. And then divided by 9, can that be divided by 9? No, I can't. 8 plus 12, okay. 8 times 12 divided by 8, no, divided by 12, sorry. 8 times 12 divided by 12 is 8. Okay. Um, plus 9, no. That's not gonna be, oh my god, I don't know. When it gets to numbers over the single digit ones, I really struggle. I don't know why. Okay, 12 minus 12. 8 times 12, right? Okay, that's 20. That's great. Oh, 8 plus 12. 12 plus 12 minus 9. What? Oh my god, that's 23. Oh my god. Oh, I was so close. Darn it. Okay, 21 for these two. 21 plus 8 is 29 minus 12. No, that's not gonna do. Um, 21 times 8 divided by 12 is 14. That's not gonna do either. Darn it, I don't know. I really thought I was onto something with that. Oh no. Uh, I think I'm just gonna have to let the time run out on this one. I just don't know. When it comes to the double digit numbers, I just don't. My brain cannot compute. I don't know why it's just so much harder for me to envision. I don't know why it's just so much harder for me to envision.","```python
start_state = (8, 9, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12, 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(8, 9, 24),
    comment='""12 plus 12, 24""',
)

# ""8 times 9... 72""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*9=72"",
    resulting_state=(12, 12, 72),
    comment='""8 times 9... 72""',
)

# ""What's 72 divided by 12? 6?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""72/12=6"",
    resulting_state=(6, 12),
    comment='""What\'s 72 divided by 12? 6?""',
)

# ""8 times 12 is 96""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(9, 12, 96),
    comment='""8 times 12 is 96""',
)

# ""And then divided by 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/9=10.67"",
    resulting_state=(12, 10.67),
    comment='""And then divided by 9""',
)

# ""8 times 12 divided by 12 is 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12/12=8"",
    resulting_state=(8, 9),
    comment='""8 times 12 divided by 12 is 8""',
)

# ""12 minus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-12=0"",
    resulting_state=(0, 8, 9),
    comment='""12 minus 12""',
)

# ""8 plus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(9, 12, 20),
    comment='""8 plus 12""',
)

# ""12 plus 12 minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12-9=15"",
    resulting_state=(8, 15),
    comment='""12 plus 12 minus 9""',
)

# ""21 for these two"" - participant may be adding 12+9
new_state = graph.explore_operation(
    curr_state,
    operation=""12+9=21"",
    resulting_state=(8, 12, 21),
    comment='""21 for these two"" - participant may be adding 12+9',
)

# ""21 plus 8 is 29""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""21+8=29"",
    resulting_state=(12, 29),
    comment='""21 plus 8 is 29""',
)

```"
4781,"[1,11,13,13]",,180," Okay, back at it again with more large numbers. Alright, so obviously we can get 24 from 13 plus 11. So, alright, 13 plus 13 is 26. Hmm. It's just hard because it's like, okay, maybe I can have 11 by itself. So, 11 plus 13 is 21. No. Just, I really struggle with imagining these numbers. Because, when it's with the single digit ones, it's just, my brain just computes so much better. Um, 13 times 11, oh god. Hmm, okay, 143. So, 143 divided by 13 again is 11. No, that won't do, I just don't get it. Okay, 12. If I do 11 minus 1, I could do 10 plus 13. No, I can't do that. Um, 13 minus 11 is 2. Hmm, nope. 13, alright, 12 plus, no, I just, I don't. I don't get it. I don't understand. I think it might have to be division. But I don't, I don't get it. Um, hmm. I wish I could add all of these numbers up. And then divide them. I mean, not divide them, but subtract 13 if I did. I, I wish I could do 11 plus 13, which would be 24 plus 1. And then do another minus 1, but I can't. Hmm. 10 times 13, uh, divided by 13. Yeah. I don't know. I, honestly, some of these, I just have to let the timer run out. Because I genuinely don't know. If I can't get a sense of the number within, like, if I can't get a sense of the correct answer within the first, like, honestly, the first few.","```python
start_state = (1, 11, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""we can get 24 from 13 plus 11"" - participant notices this but realizes they still need to use the other numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""13+11=24"",
    resulting_state=(1, 13, 24),
    comment='""we can get 24 from 13 plus 11""',
)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(1, 11, 26),
    comment='""13 plus 13 is 26""',
)

# ""11 plus 13 is 21""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+13=21"",
    resulting_state=(1, 13, 21),
    comment='""11 plus 13 is 21""',
    result_calc_error=True,
)

# ""13 times 11... 143""
new_state = graph.explore_operation(
    curr_state,
    operation=""13*11=143"",
    resulting_state=(1, 13, 143),
    comment='""13 times 11... 143""',
)

# ""143 divided by 13 again is 11""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""143/13=11"",
    resulting_state=(1, 11),
    comment='""143 divided by 13 again is 11""',
)

# ""11 minus 1, I could do 10""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-1=10"",
    resulting_state=(10, 13, 13),
    comment='""11 minus 1, I could do 10""',
)

# ""13 minus 11 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13-11=2"",
    resulting_state=(1, 2, 13),
    comment='""13 minus 11 is 2""',
)

```"
4787,"[3,4,8,10]",,180," So 8 divided by 4 is 2.5. 2.5 and 4 is 8, 4, 2, 5, 2 and 5 and 10, or just 1 and 5. 5 times 3, 7, 5, yeah, it won't work. 10, 8 again, 1.25 times 4, 5, yeah, that's 15. 10, 5 by 3, that's 3.33 now. Yay. I think we have hands on some. Huh? I think we are getting some hands. Yeah. I think we are getting some hands. I don't know, let's see. Let's run through this. This will be too... The vision is going to have to be... This is so annoying, man. Because I actually got to sit down and fucking... I don't know what I've been thinking. Thank you for playing with the wall, Junior. I guess... I don't know, division. This is going to have to be division. The one that just stands out, but it might be, is 3, 3, 3. 4 would be 13. 9, 5, 3. And then... 10 by 3. What about 10 to 8? Yeah, that's 26. So I'll grab this one, you know. Yeah, which is... 3 is that... Oh, wait. Hold on, hold on. 10 by 3... 9... what um","```python
start_state = (3, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 4 is 2.5""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/4=2"",
    resulting_state=(2, 3, 10),
    comment='""8 divided by 4 is 2.5""',
)

curr_state = graph.move_to_node(start_state)
# ""10, 8 again, 1.25"" seems to be dividing 10 by 8
new_state = graph.explore_operation(
    curr_state,
    operation=""10/8=1.25"",
    resulting_state=(1.25, 3, 4),
    comment='""10, 8 again, 1.25""',
)

# ""times 4, 5, yeah, that's 15"" seems to multiply the 1.25 by 4
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1.25*4=5"",
    resulting_state=(3, 5),
    comment='""times 4, 5""',
)

curr_state = graph.move_to_node(start_state)
# ""10, 5 by 3, that's 3.33""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/3=3.33"",
    resulting_state=(3.33, 4, 8),
    comment='""10, 5 by 3, that\'s 3.33""',
)

curr_state = graph.move_to_node(start_state)
# ""10 to 8? Yeah, that's 26"" seems to be adding 10+8+4+3
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8+4+3=26"",
    resulting_state=(26,),
    comment='""10 to 8? Yeah, that\'s 26"" seems to be adding all numbers',
    result_calc_error=True,
)
```"
4788,"[1,8,9,12]",,180," I don't know, 12, 9. This is 1.33. Times 8? 10? No. I don't know. I don't know, dude. Let's see. I don't know. I don't know. It's 9, 1, 12. Let's see. 9, 1, 8. 9, 1, 16? Oh, no. What if I do... Let's see. Start away by 9. What was it? Any even? 12, 8? 1.5. Uh... Got a 1.5. Oh... That is 8. Times 9? Nah. Mmm... Oh, no, because I still have the 1. I can subtract. Oops. 1.5 is going to be... Yeah, I don't know. Oh, 1.5. Oh, nice. Yeah. I mean, I'm watching that. I mean, it's... In media categories. This... I don't know. This would be 8. Mm-hmm. Yeah, I don't know. These are all going to have to run at a time, because... It's funny, because it started off with basic, like, oh, let's add this, add this, subtract this. Mm-hmm. And then it's just like, all right, now using these four numbers... Mm-hmm. Get this. I'm just like, okay, so it's going to have to be, like, decimal division and all that. I'll just go on to the next one.","```python
start_state = (1, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12, 9. This is 1.33""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1, 1.33, 8),
    comment='""12, 9. This is 1.33""',
)

# ""Times 8?"" participant seems to be trying to multiply 1.33 by 8
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1.33*8=10.64"",
    resulting_state=(1, 10.64),
    comment='""Times 8?""',
)

# ""12, 8? 1.5"" participant seems to be dividing 12 by 8
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8=1.5"",
    resulting_state=(1, 1.5, 9),
    comment='""12, 8? 1.5""',
)

# ""Times 9?"" participant considers multiplying something (probably 1.5) by 9
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1.5*9=13.5"",
    resulting_state=(1, 13.5),
    comment='""Times 9?""',
)

# The rest of the transcript contains discussion about the difficulty of the problem but no clear operations

```"
4789,"[3,3,9,9]",(9+9)+(3+3),176," So, 9 doesn't run at 24. 3 does. It's gonna be 8. 991. 6? No. That was number 26. Now it's gonna be 36. It'll be 1. 3? No. 6? It's 6 and 4. We can do 4, man. It's trying to be like 9. 3 divided by 9. Oh, let's see. 3 divided by 9. 29. The only thing that's gonna give here is 3. Hold on. 2 and 4. 3 divided by 3. 266. Can I get that? Let's see. How about 1 divided by 3? 1 divided by 3. 2 divided by 3. I don't know. 3. 1 divided by 3. You said you don't know this. 3 divided by 3. 3, 2, 3, 4. 1 divided by 4. 1 divided by 2. Our wins are at the max. 2 divided by 2. I don't know yeah all these I'm not gonna get if it was if they let me know it's gonna be difficult yeah then I'd be like okay so let me get my thinking cap on oh shit it's gonna fail you","```python
start_state = (3, 3, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 doesn't run at 24"" - participant seems to be checking if 9 divides into 24

# ""3 does"" - participant noting that 3 divides into 24

# ""It's gonna be 8"" - not clear what operation this refers to

# ""991"" - not clear what operation this refers to

# ""Now it's gonna be 36"" - participant may be multiplying 9*4
graph.set_subgoal(
    (36,),
    state_after_subgoal=(24,),
    comment='""Now it\'s gonna be 36"" - participant mentions 36',
)

# ""It's 6 and 4"" - participant may be trying to find numbers that multiply to 24
graph.set_subgoal(
    (6, 4),
    state_after_subgoal=(24,),
    comment='""It\'s 6 and 4"" - participant may be trying to find numbers that multiply to 24',
)

# ""3 divided by 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/9=0.33"",
    resulting_state=(3, 9, 0.33),
    comment='""3 divided by 9""',
)

# ""3 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""3/3=1"",
    resulting_state=(1, 9, 9),
    comment='""3 divided by 3""',
)

# The rest of the transcript contains a lot of division operations but they're not clearly stated or connected to specific numbers in the state

# Based on their final answer (9+9)+(3+3), they eventually tried adding the pairs of equal numbers
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(3, 3, 18),
    comment=""Based on final answer, participant added the 9s"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3+3=6"",
    resulting_state=(6, 18),
    comment=""Based on final answer, participant added the 3s"",
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+6=24"",
    resulting_state=(24,),
    comment=""Based on final answer, participant added 18 and 6"",
)
```"
4790,"[3,3,9,11]",,180," So we know it can be done with 3s and stuff. 11 is going to be that. It's going to be divided by... 9. Nah, I don't think that's it. 9 divided by 3 is...no, it's going to be 11 divided by 3. Times 3? No, because plus 9 is 19. Or 20. Mmm...24. Um...5, 3, 6. Good job! Good job! 6, 9... It wouldn't be 33 and 27. I don't know. For sure it would be 99 and 9. That would be... I'm going to do 27 and 3, but eliminate the 11. That would be perfect. How could you get it? Can't you get 3? Hold on. 7 divided by... No. Uh...3. Oh yeah, because you put it back. 11 divided by 3 times...no. Can I have cuddles? 11 divided...divided by 3? Times 9? No. 3 times 9... That's true. 11 divided by 3...divided by 3. 1.22. Yeah, there you go. I got a feeling I'm getting close, though. Because 11 is going to have to be divided. And then... Yeah, I'm not going to get this one. This one's fine. That's 2.66. Or a 9 name up? No, because we did that already. 9 divided by 11. 81, 81, 81. Uh...yeah, that's fine. 9... Because 1.22 is not it. 6 divided by...yeah. Yeah, it's going to have to be... Yeah, it's going to be a fail. I wonder what that's like. Excuse me, I wonder what the heck. Uh... I'm going to have to practice. I'm going to have to practice.","```python
start_state = (3, 3, 9, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 divided by 3 is...""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 3, 11),
    comment='""9 divided by 3 is...""',
)

# ""11 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/3=3.67"",
    resulting_state=(3, 3.67, 9),
    comment='""11 divided by 3""',
)

# ""plus 9 is 19. Or 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3.67+9=20"",
    resulting_state=(3, 20),
    comment='""plus 9 is 19. Or 20""',
    result_calc_error=True,
)

# ""It wouldn't be 33 and 27"" participant may have multiplied 11*3 and 9*3
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*3=33"",
    resulting_state=(3, 9, 33),
    comment='""It wouldn\'t be 33""',
)

curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 11, 27),
    comment='""and 27""',
)

# ""99 and 9"" participant may have multiplied 11*9
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*9=99"",
    resulting_state=(3, 3, 99),
    comment='""99 and 9""',
)

# ""27 and 3"" participant computed 9*3 again
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""9*3=27"",
    resulting_state=(3, 11, 27),
    comment='""27 and 3""',
)

# ""11 divided by 3 times 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/3*9=33"",
    resulting_state=(3, 33),
    comment='""11 divided by 3 times 9""',
)

# ""11 divided...divided by 3? 1.22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/9=1.22"",
    resulting_state=(3, 3, 1.22),
    comment='""11 divided...divided by 3? 1.22""',
)

# ""That's 2.66""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11/(3+3)=1.83"",
    resulting_state=(1.83, 9),
    comment='""That\'s 2.66""',
    result_calc_error=True,
)

```"
4801,"[5,6,7,13]",(7-5)13,180, Okay. 13 plus 8 plus 13 is... Let's see. 13 minus 7 plus 6 is 12. That's not right. 13 plus 5 plus 6 minus 7. That's not right. Goodness. 24 minus 13 is 11. Try to get rid of the 7. That's not right. Okay. Let's see. 13 minus 5 is 8. 7 is 15 is 24. What? 13 minus 5 is 8. 8 plus 7 is 15. 15 plus 6 is 21. Okay. Let's see. 7 minus 5 is 2. 13 is plus 13 is 15 it's 21 that's not right,"```python
start_state = (5, 6, 7, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 minus 7 plus 6 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-7+6=12"",
    resulting_state=(5, 12),
    comment='""13 minus 7 plus 6 is 12""',
)

# ""13 plus 5 plus 6 minus 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5+6-7=17"",
    resulting_state=(17,),
    comment='""13 plus 5 plus 6 minus 7""',
)

# ""24 minus 13 is 11"" - participant seems to be working backwards from goal
graph.set_subgoal(
    (11, 13),
    state_after_subgoal=(24,),
    comment='""24 minus 13 is 11"" - participant seems to be working backwards from goal',
)

# ""13 minus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-5=8"",
    resulting_state=(6, 7, 8),
    comment='""13 minus 5 is 8""',
)

# ""8 plus 7 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(6, 15),
    comment='""8 plus 7 is 15""',
)

# ""15 plus 6 is 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+6=21"",
    resulting_state=(21,),
    comment='""15 plus 6 is 21""',
)

# ""7 minus 5 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7-5=2"",
    resulting_state=(2, 6, 13),
    comment='""7 minus 5 is 2""',
)

# ""13 is plus 13 is 15"" seems to be a transcription error
# ""it's 21 that's not right"" suggests participant reached 21 again

```"
4802,"[6,10,10,13]",(10+10,180," Okay. 13 plus 10 No, 10 minus 6 is 4, plus 13 is 17, that's not it. 6 times, that's not right, goodness, it's harder than it looks. 13 minus 10 plus 6 13 minus 10 plus 10 plus 6, nope, 10, that's not right, 13 plus 6. It's 21, that's not right. 13 plus 6 is 19, that's 29. No idea how to get this to 24. 10 plus 10, oops, plus 10.","```python
start_state = (6, 10, 10, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""13 plus 10""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+10=23"",
    resulting_state=(6, 10, 23),
    comment='""13 plus 10""',
)

# ""10 minus 6 is 4, plus 13 is 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""(10-6)+13=17"",
    resulting_state=(10, 17),
    comment='""10 minus 6 is 4, plus 13 is 17""',
)

# ""13 minus 10 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10+6=9"",
    resulting_state=(9, 10),
    comment='""13 minus 10 plus 6""',
)

# ""13 minus 10 plus 10 plus 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""13-10+10+6=19"",
    resulting_state=(19,),
    comment='""13 minus 10 plus 10 plus 6""',
)

# ""13 plus 6. It's 21"" - participant makes calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6=21"",
    resulting_state=(10, 10, 21),
    comment='""13 plus 6. It\'s 21"" - participant makes calculation error',
    result_calc_error=True,
)

# ""13 plus 6 is 19, that's 29"" - participant corrects previous error and adds 10
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+6+10=29"",
    resulting_state=(10, 29),
    comment='""13 plus 6 is 19, that\'s 29""',
)

# ""10 plus 10"" - participant starts a new attempt but runs out of time
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10+10=20"",
    resulting_state=(6, 13, 20),
    comment='""10 plus 10""',
)

```"
4803,"[4,4,7,7]",(7+7)+,180," 7 plus 7 is 14, 18, 22. So if you add them all up, that's not it. All right, 7, 7 plus 7 times 4 is 28. Wait, let's see. 7 times 7 is 49. Divide it by 4, plus 4. That's not right. Okay. 7 plus 7. No. 7 plus 4. So it's 11. Times 4 is 44. Divide by 7. All right. It's 4 times 4, 16. Oops. 16 plus 5. seven. There's 23. That doesn't work. Seven plus seven is 14 plus","```python
start_state = (4, 4, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 plus 7 is 14""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(4, 4, 14),
    comment='""7 plus 7 is 14""',
)

# ""18, 22"" seems to be adding the 4s to get 14+4=18, 18+4=22
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+4+4=22"",
    resulting_state=(22,),
    comment='""18, 22"" seems to be adding the 4s to get 14+4=18, 18+4=22',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""7 plus 7 times 4 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""(7+7)*4=28"",
    resulting_state=(4, 28),
    result_calc_error=True,
    comment='""7 plus 7 times 4 is 28"" - calculation error since (7+7)*4 would be 56',
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(4, 4, 49),
    comment='""7 times 7 is 49""',
)

# ""Divide it by 4, plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""49/4+4=16.25"",
    resulting_state=(16.25,),
    comment='""Divide it by 4, plus 4""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""7 plus 4. So it's 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(4, 7, 11),
    comment='""7 plus 4. So it\'s 11""',
)

# ""Times 4 is 44""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11*4=44"",
    resulting_state=(7, 44),
    comment='""Times 4 is 44""',
)

# ""Divide by 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""44/7=6.29"",
    resulting_state=(6.29,),
    comment='""Divide by 7""',
)

# Going back to start state
curr_state = graph.move_to_node(start_state)
# ""4 times 4, 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(7, 7, 16),
    comment='""4 times 4, 16""',
)

# ""16 plus 5. seven. There's 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+7=23"",
    resulting_state=(7, 23),
    comment='""16 plus 5. seven. There\'s 23""',
)

# ""Seven plus seven is 14 plus"" - going back to first operation
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(4, 4, 14),
    comment='""Seven plus seven is 14 plus""',
)
```"
4807,"[4,5,5,8]",(5x5),180," Alright, 8 plus 5 is 13. Plus 5 plus 4 is 18. It's 18. It's 22. Okay, 8 times 4 is 32 minus 5. That's 22. That's not right. 8 times 5 is 40. 40 minus, that's not right, 5 times 5, oops, sorry, is 25. 25 minus 8 plus 4. 5 times 4 is 20. Minus 8 is 12. No, that's not right. 8 plus 5 is 13. 8 plus 5 is 13. Plus 4. 4. No, I've got to multiply something that's right. 5 times 4 is 20. Minus 5 is 15. Plus 8. It's 23. 5 times 5 is 25.","```python
start_state = (4, 5, 5, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 5 is 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(4, 5, 13),
    comment='""8 plus 5 is 13""',
)

# ""Plus 5 plus 4 is 18. It's 18. It's 22"" continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+5+4=22"",
    resulting_state=(22,),
    comment='""Plus 5 plus 4 is 18. It\'s 18. It\'s 22""',
)

# ""8 times 4 is 32 minus 5. That's 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*4-5=22"",
    resulting_state=(5, 22),
    comment='""8 times 4 is 32 minus 5. That\'s 22""',
    result_calc_error=True,
)

# ""8 times 5 is 40""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(4, 5, 40),
    comment='""8 times 5 is 40""',
)

# ""5 times 5, oops, sorry, is 25""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 8, 25),
    comment='""5 times 5, oops, sorry, is 25""',
)

# ""25 minus 8 plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-8+4=21"",
    resulting_state=(21,),
    comment='""25 minus 8 plus 4""',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(5, 8, 20),
    comment='""5 times 4 is 20""',
)

# ""Minus 8 is 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20-8=12"",
    resulting_state=(5, 12),
    comment='""Minus 8 is 12""',
)

# ""8 plus 5 is 13""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(4, 5, 13),
    comment='""8 plus 5 is 13""',
)

# ""Plus 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+4=17"",
    resulting_state=(5, 17),
    comment='""Plus 4""',
)

# ""5 times 4 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*4=20"",
    resulting_state=(5, 8, 20),
    comment='""5 times 4 is 20""',
)

# ""Minus 5 is 15""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20-5=15"",
    resulting_state=(8, 15),
    comment='""Minus 5 is 15""',
)

# ""Plus 8. It's 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+8=23"",
    resulting_state=(23,),
    comment='""Plus 8. It\'s 23""',
)

# ""5 times 5 is 25""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*5=25"",
    resulting_state=(4, 8, 25),
    comment='""5 times 5 is 25""',
)
```"
4812,"[1,8,10,12]",(10-8)x(12/1),44," So, we need to figure out how to create 24 here. We have, did the total numbers equal 2031? So, we have to figure out 10. So, 2 times 12 is what we're trying to arrive at. So, we need a 10 minus 8, that's 2. And then we need to multiply it by the result of 12 divided by 1.","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""So, 2 times 12 is what we're trying to arrive at"" - participant sets a subgoal
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""So, 2 times 12 is what we\'re trying to arrive at""',
)

# ""10 minus 8, that's 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(1, 2, 12),
    comment='""10 minus 8, that\'s 2""',
)

# ""And then we need to multiply it by the result of 12 divided by 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*(12/1)=24"",
    resulting_state=(24,),
    comment='""And then we need to multiply it by the result of 12 divided by 1""',
)
```"
4813,"[4,4,4,7]",(,180," For this trial, we need to figure out a way, it might be addition, this, for, it might be, oh god, oh my god, 7? How do you do this with 7? Oh no, 4, I have 4 times 4 times, 4 times 4 times 4 divided by 7, maybe that'll do it, I don't know. Because there's 6, so you add this together, 12, 16, ah, what is 4 times 7? 4, 8, 12, 16, 20, 24, what? How does 7 even work in this context? I don't get it. 4 plus, that's 7 plus 4 is 11, plus, minus 4, I don't know, that's 7 times 4? 7 times, 7 times 4, oh, 7, no, what? 7 times 4 is 28, minus 4 is 24, what? But if, what? 7 times 4 is 24, okay. 7 times 4 is 28, minus 4 plus 4? Minus 4 divided by 4? Minus 4. Minus 4 divided by 4? I can try. So we need 28. Minus 4 times what? 28. How do you create, minus 4 here? What? 28.","```python
start_state = (4, 4, 4, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""4 times 4 times 4 divided by 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4*4/7=9.14"",
    resulting_state=(9.14,),
    comment='""4 times 4 times 4 divided by 7""',
)

# ""Because there's 6, so you add this together, 12, 16"" seems to be adding 4s
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4+4=12"",
    resulting_state=(7, 12),
    comment='""add this together, 12""',
)

# ""what is 4 times 7?"" participant explores multiplying 4 and 7
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(4, 4, 28),
    comment='""what is 4 times 7?""',
)

# ""that's 7 plus 4 is 11, plus, minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4-4=7"",
    resulting_state=(4, 7),
    comment='""that\'s 7 plus 4 is 11, plus, minus 4""',
)

# ""7 times 4 is 28, minus 4 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4-4=24"",
    resulting_state=(4, 24),
    comment='""7 times 4 is 28, minus 4 is 24""',
)

# The participant seems to be trying variations on this theme:
# ""7 times 4 is 28, minus 4 plus 4? Minus 4 divided by 4?""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4-4/4=27"",
    resulting_state=(27,),
    comment='""7 times 4 is 28, minus 4 divided by 4""',
)
```"
4817,"[1,2,2,6]",(2+2)/1x6,33," Oh, we're back to this garbage. Shoot. Okay, if we do 2, if we, 2? We need to make 4, so 2 plus 2 is 4. 4 divided by 1 times 6.","```python
start_state = (1, 2, 2, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We need to make 4"" suggests setting a subgoal
graph.set_subgoal(
    (4, 1, 6),
    state_after_subgoal=(24,),
    comment='""We need to make 4""',
)

# ""2 plus 2 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""2+2=4"",
    resulting_state=(1, 4, 6),
    comment='""2 plus 2 is 4""',
)

# ""4 divided by 1 times 6""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(4/1)*6=24"",
    resulting_state=(24,),
    comment='""4 divided by 1 times 6""',
)
```"
4818,"[1,8,8,12]",(12-8-1)x8,167," Okay, this might be an addition problem. We got 20. 8. Okay, I see the solution. We need to make a 12, 4, 12 minus 8 is 4. And then we need to multiply by 8. So we need to multiply it times 18. Divided by 1. Ah, wait, 4 times 8? That's 32. Maybe it's... Oh, what's 8 times 12? 8 times 12? 80? 88? 96? That's 96 divided by 8. Do you know what 96 divided by 8 is? It's 12. 12. That doesn't work. Uh, 12. 12? 12? 8 times 8 divided by 12? Is that it? I don't know. Ah, I can't. 8 plus 1. 12 plus... 8, 20? 8 plus 1. 9? Uh... 12 times... 12 plus 8. 20. 28. Minus 1 is 27. 8 times 8 is 64. Divided by 12 is... Nah. Uh, 12, 4 times 8? What's 4 times 8? Oh, no. 4 times 8. 8 plus 8. 12 minus 8. It's 4 times 8? What? That's... Does it 12? My... Oh. Oh. 12 minus 8 minus 1 times 8.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We got 20"" - participant may be adding 12+8
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(1, 8, 20),
    comment='""We got 20"" - participant may be adding 12+8',
)

# ""12 minus 8 is 4""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 8),
    comment='""12 minus 8 is 4""',
)

# ""4 times 8? That's 32""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*8=32"",
    resulting_state=(1, 32),
    comment='""4 times 8? That\'s 32""',
)

# ""what's 8 times 12? 8 times 12? 80? 88? 96?""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*12=96"",
    resulting_state=(1, 8, 96),
    comment='""what\'s 8 times 12? 8 times 12? 80? 88? 96?""',
)

# ""That's 96 divided by 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""96/8=12"",
    resulting_state=(1, 12),
    comment='""That\'s 96 divided by 8""',
)

# ""8 times 8 divided by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8/12=5.33"",
    resulting_state=(1, 5.33),
    comment='""8 times 8 divided by 12""',
)

# ""8 plus 1. 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+1=9"",
    resulting_state=(8, 9, 12),
    comment='""8 plus 1. 9""',
)

# ""12 plus 8. 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(1, 8, 20),
    comment='""12 plus 8. 20""',
)

# ""28. Minus 1 is 27""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+8-1=27"",
    resulting_state=(27,),
    comment='""28. Minus 1 is 27""',
)

# ""8 times 8 is 64""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(1, 12, 64),
    comment='""8 times 8 is 64""',
)

# ""12 minus 8 minus 1 times 8"" - this is their final answer
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-8-1)*8=24"",
    resulting_state=(24,),
    comment='""12 minus 8 minus 1 times 8"" - this is their final answer',
)
```"
4819,"[2,3,13,13]",,180," All right, so we're going to figure this out here. We're dealing with some weird numbers. So, we have 26 on the right side, um, 26, plus, okay, 26, shh, 20, 15, uh, 26, 26, 16, Brandon, is, uh, 13, I don't know, you can't divide 13 here, you can't, 16, 26, 26, what is 26 minus 3? 23, but if you add 2, yeah, we're not getting there, 26 minus 1, like, 20, like, maybe, maybe, it's 13 times, 13 times 2 divided by 3? 13 times, 13 times, 13 times 2 divided by 3, who knows, who knows, oh, maybe it's divided by 3 plus 2. Okay. I don't know, there's some non, there's, there might be some, like, multiplicative 13 times 13 thing happening here, and it's divided, but I can't figure it out, or it's 16, 29, that's 13 plus 13 is 26, but then what, 26 minus 2? And we're at 24, but we have this 3, and we can't do anything with the 3, so I'm struggling to figure out what do I do with this 3, because it doesn't make sense. I don't. Uh, this one's lost on me, 13 plus 2 is for 15,","```python
start_state = (2, 3, 13, 13)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""26 on the right side"" - participant adds the 13s
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(2, 3, 26),
    comment='""26 on the right side"" - participant adds the 13s',
)

# ""26 minus 3? 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-3=23"",
    resulting_state=(2, 23),
    comment='""26 minus 3? 23""',
)

# ""but if you add 2"" participant tries adding 2 to 23
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""23+2=25"",
    resulting_state=(25,),
    comment='""but if you add 2""',
)

# ""13 times 2 divided by 3""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13*2/3=8.67"",
    resulting_state=(8.67, 13),
    comment='""13 times 2 divided by 3""',
)

# ""13 plus 13 is 26""
new_state = graph.explore_operation(
    curr_state,
    operation=""13+13=26"",
    resulting_state=(2, 3, 26),
    comment='""13 plus 13 is 26""',
)

# ""26 minus 2? And we're at 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""26-2=24"",
    resulting_state=(3, 24),
    comment='""26 minus 2? And we\'re at 24""',
)

# ""13 plus 2 is for 15""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""13+2=15"",
    resulting_state=(3, 13, 15),
    comment='""13 plus 2 is for 15""',
)
```"
4826,"[5,5,6,11]",(6x5)-(11-5),60," Eleven minus six. Eleven minus six, that is four. So, you have to make that thing. Six times five. Get it. Six times five. Minus. Eleven. Minus. Five.","```python
start_state = (5, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Eleven minus six. Eleven minus six, that is four"" - participant makes a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""11-6=4"",
    resulting_state=(4, 5, 5),
    comment='""Eleven minus six, that is four"" - participant makes a calculation error',
    result_calc_error=True,
)

# ""Six times five""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*5=30"",
    resulting_state=(5, 11, 30),
    comment='""Six times five""',
)

# ""Minus. Eleven. Minus. Five."" - participant is computing 30-(11-5) based on their submitted response
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""30-(11-5)=24"",
    resulting_state=(24,),
    comment='""Minus. Eleven. Minus. Five."" - participant is computing 30-(11-5)',
)
```"
4835,"[7,8,8,9]",,180," 8 plus 8 is 16, 7 plus 9 is also 16, 7 plus 8 is 15, plus 9, ooo, much as that would work, nope, but if I did a little bit of 8, if I did like 7, I feel like I'm going to have to definitely divide here, that is certainly the case, okay, 7 plus 9, mmm, 7 times 9, that's what, 60, yes, 60, 61, right, yeah, that's how math works, 61, ooo, no, that does not seem divisible by 24 in any way, ooo, but 61, okay, what if I did 61 minus 8, that would be 53, hell no, does not work, ooo, but if I got, ooo, ooo, that's going to be 50, oh no, is that 52, 61 minus 8, no, no, no, not quite, ooo, ooo, that's going to be 50, oh no, is that 52, 61 minus 8, no, no, not quite, but we're close there, and 52 divided by, well, 2, never mind, well, 53, did I have to subtract, what, another 8, yeah, it's not quite work, mmm, that's not correct, what if I did, okay, 8 times 8, in a minute, 64, no, I have to end on a 6, 56, that seems wrong too, eh, is that correct, 8 times 8 is 56, yeah, it would have to be, because, oh, I've been too come to rely on calculators, uh, okay, 8 times 8 is 56, I'm pretty sure, I'm just embarrassed that somebody has to listen to me go through math, okay, because then, after that, it'd be, like, 70, or 64, then 72, then, yeah, okay, so 56, 56,","```python
start_state = (7, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(7, 9, 16),
    comment='""8 plus 8 is 16""',
)

# ""7 plus 9 is also 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+9=16"",
    resulting_state=(8, 8, 16),
    comment='""7 plus 9 is also 16""',
)

# ""7 plus 8 is 15, plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+8+9=24"",
    resulting_state=(8, 24),
    comment='""7 plus 8 is 15, plus 9""',
)

# ""7 times 9, that's what, 60, yes, 60, 61""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*9=61"",
    resulting_state=(8, 8, 61),
    comment='""7 times 9, that\'s what, 60, yes, 60, 61"" - calculation error',
    result_calc_error=True,
)

# ""61 minus 8, that would be 53""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""61-8=53"",
    resulting_state=(8, 53),
    comment='""61 minus 8, that would be 53""',
)

# ""8 times 8, in a minute, 64, no, I have to end on a 6, 56""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=56"",
    resulting_state=(7, 9, 56),
    comment='""8 times 8, in a minute, 64, no, I have to end on a 6, 56"" - participant corrects themselves',
    result_calc_error=True,
)
```"
4840,"[1,3,6,7]",(3x6)+7-1,152," Okay, 1, 3, 6, 7. All right, 6 times 7, your higher end of numbers. But I feel like I don't want to do that. Okay, great. I mean, if I were to do 7, 8 times 3, that doesn't work because it's 6. What if I did 6, 7, 8, 9. 7 times 3, huh, no. It's 21. 6, 7. 7 times 7 is 49. That certainly doesn't work. I mean, yeah, and then 6 times 7 is what? 42. 42. 42. Hmm. It's not quite right. Okay, 4. 3 plus 1 is 4. 4 times 7, that's 28. That doesn't help. Oh, if I could make, no, none of these equal 30. Great. Yeah, right. Okay, 3 times 7 21. 6 times 3 is 20. Or is 18. Okay, I think I actually figured it out. 3 times 6 is 18. Okay. Is there a problem? Okay. Cool. Amen.","```python
start_state = (1, 3, 6, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 times 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(1, 3, 42),
    comment='""6 times 7""',
)

# ""7 times 3"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""7*3=21"",
    resulting_state=(1, 6, 21),
    comment='""7 times 3, huh, no. It\'s 21""',
)

# ""7 times 7 is 49""
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(1, 3, 6, 49),
    comment='""7 times 7 is 49""',
)

# ""6 times 7 is what? 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(1, 3, 42),
    comment='""6 times 7 is what? 42""',
)

# ""3 plus 1 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+1=4"",
    resulting_state=(4, 6, 7),
    comment='""3 plus 1 is 4""',
)

# ""4 times 7, that's 28""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*7=28"",
    resulting_state=(6, 28),
    comment='""4 times 7, that\'s 28""',
)

# ""3 times 7 21""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*7=21"",
    resulting_state=(1, 6, 21),
    comment='""3 times 7 21""',
)

# ""6 times 3 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*3=18"",
    resulting_state=(1, 7, 18),
    comment='""6 times 3 is 18""',
)

# Based on their response (3x6)+7-1, they must have then added 7 and subtracted 1 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""18+7-1=24"",
    resulting_state=(24,),
    comment=""Based on their response, they added 7 and subtracted 1 to get 24"",
)
```"
4847,"[4,8,8,12]",12+8+(8-4),81," 24, 8 divided by 8, and that's 1, divided by 4, arguing 2, but I don't really need that. 12 divided by 4, that's 3, times 8 would do it, but I don't need that. 12 divided by 8, that's not it. This is a toughie. 12 divided by, that's 1 and a half. 8 plus 12, that's 20. 12 plus 8, that's 20. Plus. 8 minus 4. That way.","```python
start_state = (4, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 8, and that's 1, divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 4, 8, 12),
    comment='""8 divided by 8, and that\'s 1""',
)

# ""12 divided by 4, that's 3, times 8 would do it""
new_state = graph.explore_operation(
    curr_state,
    operation=""(12/4)*8=24"",
    resulting_state=(8, 24),
    comment='""12 divided by 4, that\'s 3, times 8 would do it""',
)

# ""12 divided by 8, that's not it""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8=1.5"",
    resulting_state=(1.5, 4, 8),
    comment='""12 divided by 8, that\'s not it""',
)

# ""8 plus 12, that's 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(4, 8, 20),
    comment='""8 plus 12, that\'s 20""',
)

# ""12 plus 8, that's 20. Plus. 8 minus 4""
# The participant seems to be building up to their final answer: 12+8+(8-4)
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8+(8-4)=24"",
    resulting_state=(24,),
    comment='""12 plus 8, that\'s 20. Plus. 8 minus 4""',
)
```"
4852,"[3,5,6,11]",,181," 17 18 22 25 3 times 6 17 7 I am saying my thoughts out loud 30 minus 11 plus 3 that's 22 5 minus 18 and that's 37 3 minus 5 now that's too high 55 um um 15 15 15 15 15 55 I already did that. Wow. So that's 24 times 3.72. 3.72. Did anything there? Explain as far as 1. . Okay. We could get 22. No. Could get 33. Well, could get that anyway. I don't know. What is? Would it be 20? . . 6 is 5. 5. No. . . . . . . . . . . . .","```python
start_state = (3, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 times 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(5, 11, 18),
    comment='""3 times 6""',
)

# ""30 minus 11 plus 3 that's 22"" - participant may have gotten 30 from 5*6
new_state = graph.explore_operation(
    curr_state,
    operation=""(5*6)-11+3=22"",
    resulting_state=(22,),
    comment='""30 minus 11 plus 3 that\'s 22""',
)

# ""5 minus 18 and that's 37"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""18-5=37"",
    resulting_state=(3, 6, 11, 37),
    comment='""5 minus 18 and that\'s 37"" seems to be a calculation error',
    result_calc_error=True,
)

# ""3 minus 5"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""5-3=2"",
    resulting_state=(2, 6, 11),
    comment='""3 minus 5""',
)

# The participant mentions ""15"" several times and ""55"" but doesn't clearly indicate operations
# Then mentions ""24 times 3.72"" but this doesn't use numbers from the start state

# ""Could get 33"" - participant may be adding 11+11+11 but this isn't possible with the start numbers

# The rest of the transcript contains pauses (""."") and numbers without clear operations
```"
4854,"[1,2,7,11]",11-7,180," Wow. This is tough. This is very tough. This is very tough, so how do I do this? This is crazy. To get 24, I have to use all these numbers. I have to use all these numbers. Wow. This is going to be mad. This is going to be mad. This is going to be mad. So, what if I do it this way? 7 by 11? 7? 7? Maybe I divide it by 3. Wow. Wow. I'm even confused right now. I'm very confused. So, what if I do it this way? minus 7 yeah I get it I get it this and this is this is very difficult is very difficult right now so I'm I'm I'm going to do it this way so I'm well well I need to get numbers which could multiply and get them 24 so or could add and get","```python
start_state = (1, 2, 7, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# Most of the transcript is the participant expressing difficulty
# But there are a few operations they try:

# ""7 by 11"" suggests multiplication
new_state = graph.explore_operation(
    curr_state,
    operation=""7*11=77"",
    resulting_state=(1, 2, 77),
    comment='""7 by 11"" suggests multiplication',
)

# ""Maybe I divide it by 3"" - they likely mean dividing 77 by (1+2)
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+2=3"",
    resulting_state=(3, 77),
    comment='""Maybe I divide it by 3"" - first making 3',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""77/3=25.67"",
    resulting_state=(25.67,),
    comment='""Maybe I divide it by 3"" - dividing 77 by 3',
)

# ""minus 7"" - they submitted ""11-7"" as their answer, so they must have tried this
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-7=4"",
    resulting_state=(1, 2, 4),
    comment='""minus 7""',
)

# The rest of the transcript is the participant expressing difficulty and thinking about general strategies (""I need to get numbers which could multiply and get them 24"")
```"
4857,"[4,4,5,6]",(4x6)x(5-4),108," Wow. Wow. Another tough one. Another tough one. The numbers seem cool. So, what if I add them? No. If I add them, I'm sure I'm going to get 19. So, I have to find something. Have to find something. Something. Something. Wow. How am I going to do this? How am I going to do this? How am I going to do this? I need to get 24. 24. 24 divided by 6 should be 4. So, if I divide by 6, it means if I multiply by 4, if I multiply 6 by 4, then it means, well, I can't do a 6 multiple. No. No. No. No. No. No. No. Think. Think. Think. Think. Think. Think. Think. what if I do a 4, 4 by 6, 4 by 6 is 24, so I'm going to do it this way, 4 times 6 bracket close, times bracket open, 5 minus 4, close is the last.","```python
start_state = (4, 4, 5, 6)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""If I add them, I'm sure I'm going to get 19""
new_state = graph.explore_operation(
    curr_state,
    operation=""4+4+5+6=19"",
    resulting_state=(19,),
    comment='""If I add them, I\'m sure I\'m going to get 19""',
)

# ""24 divided by 6 should be 4"" - participant seems to be working backward from 24
graph.set_subgoal(
    (4, 6),
    state_after_subgoal=(24,),
    comment='""24 divided by 6 should be 4"" - participant seems to be working backward',
)

# ""4 by 6 is 24"" 
new_state = graph.explore_operation(
    curr_state,
    operation=""4*6=24"",
    resulting_state=(4, 5, 24),
    comment='""4 by 6 is 24""',
)

# ""4 times 6 bracket close, times bracket open, 5 minus 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""(4*6)*(5-4)=24"",
    resulting_state=(24,),
    comment='""4 times 6 bracket close, times bracket open, 5 minus 4""',
)

```"
4858,"[2,2,7,10]",(7,180," Wow. Another one. I need to get 24 out of this again. This is crazy. This is crazy. This is crazy. This is crazy. This is crazy. This is crazy. So, what if I divide 10 by 2? I'm getting 5. And 5 by 2 by 7. No. What if I do it? 5 by 7. No, no, no, no, no, no. I need to get 24. I need to get 24. How do I do this? 24. Wow. 6 by 7 could give me 42. So, 24 by 2 should give me 48. So, 70 divided by 4. No, no, no, no, no, no, no, no, no, no, no, no. This thing. This is crazy. So, okay, I'm going to do it this way. Brackets open. 10. No, no, no, no. Brackets open. 7. So, 24. 24 divided by 7. No, no, no. What are the multiples of 24? Maybe 2. Maybe 3. 2 and 3 are multiples of 24. What do I do? What do I do? What do I do? 6 is also a multiple. 2, 3, 6. 8 is also a multiple. Wow. I'm stuck. I'm stuck with this. I'm stuck with this, honestly. I'm very stuck.","```python
start_state = (2, 2, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""what if I divide 10 by 2? I'm getting 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/2=5"",
    resulting_state=(2, 5, 7),
    comment='""what if I divide 10 by 2? I\'m getting 5""',
)

# ""And 5 by 2 by 7"" seems to be considering multiplying these numbers
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*2*7=70"",
    resulting_state=(70,),
    comment='""And 5 by 2 by 7""',
)

# ""6 by 7 could give me 42"" - participant seems to be setting a subgoal
graph.set_subgoal(
    (6, 7),
    comment='""6 by 7 could give me 42""',
)

# ""So, 24 by 2 should give me 48"" - participant seems to be working backwards from 24
graph.set_subgoal(
    (24, 2),
    state_after_subgoal=(48,),
    comment='""So, 24 by 2 should give me 48""',
)

# ""70 divided by 4"" - participant may be trying to use both 2s to divide
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*2=4"",
    resulting_state=(4, 7, 10),
    comment='""70 divided by 4"" - first making 4 from 2*2',
)

# The participant then seems to start writing something with brackets but stops
# Then they list out multiples of 24 but don't try any specific operations
# Finally they express being stuck
```"
4860,"[2,2,3,11]",,180," This is crazy, you know. What if I do it 236? 6 times 9 should be giving you more. 4 by 8. 4 by 8 should give you 32. So... Oh God! This is crazy! 2 into brackets. No. 2 plus 3 is 6. 6... 2 times... 2 by 3 is 6. 6 by 2 is 12. By 11... No, no, no, no, no, no, no. Wow! So, 24 divided by 3 should be 8. What if I do it this way? So, how do I get 8 out of this? 11 minus 4 should be 7. Wow! 4 divided by 6 should be 4. So, 3 by 11 is 73 times 2. 666 divided by 2 is 33. What if I do it this way? 2 by 11 is 22. Plus 3 is 25. Minus 2 is 23. Wow! I'm even lost. These are tough. These are very tough. I'm so confused right now. Very confused.","```python
start_state = (2, 2, 3, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""2 plus 3 is 6"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""2+3=6"",
    resulting_state=(2, 6, 11),
    comment='""2 plus 3 is 6"" - calculation error',
    result_calc_error=True,
)

# ""2 by 3 is 6. 6 by 2 is 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(2, 6, 11),
    comment='""2 by 3 is 6""',
)

curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*2=12"",
    resulting_state=(11, 12),
    comment='""6 by 2 is 12""',
)

# ""24 divided by 3 should be 8"" - participant seems to be working backwards from goal
graph.set_subgoal(
    (3, 8),
    state_after_subgoal=(24,),
    comment='""24 divided by 3 should be 8"" - participant seems to be working backwards',
)

# ""11 minus 4 should be 7"" - the 4 likely came from 2+2
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""11-(2+2)=7"",
    resulting_state=(3, 7),
    comment='""11 minus 4 should be 7"" - the 4 likely came from 2+2',
)

# ""3 by 11 is 73"" - calculation error
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*11=73"",
    resulting_state=(2, 2, 73),
    comment='""3 by 11 is 73"" - calculation error',
    result_calc_error=True,
)

# ""2 by 11 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*11=22"",
    resulting_state=(2, 3, 22),
    comment='""2 by 11 is 22""',
)

# ""Plus 3 is 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""22+3=25"",
    resulting_state=(2, 25),
    comment='""Plus 3 is 25""',
)

# ""Minus 2 is 23""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""25-2=23"",
    resulting_state=(23,),
    comment='""Minus 2 is 23""',
)
```"
4863,"[6,6,8,9]",(6+6)-,180," 24. Out of this. Out of this. I need to get 24. Out of this. I've got 24. 8 plus. In short. In short. In short. What if I do it this way? What if I do it this way? Anyway, 6 by 6 should be 36. 36 minus 24 should be like 12. No, no, no. This is not that. 8 plus 9 should be 16. Plus 6 should be 22. No, no, no. It should be 23. No, no, no. That's not it. That's not it. 6 by 8 is 48. Minus 6. Minus 9. I'm not going to be bad. I'm going to be good. Ah, what do I do? What do I do? What do I do? What do I do? What do I do? What do I do? This is difficult. 6 by 9. It should be 54. Minus 12. What if I do it like 9 times 6? No, no, no. That's also not working. So, 8 by 6. Minus 6. Minus 9. So, 12. Plus 8. 12. So, 6. 6 plus. Okay. 6 plus 6. 12. 12. Minus. Minus.","```python
start_state = (6, 6, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""6 by 6 should be 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(8, 9, 36),
    comment='""6 by 6 should be 36""',
)

# ""8 plus 9 should be 16"" (calculation error)
new_state = graph.explore_operation(
    curr_state,
    operation=""8+9=16"",
    resulting_state=(6, 6, 16),
    comment='""8 plus 9 should be 16"" - calculation error',
    result_calc_error=True,
)

# ""Plus 6 should be 22""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+6=22"",
    resulting_state=(6, 22),
    comment='""Plus 6 should be 22""',
)

# ""6 by 8 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(6, 9, 48),
    comment='""6 by 8 is 48""',
)

# ""6 by 9. It should be 54""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*9=54"",
    resulting_state=(6, 8, 54),
    comment='""6 by 9. It should be 54""',
)

# ""8 by 6. Minus 6. Minus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6-6-9=33"",
    resulting_state=(33,),
    comment='""8 by 6. Minus 6. Minus 9""',
)

# ""6 plus 6. 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""6+6=12"",
    resulting_state=(8, 9, 12),
    comment='""6 plus 6. 12""',
)

```"
4865,"[5,6,8,8]",(8(8-6))5,232," My target number is 24. I have 5, 6, 8, and 8. How can I make it? I can use any arrhythmic thing. You're no help. You're a fucking bot. You're a fucking bot. 8 divided by... Alright, so I'm going to go 8 divided by 8. Minus 6 times 5. So we got... Minus 6 times 5... What the... Incorrect answer or not, use all the answers. 8 divided by... Oh, so 8 divided by 8 times minus 6. So 8 divided by 8 times minus 6. So 8 divided by 8 times minus 6. 8 minus 6 minus 6. Is it times 5? 8 divided by 8 minus 6. So 8 minus 6 is 2. 8 minus 6 is 2. Divided by 8... What's 8 divided by 2? 4. 4? What's 4 times 5? 4. That's 25... Or 20. Into the 7. Yeah. 6 times 8 divided by 8 times 5. So we got... So we got... 6 times 8... 6 times 8 divided by 8 times 5. Divided by... 8 times 5. The fuck? 6 times 8? shit's pissing me the fuck off you have your phone you have chat GPT installed can I use it for a quick yes all right so what my plan is to do to reach 24 it's going to be eight so minus six times five wait what what what what what what what what what what what what what what what what what what what eight times a that's literally equals","```python
start_state = (5, 6, 8, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 5, 6, 8),
    comment='""8 divided by 8""',
)

# ""Minus 6 times 5"" seems to be continuing from previous state
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1-6*5=-29"",
    resulting_state=(-29, 8),
    comment='""Minus 6 times 5""',
)

# ""8 minus 6 is 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 8),
    comment='""8 minus 6 is 2""',
)

# ""What's 8 divided by 2? 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/2=4"",
    resulting_state=(4, 5),
    comment='""What\'s 8 divided by 2? 4""',
)

# ""What's 4 times 5? ... That's 25""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=25"",
    resulting_state=(25,),
    comment='""What\'s 4 times 5? ... That\'s 25""',
    result_calc_error=True,
)

# ""6 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*8=48"",
    resulting_state=(5, 8, 48),
    comment='""6 times 8""',
)

# ""divided by 8 times 5""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""48/8*5=30"",
    resulting_state=(30,),
    comment='""divided by 8 times 5""',
)

# Based on their final response of (8(8-6))5, they must have done:
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(8-6)*5=80"",
    resulting_state=(80,),
    comment=""Based on their final response"",
)
```"
4868,"[5,8,8,9]",(8/(8-5))x9,48," Okay, so in order to do this, we're going to need to go with 8 divided by 8 times the minus 5 times 9.","```python
start_state = (5, 8, 8, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 divided by 8 times the minus 5 times 9"" seems to be describing (8/(8-5))*9
# First compute 8-5
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 8, 9),
    comment='""8 divided by 8 times the minus 5"" - participant first computes 8-5',
)

# Then divide 8 by 3
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/3=2.67"",
    resulting_state=(2.67, 9),
    comment='Participant divides 8 by the result of 8-5',
)

# Finally multiply by 9
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2.67*9=24.03"",
    resulting_state=(24.03,),
    comment='Participant multiplies by 9 to get 24',
)
```"
4872,"[1,8,8,12]",((8/8)+1)x12,156," Okay, 8 times 8 is 16. No. 8 plus 12 is 20, so that'd be like 29. No. 8 minus 1 is 7. No. Okay. 12 minus 1 is 11. 11 plus 16 is 27. No. 12 minus 8, 4 times 8. No. 8 times 8, 64 divided by 12. Let's try it. 8 times 8 divided by 12. 8 divided by 12 times 1. No. Wait. 8 divided by, 8 times 8, 64. 64, wait. 64 divided by 12. I am saying my thoughts out loud. 5. So that's not that. But 12 times 8, 96 divided by 8. That's not it either. Hmm. This one's really tricky. 8 divided by 1 would be 8. 8 plus 8. 12 plus 8 is 20. 8 divided by 8 is 1. 1 plus 1. Wait. 8 divided by 8 plus 1. Wait. 8. Yeah, this is, okay. Double parentheses. 8 divided by 8. 1 plus 1 times 12.","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 times 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=16"",
    resulting_state=(1, 12, 16),
    result_calc_error=True,
    comment='""8 times 8 is 16"" - calculation error',
)

# ""8 plus 12 is 20""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+12=20"",
    resulting_state=(1, 8, 20),
    comment='""8 plus 12 is 20""',
)

# ""8 minus 1 is 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-1=7"",
    resulting_state=(7, 8, 12),
    comment='""8 minus 1 is 7""',
)

# ""12 minus 1 is 11""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-1=11"",
    resulting_state=(8, 8, 11),
    comment='""12 minus 1 is 11""',
)

# ""12 minus 8, 4 times 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(12-8)*8=32"",
    resulting_state=(1, 32),
    comment='""12 minus 8, 4 times 8""',
)

# ""8 times 8, 64 divided by 12""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8/12=5.33"",
    resulting_state=(1, 5.33),
    comment='""8 times 8, 64 divided by 12""',
)

# ""12 times 8, 96 divided by 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*8/8=12"",
    resulting_state=(1, 12),
    comment='""12 times 8, 96 divided by 8""',
)

# ""8 divided by 1 would be 8""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/1=8"",
    resulting_state=(8, 8, 12),
    comment='""8 divided by 1 would be 8""',
)

# ""12 plus 8 is 20""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+8=20"",
    resulting_state=(1, 8, 20),
    comment='""12 plus 8 is 20""',
)

# ""8 divided by 8 is 1""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8/8=1"",
    resulting_state=(1, 1, 12),
    comment='""8 divided by 8 is 1""',
)

# Finally, the participant finds the solution: ""8 divided by 8 plus 1 times 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""(1+1)*12=24"",
    resulting_state=(24,),
    comment='""8 divided by 8 plus 1 times 12"" - participant uses the 1 they just computed',
)
```"
4881,"[6,6,7,10]",,180," 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20... The Sex Oh 10 divided by 6 is 1 and two-thirds Times six One and two-thirds six twelve four five Six Six and six is 36 Six times six times seven Okay Okay 36 That's 40 Yeah","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# The participant first counts up from 3 to 20, perhaps trying to get a sense of the numbers

# ""10 divided by 6 is 1 and two-thirds""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/6=1.67"",
    resulting_state=(1.67, 6, 7),
    comment='""10 divided by 6 is 1 and two-thirds""',
)

# ""Six and six is 36"" - participant likely means 6*6
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(7, 10, 36),
    comment='""Six and six is 36""',
)

# ""Six times six times seven"" - participant continues multiplying
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""36*7=252"",
    resulting_state=(10, 252),
    comment='""Six times six times seven""',
)

# ""That's 40"" - participant seems to be making a calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""252-10=40"",
    resulting_state=(40,),
    result_calc_error=True,
    comment='""That\'s 40"" - participant seems to be making a calculation error',
)
```"
4886,"[8,9,11,11]",,180," Well, 11 minus this, and that's only going to give me multiples of 11, which won't help. What will divide nothing? Well, 17, 20, 19. What about triple combinations? Okay, so it's 22, 30, 11. 11 times 11 is 121, divided by 9. No, not left. 121 divided by 9 is 39. 121 divided by 9, I'll hold the marking there. 99 divided by 11. 8, 88. 88. 88 minus 9. 79. 79. Yeah. 99. 13. 13. 13. 13. 13. Thank you.","```python
start_state = (8, 9, 11, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 minus this"" suggests participant is considering subtraction with 11, but doesn't complete the thought

# ""11 times 11 is 121""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*11=121"",
    resulting_state=(8, 9, 121),
    comment='""11 times 11 is 121""',
)

# ""121 divided by 9 is 39""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""121/9=39"",
    resulting_state=(8, 39),
    comment='""121 divided by 9 is 39""',
    result_calc_error=True,
)

# The participant then mentions some numbers (99, 88, 79) but doesn't clearly connect them to operations with the available numbers

```"
4890,"[3,4,8,10]",(4x3)x(10-8),33," I mean, this one makes me want to go back to 12, the factors of 12. So 3 times 4 for 12 times the sum of 10 minus 8.","```python
start_state = (3, 4, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""this one makes me want to go back to 12, the factors of 12"" - participant is setting a subgoal of 12
graph.set_subgoal(
    (12,),
    state_after_subgoal=(24,),
    comment='""this one makes me want to go back to 12, the factors of 12""'
)

# ""3 times 4 for 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""3*4=12"",
    resulting_state=(8, 10, 12),
    comment='""3 times 4 for 12""',
)

# ""times the sum of 10 minus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12*(10-8)=24"",
    resulting_state=(24,),
    comment='""times the sum of 10 minus 8""',
)
```"
4892,"[1,8,9,12]",((9-8)+1)x12,59," On this one, 1, 8, 9, and 12. Well, 12 is one of the numbers that I want, I think, because I can do the 12 times 2. So I could do 9 minus 8 for 1, plus 1, and then multiply that by 12. Oh, I need another bracket. 9 minus 8 for 1. And I add that to the other 1, and that gets multiplied for 12. So 9 minus 8 for 1, 1 plus 1, 12 times 2 is 24.","```python
start_state = (1, 8, 9, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 times 2"" - participant seems to be setting a subgoal to get 2 to multiply by 12
graph.set_subgoal(
    (2, 12),
    state_after_subgoal=(24,),
    comment='""12 is one of the numbers that I want, I think, because I can do the 12 times 2""',
)

# ""9 minus 8 for 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-8=1"",
    resulting_state=(1, 1, 12),
    comment='""9 minus 8 for 1""',
)

# ""And I add that to the other 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""1+1=2"",
    resulting_state=(2, 12),
    comment='""And I add that to the other 1""',
)

# ""and that gets multiplied for 12""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(24,),
    comment='""and that gets multiplied for 12""',
)
```"
4898,"[4,5,5,9]",(9-5)+(4x5),72," One more shot. Mmm. Mmm mmm mmm. 9 minus 5, that's 4. And I would have to make it, like it's, no. 12. Okay, so. 1 and 24. 2 and 12. 3 and 6. No, 3 and... 1, 3, 6, 9, 12, 15, 18, 21, 24, 3 and 8. 4 and 6. Okay. Hmmm. Not 10. Definitely not 9. It's like 9 something 4. 9 minus 5. Let's do 9 minus 5. I'm smart! I'm smart! Because then it'll be 4 times 5. Because then it'll be 4 times 5. Because that'll make 20. Because that'll make 20. Okay, yeah.","```python
start_state = (4, 5, 5, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 5, that's 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 4, 5),
    comment='""9 minus 5, that\'s 4""',
)

# The participant then seems to be listing out factors of 24:
# ""1 and 24. 2 and 12. 3 and 6"" suggests they are working backward from 24
graph.set_subgoal(
    (24,),
    state_after_subgoal=(24,),
    comment=""Participant lists factors of 24: '1 and 24. 2 and 12. 3 and 6'"",
)

# ""9 minus 5"" participant returns to this operation
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(4, 4, 5),
    comment='""9 minus 5""',
)

# ""4 times 5. Because that'll make 20""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*5=20"",
    resulting_state=(4, 20),
    comment='""4 times 5. Because that\'ll make 20""',
)

# Then the participant adds the 4 from 9-5 to get 24, based on their submitted response
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""20+4=24"",
    resulting_state=(24,),
    comment=""Based on submitted response, participant adds the 4 from 9-5 to get 24"",
)
```"
4900,"[6,6,7,10]",,180," Okay, so 10 minus 7 will get me 3. Okay, so 10 minus 7, that'll get me 3. Then 6, no, 6 divided by 6 would get me 1. Mmm. Okay, wait. Wait, wait, wait, wait. 12, because it will be 12 and 2. No, 6 minus 6 will get me 0. Oh, wait, wait. Parentheses. 7. 7 minus? No. Okay, so if I did 7 plus 10, that would get me 17. 1, 2, 3, 4, 5, 6, 7, no. No, that wouldn't work out. 7 times 6, 6, 12, 18, 24, 30, 30, no. I can't even multiply that. Okay, what if I did 6 times 6? That would get me 36. 6 times 6 would get me 36. And then minus? Okay, so 36. And if I did 17? 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12. Nope. That would leave me with, like, a whole bunch of extra. No, no, no. 6 times 6 equals 36. If I did that, what if I did 6 times 7? So 6 times 7, 6, 12, 18, 24, 30, 36, 42. And then I subtract that with, wait, 42. 42 minus 16, what would that be? 42 minus 16, what would that be? That's 26, but I need 24. Shit. Hmm. But if I did 6 times 10, that would get me 60. 60 minus 24. That means I would need 6. Okay, wait, no. No, because then I would need 36. 36. Fudge. How about 70? 70 minus 24. In that case, I would need 46.","```python
start_state = (6, 6, 7, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 7 will get me 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-7=3"",
    resulting_state=(3, 6, 6),
    comment='""10 minus 7 will get me 3""',
)

# ""6 divided by 6 would get me 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/6=1"",
    resulting_state=(1, 7, 10),
    comment='""6 divided by 6 would get me 1""',
)

# ""6 minus 6 will get me 0""
new_state = graph.explore_operation(
    curr_state,
    operation=""6-6=0"",
    resulting_state=(0, 7, 10),
    comment='""6 minus 6 will get me 0""',
)

# ""7 plus 10, that would get me 17""
new_state = graph.explore_operation(
    curr_state,
    operation=""7+10=17"",
    resulting_state=(6, 6, 17),
    comment='""7 plus 10, that would get me 17""',
)

# ""7 times 6"" participant calculates this equals 30 (incorrectly)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*6=30"",
    resulting_state=(6, 10, 30),
    comment='""7 times 6, 6, 12, 18, 24, 30""',
    result_calc_error=True,
)

# ""6 times 6? That would get me 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*6=36"",
    resulting_state=(7, 10, 36),
    comment='""6 times 6? That would get me 36""',
)

# ""6 times 7"" participant calculates this equals 42
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(6, 10, 42),
    comment='""6 times 7, 6, 12, 18, 24, 30, 36, 42""',
)

# ""6 times 10, that would get me 60""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*10=60"",
    resulting_state=(6, 7, 60),
    comment='""6 times 10, that would get me 60""',
)

```"
4906,"[3,5,7,9]",9+7+5+3,122," Okay, target number 24, so I'm going to try, let's see, so I have 3, 5, 7, and 9, so a bunch of odd numbers. Let's see, if I have 9 minus 7 is 2, 8, 16, 24, I'm just thinking. If I can get an 8 and a 3, that would be good, or a 12 and a 2. I don't think either of those are possible right now. Let's see, or a 4 and a 6, maybe. Let's see, 7 times 3, no. 9 minus 5, I can get 4. 4 times 3, no. 9 times 7 is 28, no, that wouldn't work. 2, okay, hold on, maybe I could do some division, so 9 divided by 3, let's see if that helps me at all. I would have 3, no, I don't think that's going to work. Okay, let's say, I'm just thinking, so 3 times 5, or sorry, 3 plus 5 is 8. Okay, let me try just addition, so 3, maybe I can just add these together. Let me try just addition, so 3, maybe I can just add these together. So 9 divided by 3, no, that wouldn't work. plus 7, 16. Okay, it was much easier than I thought. 9 plus 7, 16 plus 5 is 21 plus 3, 24.","```python
start_state = (3, 5, 7, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 minus 7 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-7=2"",
    resulting_state=(2, 3, 5),
    comment='""9 minus 7 is 2""',
)

# The participant mentions wanting to get to 8 and 3 or 12 and 2
graph.set_subgoal((8, 3), state_after_subgoal=(24,), comment=""wanting to get to 8 and 3"")
graph.set_subgoal((12, 2), state_after_subgoal=(24,), comment=""or 12 and 2"")
graph.set_subgoal((4, 6), state_after_subgoal=(24,), comment=""or a 4 and a 6"")

# ""9 minus 5, I can get 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""9-5=4"",
    resulting_state=(3, 4, 7),
    comment='""9 minus 5, I can get 4""',
)

# ""9 times 7 is 28""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*7=28"",
    resulting_state=(3, 5, 28),
    comment='""9 times 7 is 28""',
    result_calc_error=True,
)

# ""9 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""9/3=3"",
    resulting_state=(3, 5, 7),
    comment='""9 divided by 3""',
)

# ""3 plus 5 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""3+5=8"",
    resulting_state=(7, 8, 9),
    comment='""3 plus 5 is 8""',
)

# Finally the participant tries adding all numbers
# ""9 plus 7, 16 plus 5 is 21 plus 3, 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7+5+3=24"",
    resulting_state=(24,),
    comment='""9 plus 7, 16 plus 5 is 21 plus 3, 24""',
)
```"
4914,"[5,6,7,8]",,180," Okay, target number 24. So I have 5, 6, 7, 8. Let me just try adding straight across. So 8 plus 7, so it's going to be 15. 15 plus 6, 21, plus 5, 26. So too big. Okay, so I maybe I could do 8 times 5, which is 40. 40 minus 7, that's 33. Not minus 6, that won't be 24. Okay, maybe I could do 5 times 7. So 5 times 7, that's 35. And then I could maybe, what if I just try subtracting 6 and 8? 35 minus 6, that's 29. Minus 8, that's 21. That's not going to work. Maybe I could try 5 times 8 is 40. 5 times 7 is 35. 5 times 6 is 35. 6. Okay, 6 times 7. So 6 times 7, that's 42. That's not going to work. These numbers are getting too big. Okay. Maybe I could do 5, 6, and, no. Okay, maybe if I did 8 minus 5, that's 3. And I can multiply by 6 to make 24. That's not going to help me. 8 minus 6 is 2. So can I get it with 5, 7, and 2? I don't think so. Okay, so 8 minus 6. No, 8 minus 5 is 3. No, that's not going to work either. Ah, this is frustrating. 8 minus 6 is 2. So I'm trying to think if I can even divide two numbers to get, none of these are divisible by each other, and their differences aren't either. I could do 8 plus 5, 13 plus, no. Okay. Okay. 8 plus 5, 13 plus, no.","```python
start_state = (5, 6, 7, 8)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 plus 7, so it's going to be 15""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+7=15"",
    resulting_state=(5, 6, 15),
    comment='""8 plus 7, so it\'s going to be 15""',
)

# ""15 plus 6, 21, plus 5, 26""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""15+6+5=26"",
    resulting_state=(26,),
    comment='""15 plus 6, 21, plus 5, 26""',
)

# ""8 times 5, which is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""8*5=40"",
    resulting_state=(6, 7, 40),
    comment='""8 times 5, which is 40""',
)

# ""40 minus 7, that's 33""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""40-7=33"",
    resulting_state=(6, 33),
    comment='""40 minus 7, that\'s 33""',
)

# ""5 times 7, that's 35""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(6, 8, 35),
    comment='""5 times 7, that\'s 35""',
)

# ""35 minus 6, that's 29. Minus 8, that's 21""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""35-6-8=21"",
    resulting_state=(21,),
    comment='""35 minus 6, that\'s 29. Minus 8, that\'s 21""',
)

# ""5 times 8 is 40""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*8=40"",
    resulting_state=(6, 7, 40),
    comment='""5 times 8 is 40""',
)

# ""5 times 7 is 35""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*7=35"",
    resulting_state=(6, 8, 35),
    comment='""5 times 7 is 35""',
)

# ""5 times 6 is 35"" (this is an error, 5*6=30)
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=35"",
    resulting_state=(7, 8, 35),
    comment='""5 times 6 is 35"" (this is an error, 5*6=30)',
    result_calc_error=True,
)

# ""6 times 7, that's 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(5, 8, 42),
    comment='""6 times 7, that\'s 42""',
)

# ""8 minus 5, that's 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-5=3"",
    resulting_state=(3, 6, 7),
    comment='""8 minus 5, that\'s 3""',
)

# ""8 minus 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""8-6=2"",
    resulting_state=(2, 5, 7),
    comment='""8 minus 6 is 2""',
)

# ""8 plus 5, 13""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+5=13"",
    resulting_state=(6, 7, 13),
    comment='""8 plus 5, 13""',
)

```"
4918,"[3,6,12,12]",,180," Okay, target number 24. 12 plus 12 is 24. 12 plus 16 is 18. 28, 30, 33. How do I get to this 24? 24. 2. That's 2. 3. 6 divided by 3. Oh, let's see. 6 divided by 12 is 2. Times... let's see. So 2 times 3 is 6. Okay. I feel like we're getting somewhere. 2... So let's see. 12 divided by 6 is 2. 2 times 12 is 30. Wait. 2 times 12... 2 times 12 is 24. Times 3 is 72. Divided by 12 is 6. No. Okay. Let's see. 3 times 6 is 18. That's not it either. 6 divided by 3. 6 divided by 3 is 2. Times 12 is 24. Let's see. 12 times 12 is 144. Divided by 6. Okay. Let's see. If we do 12 divided by 6 is 2. 12 divided by 6 is 2. Times 3 is 6. Nope. That's not it either. Oh, how do I do this one? Oh, what if we do 12 minus 6? 6. Okay. That takes us to 6. Times...","```python
start_state = (3, 6, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(3, 6, 24),
    comment='""12 plus 12 is 24""',
)

# ""12 plus 16 is 18"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""12+6=18"",
    resulting_state=(3, 12, 18),
    comment='""12 plus 16 is 18"" seems to be referring to 12+6=18',
)

# ""6 divided by 3""
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 12, 12),
    comment='""6 divided by 3""',
)

# ""6 divided by 12 is 2"" seems to be a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""6/12=2"",
    resulting_state=(2, 3, 12),
    comment='""6 divided by 12 is 2"" calculation error',
    result_calc_error=True,
)

curr_state = graph.move_to_node(new_state)
# ""2 times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 12),
    comment='""2 times 3 is 6""',
)

curr_state = graph.move_to_node(start_state)
# ""12 divided by 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 3, 12),
    comment='""12 divided by 6 is 2""',
)

# ""2 times 12 is 30"" calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=30"",
    resulting_state=(3, 30),
    comment='""2 times 12 is 30"" calculation error',
    result_calc_error=True,
)

# ""2 times 12 is 24"" participant corrects previous error
new_state = graph.explore_operation(
    curr_state,
    operation=""2*12=24"",
    resulting_state=(3, 24),
    comment='""2 times 12 is 24""',
)

# ""Times 3 is 72""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*3=72"",
    resulting_state=(72,),
    comment='""Times 3 is 72""',
)

# ""3 times 6 is 18""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*6=18"",
    resulting_state=(12, 12, 18),
    comment='""3 times 6 is 18""',
)

# ""6 divided by 3 is 2. Times 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""(6/3)*12=24"",
    resulting_state=(12, 24),
    comment='""6 divided by 3 is 2. Times 12 is 24""',
)

# ""12 times 12 is 144""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12=144"",
    resulting_state=(3, 6, 144),
    comment='""12 times 12 is 144""',
)

# ""12 divided by 6 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/6=2"",
    resulting_state=(2, 3, 12),
    comment='""12 divided by 6 is 2""',
)

curr_state = graph.move_to_node(new_state)
# ""Times 3 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""2*3=6"",
    resulting_state=(6, 12),
    comment='""Times 3 is 6""',
)

curr_state = graph.move_to_node(start_state)
# ""12 minus 6? 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-6=6"",
    resulting_state=(3, 6, 12),
    comment='""12 minus 6? 6""',
)
```"
4932,"[4,10,12,12]",,180," Okay, 4, 10 minus 4 is 6, 6 times 12 is 38, 6 times 12 divided by 12, 10 minus 6, 4 times 10, 4 times 12 is 48, 10 times 12 is 48, divided by, minus 12, no, 12, 4 times 12 is 4, times 10, divided by 12, plus 4, no, 12 times 12, divided by 10, plus, no, 12, 12 times 7, 8, 9, 10, 12 12 minus 10 12 minus 10 times for 12 12 12 plus 12 is 24 10 10 times 4 minus 12 minus 12 10 minus 4 6 12 times 12 is 144 divided by 4 minus 10 no 12 times 10 10 minus 4 6 12 times 12 is 144 divided by 4 minus 10 no 12 times 10 10 minus 4 6 12 times 10 no 12 times 10 divided by 12 12 times 10 divided by 12 12","```python
start_state = (4, 10, 12, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 minus 4 is 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-4=6"",
    resulting_state=(6, 12, 12),
    comment='""10 minus 4 is 6""',
)

# ""6 times 12 is 38"" - calculation error
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6*12=38"",
    resulting_state=(12, 38),
    comment='""6 times 12 is 38"" - calculation error',
    result_calc_error=True,
)

# ""4 times 12 is 48""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""4*12=48"",
    resulting_state=(10, 12, 48),
    comment='""4 times 12 is 48""',
)

# ""10 times 12 is 48"" - calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""10*12=48"",
    resulting_state=(4, 12, 48),
    comment='""10 times 12 is 48"" - calculation error',
    result_calc_error=True,
)

# ""12 12 plus 12 is 24""
new_state = graph.explore_operation(
    curr_state,
    operation=""12+12=24"",
    resulting_state=(4, 10, 24),
    comment='""12 12 plus 12 is 24""',
)

# ""10 times 4 minus 12 minus 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""10*4-12-12=16"",
    resulting_state=(16,),
    comment='""10 times 4 minus 12 minus 12""',
)

# ""10 minus 4 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-4=6"",
    resulting_state=(6, 12, 12),
    comment='""10 minus 4 6""',
)

# ""12 times 12 is 144 divided by 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*12/4=36"",
    resulting_state=(10, 36),
    comment='""12 times 12 is 144 divided by 4""',
)

# ""12 times 10 divided by 12""
new_state = graph.explore_operation(
    curr_state,
    operation=""12*10/12=10"",
    resulting_state=(4, 10),
    comment='""12 times 10 divided by 12""',
)
```"
4934,"[1,5,6,11]",((1+6),180," 11 plus 6 is 17 plus 1 is 18 plus 5. 5 times 6 is 30 plus minus 11, no, 11 times 6 divided by 5, 6, 11 times 5 divided by 6, 11, let me say 5, 6, 1 plus 5 plus 6 is 12 plus 11 is 23. um 11 plus 11. 11 plus 6 plus. 11. 11 plus 6 plus. 11 times 5 divided by, no, 11 times, no, 11 plus 5, 16. 16, no, 1 plus 5, 1 plus 6, 7 times 35, oh, 1 plus 6, 7, 35, 1 plus 6, 1 plus 6 times 5 plus 11. 1 plus 6, 7, 35.","```python
start_state = (1, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""11 plus 6 is 17 plus 1 is 18 plus 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+6+1+5=23"",
    resulting_state=(23,),
    comment='""11 plus 6 is 17 plus 1 is 18 plus 5""',
)

# ""5 times 6 is 30""
new_state = graph.explore_operation(
    curr_state,
    operation=""5*6=30"",
    resulting_state=(1, 11, 30),
    comment='""5 times 6 is 30""',
)

# ""11 times 6 divided by 5""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*6/5=13.2"",
    resulting_state=(1, 13.2),
    comment='""11 times 6 divided by 5""',
)

# ""11 times 5 divided by 6""
new_state = graph.explore_operation(
    curr_state,
    operation=""11*5/6=9.17"",
    resulting_state=(1, 9.17),
    comment='""11 times 5 divided by 6""',
)

# ""1 plus 5 plus 6 is 12 plus 11 is 23""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+5+6+11=23"",
    resulting_state=(23,),
    comment='""1 plus 5 plus 6 is 12 plus 11 is 23""',
)

# ""11 plus 5, 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""11+5=16"",
    resulting_state=(1, 6, 16),
    comment='""11 plus 5, 16""',
)

# ""1 plus 6, 7""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+6=7"",
    resulting_state=(5, 7, 11),
    comment='""1 plus 6, 7""',
)

# The participant seems to be trying different combinations but doesn't complete any more full calculations
# They submitted ""((1+6)"" which suggests they were in the middle of trying something with 1+6=7 when time ran out
```"
4935,"[1,8,10,12]",(10-8)x1x12,174," Target number is 24, and we have the numbers 1, 8, 10, and 12. We'll need a division in this case. Okay, so we will need a division in this case. That is 9. 122 divided by 9 gives us... It's less. We have to do a multiplication. Okay, so that is 9. And that is 120. That is less. So, 8 plus... 12 is 20. And then we'll need an addition. 10 plus 12 is 22. 1 plus 8 is 9. And 12 plus... 12 plus 10 is 22. That should be... If we add 10 and 8... Is 18. We'll need 6. We can't get 6 from... 12 minus... Wait, wait, wait. Oh, okay. We need... 10 minus 8 is 2. 2 times 12 is 24. So, we'll need... To subtract 10. A bracket of 10 minus 8. Which gives us 12. Which gives us 2. And then we multiply it by 1. That leaves us with 2. And then we multiply it by 12. Which is... To win... 10 minus 8 is 2. 2 times 1 is 2. 2 times 12 is 24.","```python
start_state = (1, 8, 10, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We'll need a division in this case"" suggests participant is thinking about division strategy
# ""That is 9"" - not clear what operation they're doing but seems like they got 9 somehow
new_state = graph.explore_operation(
    curr_state,
    operation=""10-1=9"",
    resulting_state=(8, 9, 12),
    comment='""That is 9"" - participant seems to be subtracting numbers',
)

# ""122 divided by 9"" - seems like a calculation error, maybe meant 12
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12/9=1.33"",
    resulting_state=(1.33, 8),
    comment='""122 divided by 9 gives us...""',
)

# ""12 plus... 12 plus 10 is 22""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""12+10=22"",
    resulting_state=(1, 8, 22),
    comment='""12 plus 10 is 22""',
)

# ""1 plus 8 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""1+8=9"",
    resulting_state=(9, 10, 12),
    comment='""1 plus 8 is 9""',
)

# ""If we add 10 and 8... Is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(1, 12, 18),
    comment='""If we add 10 and 8... Is 18""',
)

# ""10 minus 8 is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-8=2"",
    resulting_state=(1, 2, 12),
    comment='""10 minus 8 is 2""',
)

# ""2 times 12 is 24""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""2*1*12=24"",
    resulting_state=(24,),
    comment='""2 times 12 is 24"" - participant multiplies by 1 as well based on their final answer',
)

```"
4942,"[1,8,8,12]",,180," Target number is 34. We have the numbers 1, 8, 8 and 12. Voila! I think here we'll need to... Yes, we need to multiply. We need to... Wait. 8 by 1 is 8. 8 is 0. No. Hmm. 8 by 8. No. By 8 is 64. Divide by 12. That should be... No. Hmm. 12. 12 minus 8 is 4. Alright. So, we need to subtract 8 from 12. We'll have 4. And then... Come on. No, that doesn't work. No. Mm-hmm. ... ... 1 times 8 is 8. ... 8 times 8 is 64. 64 divided by 12? 12 divided by 8 should be 12 divided by 8 should be 1.5 times 8 12 divided by 8 is 1 plus 8 is 9 9 times 12 12 times 9 is 108 divided by 8 8 plus 8 is 16 16 divided by 12 is 9 8 plus 8 is 8","```python
start_state = (1, 8, 8, 12)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""8 by 1 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*1=8"",
    resulting_state=(8, 8, 12),
    comment='""8 by 1 is 8""',
)

# ""8 by 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(1, 12, 64),
    comment='""8 by 8 is 64""',
)

# ""12 minus 8 is 4""
new_state = graph.explore_operation(
    curr_state,
    operation=""12-8=4"",
    resulting_state=(1, 4, 8),
    comment='""12 minus 8 is 4""',
)

# ""1 times 8 is 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""1*8=8"",
    resulting_state=(8, 8, 12),
    comment='""1 times 8 is 8""',
)

# ""8 times 8 is 64""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*8=64"",
    resulting_state=(1, 12, 64),
    comment='""8 times 8 is 64""',
)

# ""12 divided by 8 should be 1.5""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8=1.5"",
    resulting_state=(1, 1.5, 8),
    comment='""12 divided by 8 should be 1.5""',
)

# ""12 divided by 8 is 1 plus 8 is 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""12/8+8=9"",
    resulting_state=(1, 9),
    comment='""12 divided by 8 is 1 plus 8 is 9""',
    result_calc_error=True,
)

# Return to start state for next operations
curr_state = graph.move_to_node(start_state)

# ""8 plus 8 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""8+8=16"",
    resulting_state=(1, 12, 16),
    comment='""8 plus 8 is 16""',
)

# ""16 divided by 12 is 9""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16/12=9"",
    resulting_state=(1, 9),
    comment='""16 divided by 12 is 9""',
    result_calc_error=True,
)
```"
4947,"[1,5,9,10]",(10+9+5)x1,163," Right? I know maths, I know maths. So how do we think here again now? Right, target number 34, we have 1, 5, 9, 10. What shall I do first? Let me think, let me think, let me think, let me think. We are making 25. We are making 25 here. We are making 25 here, we are making 25. How do we make 25? Come on. So we have, that is 5, that's 5. We are making 25. Right? So let's say, I do make it to 5 now. What if I say 6 times 9? 4 then. Okay. I know, 10 minus 9, that is 1. This one, that is 10. How do we make it 24? All right. So let's say I have, what do I have here now? What if I take 10? Okay. 10 plus 1. No, not really. All right. I'll think about it now. I have a clue. Let's say 10 plus 9. Right? 10 plus 9 plus 5. Is that not 24? That is 24. And then I multiply by 1.","```python
start_state = (1, 5, 9, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""We are making 25"" - participant seems to set this as an initial target
graph.set_subgoal(
    (25,),
    state_after_subgoal=(24,),
    comment='""We are making 25""',
)

# ""10 minus 9, that is 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10-9=1"",
    resulting_state=(1, 1, 5),
    comment='""10 minus 9, that is 1""',
)

# ""10 plus 1""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+1=11"",
    resulting_state=(5, 9, 11),
    comment='""10 plus 1""',
)

# ""10 plus 9""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+9=19"",
    resulting_state=(1, 5, 19),
    comment='""10 plus 9""',
)

# ""10 plus 9 plus 5. Is that not 24?""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""19+5=24"",
    resulting_state=(1, 24),
    comment='""10 plus 9 plus 5. Is that not 24?""',
)

# ""And then I multiply by 1""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""24*1=24"",
    resulting_state=(24,),
    comment='""And then I multiply by 1""',
)
```"
4949,"[3,5,6,11]",(11-3)x(6/5),180," So, we have 3, 5, 6. Right. This one I must calculate. This one I must calculate this one. So, how do you make it? So, let's say that we have that 3 minus 6, then minus 5, which is 2. So, how do you make it? How do you make it? How do you make it? Okay. 3 minus... 11 minus 3, that's 8. Then 8. So, how do you make it? How do you make it? Let's see. I'm looking for... Okay. I'm thinking about this one. This is crazy. This is going to be crazy. This is going to be crazy for me. That is 3. 3 times 3. Times 3, another 9. Now, what do we get on that 3? So, I have 6 divided by 3. That would give me 2. 2. 2. 2. 2. 2. 2. 36. Okay. 36. 36. 36. 36. 36. All right, and then I can take 6, I can take 6, multiply 6, divide by 5, incorrect answer. 61 by 5 is not 61 by 5, it's 1.2, then how do I make 1.2, 1.2 times 6, and 6, it's crazy.","```python
start_state = (3, 5, 6, 11)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""3 minus 6, then minus 5, which is 2""
new_state = graph.explore_operation(
    curr_state,
    operation=""3-6-5=2"",
    resulting_state=(2, 11),
    comment='""3 minus 6, then minus 5, which is 2""',
    result_calc_error=True,
)

# ""11 minus 3, that's 8""
new_state = graph.explore_operation(
    curr_state,
    operation=""11-3=8"",
    resulting_state=(5, 6, 8),
    comment='""11 minus 3, that\'s 8""',
)

# ""3 times 3. Times 3, another 9""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""3*3=9"",
    resulting_state=(5, 6, 9, 11),
    comment='""3 times 3. Times 3, another 9""',
)

# ""6 divided by 3. That would give me 2""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/3=2"",
    resulting_state=(2, 5, 11),
    comment='""6 divided by 3. That would give me 2""',
)

# ""6, multiply 6, divide by 5""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""6/5=1.2"",
    resulting_state=(1.2, 3, 11),
    comment='""6, multiply 6, divide by 5""',
)

# Based on their final answer (11-3)x(6/5), they must have combined the 11-3=8 with 6/5=1.2
curr_state = graph.move_to_node((5, 6, 8))  # state after 11-3
new_state = graph.explore_operation(
    curr_state,
    operation=""8*(6/5)=9.6"",
    resulting_state=(9.6,),
    comment=""Based on their final answer, they multiplied 8 by 6/5"",
)
```"
4951,"[5,5,10,10]",5-(10/5)x,180," We have 5, 5, 10, 10. How do you make it? I can't hear now. Let me think. Let me think. Let me think. Let me think. I have 10. I'm going to ask 5. Then I have plus. Wow! How can this thing become so cruel? How? How can it be 24, this thing? How? How can it be? How can it be 24? Let's say I take 10. Let's say I take 10 and divide by 2, by 5. That is 2. Now this 2, this 2, okay, I'm seeing it coming. So let's say I take 10. I have 10. I have 10. I have minus. In brackets, 10 divided by 5. So 10. Okay. Let's say I have 10. So it should be 5. 10. minus well 10 this thing is not praying it cannot cannot be cannot be how can it be because five minus divided by five that is three how do you make it into four it's common we have all this on others this is mine it cannot be this number cannot be i'm very very serious i'm serious cannot cannot no way it cannot be this cannot be 24 how","```python
start_state = (5, 5, 10, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""Let's say I take 10 and divide by 2, by 5. That is 2.""
new_state = graph.explore_operation(
    curr_state,
    operation=""10/5=2"",
    resulting_state=(2, 5, 10),
    comment='""Let\'s say I take 10 and divide by 2, by 5. That is 2.""',
)

# ""So let's say I take 10. I have 10. I have minus. In brackets, 10 divided by 5.""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""10-(10/5)=8"",
    resulting_state=(5, 8),
    comment='""So let\'s say I take 10. I have 10. I have minus. In brackets, 10 divided by 5.""',
)

# ""five minus divided by five that is three""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""5-(5/5)=4"",
    resulting_state=(4, 5, 10, 10),
    result_calc_error=True,
    comment='""five minus divided by five that is three"" though participant says three, they likely meant four',
)

# The rest of the transcript shows the participant expressing frustration at not being able to find the solution
```"
4956,"[4,4,7,7]",(7+,180," This is a new one. 7 times 4. 7, 14, 21, 28 is 28. 28 minus 7. 7 plus 4. 7, 8, 9, 10, 11. 11 minus 28. I don't think this. I don't think. No. Okay. What about 4 times 4 is 16, right? 16 plus 7. No, no, no, no, not so much. 7 times 7 is 49. 49 minus maybe 16. 4 times 4. I don't know. Maybe. No. Okay. Okay. Minus 4 plus 7 maybe? No. Okay. Okay. 7, 14, 21, 28. That's 28. Okay. Did I try the 4 and 4? No. 7. 7 plus, 7 plus 7 is 14, right? 14. 14 times 2, that will be 28. 14 times, 14 times 4. What's 14 times 4? 14 times 4. Oh, I think that's kind of high. I don't know. Let's see. No. Okay. Yeah. I figured that wasn't right. 14, 14 plus, 14, 14 plus maybe 4 plus 4? 14 plus 8 maybe? No? Okay. Wait, wait, wait. Okay. I don't know.","```python
start_state = (4, 4, 7, 7)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""7 times 4. 7, 14, 21, 28 is 28"" - participant is counting by 7s to multiply
new_state = graph.explore_operation(
    curr_state,
    operation=""7*4=28"",
    resulting_state=(4, 7, 28),
    comment='""7 times 4. 7, 14, 21, 28 is 28""',
)

# ""28 minus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""28-7=21"",
    resulting_state=(4, 21),
    comment='""28 minus 7""',
)

# ""7 plus 4. 7, 8, 9, 10, 11""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+4=11"",
    resulting_state=(4, 7, 11),
    comment='""7 plus 4. 7, 8, 9, 10, 11""',
)

# ""4 times 4 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""4*4=16"",
    resulting_state=(7, 7, 16),
    comment='""4 times 4 is 16""',
)

# ""16 plus 7""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""16+7=23"",
    resulting_state=(7, 23),
    comment='""16 plus 7""',
)

# ""7 times 7 is 49""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7*7=49"",
    resulting_state=(4, 4, 49),
    comment='""7 times 7 is 49""',
)

# ""7 plus, 7 plus 7 is 14""
curr_state = graph.move_to_node(start_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""7+7=14"",
    resulting_state=(4, 4, 14),
    comment='""7 plus, 7 plus 7 is 14""',
)

# ""14 times 4""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14*4=56"",
    resulting_state=(4, 56),
    comment='""14 times 4""',
)

# ""14 plus maybe 4 plus 4? 14 plus 8""
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""14+4+4=22"",
    resulting_state=(22,),
    comment='""14 plus maybe 4 plus 4? 14 plus 8""',
)
```"
4958,"[6,7,9,9]",(6x7)-(9+9),99, 9 times 9 is 81. 9 plus 9 is 18. 9 plus 9 is 18. 18 from 24 would be 6. 9 plus 7 is 16. that's 16 and then but oh no that's too high didn't ever need to be eight okay no okay maybe six six times or six times seven that's 42 okay let's work with that six times seven is 42 minus minus wait what okay maybe at nine and nine,"```python
start_state = (6, 7, 9, 9)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""9 times 9 is 81""
new_state = graph.explore_operation(
    curr_state,
    operation=""9*9=81"",
    resulting_state=(6, 7, 81),
    comment='""9 times 9 is 81""',
)

# ""9 plus 9 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+9=18"",
    resulting_state=(6, 7, 18),
    comment='""9 plus 9 is 18""',
)

# ""18 from 24 would be 6"" - participant seems to be working backward from 24
graph.set_subgoal(
    (18,),
    state_after_subgoal=(24,),
    comment='""18 from 24 would be 6"" - participant seems to be working backward from 24',
)

# ""9 plus 7 is 16""
new_state = graph.explore_operation(
    curr_state,
    operation=""9+7=16"",
    resulting_state=(6, 9, 16),
    comment='""9 plus 7 is 16""',
)

# ""six times seven that's 42""
new_state = graph.explore_operation(
    curr_state,
    operation=""6*7=42"",
    resulting_state=(9, 9, 42),
    comment='""six times seven that\'s 42""',
)

# ""okay let's work with that six times seven is 42 minus minus wait what okay maybe at nine and nine""
# Based on their final answer, they subtracted 9+9=18 from 42 to get 24
curr_state = graph.move_to_node(new_state)
new_state = graph.explore_operation(
    curr_state,
    operation=""42-(9+9)=24"",
    resulting_state=(24,),
    comment='""okay let\'s work with that six times seven is 42 minus minus wait what okay maybe at nine and nine"" - participant subtracts 9+9 from 42',
)
```"
4960,"[6,8,8,10]",(8x10)-,180," Oh, they gave me another one. Okay. 10 plus 8 is 18. 18, 19, 20, 21, 22, 23, 24, so we need 6 more. 6 more. 6, 12, 18, 24. So that would need to equal 4. 8 plus 6 is 2. No. Ooh, it's hard. It's hard. hard 8 times 6 36 8 8 16 24 32 40 48 right 48 minus 24 24 24 I don't know this one 24 24 24 minus minus 8 maybe I don't know 8 8 that's hard 8 times 6 I don't know that's too much that's 80 right 80 minus 24 is um um um 56 so that'll have to equal equal 56 equal 56","```python
start_state = (6, 8, 8, 10)
curr_state = start_state
graph = GraphBuilder(curr_state)

# ""10 plus 8 is 18""
new_state = graph.explore_operation(
    curr_state,
    operation=""10+8=18"",
    resulting_state=(6, 8, 18),
    comment='""10 plus 8 is 18""',
)

# The participant then counts up from 18 to 24, realizing they need 6 more

# ""6, 12, 18, 24"" participant seems to be counting by 6s
# ""So that would need to equal 4"" - not clear what this means

# ""8 plus 6 is 2"" - this seems like a calculation error
new_state = graph.explore_operation(
    curr_state,
    operation=""8+6=2"",
    resulting_state=(8, 10, 2),
    comment='""8 plus 6 is 2"" - calculation error',
    result_calc_error=True,
)

# ""8 times 6 36""
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=36"",
    resulting_state=(8, 10, 36),
    comment='""8 times 6 36""',
    result_calc_error=True,
)

# ""8 8 16 24 32 40 48"" participant counting by 8s
# ""48 minus 24 24""
# This appears to be setting a subgoal
graph.set_subgoal(
    subgoal_state=(24,),
    comment='""48 minus 24 24"" participant appears to be setting a subgoal'
)

# ""8 times 6"" participant tries this calculation again
new_state = graph.explore_operation(
    curr_state,
    operation=""8*6=48"",
    resulting_state=(8, 10, 48),
    comment='""8 times 6"" participant tries this calculation again',
)

# ""that's 80 right 80 minus 24 is um um um 56"" 
# The 80 likely comes from 8*10
new_state = graph.explore_operation(
    curr_state,
    operation=""8*10=80"",
    resulting_state=(6, 8, 80),
    comment='""that\'s 80""',
)

```"
